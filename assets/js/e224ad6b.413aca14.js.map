{"version":3,"file":"assets/js/e224ad6b.413aca14.js","mappings":"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","sources":["webpack://dockview-docs/../../node_modules/@docusaurus/core/lib/client/exports/BrowserOnly.js","webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/greadyRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/popoutWindow.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPopoutGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./sandboxes/editor-gridview/src/app.tsx","webpack://dockview-docs/./sandboxes/simple-gridview/src/app.tsx","webpack://dockview-docs/./src/components/gridview/events.tsx","webpack://dockview-docs/./src/components/ui/console/console.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./src/components/ui/reference/docRef.tsx","webpack://dockview-docs/./docs/components/gridview.mdx"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { isValidElement } from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n// Similar comp to the one described here:\n// https://www.joshwcomeau.com/react/the-perils-of-rehydration/#abstractions\nexport default function BrowserOnly({ children, fallback, }) {\n    const isBrowser = useIsBrowser();\n    if (isBrowser) {\n        if (typeof children !== 'function' &&\n            process.env.NODE_ENV === 'development') {\n            throw new Error(`Docusaurus error: The children of <BrowserOnly> must be a \"render function\", e.g. <BrowserOnly>{() => <span>{window.location.href}</span>}</BrowserOnly>.\nCurrent type: ${isValidElement(children) ? 'React element' : typeof children}`);\n        }\n        return <>{children?.()}</>;\n    }\n    return fallback ?? null;\n}\n","class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function addStyles(document: Document, styleSheetList: StyleSheetList) {\n    const styleSheets = Array.from(styleSheetList);\n\n    for (const styleSheet of styleSheets) {\n        if (styleSheet.href) {\n            const link = document.createElement('link');\n            link.href = styleSheet.href;\n            link.type = styleSheet.type;\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n        }\n\n        let cssTexts: string[] = [];\n\n        try {\n            if (styleSheet.cssRules) {\n                cssTexts = Array.from(styleSheet.cssRules).map(\n                    (rule) => rule.cssText\n                );\n            }\n        } catch (err) {\n            // security errors (lack of permissions), ignore\n        }\n\n        for (const rule of cssTexts) {\n            const style = document.createElement('style');\n            style.appendChild(document.createTextNode(rule));\n            document.head.appendChild(style);\n        }\n    }\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private _contentSize = 0;\n    private _proportions: (number | undefined)[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get contentSize(): number {\n        return this._contentSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): (number | undefined)[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            let total = 0;\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                } else {\n                    size -= item.size;\n                }\n            }\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(\n                        Math.round((proportion * size) / total),\n                        item.minimumSize,\n                        item.maximumSize\n                    );\n                }\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this._proportions = this.viewItems.map((i) =>\n                i.visible ? i.size / this._contentSize : undefined\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this._contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidVisibilityChange = new Emitter<boolean>();\n    readonly onDidVisibilityChange: Event<boolean> =\n        this._onDidVisibilityChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(\n                  ...this.children.map((c, index) =>\n                      this.splitview.isViewVisible(index)\n                          ? c.minimumOrthogonalSize\n                          : 0\n                  )\n              );\n    }\n\n    get maximumSize(): number {\n        return Math.min(\n            ...this.children.map((c, index) =>\n                this.splitview.isViewVisible(index)\n                    ? c.maximumOrthogonalSize\n                    : Number.POSITIVE_INFINITY\n            )\n        );\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this._onDidVisibilityChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n     setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        const wereAllChildrenHidden = this.splitview.contentSize === 0;\n        this.splitview.setViewVisible(index, visible);\n        const areAllChildrenHidden = this.splitview.contentSize === 0;\n\n        // If all children are hidden then the parent should hide the entire splitview\n        // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n        if (\n            (visible && wereAllChildrenHidden) ||\n            (!visible && areAllChildrenHidden)\n        ) {\n            this._onDidVisibilityChange.fire(visible);\n        }\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = new CompositeDisposable(\n            Event.any(...this.children.map((c) => c.onDidChange))((e) => {\n                /**\n                 * indicate a change has occured to allows any re-rendering but don't bubble\n                 * event because that was specific to this branch\n                 */\n                this._onDidChange.fire({ size: e.orthogonalSize });\n            }),\n            ...this.children.map((c, i) => {\n                if (c instanceof BranchNode) {\n                    return c.onDidVisibilityChange((visible) => {\n                        this.setChildVisible(i, visible);\n                    });\n                }\n                return Disposable.NONE;\n            })\n        );\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    readonly element: HTMLElement;\n\n    private _root: BranchNode | undefined;\n    private _maximizedNode: Node | undefined = undefined;\n    private readonly disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidMaxmizedNodeChange = new Emitter<void>();\n    readonly onDidMaxmizedNodeChange = this._onDidMaxmizedNodeChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    hasMaximizedView(): boolean {\n        return this._maximizedNode !== undefined;\n    }\n\n    maximizeView(view: IGridView): void {\n        const location = getGridLocation(view.element);\n        const [_, node] = this.getNode(location);\n\n        if (this._maximizedNode === node) {\n            return;\n        }\n\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        function hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n            for (let i = 0; i < parent.children.length; i++) {\n                const child = parent.children[i];\n                if (child instanceof LeafNode) {\n                    if (child !== exclude) {\n                        parent.setChildVisible(i, false);\n                    }\n                } else {\n                    hideAllViewsBut(child, exclude);\n                }\n            }\n        }\n\n        hideAllViewsBut(this.root, node as LeafNode);\n        this._maximizedNode = node;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    exitMaximizedView(): void {\n        if (!this._maximizedNode) {\n            return;\n        }\n\n        function showViewsInReverseOrder(parent: BranchNode): void {\n            for (let index = parent.children.length - 1; index >= 0; index--) {\n                const child = parent.children[index];\n                if (child instanceof LeafNode) {\n                    parent.setChildVisible(index, true);\n                } else {\n                    showViewsInReverseOrder(child);\n                }\n            }\n        }\n\n        showViewsInReverseOrder(this.root);\n\n        this._maximizedNode = undefined;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this._onDidMaxmizedNodeChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\nimport { Box } from '../types';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    maximizeGroup(panel: IDockviewPanel): void {\n        this.component.maximizeGroup(panel.group);\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.component.hasMaximizedGroup();\n    }\n\n    exitMaxmizedGroup(): void {\n        this.component.exitMaximizedGroup();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.component.onDidMaxmizedGroupChange;\n    }\n\n    /**\n     * Add a popout group in a new Window\n     */\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        this.component.addPopoutGroup(item, options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this.setState(quadrant);\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    renderer?: DockviewPanelRenderer;\n    params?: { [key: string]: any };\n}\n","import {\n    CompositeDisposable,\n    Disposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DragAndDropObserver } from '../../../dnd/dnd';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { DockviewDropTargets } from '../../types';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        // for hosted containers\n        // 1) register a drop target on the host\n        // 2) register window dragStart events to disable pointer events\n        // 3) register dragEnd events\n        // 4) register mouseMove events (if no buttons are present we take this as a dragEnd event)\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (\n                    !data &&\n                    event.shiftKey &&\n                    this.group.location !== 'floating'\n                ) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(panel: IDockviewPanel): void {\n        const isActive = panel === this.group.activePanel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.greadyRenderContainer.remove(panel);\n                if (isActive) {\n                    if (this.panel) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container =\n                    this.accessor.greadyRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n        }\n\n        if (isActive) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        const renderer = panel.api.renderer;\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (renderer) {\n            case 'always':\n                container =\n                    this.accessor.greadyRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n            case 'onlyWhenVisibile':\n                this._element.appendChild(this.panel.view.content.element);\n                container = this._element;\n                break;\n        }\n\n        const _onDidFocus = this.panel.view.content.onDidFocus;\n        const _onDidBlur = this.panel.view.content.onDidBlur;\n\n        const disposable = new CompositeDisposable();\n        const focusTracker = trackFocus(container);\n\n        disposable.addDisposables(\n            focusTracker,\n            focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n            focusTracker.onDidBlur(() => this._onDidBlur.fire())\n        );\n\n        if (_onDidFocus) {\n            disposable.addDisposables(\n                _onDidFocus(() => this._onDidFocus.fire())\n            );\n        }\n        if (_onDidBlur) {\n            disposable.addDisposables(_onDidBlur(() => this._onDidBlur.fire()));\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.accessor.options.defaultRenderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.location === 'floating' && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        this.group.api.location !== 'floating'\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.location === 'floating' && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Droptarget, Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport type DockviewGroupLocation = 'grid' | 'floating' | 'popout';\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    // private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private _location: DockviewGroupLocation = 'grid';\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get location(): DockviewGroupLocation {\n        return this._location;\n    }\n\n    set location(value: DockviewGroupLocation) {\n        this._location = value;\n\n        toggleClass(this.container, 'dv-groupview-floating', false);\n        toggleClass(this.container, 'dv-groupview-popout', false);\n\n        switch (value) {\n            case 'grid':\n                this.contentContainer.dropTarget.setTargetZones([\n                    'top',\n                    'bottom',\n                    'left',\n                    'right',\n                    'center',\n                ]);\n                break;\n            case 'floating':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n        this.contentContainer.dropTarget.setTargetZones(\n            value ? ['center'] : ['top', 'bottom', 'left', 'right', 'center']\n        );\n\n                toggleClass(this.container, 'dv-groupview-floating', true);\n\n                break;\n            case 'popout':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n\n                toggleClass(this.container, 'dv-groupview-popout', true);\n\n                break;\n        }\n\n        this.groupPanel.api._onDidRenderPositionChange.fire({\n            location: this.location,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel);\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        // this.dropTarget.dispose();\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement?: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!document.body.contains(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n    maximizeGroup(panel: T): void;\n    exitMaximizedGroup(): void;\n    hasMaximizedGroup(): boolean;\n    readonly onDidMaxmizedGroupChange: Event<void>;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    maximizeGroup(panel: T): void {\n        this.gridview.maximizeView(panel);\n    }\n\n    exitMaximizedGroup(): void {\n        this.gridview.exitMaximizedView();\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.gridview.hasMaximizedView();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.gridview.onDidMaxmizedNodeChange;\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidRenderPositionChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly location: DockviewGroupLocation;\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly location: DockviewGroupLocation;\n}\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidRenderPositionChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidRenderPositionChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidRenderPositionChange.event;\n\n    get location(): DockviewGroupLocation {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n        return this._group.model.location;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidRenderPositionChange);\n    }\n\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            undefined,\n            options.position ?? 'center'\n        );\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 0,\n                minimumWidth: 0,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { DockviewPanel, IDockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../dockview/components/greadyRenderContainer';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\n/*\n * omit visibility modifiers since the visibility of a single group doesn't make sense\n * because it belongs to a groupview\n */\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n    maximize(): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return !!this.group?.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n\n    maximize(): void {\n        this.accessor.maximizeGroup(this.panel.group);\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { Box } from '../types';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: Box & {\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(bounds: Partial<Box> = {}): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): Box {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import { DragAndDropObserver } from '../../dnd/dnd';\nimport { Droptarget } from '../../dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from '../../dom';\nimport { CompositeDisposable, Disposable, IDisposable } from '../../lifecycle';\nimport { IDockviewPanel } from '../dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class GreadyRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        { disposable: IDisposable; element: HTMLElement }\n    > = {};\n\n    get allIds(): string[] {\n        return Object.keys(this.map);\n    }\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables({\n            dispose: () => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                }\n            },\n        });\n    }\n\n    remove(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            this.map[panel.api.id].disposable.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    setReferenceContentContainer(\n        panel: IDockviewPanel,\n        referenceContainer: IRenderable\n    ): HTMLElement {\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                disposable: Disposable.NONE,\n                element,\n            };\n        }\n\n        this.map[panel.api.id]?.disposable.dispose();\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.location === 'floating'\n            );\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n            panel.api.onDidVisibilityChange((event) => {\n                focusContainer.style.display = event.isVisible ? '' : 'none';\n            }),\n            panel.api.onDidDimensionsChange((event) => {\n                resize();\n            }),\n            {\n                dispose: () => {\n                    focusContainer.removeChild(panel.view.content.element);\n                    this.element.removeChild(focusContainer);\n                },\n            }\n        );\n\n        queueMicrotask(() => {\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            resize();\n        });\n\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import { addStyles } from './dom';\nimport { Emitter, addDisposableWindowListener } from './events';\nimport { CompositeDisposable, IDisposable } from './lifecycle';\nimport { Box } from './types';\n\nexport type PopoutWindowOptions = {\n    url: string;\n} & Box;\n\nexport class PopoutWindow extends CompositeDisposable {\n    private readonly _onDidClose = new Emitter<void>();\n    readonly onDidClose = this._onDidClose.event;\n\n    private _window: { value: Window; disposable: IDisposable } | null = null;\n\n    constructor(\n        private readonly id: string,\n        private readonly className: string,\n        private readonly options: PopoutWindowOptions\n    ) {\n        super();\n\n        this.addDisposables(this._onDidClose, {\n            dispose: () => {\n                this.close();\n            },\n        });\n    }\n\n    dimensions(): Box | null {\n        if (!this._window) {\n            return null;\n        }\n\n        const left = this._window.value.screenX;\n        const top = this._window.value.screenY;\n        const width = this._window.value.innerWidth;\n        const height = this._window.value.innerHeight;\n\n        return { top, left, width, height };\n    }\n\n    close(): void {\n        if (this._window) {\n            this._window.disposable.dispose();\n            this._window.value.close();\n            this._window = null;\n        }\n    }\n\n    open(content: HTMLElement): void {\n        if (this._window) {\n            throw new Error('instance of popout window is already open');\n        }\n\n        const url = `${this.options.url}`;\n\n        const features = Object.entries({\n            top: this.options.top,\n            left: this.options.left,\n            width: this.options.width,\n            height: this.options.height,\n        })\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n        const externalWindow = window.open(url, this.id, features);\n\n        if (!externalWindow) {\n            return;\n        }\n\n        const disposable = new CompositeDisposable();\n\n        this._window = { value: externalWindow, disposable };\n\n        const grievingParent = content.parentElement;\n\n        const cleanUp = () => {\n            grievingParent?.appendChild(content);\n            this._onDidClose.fire();\n            this._window = null;\n        };\n\n        // prevent any default content from loading\n        // externalWindow.document.body.replaceWith(document.createElement('div'));\n\n        disposable.addDisposables(\n            addDisposableWindowListener(window, 'beforeunload', () => {\n                cleanUp();\n                this.close();\n            })\n        );\n\n        externalWindow.addEventListener('load', () => {\n            const externalDocument = externalWindow.document;\n            externalDocument.title = document.title;\n\n            const div = document.createElement('div');\n            div.classList.add('dv-popout-window');\n            div.style.position = 'absolute';\n            div.style.width = '100%';\n            div.style.height = '100%';\n            div.style.top = '0px';\n            div.style.left = '0px';\n            div.classList.add(this.className);\n            div.appendChild(content);\n\n            externalDocument.body.replaceChildren(div);\n            externalDocument.body.classList.add(this.className);\n\n            addStyles(externalDocument, window.document.styleSheets);\n\n            externalWindow.addEventListener('beforeunload', () => {\n                // TODO: indicate external window is closing\n                cleanUp();\n            });\n        });\n    }\n}\n","import { CompositeDisposable } from '../lifecycle';\nimport { PopoutWindow } from '../popoutWindow';\nimport { Box } from '../types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\n\nexport class DockviewPopoutGroupPanel extends CompositeDisposable {\n    readonly window: PopoutWindow;\n\n    constructor(\n        readonly group: DockviewGroupPanel,\n        private readonly options: {\n            className: string;\n            popoutUrl: string;\n            box: Box;\n        }\n    ) {\n        super();\n\n        this.window = new PopoutWindow('test', options.className ?? '', {\n            url: this.options.popoutUrl,\n            left: this.options.box.left,\n            top: this.options.box.top,\n            width: this.options.box.width,\n            height: this.options.box.height,\n        });\n\n        group.model.location = 'popout';\n\n        this.addDisposables(\n            this.window,\n            {\n                dispose: () => {\n                    group.model.location = 'grid';\n                },\n            },\n            this.window.onDidClose(() => {\n                this.dispose();\n            })\n        );\n\n        this.window.open(group.element);\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { PopoutWindow } from '../popoutWindow';\nimport { Box } from '../types';\nimport {\n    GreadyRenderContainer,\n    DockviewPanelRenderer,\n} from './components/greadyRenderContainer';\nimport { DockviewPopoutGroupPanel } from './dockviewPopoutGroupPanel';\n\nfunction getTheme(element: HTMLElement): string | undefined {\n    function toClassList(element: HTMLElement) {\n        const list: string[] = [];\n\n        for (let i = 0; i < element.classList.length; i++) {\n            list.push(element.classList.item(i)!);\n        }\n\n        return list;\n    }\n\n    let theme: string | undefined = undefined;\n    let parent: HTMLElement | null = element;\n\n    while (parent !== null) {\n        theme = toClassList(parent).find((cls) =>\n            cls.startsWith('dockview-theme-')\n        );\n        if (typeof theme === 'string') {\n            break;\n        }\n        parent = parent.parentElement;\n    }\n\n    return theme;\n}\n\nconst DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: Box;\n}\n\nexport interface SerializedPopoutGroup {\n    data: GroupPanelViewState;\n    position: Box | null;\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n    popoutGroups?: SerializedPopoutGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly greadyRenderContainer: GreadyRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _floatingGroups: DockviewFloatingGroupPanel[] = [];\n    private readonly _popoutGroups: DockviewPopoutGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-gready-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.greadyRenderContainer = new GreadyRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.greadyRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addPopoutGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        options?: {\n            skipRemoveGroup?: boolean;\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        let group: DockviewGroupPanel;\n        let box: Box | undefined = options?.position;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n\n            if (!box) {\n                box = this.element.getBoundingClientRect();\n            }\n        } else {\n            group = item;\n\n            if (!box) {\n                box = group.element.getBoundingClientRect();\n            }\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        const theme = getTheme(this.gridview.element);\n\n        const popoutWindow = new DockviewPopoutGroupPanel(group, {\n            className: theme ?? '',\n            popoutUrl: options?.popoutUrl ?? '/popout.html',\n            box: {\n                left: box.left,\n                top: box.top,\n                width: box.width,\n                height: box.height,\n            },\n        });\n\n        popoutWindow.addDisposables(\n            {\n                dispose: () => {\n                    remove(this._popoutGroups, popoutWindow);\n                },\n            },\n            popoutWindow.window.onDidClose(() => {\n                this.doAddGroup(group, [0]);\n            })\n        );\n\n        this._popoutGroups.push(popoutWindow);\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.location = 'floating';\n\n        const overlayLeft =\n            typeof coord?.x === 'number' ? Math.max(coord.x, 0) : 100;\n        const overlayTop =\n            typeof coord?.y === 'number' ? Math.max(coord.y, 0) : 100;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.location = 'grid';\n                    remove(this._floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this._floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const hasFloatingGroupOptionsChanged =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (hasFloatingGroupOptionsChanged) {\n            for (const group of this._floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this._floatingGroups) {\n            for (const floating of this._floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this._floatingGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.overlay.toJSON(),\n                };\n            }\n        );\n\n        const popoutGroups: SerializedPopoutGroup[] = this._popoutGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.window.dimensions(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        if (popoutGroups.length > 0) {\n            result.popoutGroups = popoutGroups;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            const serializedPopoutGroups = data.popoutGroups ?? [];\n\n            for (const serializedPopoutGroup of serializedPopoutGroups) {\n                const { data, position } = serializedPopoutGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addPopoutGroup(group, {\n                    skipRemoveGroup: true,\n                    position: position ?? undefined,\n                });\n            }\n\n            for (const floatingGroup of this._floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this._floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (\n                referenceGroup.api.location === 'floating' ||\n                target === 'center'\n            ) {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.greadyRenderContainer.remove(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => x.api.location === 'grid').length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        if (group.api.location === 'floating') {\n            const floatingGroup = this._floatingGroups.find(\n                (_) => _.group === group\n            );\n\n            if (floatingGroup) {\n                if (!options?.skipDispose) {\n                    floatingGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                remove(this._floatingGroups, floatingGroup);\n                floatingGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return floatingGroup.group;\n            }\n\n            throw new Error('failed to find floating group');\n        }\n\n        if (group.api.location === 'popout') {\n            const selectedGroup = this._popoutGroups.find(\n                (_) => _.group === group\n            );\n\n            if (selectedGroup) {\n                if (!options?.skipDispose) {\n                    selectedGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                selectedGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return selectedGroup.group;\n            }\n\n            throw new Error('failed to find popout group');\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                if (sourceGroup.api.location === 'grid') {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                switch (sourceGroup.api.location) {\n                    case 'grid':\n                        this.gridview.removeView(\n                            getGridLocation(sourceGroup.element)\n                        );\n                        break;\n                    case 'floating':\n                        const selectedFloatingGroup = this._floatingGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedFloatingGroup) {\n                            throw new Error('failed to find floating group');\n                        }\n                        selectedFloatingGroup.dispose();\n                        break;\n                    case 'popout':\n                        const selectedPopoutGroup = this._popoutGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedPopoutGroup) {\n                            throw new Error('failed to find popout group');\n                        }\n                        selectedPopoutGroup.dispose();\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    popoutUrl?: string;\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    GridviewApi,\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    LayoutPriority,\n    Orientation,\n    SerializedGridviewComponent,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n    header: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#3C3C3C', height: '100%' }}></div>\n        );\n    },\n    footer: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#007ACC', height: '100%' }}></div>\n        );\n    },\n    sidebar: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#333333', height: '100%' }}></div>\n        );\n    },\n    'left-expander': (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#252526', height: '100%' }}></div>\n        );\n    },\n    'right-expander': (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#252526', height: '100%' }}></div>\n        );\n    },\n    main: (props: IGridviewPanelProps) => {\n        return (\n            <div\n                style={{\n                    backgroundColor: '#1E1E1E',\n                    height: '100%',\n                    color: 'white',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                    fontSize: '0.8em',\n                    padding: '10px',\n                }}\n            >\n                <div>{'This entire mockup is built using a gridview.'}</div>\n\n                <div>{`Press 'Ctrl+B' to toggle the left sidebar and 'Ctrl+Alt+B' to toggle the right sidebar or manually resize them.`}</div>\n            </div>\n        );\n    },\n};\n\nconst serializedGridview: SerializedGridviewComponent = {\n    grid: {\n        root: {\n            type: 'branch',\n            data: [\n                {\n                    type: 'leaf',\n                    data: {\n                        id: 'header-id',\n                        component: 'header',\n                        minimumHeight: 30,\n                        maximumHeight: 30,\n                    },\n                },\n                {\n                    type: 'branch',\n                    data: [\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'sidebar-id',\n                                component: 'sidebar',\n                                minimumWidth: 30,\n                                maximumWidth: 30,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'left-expander-id',\n                                component: 'left-expander',\n                                minimumWidth: 100,\n                                snap: true,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            size: 100,\n                            data: {\n                                id: 'main-id',\n                                component: 'main',\n                                minimumWidth: 100,\n                                minimumHeight: 100,\n                                /**\n                                 * it's important to give the main content a high layout priority as we want\n                                 * the main layout to have priority when allocating new space\n                                 */\n                                priority: LayoutPriority.High,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'right-expander-id',\n                                component: 'right-expander',\n                                snap: true,\n                                minimumWidth: 100,\n                            },\n                        },\n                    ],\n                },\n                {\n                    type: 'leaf',\n                    data: {\n                        id: 'footer-id',\n                        component: 'footer',\n                        minimumHeight: 30,\n                        maximumHeight: 30,\n                    },\n                },\n            ],\n        },\n        width: 1000,\n        height: 1000,\n        orientation: Orientation.VERTICAL,\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<GridviewApi>();\n\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.fromJSON(serializedGridview);\n\n        setApi(event.api);\n    };\n\n    const onKeyDown = (event: React.KeyboardEvent) => {\n        if (!api) {\n            return;\n        }\n\n        console.log(event);\n\n        const leftExpander = api.getPanel('left-expander-id');\n        const rightExpander = api.getPanel('right-expander-id');\n\n        if (!leftExpander || !rightExpander) {\n            return;\n        }\n\n        switch (event.key) {\n            case 'b':\n                if (event.ctrlKey) {\n                    if (event.altKey) {\n                        // toggle right\n                        rightExpander.api.setVisible(\n                            !rightExpander.api.isVisible\n                        );\n                        if (rightExpander.api.width === 0) {\n                            rightExpander.api.setSize({ width: 150 });\n                        }\n                    } else {\n                        // toggle left\n                        leftExpander.api.setVisible(\n                            !leftExpander.api.isVisible\n                        );\n                        if (leftExpander.api.width === 0) {\n                            leftExpander.api.setSize({ width: 150 });\n                        }\n                    }\n                }\n        }\n    };\n\n    return (\n        <div\n            tabIndex={-1}\n            className=\"simple-gridview-example\"\n            onKeyDown={onKeyDown}\n            style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n            <div style={{ flexGrow: 1 }}>\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    hideBorders={true}\n                    orientation={Orientation.VERTICAL}\n                    className={props.theme || 'dockview-theme-abyss'}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import {\n    GridviewApi,\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    LayoutPriority,\n    Orientation,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<GridviewApi>();\n\n    const onReady = (event: GridviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            priority: LayoutPriority.High,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n\n            position: { referencePanel: 'panel_2', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        setApi(event.api);\n    };\n\n    return (\n        <div\n            style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n            <div>\n                <button\n                    onClick={() => {\n                        if (!api) {\n                            return;\n                        }\n\n                        const panel = api.getPanel('panel_3');\n\n                        if (!panel) {\n                            return;\n                        }\n\n                        // panel.api.setVisible(!panel.api.isVisible);\n\n                        if (panel.height === 0) {\n                            panel.api.setSize({ height: 200 });\n                        } else {\n                            panel.api.setSize({ height: 0 });\n                        }\n                    }}\n                >\n                    Resize\n                </button>\n            </div>\n            <div style={{ flexGrow: 1 }}>\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    // proportionalLayout={false}\n                    orientation={Orientation.VERTICAL}\n                    className={props.theme || 'dockview-theme-abyss'}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import {\n    IGridviewPanelProps,\n    Orientation,\n    GridviewReact,\n    GridviewReadyEvent,\n    GridviewApi,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from '../ui/console/console';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const EventsGridview = () => {\n    const [lines, setLines] = React.useState<Line[]>([]);\n    const [checked, setChecked] = React.useState<boolean>(false);\n\n    const [api, setApi] = React.useState<GridviewApi | undefined>();\n\n    React.useEffect(() => {\n        if (!api) {\n            return () => {\n                //noop\n            };\n        }\n\n        const disposables = [\n            api.onDidAddPanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddPanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemovePanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemovePanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActivePanelChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActivePanelChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidLayoutChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutChange` },\n                ]);\n            }),\n            api.onDidLayoutFromJSON((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutFromJSON` },\n                ]);\n            }),\n        ];\n\n        return () => {\n            disposables.forEach((disposable) => disposable.dispose());\n        };\n    }, [api]);\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        setLines((lines) => [\n            ...lines,\n            {\n                timestamp: new Date(),\n                text: `Rebuilding view fromJSON:${checked}`,\n                css: { color: 'yellow', backgroundColor: 'grey' },\n            },\n        ]);\n\n        if (checked) {\n            api.fromJSON({\n                grid: {\n                    root: {\n                        type: 'branch',\n                        data: [\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_3',\n                                            component: 'default',\n                                            params: { title: 'Panel 3' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                    {\n                                        type: 'branch',\n                                        data: [\n                                            {\n                                                type: 'leaf',\n                                                data: {\n                                                    id: 'panel_5',\n                                                    component: 'default',\n                                                    params: {\n                                                        title: 'Panel 5',\n                                                    },\n                                                    snap: false,\n                                                },\n                                                size: 50,\n                                            },\n                                            {\n                                                type: 'branch',\n                                                data: [\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_6',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 6',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 131,\n                                                    },\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_8',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 8',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 131,\n                                                    },\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_7',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 7',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 132,\n                                                    },\n                                                ],\n                                                size: 50,\n                                            },\n                                        ],\n                                        size: 394,\n                                    },\n                                ],\n                                size: 100,\n                            },\n                            {\n                                type: 'leaf',\n                                data: {\n                                    id: 'panel_2',\n                                    component: 'default',\n                                    params: { title: 'Panel 2' },\n                                    snap: false,\n                                },\n                                size: 100,\n                            },\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_1',\n                                            component: 'default',\n                                            params: { title: 'Panel 1' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_4',\n                                            component: 'default',\n                                            params: { title: 'Panel 4' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                ],\n                                size: 100,\n                            },\n                        ],\n                        size: 788,\n                    },\n                    width: 788,\n                    height: 300,\n                    orientation: Orientation.VERTICAL,\n                },\n                activePanel: 'panel_8',\n            });\n            return;\n        }\n\n        api.clear();\n        api.orientation = Orientation.VERTICAL;\n\n        api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n    }, [api, checked]);\n\n    const onReady = (event: GridviewReadyEvent) => {\n        setApi(event.api);\n    };\n\n    return (\n        <>\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    onChange={(e) => setChecked(e.target.checked)}\n                />\n                <span>{'fromJSON'}</span>\n            </label>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    proportionalLayout={false}\n                    orientation={Orientation.VERTICAL}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n\n            <Console lines={lines} />\n        </>\n    );\n};\n","import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: {\n    id: string;\n    hideThemePicker?: boolean;\n}) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            {!props.hideThemePicker && <ThemePicker />}\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton\n                    id={sandboxId}\n                    hideThemePicker={props.hideThemePicker}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","import * as React from 'react';\nimport CodeBlock from '@theme/CodeBlock';\nimport './docRef.scss';\n\nexport interface DocRefProps {\n    declaration: string;\n}\n\nimport docsJson from '../../../generated/api.output.json';\n\ntype DocsContent = { kind: string; text: string; tag?: string };\ntype DocsTag = { tag: string; content: DocsContent[] };\ntype DocsComment = {\n    summary?: DocsContent[];\n    blockTags?: DocsTag[];\n};\ntype DocsJson = {\n    [index: string]: Array<{\n        name: string;\n        signature: string;\n        comment?: DocsComment;\n        type: string;\n    }>;\n};\n\nexport const Text = (props: { content: DocsContent[] }) => {\n    return (\n        <div className=\"doc-text\">\n            {props.content.map((piece, i) => {\n                switch (piece.kind) {\n                    case 'text': {\n                        return <span key={i}>{piece.text}</span>;\n                    }\n                    case 'code':\n                        return (\n                            <code key={i}>\n                                {piece.text.substring(1, piece.text.length - 1)}\n                            </code>\n                        );\n                    default:\n                        throw new Error(`unhandled piece ${piece.kind}`);\n                }\n            })}\n        </div>\n    );\n};\n\nexport const Tags = (props: { tags: DocsTag[] }) => {\n    return (\n        <div>\n            {props.tags.map((tag, i) => {\n                return (\n                    <div key={i}>\n                        <div>{tag.tag}</div>\n                        <Text content={tag.content} />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport const Summary = (props: { summary: DocsComment }) => {\n    return (\n        <div>\n            <Text content={props.summary.summary ?? []} />\n            {/* <Tags tags={props.summary.blockTags ?? []} /> */}\n        </div>\n    );\n};\n\nexport const Markdown = (props: { children: string }) => {\n    return <span>{props.children}</span>;\n};\n\nexport const DocRef = (props: DocRefProps) => {\n    const docs = React.useMemo(\n        () => (docsJson as DocsJson)[props.declaration],\n        [props.declaration]\n    );\n\n    if (!docs) {\n        return null;\n    }\n\n    return (\n        <div>\n            <table className=\"doc-ref-table\">\n                <tbody>\n                    {docs.map((doc) => {\n                        return (\n                            <tr>\n                                <th\n                                    style={{\n                                        width: '30%',\n                                        display: 'flex',\n                                    }}\n                                >\n                                    <div\n                                        style={{\n                                            // width: '30%',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            alignItems: 'start',\n                                        }}\n                                    >\n                                        <h6\n                                            style={{\n                                                fontFamily: 'monospace',\n                                                fontSize: '1.2em',\n                                            }}\n                                        >\n                                            {doc.name}\n                                        </h6>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                alignItems: 'start',\n                                            }}\n                                        >\n                                            {/* <span\n                                                style={{\n                                                    fontSize: '0.75em',\n                                                    color: 'var(--ifm-color-content-secondary)',\n                                                }}\n                                            >\n                                                {'Type'}\n                                            </span>\n                                            <span\n                                                style={{\n                                                    color: 'var(--ifm-color-primary)',\n                                                }}\n                                            >\n                                                {doc.type}\n                                            </span> */}\n                                        </div>\n                                    </div>\n                                </th>\n                                <th\n                                // style={{ width: '70%' }}\n                                >\n                                    {/* <div>{'-'}</div> */}\n                                    <div>\n                                        <div>\n                                            {doc.comment && (\n                                                <Summary\n                                                    summary={doc.comment}\n                                                />\n                                            )}\n                                        </div>\n                                        <CodeBlock language=\"tsx\">\n                                            {doc.signature}\n                                        </CodeBlock>\n                                    </div>\n                                </th>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","\n\nexport const frontMatter = {\n\tdescription: 'Gridview Documentation'\n};\nexport const contentTitle = 'Gridview';\nexport const metadata = {\n  \"id\": \"components/gridview\",\n  \"title\": \"Gridview\",\n  \"description\": \"Gridview Documentation\",\n  \"source\": \"@site/docs/components/gridview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/gridview\",\n  \"permalink\": \"/docs/next/components/gridview\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/gridview.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {\n    \"description\": \"Gridview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Dockview\",\n    \"permalink\": \"/docs/next/components/dockview\"\n  },\n  \"next\": {\n    \"title\": \"Paneview\",\n    \"permalink\": \"/docs/next/components/paneview\"\n  }\n};\nexport const assets = {\n\n};\n\n// import SimpleGridview from '@site/sandboxes/simple-gridview/src/app';\n// import IDEExample from '@site/sandboxes/ide-example/src/app';\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {MultiFrameworkContainer} from '@site/src/components/ui/container';\nimport SimpleGridview from '@site/sandboxes/simple-gridview/src/app';\nimport EditorGridview from '@site/sandboxes/editor-gridview/src/app';\n// import SimpleGridview from '@site/sandboxes/simple-gridview/src/app';\nimport {EventsGridview} from '@site/src/components/gridview/events';\n// import IDEExample from '@site/sandboxes/ide-example/src/app';\nimport Link from '@docusaurus/Link';\nimport {DocRef} from '@site/src/components/ui/reference/docRef';\nexport const toc = [{\n  \"value\": \"Introduction\",\n  \"id\": \"introduction\",\n  \"level\": 2\n}, {\n  \"value\": \"GridviewReact Component\",\n  \"id\": \"gridviewreact-component\",\n  \"level\": 2\n}, {\n  \"value\": \"Gridview API\",\n  \"id\": \"gridview-api\",\n  \"level\": 2\n}, {\n  \"value\": \"Gridview Panel API\",\n  \"id\": \"gridview-panel-api\",\n  \"level\": 2\n}, {\n  \"value\": \"Resizing\",\n  \"id\": \"resizing\",\n  \"level\": 2\n}, {\n  \"value\": \"Panel Resizing\",\n  \"id\": \"panel-resizing\",\n  \"level\": 3\n}, {\n  \"value\": \"Panels\",\n  \"id\": \"panels\",\n  \"level\": 2\n}, {\n  \"value\": \"Add Panel\",\n  \"id\": \"add-panel\",\n  \"level\": 3\n}, {\n  \"value\": \"Theme\",\n  \"id\": \"theme\",\n  \"level\": 2\n}, {\n  \"value\": \"Events\",\n  \"id\": \"events\",\n  \"level\": 2\n}, {\n  \"value\": \"Complex Example\",\n  \"id\": \"complex-example\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"gridview\",\n      children: \"Gridview\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Gridview is a collection of nested splitviews and is the foundation for the \", _jsx(_components.a, {\n        href: \"./dockview\",\n        children: \"Dockview\"\n      }), \" component.\\nGridview serves a purpose when you want only the nested splitviews with no tabs and no headers.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"introduction\",\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"simple-gridview\",\n      react: SimpleGridview\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"gridviewreact-component\",\n      children: \"GridviewReact Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ReactGridview } from 'dockview';\\n\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"IGridviewReactProps\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"gridview-api\",\n      children: \"Gridview API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\\n    // props.containerApi...\\n\\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onReady = (event: GridviewReadyEvent) => {\\n    // event.api...\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"GridviewApi\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"gridview-panel-api\",\n      children: \"Gridview Panel API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\\n    // props.api...\\n\\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"GridviewPanelApi\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"resizing\",\n      children: \"Resizing\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"panel-resizing\",\n      children: \"Panel Resizing\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can set the size of a panel using \", _jsx(_components.code, {\n        children: \"props.api.setSize(...)\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// it's mandatory to provide either a height or a width, providing both is optional\\nprops.api.setSize({\\n    height: 100,\\n    width: 200,\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can update any constraints on the panel. All parameters are optional.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"props.api.setConstraints({\\n    minimumHeight: 100,\\n    maximumHeight: 1000\\n    minimumWidth: 100,\\n    maximumWidth: 1000\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can hide a panel by setting it's visibility to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \". Hidden panels retain their size\\nat the point of being hidden, if made visible again they will try to resize to the remembered size.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"props.api.setVisible(false);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"panels\",\n      children: \"Panels\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"add-panel\",\n      children: \"Add Panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the gridview API you can access the \", _jsx(_components.code, {\n        children: \"addPanel\"\n      }), \" method which returns an instance of the created panel.\\nThe minimum method signature is:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"where \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" is the unique id of the panel and \", _jsx(_components.code, {\n        children: \"component\"\n      }), \" is the implenentation which\\nwill be used to render the panel. You will have registered this using the \", _jsx(_components.code, {\n        children: \"components\"\n      }), \" prop of the \", _jsx(_components.code, {\n        children: \"GridviewReactComponent\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can pass bounding constraints to limit the size of the panel.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    minimumHeight: 100,\\n    maximumHeight: 1000,\\n    minimumWidth: 100,\\n    maximumWidth: 1000,\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass a \", _jsx(_components.code, {\n        children: \"snap\"\n      }), \" parameter which will hide the panel when an attempt is made to move it beyond a minimum width or height if one exists.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    minimumHeight: 100,\\n    snap: true,\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass a \", _jsx(_components.code, {\n        children: \"priority\"\n      }), \" parameter which will keep the panel a certain priority when being resized. This is useful when you know you want this\\npanel to always take the first available or last available space. The default is \", _jsx(_components.code, {\n        children: \"LayoutPriority.Normal\"\n      }), \" which defers space allocations to the libraries discression.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    minimumHeight: 100,\\n    priority: LayoutPriority.High,\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass properties to the panel using the \", _jsx(_components.code, {\n        children: \"params\"\n      }), \" key.\\nYou can update these properties through the panels \", _jsx(_components.code, {\n        children: \"api\"\n      }), \" object and its \", _jsx(_components.code, {\n        children: \"updateParameters\"\n      }), \" method.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    params: {\\n        myCustomKey: 'my_custom_value',\\n    },\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"panel.api.updateParameters({\\n    myCustomKey: 'my_custom_value',\\n    myOtherCustomKey: 'my_other_custom_key',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Note \", _jsx(_components.code, {\n          children: \"updateParameters\"\n        }), \" does not accept partial parameter updates, you should call it with the entire set of parameters\\nyou want the panel to receive.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally \", _jsx(_components.code, {\n        children: \"addPanel\"\n      }), \" accepts a \", _jsx(_components.code, {\n        children: \"position\"\n      }), \" object which tells dockview where to place the panel.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"This object accepts a \", _jsx(_components.code, {\n          children: \"referencePanel\"\n        }), \" which can be the associated id as a string\\nor the panel object reference.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"This object accepts a \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" property which dictates where,\\nrelative to the provided reference the new panel will be placed.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"If a \", _jsx(_components.code, {\n          children: \"referencePanel\"\n        }), \" is not passed then the \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" will be treated as absolute.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"If no \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" is provided the library will place the new panel in a pre-determined position.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'panel_1',\\n    component: 'default',\\n});\\n\\nconst panel2 = api.addPanel({\\n    id: 'panel_2',\\n    component: 'default',\\n    position: {\\n        referencePanel: panel1,\\n        direction: 'right',\\n    },\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Note \", _jsx(_components.code, {\n          children: \"updateParameters\"\n        }), \" does not accept partial parameter updates, you should call it with the entire set of parameters\\nyou want the panel to receive.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"theme\",\n      children: \"Theme\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As well as importing the \", _jsx(_components.code, {\n        children: \"dockview\"\n      }), \" stylesheet you must provide a class-based theme somewhere in your application. For example.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// Providing a theme directly through the DockviewReact component props\\n<GridviewReact className=\\\"dockview-theme-dark\\\" />\\n\\n// Providing a theme somewhere in the DOM tree\\n<div className=\\\"dockview-theme-dark\\\">\\n  <div>\\n    {/**...  */}\\n    <GridviewReact  />\\n  </div>\\n</div>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find more details on theming \", _jsx(Link, {\n        to: \"../theme\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"events\",\n      children: \"Events\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"GridviewReact\"\n      }), \" exposes a number of events that the developer can listen to and below is a simple example with a log panel showing those events that occur.\"]\n    }), \"\\n\", _jsx(EventsGridview, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"complex-example\",\n      children: \"Complex Example\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"editor-gridview\",\n      react: EditorGridview,\n      hideThemePicker: true\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n"],"names":["BrowserOnly","_ref","children","fallback","useIsBrowser","_jsx","_Fragment","TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","width","height","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","array","findIndex","t","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","from","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","contentSize","_contentSize","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","total","proportion","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","_onDidVisibilityChange","onDidVisibilityChange","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","wereAllChildrenHidden","areAllChildrenHidden","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","hasMaximizedView","_maximizedNode","maximizeView","getNode","exitMaximizedView","hideAllViewsBut","parent","exclude","_onDidMaxmizedNodeChange","showViewsInReverseOrder","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","_getViews","nodeCachedVisibleSize","path","n","l","onDidMaxmizedNodeChange","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","maximizeGroup","hasMaximizedGroup","exitMaxmizedGroup","exitMaximizedGroup","onDidMaxmizedGroupChange","addPopoutGroup","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","onDragOver","preventDefault","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","transform","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","DockviewDropTargets","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","Panel","show","display","hide","renderPanel","isActive","renderer","greadyRenderContainer","content","setReferenceContentContainer","focusTracker","openPanel","_width","_height","closePanel","defaultRenderer","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","model","setActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_location","groupPanel","_onDidRenderPositionChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","disableResizing","_disableResizing","entry","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","DockviewGroupPanelApiImpl","_group","onDidRenderPositionChange","moveTo","moveGroupOrPanel","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","maximize","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","GreadyRenderContainer","allIds","referenceContainer","createFocusableElement","focusContainer","box2","PopoutWindow","_onDidClose","onDidClose","_window","dimensions","screenX","screenY","innerWidth","innerHeight","open","url","features","entries","join","externalWindow","grievingParent","cleanUp","externalDocument","div","replaceChildren","styleSheetList","styleSheets","styleSheet","href","link","rel","head","cssTexts","cssRules","rule","cssText","err","createTextNode","addStyles","DockviewPopoutGroupPanel","popoutUrl","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","_floatingGroups","_popoutGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","theme","toClassList","list","cls","startsWith","getTheme","popoutWindow","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","minimumHeightWithinViewport","querySelector","floatingGroupPanel","createGroupAtLocation","hasOrientationChanged","hasFloatingGroupOptionsChanged","floating","includePanel","doSetGroupAndPanelActive","collection","floats","popoutGroups","grid","floatingGroups","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","serializedPopoutGroups","serializedPopoutGroup","floatingGroup","hasActiveGroup","hasActivePanel","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","selectedGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","selectedFloatingGroup","selectedPopoutGroup","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","footer","sidebar","main","_jsxs","justifyContent","flexDirection","setApi","onKeyDown","log","leftExpander","rightExpander","ctrlKey","altKey","EventsGridview","lines","setLines","checked","setChecked","timestamp","text","css","onChange","margin","Console","formatTime","pad","getHours","getMinutes","getSeconds","getMilliseconds","scrollTop","scrollHeight","line","CodeSandboxButton","hideThemePicker","ThemePicker","alignItems","fontWeight","paddingRight","Spinner","Container","injectVanillaJS","sandboxId","ReactIcon","marginRight","src","useBaseUrl","JavascriptIcon","themes","setTheme","localStorage","getItem","setItem","dispatchEvent","StorageEvent","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","background","zIndex","react","cursor","border","MultiFrameworkContainer","Text","piece","kind","substring","Summary","summary","DocRef","docs","docsJson","declaration","doc","fontFamily","name","comment","CodeBlock","language","signature","frontMatter","description","contentTitle","metadata","assets","toc","_createMdxContent","_components","a","blockquote","code","h1","h2","h3","li","pre","ul","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}