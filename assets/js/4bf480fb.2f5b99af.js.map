{"version":3,"file":"assets/js/4bf480fb.2f5b99af.js","mappings":"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","sources":["webpack://dockview-docs/../../node_modules/@docusaurus/core/lib/client/exports/BrowserOnly.js","webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./src/components/paneview/customHeader.tsx","webpack://dockview-docs/./src/components/paneview/dragAndDrop.tsx","webpack://dockview-docs/./src/components/paneview/sideBySide.tsx","webpack://dockview-docs/./src/components/ui/console/console.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./sandboxes/simple-paneview/src/app.tsx","webpack://dockview-docs/./docs/components/paneview.mdx","webpack://dockview-docs/../../node_modules/@mdx-js/react/dist/esm.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { isValidElement } from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n// Similar comp to the one described here:\n// https://www.joshwcomeau.com/react/the-perils-of-rehydration/#abstractions\nexport default function BrowserOnly({ children, fallback, }) {\n    const isBrowser = useIsBrowser();\n    if (isBrowser) {\n        if (typeof children !== 'function' &&\n            process.env.NODE_ENV === 'development') {\n            throw new Error(`Docusaurus error: The children of <BrowserOnly> must be a \"render function\", e.g. <BrowserOnly>{() => <span>{window.location.href}</span>}</BrowserOnly>.\nCurrent type: ${isValidElement(children) ? 'React element' : typeof children}`);\n        }\n        return <>{children?.()}</>;\n    }\n    return fallback ?? null;\n}\n","class TransferObject {\n    constructor() {\n        //\n    }\n}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private contentSize = 0;\n    private _proportions: number[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): number[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n\n                item.size = clamp(\n                    Math.round(this.proportions[i] * size),\n                    item.minimumSize,\n                    item.maximumSize\n                );\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this._proportions = this.viewItems.map(\n                (i) => i.size / this.contentSize\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this.contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any | undefined;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n            this._onDidChange.fire({});\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(...this.children.map((c) => c.minimumOrthogonalSize));\n    }\n\n    get maximumSize(): number {\n        return Math.min(...this.children.map((c) => c.maximumOrthogonalSize));\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n    setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = Event.any(\n            ...this.children.map((c) => c.onDidChange)\n        )((e) => {\n            /**\n             * indicate a change has occured to allows any re-rendering but don't bubble\n             * event because that was specific to this branch\n             */\n            this._onDidChange.fire({ size: e.orthogonalSize });\n        });\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    private _root: BranchNode | undefined;\n    public readonly element: HTMLElement;\n    private disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get length(): number {\n        return this.component.length;\n    }\n\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    get id(): string {\n        return this.component.id;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    get size(): number {\n        return this.component.size;\n    }\n\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.target = e.target;\n                    this.callbacks.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n                    if (this.callbacks.onDragOver) {\n                        this.callbacks.onDragOver(e);\n                    }\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                if (this.target === e.target) {\n                    this.target = null;\n\n                    this.callbacks.onDragLeave(e);\n                }\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.target = null;\n                this.callbacks.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.callbacks.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.addDisposables(\n            this._onDrop,\n            new DragAndDropObserver(this.element, {\n                onDragEnter: () => undefined,\n                onDragOver: (e) => {\n                    if (this._acceptedTargetZonesSet.size === 0) {\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    const width = this.element.clientWidth;\n                    const height = this.element.clientHeight;\n\n                    if (width === 0 || height === 0) {\n                        return; // avoid div!0\n                    }\n\n                    const rect = (\n                        e.currentTarget as HTMLElement\n                    ).getBoundingClientRect();\n                    const x = e.clientX - rect.left;\n                    const y = e.clientY - rect.top;\n\n                    const quadrant = this.calculateQuadrant(\n                        this._acceptedTargetZonesSet,\n                        x,\n                        y,\n                        width,\n                        height\n                    );\n\n                    /**\n                     * If the event has already been used by another DropTarget instance\n                     * then don't show a second drop target, only one target should be\n                     * active at any one time\n                     */\n                    if (this.isAlreadyUsed(e) || quadrant === null) {\n                        // no drop target should be displayed\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    if (typeof this.options.canDisplayOverlay === 'boolean') {\n                        if (!this.options.canDisplayOverlay) {\n                            this.removeDropTarget();\n                            return;\n                        }\n                    } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    this.markAsUsed(e);\n\n                    if (!this.targetElement) {\n                        this.targetElement = document.createElement('div');\n                        this.targetElement.className = 'drop-target-dropzone';\n                        this.overlayElement = document.createElement('div');\n                        this.overlayElement.className = 'drop-target-selection';\n                        this._state = 'center';\n                        this.targetElement.appendChild(this.overlayElement);\n\n                        this.element.classList.add('drop-target');\n                        this.element.append(this.targetElement);\n                    }\n\n                    this.toggleClasses(quadrant, width, height);\n\n                    this.setState(quadrant);\n                },\n                onDragLeave: () => {\n                    this.removeDropTarget();\n                },\n                onDragEnd: () => {\n                    this.removeDropTarget();\n                },\n                onDrop: (e) => {\n                    e.preventDefault();\n\n                    const state = this._state;\n\n                    this.removeDropTarget();\n\n                    if (state) {\n                        // only stop the propagation of the event if we are dealing with it\n                        // which is only when the target has state\n                        e.stopPropagation();\n                        this._onDrop.fire({ position: state, nativeEvent: e });\n                    }\n                },\n            })\n        );\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nexport interface IContentContainer extends IDisposable {\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        // for hosted containers\n        // 1) register a drop target on the host\n        // 2) register window dragStart events to disable pointer events\n        // 3) register dragEnd events\n        // 4) register mouseMove events (if no buttons are present we take this as a dragEnd event)\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n        if (this.panel) {\n            if (this.panel.view?.content) {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n        this.panel = panel;\n\n        const disposable = new CompositeDisposable();\n\n        if (this.panel.view) {\n            const _onDidFocus = this.panel.view.content.onDidFocus;\n            const _onDidBlur = this.panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(this._element);\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this._element.appendChild(this.panel.view.content.element);\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel?.view?.content?.element) {\n            this._element.removeChild(this.panel.view.content.element);\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    params?: { [key: string]: any };\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.isFloating && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        !this.group.api.isFloating\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.isFloating && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Droptarget, Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _isFloating = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get isFloating(): boolean {\n        return this._isFloating;\n    }\n\n    set isFloating(value: boolean) {\n        this._isFloating = value;\n\n        this.dropTarget.setTargetZones(\n            value ? ['center'] : ['top', 'bottom', 'left', 'right', 'center']\n        );\n\n        toggleClass(this.container, 'dv-groupview-floating', value);\n\n        this.groupPanel.api._onDidFloatingStateChange.fire({\n            isFloating: this.isFloating,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer();\n\n        this.dropTarget = new Droptarget(this.contentContainer.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.locked === 'no-drop-target' ||\n                    (this.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (!data && event.shiftKey && !this.isFloating) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this._panels.length === 1 && data.groupId === this.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked || false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.dropTarget.dispose();\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(parentElement?: HTMLElement) {\n        super();\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (!document.body.contains(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize || width !== this.width || height !== this.height;\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any | undefined;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly isFloating: boolean;\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly isFloating: boolean;\n}\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidFloatingStateChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidFloatingStateChange.event;\n\n    get isFloating() {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n        return this._group.model.isFloating;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidFloatingStateChange);\n    }\n\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            undefined,\n            options.position ?? 'center'\n        );\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 100,\n                minimumWidth: 100,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\n/*\n * omit visibility modifiers since the visibility of a single group doesn't make sense\n * because it belongs to a groupview\n */\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    close(): void;\n    setTitle(title: string): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return !!this.group?.isActive;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: IDockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n\n    private _title: string | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        public readonly id: string,\n        accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel\n    ) {\n        super();\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params || {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: { new (id: string, component: string): T };\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components || {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly layout: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent || 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.layout,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.layout,\n            new DockviewApi(this.layout),\n            group,\n            view\n        );\n\n        panel.init({\n            title: title || panelId,\n            params: params || {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import { toHaveDescription } from '@testing-library/jest-dom/matchers';\nimport {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: {\n            height: number;\n            width: number;\n            left: number;\n            top: number;\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(\n        bounds: Partial<{\n            height: number;\n            width: number;\n            top: number;\n            left: number;\n        }> = {}\n    ): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): { top: number; left: number; height: number; width: number } {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport {\n    DockviewFloatingGroupPanel,\n    IDockviewFloatingGroupPanel,\n} from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\n\nconst DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: { height: number; width: number; left: number; top: number };\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly floatingGroups: IDockviewFloatingGroupPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    readonly floatingGroups: DockviewFloatingGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation || Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n        });\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n\n        this.addDisposables(\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId || undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.isFloating = true;\n\n        const overlayLeft =\n            typeof coord?.x === 'number' ? Math.max(coord.x, 0) : 100;\n        const overlayTop =\n            typeof coord?.y === 'number' ? Math.max(coord.y, 0) : 100;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.isFloating = false;\n                    remove(this.floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this.floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const hasFloatingGroupOptionsChanged =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (hasFloatingGroupOptionsChanged) {\n            for (const group of this.floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this.floatingGroups) {\n            for (const floating of this.floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this.floatingGroups.map(\n            (floatingGroup) => {\n                return {\n                    data: floatingGroup.group.toJSON() as GroupPanelViewState,\n                    position: floatingGroup.overlay.toJSON(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            for (const floatingGroup of this.floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this.floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n            } else if (referenceGroup.api.isFloating || target === 'center') {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => !x.api.isFloating).length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        this.doRemoveGroup(group, options);\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        const floatingGroup = this.floatingGroups.find(\n            (_) => _.group === group\n        );\n        if (floatingGroup) {\n            if (!options?.skipDispose) {\n                floatingGroup.group.dispose();\n                this._groups.delete(group.id);\n                // TODO: fire group removed event?\n            }\n            floatingGroup.dispose();\n\n            return floatingGroup.group;\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ||\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                const isFloating = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (!isFloating) {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ||\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                const floatingGroup = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (floatingGroup) {\n                    floatingGroup.dispose();\n                } else {\n                    this.gridview.removeView(\n                        getGridLocation(sourceGroup.element)\n                    );\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const isGroupAlreadyFocused = this._activeGroup === group;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (!isGroupAlreadyFocused && this._activeGroup?.activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent || this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view\n        );\n        panel.init({\n            title: options.title || options.id,\n            params: options?.params || {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { FrameworkFactory } from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: {\n            new (id: string, component: string): ITabRenderer;\n        };\n    };\n    components?: {\n        [componentName: string]: {\n            new (id: string, component: string): IContentRenderer;\n        };\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location || [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params || {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params || {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params || {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents || {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params || {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents || {},\n                            this.options.headerframeworkComponents || {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params || {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: any | React.ReactElement\n): element is React.ReactElement {\n    return element?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params || {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents || {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents || {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params || {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                orientation: props.orientation || Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params || {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation || Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '0px 8px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <span>{`Custom header for ${props.title}`}</span>\n            <button onClick={onClick}>\n                {expanded ? 'Collapse' : 'Expand'}\n            </button>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const CustomHeaderPaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            headerComponent: 'myHeaderComponent',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewDropEvent,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const DragAndDropPaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    const onDidDrop = (event: PaneviewDropEvent) => {\n        const index = event.api.panels.indexOf(event.panel);\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            title: 'Panel 4',\n            index,\n        });\n    };\n\n    return (\n        <div>\n            <div>\n                <div\n                    style={{\n                        backgroundColor: 'orange',\n                        padding: '0px 8px',\n                        borderRadius: '4px',\n                        width: '100px',\n                        cursor: 'pointer',\n                    }}\n                    draggable={true}\n                >\n                    Drag me\n                </div>\n            </div>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    onDidDrop={onDidDrop}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n        </div>\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewDropEvent,\n    PaneviewReact,\n    PaneviewReadyEvent,\n    PaneviewDndOverlayEvent,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from '../ui/console/console';\nimport './sideBySide.scss';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const SideBySidePaneview = () => {\n    const [checked, setChecked] = React.useState<boolean>(false);\n    const [lines, setLines] = React.useState<Line[]>([]);\n\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    const showDndOverlay = (event: PaneviewDndOverlayEvent) => {\n        return checked;\n    };\n\n    const onDidDrop = (event: PaneviewDropEvent) => {\n        const text = `onDidDrop ${event.position} ${event.panel.id}`;\n\n        setLines((lines) => [...lines, { text, timestamp: new Date() }]);\n    };\n\n    return (\n        <div\n            style={{\n                height: '300px',\n                margin: '20px 0px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <div style={{ height: '25px' }}>\n                <label>\n                    <span>Enable external events</span>\n                    <input\n                        type={'checkbox'}\n                        checked={checked}\n                        onChange={(e) => {\n                            setChecked(e.target.checked);\n                        }}\n                    />\n                </label>\n            </div>\n            <div\n                style={{\n                    height: '250px',\n                    display: 'flex',\n                }}\n            >\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss paneview-side-by-side\"\n                    showDndOverlay={showDndOverlay}\n                    onDidDrop={onDidDrop}\n                />\n                <PaneviewReact\n                    components={components}\n                    onReady={onReady}\n                    className=\"dockview-theme-abyss paneview-side-by-side\"\n                    showDndOverlay={showDndOverlay}\n                    onDidDrop={onDidDrop}\n                />\n            </div>\n            <div style={{ height: '100px' }}>\n                <Console lines={lines} />\n            </div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: { id: string }) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            <ThemePicker />\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton id={sandboxId} />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","import {\n    PaneviewReact,\n    PaneviewReadyEvent,\n    IPaneviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default App;\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tdescription: 'Paneview Documentation'\n};\nexport const contentTitle = 'Paneview';\nexport const metadata = {\n  \"unversionedId\": \"components/paneview\",\n  \"id\": \"components/paneview\",\n  \"title\": \"Paneview\",\n  \"description\": \"Paneview Documentation\",\n  \"source\": \"@site/docs/components/paneview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/paneview\",\n  \"permalink\": \"/docs/next/components/paneview\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/paneview.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {\n    \"description\": \"Paneview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Gridview\",\n    \"permalink\": \"/docs/next/components/gridview\"\n  },\n  \"next\": {\n    \"title\": \"Splitview\",\n    \"permalink\": \"/docs/next/components/splitview\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { MultiFrameworkContainer } from '@site/src/components/ui/container';\nimport SimplePaneview from '@site/sandboxes/simple-paneview/src/app';\nimport { CustomHeaderPaneview } from '@site/src/components/paneview/customHeader';\nimport { DragAndDropPaneview } from '@site/src/components/paneview/dragAndDrop';\nimport { SideBySidePaneview } from '@site/src/components/paneview/sideBySide';\nimport Link from '@docusaurus/Link';\nexport const toc = [{\n  value: 'PaneviewReact Component',\n  id: 'paneviewreact-component',\n  level: 2\n}, {\n  value: 'Paneview API',\n  id: 'paneview-api',\n  level: 2\n}, {\n  value: 'Paneview Panel API',\n  id: 'paneview-panel-api',\n  level: 2\n}, {\n  value: 'Advanced Features',\n  id: 'advanced-features',\n  level: 2\n}, {\n  value: 'Custom Header',\n  id: 'custom-header',\n  level: 3\n}, {\n  value: 'Drag And Drop',\n  id: 'drag-and-drop',\n  level: 3\n}, {\n  value: 'Interactions',\n  id: 'interactions',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"paneview\"\n    }}>{`Paneview`}</h1>\n    <p>{`A paneview is a collapsed collection of vertically stacked panels and panel headers.\nThe panel header will always remain visible however the panel will only be visible when the panel is expanded.`}</p>\n    <admonition {...{\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`Paneview panels can be re-ordered by dragging and dropping the panel headers.`}</p></admonition>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <MultiFrameworkContainer sandboxId=\"simple-paneview\" react={SimplePaneview} mdxType=\"MultiFrameworkContainer\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Simple Paneview example\\\"\",\n        \"title\": \"\\\"Simple\",\n        \"Paneview\": true,\n        \"example\\\"\": true\n      }}>{`import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nSimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"paneviewreact-component\"\n    }}>{`PaneviewReact Component`}</h2>\n    <p>{`You can create a Paneview through the use of the `}<inlineCode parentName=\"p\">{`ReactPaneview`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ReactPaneview } from 'dockview';\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onReady`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(event: SplitviewReadyEvent) => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`components`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`headerComponents`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`''`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableAutoResizing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`disableDnd`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"paneview-api\"\n    }}>{`Paneview API`}</h2>\n    <p>{`The Paneview API is exposed both at the `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` event and on each panel through `}<inlineCode parentName=\"p\">{`props.containerApi`}</inlineCode>{`.\nThrough this API you can control general features of the component and access all added panels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Paneview API via Panel component\\\"\",\n        \"title\": \"\\\"Paneview\",\n        \"API\": true,\n        \"via\": true,\n        \"Panel\": true,\n        \"component\\\"\": true\n      }}>{`const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"title=\\\"Paneview API via the onReady callback\\\"\",\n        \"title\": \"\\\"Paneview\",\n        \"API\": true,\n        \"via\": true,\n        \"the\": true,\n        \"onReady\": true,\n        \"callback\\\"\": true\n      }}>{`const onReady = (event: GridviewReadyEvent) => {\n    // event.api...\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component pixel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimumSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sum of the `}<inlineCode parentName=\"td\">{`minimumSize`}</inlineCode>{` property for each panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximumSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sum of the `}<inlineCode parentName=\"td\">{`maximumSize`}</inlineCode>{` property for each panel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`length`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Number of panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`panels`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IPaneviewPanel[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All panels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires on layout change`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidLayoutFromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<void>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires of layout change caused by a fromJSON deserialization call`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidAddView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IPaneviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when a view is added`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidRemoveView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<IPaneviewPanel>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires when a view is removed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDrop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PaneviewDropEvent`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fires on an external drop event (See `}<Link to=\"./paneview/#drag-and-drop\" mdxType=\"Link\">{`Drag and Drop`}</Link>{`)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`addPanel(options: AddPaneviewComponentOptions): IPaneviewPanel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`removePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(panel: IPaneviewPanel): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`movePanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(from: number, to: number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`getPanel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(id:string): IPaneviewPanel \\\\| undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`focus`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Focus the active panel, if exists`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`layout`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(width: number, height:number): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fromJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(data: SerializedPaneview): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`toJSON`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): SerializedPaneview`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`clear`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Clears the current layout`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"paneview-panel-api\"\n    }}>{`Paneview Panel API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel id`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isFocused`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel focsed`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel active`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`isVisible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is panel visible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel width`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`height`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Panel height`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidDimensionsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<PanelDimensionChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidFocusChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<FocusEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidVisibilityChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<VisibilityEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidActiveChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Event<ActiveEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onDidConstraintsChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onDidConstraintsChange: Event<PanelConstraintChangeEvent>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setVisible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(isVisible: boolean): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setActive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setConstraints`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(value: PanelConstraintChangeEvent2): void;`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setSize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event: SizeEvent): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"advanced-features\"\n    }}>{`Advanced Features`}</h2>\n    <h3 {...{\n      \"id\": \"custom-header\"\n    }}>{`Custom Header`}</h3>\n    <p>{`You can provide a custom component to render an alternative header.`}</p>\n    <div style={{\n      height: '400px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <CustomHeaderPaneview mdxType=\"CustomHeaderPaneview\" />\n    </div>\n    <p>{`You can provide a `}<inlineCode parentName=\"p\">{`headerComponent`}</inlineCode>{` option when creating a panel to tell the library to use a custom header component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const onReady = (event: PaneviewReadyEvent) => {\n    event.api.addPanel({\n        id: 'panel_1',\n        component: 'default',\n        headerComponent: 'myHeaderComponent',\n        params: {\n            valueA: 'A',\n        },\n        title: 'Panel 1',\n    });\n};\n`}</code></pre>\n    <p>{`This header must be defined in the collection of components provided to the `}<inlineCode parentName=\"p\">{`headerComponents`}</inlineCode>{` props for `}<inlineCode parentName=\"p\">{`ReactPaneivew`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { IPaneviewPanelProps } from 'dockview';\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = { myHeaderComponent: MyHeaderComponent };\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag And Drop`}</h3>\n    <p>{`If you provide the `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` component with the prop `}<inlineCode parentName=\"p\">{`onDidDrop`}</inlineCode>{` you will be able to interact with custom drop events.`}</p>\n    <DragAndDropPaneview mdxType=\"DragAndDropPaneview\" />\n    <h3 {...{\n      \"id\": \"interactions\"\n    }}>{`Interactions`}</h3>\n    <p>{`You can safely create multiple paneview instances within one page. They will not interact with each other by default.`}</p>\n    <p>{`If you wish to interact with the drop event from one paneview instance in another paneview instance you can implement the `}<inlineCode parentName=\"p\">{`showDndOverlay`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onDidDrop`}</inlineCode>{` props on `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{`.`}</p>\n    <p>{`As an example see how dragging a header from one control to another will only trigger an interactable event for the developer if the checkbox is enabled.`}</p>\n    <SideBySidePaneview mdxType=\"SideBySidePaneview\" />\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n","import React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/React.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/React.createElement(React.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/React.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return React.createElement.apply(null, createElementArgArray);\n  }\n\n  return React.createElement.apply(null, args);\n}\n\nexport { MDXContext, MDXProvider, createElement as mdx, useMDXComponents, withMDXComponents };\n"],"names":["BrowserOnly","_ref","children","fallback","useIsBrowser","React","TransferObject","constructor","PanelTransfer","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","static","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","getInstance","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","create","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","from","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","contentSize","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","array","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","lowPriorityIndex","emptyDelta","sum","offset","left","top","VERTICAL","width","height","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","getNode","_getViews","nodeCachedVisibleSize","path","n","l","parent","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","moveToNext","moveToPrevious","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","preventDefault","onDragOver","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","getBoundingClientRect","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","transform","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","ContentContainer","_element","tabIndex","show","display","hide","openPanel","content","focusTracker","_width","_height","closePanel","DockviewDropTargets","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","accessor","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","locked","model","setActive","isActive","setContent","part","GroupDragHandler","shiftKey","isFloating","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","Panel","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","findIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_isFloating","dropTarget","groupPanel","_onDidFloatingStateChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","entry","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onDidVisibilityChange","onDidVisibilityChange","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","DockviewGroupPanelApiImpl","_group","onDidFloatingStateChange","moveTo","moveGroupOrPanel","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","setTitle","close","DockviewPanel","_title","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","floatingGroups","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","minimumHeightWithinViewport","querySelector","floatingGroupPanel","t","createGroupAtLocation","hasOrientationChanged","hasFloatingGroupOptionsChanged","floating","includePanel","collection","floats","floatingGroup","grid","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","err","hasActiveGroup","hasActivePanel","entries","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","isGroupAlreadyFocused","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","myHeaderComponent","CustomHeaderPaneview","DragAndDropPaneview","cursor","margin","SideBySidePaneview","checked","setChecked","lines","setLines","text","timestamp","flexDirection","onChange","Console","scrollTop","scrollHeight","line","pad","getHours","getMinutes","getSeconds","getMilliseconds","formatTime","css","CodeSandboxButton","url","ThemePicker","alignItems","href","fontWeight","paddingRight","Spinner","Container","injectVanillaJS","sandboxId","ReactIcon","marginRight","src","useBaseUrl","JavascriptIcon","themes","theme","setTheme","localStorage","getItem","setItem","dispatchEvent","StorageEvent","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","background","zIndex","justifyContent","react","border","MultiFrameworkContainer","frontMatter","description","contentTitle","metadata","assets","toc","level","layoutProps","MDXLayout","MDXContent","mdx","_extends","mdxType","parentName","SimplePaneview","Link","isMDXComponent","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","source","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","MDXContext","useMDXComponents","contextComponents","allComponents","MDXProvider","TYPE_PROP_NAME","DEFAULTS","inlineCode","wrapper","MDXCreateElement","propComponents","originalType","etc","concat","argsLength","createElementArgArray","newProps","hasOwnProperty"],"sourceRoot":""}