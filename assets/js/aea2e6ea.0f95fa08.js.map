{"version":3,"file":"assets/js/aea2e6ea.0f95fa08.js","mappings":"qQAAA,MAAMA,EACFC,cACI,EAID,MAAMC,UAAsBF,EAC/BC,YACoBE,EACAC,EACAC,GAEhBC,QAJgB,KAAAH,OAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,QAAAA,CAGpB,EAGG,MAAME,UAAqBP,EAC9BC,YACoBE,EACAK,GAEhBF,QAHgB,KAAAH,OAAAA,EACA,KAAAK,OAAAA,CAGpB,EAMG,MAAMC,EAMTR,cACI,CAGJS,qBACI,OAAOD,EAAuBE,QAClC,CAEAC,QAAQC,GACJ,OAAOA,GAASA,IAAUC,KAAKD,KACnC,CAEAE,UAAUF,GACFC,KAAKF,QAAQC,KACbC,KAAKD,WAAQG,EACbF,KAAKG,UAAOD,EAEpB,CAEAE,QAAQL,GACJ,GAAIC,KAAKF,QAAQC,GACb,OAAOC,KAAKG,IAIpB,CAEAE,QAAQF,EAAWJ,GACXA,IACAC,KAAKG,KAAOA,EACZH,KAAKD,MAAQA,EAErB,EAGG,SAASO,IACZ,MAAMC,EAAgBZ,EAAuBa,cAG7C,GAFqBD,EAAcT,QAAQV,EAAcqB,WAMzD,OAAOF,EAAcH,QAAQhB,EAAcqB,WAAY,EAC3D,CAEO,SAASC,IACZ,MAAMC,EAAehB,EAAuBa,cAG5C,GAFqBG,EAAab,QAAQL,EAAagB,WAMvD,OAAOE,EAAaP,QAAQX,EAAagB,WAAY,EACzD,CC/EO,IAAUG,ECDAC,EFoBWlB,EAAAE,SAAW,IAAIF,ECnB3C,SAAiBiB,GACAA,EAAAE,IAAM,WAAyC,QAAAC,EAAAC,UAAAC,OAAlCC,EAAoB,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAApBF,EAAoBE,GAAAJ,UAAAI,GAC1C,OAAQC,IACJ,MAAMC,EAAcJ,EAASK,KAAKC,GAAUA,EAAMH,KAElD,MAAO,CACHI,QAASA,KACLH,EAAYI,SAASC,IACjBA,EAAEF,SAAS,GACb,EAET,CAET,CACH,CAdD,CAAiBb,IAAAA,EAAK,KAoCtB,MAAMgB,EACFhC,gBAAa,MACT,OAAO,IAAIgC,EAA4B,QAAjBC,GAAA,IAAIC,OAAQC,aAAK,IAAAF,EAAAA,EAAI,GAC/C,CAEA1C,YAA6B6C,GAAA,KAAAA,MAAAA,CAAgB,CAE7CC,QACIC,QAAQC,KAAKnC,KAAKgC,MACtB,EAGJ,MAAMI,EACFjD,YACakD,EACAC,GADA,KAAAD,SAAAA,EACA,KAAAC,WAAAA,CACV,EAIA,MAAMC,EAUT3C,gCAAgC4C,GACxBA,IAAcD,EAAQE,iBACtBF,EAAQG,oBAAoBC,QAEhCJ,EAAQE,gBAAkBD,CAC9B,CAEArD,YAA6ByD,GAAA,KAAAA,QAAAA,EAbrB,KAAAC,WAA8B,GAC9B,KAAAC,WAAY,CAYoC,CAEpDC,YAmCA,OAlCK/C,KAAKgD,SACNhD,KAAKgD,OAAUX,IAAyC,OACpC,QAAZR,EAAA7B,KAAK4C,eAAO,IAAAf,OAAA,EAAAA,EAAEoB,cAAyB/C,IAAfF,KAAKkD,OAC7Bb,EAASrC,KAAKkD,OAGlB,MAAM7B,EAAW,IAAIe,EACjBC,EACAE,EAAQE,gBAAkBb,EAAWuB,cAAWjD,GAIpD,OAFAF,KAAK6C,WAAWO,KAAK/B,GAEd,CACHI,QAASA,KACL,MAAM4B,EAAQrD,KAAK6C,WAAWS,QAAQjC,GAClCgC,GAAS,EACTrD,KAAK6C,WAAWU,OAAOF,EAAO,GACvBd,EAAQE,eAIf,EAGX,EAGDF,EAAQE,iBACRF,EAAQG,oBAAoBc,IACxBxD,KAAKgD,OACLpB,EAAWuB,WAIhBnD,KAAKgD,MAChB,CAEOS,KAAKC,GACR1D,KAAKkD,MAAQQ,EACb,IAAK,MAAMrC,KAAYrB,KAAK6C,WACxBxB,EAASgB,SAASqB,EAE1B,CAEOjC,UACEzB,KAAK8C,YACN9C,KAAK8C,WAAY,EAEb9C,KAAK6C,WAAW5B,OAAS,IACrBsB,EAAQE,iBACRkB,gBAAe,KAAK,MAEhB,IAAK,MAAMtC,KAAYrB,KAAK6C,WACxBX,QAAQC,KAAwB,QAAnBN,EAAAR,EAASiB,kBAAU,IAAAT,OAAA,EAAAA,EAAEI,QAAS,IAKvDjC,KAAK6C,WAAa,IAGlBN,EAAQE,iBAAmBzC,KAAKgD,QAChCT,EAAQG,oBAAoBkB,OAAO5D,KAAKgD,QAGpD,EAGG,SAASa,EACZC,EACAC,EACA1C,EACAuB,GAIA,OAFAkB,EAAQE,iBAAiBD,EAAM1C,EAAUuB,GAElC,CACHnB,QAASA,KACLqC,EAAQG,oBAAoBF,EAAM1C,EAAUuB,EAAQ,EAGhE,CAEO,SAASsB,EACZJ,EACAC,EACA1C,EACAuB,GAIA,OAFAkB,EAAQE,iBAAiBD,EAAM1C,EAAUuB,GAElC,CACHnB,QAASA,KACLqC,EAAQG,oBAAoBF,EAAM1C,EAAUuB,EAAQ,EAGhE,CA7GWL,EAAAE,iBAAkB,EACTF,EAAAG,oBAAsB,IAhD1C,MAAAvD,cACa,KAAAgF,OAAS,IAAIC,GAiB1B,CAfQC,WACA,OAAOrE,KAAKmE,OAAOE,IACvB,CAEAb,IAAOT,EAAiBT,GACpBtC,KAAKmE,OAAOG,IAAIvB,EAAOT,EAC3B,CAEAsB,OAAUb,GACN/C,KAAKmE,OAAOP,OAAOb,EACvB,CAEAJ,QACI3C,KAAKmE,OAAOxB,OAChB,GA6IG,MAAM4B,EAAbpF,cAGqB,KAAAqF,SAAW,IAAIjC,EACvB,KAAAkC,QAAUzE,KAAKwE,SAASzB,KAerC,CAbIU,OACQzD,KAAK0E,OACLC,aAAa3E,KAAK0E,OAEtB1E,KAAK0E,MAAQE,YAAW,KACpB5E,KAAKwE,SAASf,OACdkB,aAAa3E,KAAK0E,MAAM,GAEhC,CAEAjD,UACIzB,KAAKwE,SAAS/C,SAClB,GCjMJ,SAAiBZ,GACAA,EAAAgE,KAAoB,CAC7BpD,QAASA,OAIhB,CAND,CAAiBZ,IAAAA,EAAU,KAQpB,MAAMiE,EAIKC,iBACV,OAAO/E,KAAKgF,WAChB,CAEOpF,cAAkC,QAAAmB,EAAAC,UAAAC,OAAnBgE,EAAmB,IAAA9D,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAnB6D,EAAmB7D,GAAAJ,UAAAI,GACrC,OAAO,IAAI0D,KAAuBG,EACtC,CAEA9F,cAVQ,KAAA6F,aAAc,EAAM,QAAAE,EAAAlE,UAAAC,OAUbgE,EAAmB,IAAA9D,MAAA+D,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAnBF,EAAmBE,GAAAnE,UAAAmE,GAC9BnF,KAAKoF,aAAeH,CACxB,CAEOI,iBAAqC,QAAAC,EAAAtE,UAAAC,OAAnBgE,EAAmB,IAAA9D,MAAAmE,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAnBN,EAAmBM,GAAAvE,UAAAuE,GACxCN,EAAKvD,SAAS8D,GAAQxF,KAAKoF,aAAahC,KAAKoC,IACjD,CAEO/D,UACHzB,KAAKoF,aAAa1D,SAAS8D,GAAQA,EAAI/D,YAEvCzB,KAAKgF,aAAc,CACvB,EAGG,MAAMS,EAAbtG,cACY,KAAAuG,YAAc7E,EAAWgE,IAerC,CAbQ7C,UAAM2D,GACF3F,KAAK0F,aACL1F,KAAK0F,YAAYjE,UAErBzB,KAAK0F,YAAcC,CACvB,CAEOlE,UACCzB,KAAK0F,cACL1F,KAAK0F,YAAYjE,UACjBzB,KAAK0F,YAAc7E,EAAWgE,KAEtC,ECnDG,SAASe,EACZ9B,EACA+B,GAEA,MAAMC,EAAW,IAAIC,gBAAgBC,IAMjCC,uBAAsB,KAClB,MAAMC,EAAaF,EAAQ,GAC3BH,EAAGK,EAAW,GAChB,IAKN,OAFAJ,EAASK,QAAQrC,GAEV,CACHrC,QAASA,KACLqE,EAASM,UAAUtC,GACnBgC,EAASO,YAAY,EAGjC,CAEO,MAAMC,EAAgB,SACzBxC,GAEM,QAAA/C,EAAAC,UAAAC,OADHsF,EAAiB,IAAApF,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAjBmF,EAAiBnF,EAAA,GAAAJ,UAAAI,GAEpB,IAAK,MAAMoF,KAAaD,EAChBzC,EAAQ2C,UAAUC,SAASF,IAC3B1C,EAAQ2C,UAAUE,OAAOH,EAGrC,EAEaI,EAAa,SACtB9C,GAEM,QAAAoB,EAAAlE,UAAAC,OADHsF,EAAiB,IAAApF,MAAA+D,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAjBoB,EAAiBpB,EAAA,GAAAnE,UAAAmE,GAEpB,IAAK,MAAMqB,KAAaD,EACfzC,EAAQ2C,UAAUC,SAASF,IAC5B1C,EAAQ2C,UAAUjD,IAAIgD,EAGlC,EAEaK,EAAcA,CACvB/C,EACAgD,EACAC,KAEA,MAAMC,EAAWlD,EAAQ2C,UAAUC,SAASI,GACxCC,IAAcC,GACdlD,EAAQ2C,UAAUjD,IAAIsD,IAErBC,GAAaC,GACdlD,EAAQ2C,UAAUE,OAAOG,EAAW,EAIrC,SAASG,EACZC,EACAC,GAEA,KAAOD,GAAW,CACd,GAAIA,IAAcC,EACd,OAAO,EAEXD,EAAYA,EAAUE,UAAW,CAGrC,OAAO,CACX,CAEO,SAASC,EAAqBC,GACjC,OAAOnG,MAAMV,UAAU8G,MAAMC,KAAKC,SAASJ,qBAAqBC,GAAM,EAC1E,CAQO,SAASI,EAAW5D,GACvB,OAAO,IAAI6D,EAAa7D,EAC5B,CAKA,MAAM6D,UAAqB7C,EASvB3F,YAAY2E,GACRtE,QATa,KAAAoI,YAAc,IAAIrF,EACnB,KAAAsF,WAAkC7H,KAAK4H,YAAY7E,MAElD,KAAA+E,WAAa,IAAIvF,EAClB,KAAAwF,UAAiC/H,KAAK8H,WAAW/E,MAO7D/C,KAAKqF,eAAerF,KAAK4H,YAAa5H,KAAK8H,YAE3C,IAAIE,EAAWf,EAAWQ,SAASQ,cAA4BnE,GAC3DoE,GAAe,EAEnB,MAAMC,EAAUA,KACZD,GAAe,EACVF,IACDA,GAAW,EACXhI,KAAK4H,YAAYnE,OAAO,EAI1B2E,EAASA,KACPJ,IACAE,GAAe,EACfG,OAAOzD,YAAW,KACVsD,IACAA,GAAe,EACfF,GAAW,EACXhI,KAAK8H,WAAWrE,OAAO,GAE5B,GAAG,EAIdzD,KAAKsI,qBAAuB,KACIrB,EACxBQ,SAASQ,cACInE,KAEWkE,IACpBA,EACAI,IAEAD,IAAS,EAKjBrE,aAAmByE,aACnBvI,KAAKqF,eACDnB,EAAsBJ,EAAS,QAASqE,GAAS,IAErDnI,KAAKqF,eACDnB,EAAsBJ,EAAS,OAAQsE,GAAQ,MAGnDpI,KAAKqF,eACDxB,EAA4BC,EAAS,QAASqE,GAAS,IAE3DnI,KAAKqF,eACDxB,EAA4BC,EAAS,OAAQsE,GAAQ,IAGjE,CAEAI,eACIxI,KAAKsI,sBACT,EAIJ,MAAMG,EAA4B,yBAQ3B,SAASC,EAAsB3F,GAClC,OAAQA,EAAc0F,EAC1B,CC1LO,SAASE,EAAQC,GACpB,GAAmB,IAAfA,EAAI3H,OACJ,MAAM,IAAIa,MAAM,qBAGpB,MAAO,CAAC8G,EAAIrB,MAAM,EAAGqB,EAAI3H,OAAS,GAAI2H,EAAIA,EAAI3H,OAAS,GAC3D,CAMO,SAAS4H,EAAkBC,EAAWC,GACzC,GAAID,EAAK7H,SAAW8H,EAAK9H,OACrB,OAAO,EAGX,IAAK,IAAI+H,EAAI,EAAGA,EAAIF,EAAK7H,OAAQ+H,IAC7B,GAAIF,EAAKE,KAAOD,EAAKC,GACjB,OAAO,EAGf,OAAO,CACX,CAKO,SAASC,EAAeL,EAAU5G,GACrC,MAAMqB,EAAQuF,EAAItF,QAAQtB,GAEtBqB,GAAS,IACTuF,EAAIrF,OAAOF,EAAO,GAClBuF,EAAIM,QAAQlH,GAEpB,CAKO,SAASmH,EAAaP,EAAU5G,GACnC,MAAMqB,EAAQuF,EAAItF,QAAQtB,GAEtBqB,GAAS,IACTuF,EAAIrF,OAAOF,EAAO,GAClBuF,EAAIxF,KAAKpB,GAEjB,CC/CO,MAAMoH,EAAQA,CAACpH,EAAeqH,EAAaC,KAC9C,GAAID,EAAMC,EACN,MAAM,IAAIxH,MAAM,GAAGuH,OAASC,6BAEhC,OAAOC,KAAKF,IAAIC,EAAKC,KAAKD,IAAItH,EAAOqH,GAAK,EAGjCG,EAA4BA,KACrC,IAAIxH,EAAQ,EACZ,MAAO,CAAEyH,KAAMA,KAAOzH,KAAS0H,WAAY,EAGlCC,EAAQA,CAACC,EAAcC,KAChC,MAAMC,EAAmB,GAOzB,GALkB,iBAAPD,IACPA,EAAKD,EACLA,EAAO,GAGPA,GAAQC,EACR,IAAK,IAAIb,EAAIY,EAAMZ,EAAIa,EAAIb,IACvBc,EAAO1G,KAAK4F,QAGhB,IAAK,IAAIA,EAAIY,EAAMZ,EAAIa,EAAIb,IACvBc,EAAO1G,KAAK4F,GAIpB,OAAOc,CAAM,EC1BV,MAAMC,EAIL1F,SAAKA,GACLrE,KAAKgK,MAAQ3F,CACjB,CAEIA,WACA,OAAOrE,KAAKgK,KAChB,CAEIC,wBACA,OAAOjK,KAAKkK,kBAChB,CAEIC,cACA,YAA0C,IAA5BnK,KAAKkK,kBACvB,CAEIE,kBACA,OAAOpK,KAAKmK,QAAUnK,KAAKqK,KAAKD,YAAc,CAClD,CACIE,sBACA,OAAOtK,KAAKqK,KAAKD,WACrB,CAEIG,kBACA,OAAOvK,KAAKmK,QAAUnK,KAAKqK,KAAKE,YAAc,CAClD,CACIC,sBACA,OAAOxK,KAAKqK,KAAKE,WACrB,CAEIE,eACA,OAAOzK,KAAKqK,KAAKI,QACrB,CACIC,WACA,QAAS1K,KAAKqK,KAAKK,IACvB,CAEIC,YAAQA,GACR3K,KAAK4K,UAAUC,MAAMC,cAAgBH,EAAU,GAAK,MACxD,CAEAxL,YACWyL,EACAP,EACPhG,EACQsB,GAHD,KAAAiF,UAAAA,EACA,KAAAP,KAAAA,EAEC,KAAA1E,WAAAA,EA/CJ,KAAAuE,wBAAyChK,EAiDzB,iBAATmE,GACPrE,KAAKgK,MAAQ3F,EACbrE,KAAKkK,wBAAqBhK,EAC1B0K,EAAUnE,UAAUjD,IAAI,aAExBxD,KAAKgK,MAAQ,EACbhK,KAAKkK,mBAAqB7F,EAAK4F,kBAEvC,CAEAc,WAAWZ,EAAkB9F,GAAa,MAClC8F,IAAYnK,KAAKmK,UAIjBA,GACAnK,KAAKqE,KAAO+E,EACe,QAAvBvH,EAAA7B,KAAKkK,0BAAkB,IAAArI,EAAAA,EAAI,EAC3B7B,KAAKsK,gBACLtK,KAAKwK,iBAETxK,KAAKkK,wBAAqBhK,IAE1BF,KAAKkK,mBACe,iBAAT7F,EAAoBA,EAAOrE,KAAKqE,KAC3CrE,KAAKqE,KAAO,GAGhBrE,KAAK4K,UAAUnE,UAAUuE,OAAO,UAAWb,GAEvCnK,KAAKqK,KAAKU,YACV/K,KAAKqK,KAAKU,WAAWZ,GAE7B,CAEA1I,UAEI,OADAzB,KAAK2F,WAAWlE,UACTzB,KAAKqK,IAChB,EC5EG,IAAKY,EAKAC,EAiBAC,EAsCKC,GA5DjB,SAAYH,GACRA,EAAA,wBACAA,EAAA,mBACH,CAHD,CAAYA,IAAAA,EAAW,KAKvB,SAAYC,GACRA,EAAAA,EAAA,qBACAA,EAAAA,EAAA,qBACAA,EAAAA,EAAA,uBACAA,EAAAA,EAAA,oBACH,CALD,CAAYA,IAAAA,EAAS,KAiBrB,SAAYC,GACRA,EAAA,UACAA,EAAA,YACAA,EAAA,eACH,CAJD,CAAYA,IAAAA,EAAc,KAsC1B,SAAiBC,GACAA,EAAAC,WAA+B,CAAEtH,KAAM,cACpCqH,EAAAE,MAAhB,SAAsBjI,GAClB,MAAO,CAAEU,KAAM,QAASV,QAC5B,EACgB+H,EAAAG,UAAhB,SAA0BtB,GACtB,MAAO,CAAElG,KAAM,YAAakG,oBAChC,CACH,CARD,CAAiBmB,IAAAA,EAAM,KAmBhB,MAAMI,EAsBLnH,WACA,OAAOrE,KAAKgK,KAChB,CAEI3F,SAAKrC,GACLhC,KAAKgK,MAAQhI,CACjB,CAEIyJ,qBACA,OAAOzL,KAAK0L,eAChB,CAEID,mBAAezJ,GACfhC,KAAK0L,gBAAkB1J,CAC3B,CAEWf,aACP,OAAOjB,KAAK2L,UAAU1K,MAC1B,CAEW2K,kBACP,OAAO5L,KAAK6L,aAAe,IAAI7L,KAAK6L,mBAAgB3L,CACxD,CAEI4L,kBACA,OAAO9L,KAAK+L,YAChB,CAEID,gBAAY9J,GACZhC,KAAK+L,aAAe/J,EAEpB,MAAMgK,EAAMhM,KAAKqE,KACjBrE,KAAKqE,KAAOrE,KAAKyL,eACjBzL,KAAKyL,eAAiBO,EAEtB1F,EAActG,KAAK8D,QAAS,aAAc,YAC1C9D,KAAK8D,QAAQ2C,UAAUjD,IACnBxD,KAAK8L,aAAeb,EAAYgB,WAC1B,aACA,WAEd,CAEI7B,kBACA,OAAOpK,KAAK2L,UAAUO,QAAO,CAACC,EAAGC,IAASD,EAAIC,EAAKhC,aAAa,EACpE,CAEIG,kBACA,OAAuB,IAAhBvK,KAAKiB,OACNoL,OAAOC,kBACPtM,KAAK2L,UAAUO,QAAO,CAACC,EAAGC,IAASD,EAAIC,EAAK7B,aAAa,EACnE,CAEIgC,2BACA,OAAOvM,KAAKwM,qBAChB,CAEID,yBAAqBA,GACjBvM,KAAKwM,wBAA0BD,IAInCvM,KAAKwM,sBAAwBD,EAC7BvM,KAAKyM,uBACT,CAEIC,yBACA,OAAO1M,KAAK2M,mBAChB,CAEID,uBAAmBA,GACf1M,KAAK2M,sBAAwBD,IAIjC1M,KAAK2M,oBAAsBD,EAC3B1M,KAAKyM,uBACT,CAEAtN,YACqByL,EACjBhI,GAAyB,IAAAgK,EAAA,KADR,KAAAhC,UAAAA,EAlGb,KAAAe,UAAwB,GACxB,KAAAkB,OAAsB,GAEtB,KAAA7C,MAAQ,EACR,KAAA0B,gBAAkB,EAClB,KAAAoB,YAAc,EACd,KAAAjB,kBAAqC3L,EAErC,KAAAsM,uBAAwB,EACxB,KAAAG,qBAAsB,EAEb,KAAAI,cAAgB,IAAIxK,EAC5B,KAAAyK,aAAehN,KAAK+M,cAAchK,MAC1B,KAAAkK,cAAgB,IAAI1K,EAC5B,KAAA2K,aAAelN,KAAKiN,cAAclK,MAC1B,KAAAoK,iBAAmB,IAAI5K,EAC/B,KAAA6K,gBAAkBpN,KAAKmN,iBAAiBpK,MAqwBzC,KAAAsK,OAAS,SACbhK,EACAiK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,QARA,IAAAN,IAAAA,EAAkBX,EAAKjB,UAAUpK,KAAKuM,GAAMA,EAAEzJ,aAG9C,IAAAqJ,IAAAA,EAA2BrB,OAAO0B,wBAClC,IAAAJ,IAAAA,EAA2BtB,OAAOC,mBAI9BjJ,EAAQ,GAAKA,EAAQuJ,EAAKjB,UAAU1K,OACpC,OAAO,EAGX,MAAM+M,EAAYrE,EAAMtG,GAAQ,GAC1B4K,EAActE,EAAMtG,EAAQ,EAAGuJ,EAAKjB,UAAU1K,QAEpD,GAAIwM,EACA,IAAK,MAAMzE,KAAKyE,EACZxE,EAAY+E,EAAWhF,GACvBC,EAAYgF,EAAajF,GAIjC,GAAIwE,EACA,IAAK,MAAMxE,KAAKwE,EACZrE,EAAU6E,EAAWhF,GACrBG,EAAU8E,EAAajF,GAI/B,MAAMkF,EAAUF,EAAUzM,KAAKyH,GAAM4D,EAAKjB,UAAU3C,KAC9CmF,EAAUH,EAAUzM,KAAKyH,GAAMuE,EAAMvE,KAErCoF,EAAYH,EAAY1M,KAAKyH,GAAM4D,EAAKjB,UAAU3C,KAClDqF,EAAYJ,EAAY1M,KAAKyH,GAAMuE,EAAMvE,KAEzCsF,EAAaN,EAAU9B,QACzB,CAACqC,EAAGvF,IAAMuF,EAAI3B,EAAKjB,UAAU3C,GAAGoB,YAAcmD,EAAMvE,IACpD,GAEEwF,EAAaR,EAAU9B,QACzB,CAACqC,EAAGvF,IAAMuF,EAAI3B,EAAKjB,UAAU3C,GAAGuB,YAAcgD,EAAMvE,IACpD,GAGEyF,EACqB,IAAvBR,EAAYhN,OACNoL,OAAOC,kBACP2B,EAAY/B,QACR,CAACqC,EAAGvF,IAAMuF,EAAIhB,EAAMvE,GAAK4D,EAAKjB,UAAU3C,GAAGoB,aAE3C,GAERsE,EACqB,IAAvBT,EAAYhN,OACNoL,OAAO0B,kBACPE,EAAY/B,QACR,CAACqC,EAAGvF,IAAMuF,EAAIhB,EAAMvE,GAAK4D,EAAKjB,UAAU3C,GAAGuB,aAC3C,GAGRoE,EAAWpF,KAAKD,IAAIgF,EAAYI,GAChCE,EAAWrF,KAAKF,IAAIoF,EAAcD,GAExC,IAAIK,GAAU,EACd,GAAIjB,EAAY,CACZ,MAAMkB,EAAWlC,EAAKjB,UAAUiC,EAAWvK,OACrC8G,EAAUmD,GAASM,EAAWmB,WACpCF,EAAU1E,IAAY2E,EAAS3E,QAC/B2E,EAAS/D,WAAWZ,EAASyD,EAAWvJ,KAAM,CAGlD,IAAKwK,GAAWhB,EAAW,CACvB,MAAMiB,EAAWlC,EAAKjB,UAAUkC,EAAUxK,OACpC8G,EAAUmD,EAAQO,EAAUkB,WAClCF,EAAU1E,IAAY2E,EAAS3E,QAC/B2E,EAAS/D,WAAWZ,EAAS0D,EAAUxJ,KAAM,CAGjD,GAAIwK,EACA,OAAOjC,EAAKS,OACRhK,EACAiK,EACAC,EACAC,EACAC,EACAC,EACAC,GAKR,IAAIqB,EAAc,EAEdC,EAHmB7F,EAAMkE,EAAOqB,EAAUC,GAK9C,IAAK,IAAI5F,EAAI,EAAGA,EAAIkF,EAAQjN,OAAQ+H,IAAK,CACrC,MAAMoD,EAAO8B,EAAQlF,GACf3E,EAAO+E,EACT+E,EAAQnF,GAAKiG,EACb7C,EAAKhC,YACLgC,EAAK7B,aAEH2E,EAAY7K,EAAO8J,EAAQnF,GAEjCgG,GAAeE,EACfD,GAAWC,EACX9C,EAAK/H,KAAOA,CAAK,CAGrB,IAAI8K,EAAYH,EAChB,IAAK,IAAIhG,EAAI,EAAGA,EAAIoF,EAAUnN,OAAQ+H,IAAK,CACvC,MAAMoD,EAAOgC,EAAUpF,GACjB3E,EAAO+E,EACTiF,EAAUrF,GAAKmG,EACf/C,EAAKhC,YACLgC,EAAK7B,aAIT4E,GAFkB9K,EAAOgK,EAAUrF,GAGnCoD,EAAK/H,KAAOA,CAAK,CAGrB,OAAOiJ,CACX,EA/yBItN,KAAK+L,aAAenJ,EAAQkJ,YAC5B9L,KAAK8D,QAAU9D,KAAKoP,kBAEpBpP,KAAKqP,wBAC8BnP,IAA/B0C,EAAQyM,sBAEAzM,EAAQyM,mBAEpBrP,KAAKsP,cAAgBtP,KAAKuP,sBAC1BvP,KAAKwP,cAAgBxP,KAAKyP,sBAE1BzP,KAAK8D,QAAQ4L,YAAY1P,KAAKwP,eAC9BxP,KAAK8D,QAAQ4L,YAAY1P,KAAKsP,eAE9BtP,KAAK4K,UAAU8E,YAAY1P,KAAK8D,SAEhC9D,KAAK6K,MAAMjI,EAAQ+M,QAGf/M,EAAQgN,aACR5P,KAAKgK,MAAQpH,EAAQgN,WAAWvL,KAChCzB,EAAQgN,WAAWC,MAAMnO,SAAQ,CAACoO,EAAgBzM,KAC9C,MAAM0M,OACyB7P,IAA3B4P,EAAe3F,SACf2F,EAAe3F,QACT2F,EAAezL,KACd,CACGN,KAAM,YACNkG,kBAAmB6F,EAAezL,MAG1CgG,EAAOyF,EAAezF,KAC5BrK,KAAKgQ,QACD3F,EACA0F,EACA1M,GACA,EAEH,IAILrD,KAAK8M,YAAc9M,KAAK2L,UAAUO,QAAO,CAACC,EAAGnD,IAAMmD,EAAInD,EAAE3E,MAAM,GAC/DrE,KAAKiQ,kBAEb,CAEApF,MAAM8E,GAC8B,iBAA5BA,aAAM,EAANA,EAAQO,kBACR5J,EAActG,KAAK8D,QAAS,oBAC5B9D,KAAK8D,QAAQ+G,MAAMsF,eAAe,2BAElCvJ,EAAW5G,KAAK8D,QAAS,qBACrB6L,aAAM,EAANA,EAAQO,kBACRlQ,KAAK8D,QAAQ+G,MAAMuF,YACf,wBACAT,EAAOO,iBAIvB,CAEAG,cAAchN,GACV,GAAIA,EAAQ,GAAKA,GAASrD,KAAK2L,UAAU1K,OACrC,MAAM,IAAIa,MAAM,uBAIpB,OADiB9B,KAAK2L,UAAUtI,GAChB8G,OACpB,CAEAmG,eAAejN,EAAe8G,GAC1B,GAAI9G,EAAQ,GAAKA,GAASrD,KAAK2L,UAAU1K,OACrC,MAAM,IAAIa,MAAM,uBAGpB+E,EAAY7G,KAAK4K,UAAW,UAAWT,GAEvC,MAAMoG,EAAWvQ,KAAK2L,UAAUtI,GAEhCwD,EAAY7G,KAAK4K,UAAW,UAAWT,GAEvCoG,EAASxF,WAAWZ,EAASoG,EAASlM,MAEtCrE,KAAKwQ,qBAAqBnN,GAC1BrD,KAAKyQ,cACLzQ,KAAKiQ,iBACT,CAEAS,YAAYrN,GACR,OAAIA,EAAQ,GAAKA,GAASrD,KAAK2L,UAAU1K,QAC7B,EAGLjB,KAAK2L,UAAUtI,GAAOgB,IACjC,CAEAsM,WAAWtN,EAAegB,GACtB,GAAIhB,EAAQ,GAAKA,GAASrD,KAAK2L,UAAU1K,OACrC,OAGJ,MAAM2P,EAAUjH,EAAM3J,KAAK2L,UAAU1K,QAAQ4P,QAAQ7H,GAAMA,IAAM3F,IAC3DmK,EAAqB,IACpBoD,EAAQC,QACN7H,GAAMhJ,KAAK2L,UAAU3C,GAAGyB,WAAaU,EAAe2F,MAEzDzN,GAEEoK,EAAsBmD,EAAQC,QAC/B7H,GAAMhJ,KAAK2L,UAAU3C,GAAGyB,WAAaU,EAAe4F,OAGnD3E,EAAOpM,KAAK2L,UAAUtI,GAC5BgB,EAAOkF,KAAKyH,MAAM3M,GAClBA,EAAO+E,EACH/E,EACA+H,EAAKhC,YACLb,KAAKF,IAAI+C,EAAK7B,YAAavK,KAAKgK,QAGpCoC,EAAK/H,KAAOA,EACZrE,KAAKiR,SAASzD,EAAoBC,EACtC,CAEOyD,WACH,OAAOlR,KAAK2L,UAAUpK,KAAKuM,GAAMA,EAAEzD,MACvC,CAEQ8G,YAAY/E,EAAgB/H,GAChC,MAAMhB,EAAQrD,KAAK2L,UAAUrI,QAAQ8I,GAEjC/I,EAAQ,GAAKA,GAASrD,KAAK2L,UAAU1K,SAIzCoD,EAAuB,iBAATA,EAAoBA,EAAO+H,EAAK/H,KAC9CA,EAAO+E,EAAM/E,EAAM+H,EAAKhC,YAAagC,EAAK7B,aAE1C6B,EAAK/H,KAAOA,EAEZrE,KAAKiR,SAAS,CAAC5N,IACnB,CAEO2M,QACH3F,EACAhG,EACAhB,EACA+N,QAFA,IAAA/M,IAAAA,EAAwB,CAAEN,KAAM,oBAChC,IAAAV,IAAAA,EAAgBrD,KAAK2L,UAAU1K,QAG/B,MAAM2J,EAAYnD,SAAS4J,cAAc,OAKzC,IAAIC,EAJJ1G,EAAU9D,UAAY,OAEtB8D,EAAU8E,YAAYrF,EAAKvG,SAKvBwN,EADgB,iBAATjN,EACIA,EACU,UAAdA,EAAKN,KACD/D,KAAK0Q,YAAYrM,EAAKhB,OAAS,EACrB,cAAdgB,EAAKN,KACD,CAAEkG,kBAAmB5F,EAAK4F,mBAE1BI,EAAKD,YAGpB,MAAMzE,EAAa0E,EAAK8G,aAAaI,GACjCvR,KAAKmR,YAAYZ,EAAUgB,EAAQlN,QAGjCkM,EAAW,IAAIxG,EAASa,EAAWP,EAAMiH,EAAU,CACrD7P,QAASA,KACLkE,EAAWlE,UACXzB,KAAKsP,cAAckC,YAAY5G,EAAU,IAejD,GAXIvH,IAAUrD,KAAK2L,UAAU1K,OACzBjB,KAAKsP,cAAcI,YAAY9E,GAE/B5K,KAAKsP,cAAcmC,aACf7G,EACA5K,KAAKsP,cAAcpO,SAASkL,KAAK/I,IAIzCrD,KAAK2L,UAAUpI,OAAOF,EAAO,EAAGkN,GAE5BvQ,KAAK2L,UAAU1K,OAAS,EAAG,CAE3B,MAAMyQ,EAAOjK,SAAS4J,cAAc,OACpCK,EAAK5K,UAAY,OAEjB,MAAM6K,EAAkB5O,IACpB,IAAK,MAAMqJ,KAAQpM,KAAK2L,UACpBS,EAAKzB,SAAU,EAGnB,MAAMiH,EAAU,IACTvK,EAAqB,aACrBA,EAAqB,YAG5B,IAAK,MAAMwK,KAAUD,EACjBC,EAAOhH,MAAMC,cAAgB,OAGjC,MAAMgH,EACF9R,KAAK+L,eAAiBd,EAAYgB,WAC5BlJ,EAAMgP,QACNhP,EAAMiP,QAEVC,EH7Wf,SACHC,EACAC,GAEA,IAAK,IAAInJ,EAAI,EAAGA,EAAIkJ,EAAMjR,OAAQ+H,IAG9B,GAAImJ,EAFYD,EAAMlJ,IAGlB,OAAOA,EAIf,OAAQ,CACZ,CGgWkCoJ,CACdpS,KAAK6M,QACJwF,GAAMA,EAAEzH,YAAc8G,IAIrBnE,EAAQvN,KAAK2L,UAAUpK,KAAKuM,GAAMA,EAAEzJ,OAG1C,IAAIuJ,EACAC,EACJ,MAAMG,EAAYrE,EAAMsI,GAAY,GAC9BhE,EAActE,EAAMsI,EAAY,EAAGjS,KAAK2L,UAAU1K,QAClDqN,EAAaN,EAAU9B,QACzB,CAACC,EAAGnD,IAAMmD,GAAKnM,KAAK2L,UAAU3C,GAAGoB,YAAcmD,EAAMvE,KACrD,GAEEwF,EAAaR,EAAU9B,QACzB,CAACC,EAAGnD,IACAmD,GAAKnM,KAAK2L,UAAU3C,GAAGwB,gBAAkB+C,EAAMvE,KACnD,GAEEyF,EACqB,IAAvBR,EAAYhN,OACNoL,OAAOC,kBACP2B,EAAY/B,QACR,CAACC,EAAGnD,IACAmD,GACCoB,EAAMvE,GAAKhJ,KAAK2L,UAAU3C,GAAGoB,cAClC,GAERsE,EACqB,IAAvBT,EAAYhN,OACNoL,OAAO0B,kBACPE,EAAY/B,QACR,CAACC,EAAGnD,IACAmD,GACCoB,EAAMvE,GACHhJ,KAAK2L,UAAU3C,GAAGwB,kBAC1B,GAERmE,EAAWpF,KAAKD,IAAIgF,EAAYI,GAChCE,EAAWrF,KAAKF,IAAIoF,EAAcD,GAClC8D,EAAkBtS,KAAKuS,mBAAmBvE,GAC1CwE,EAAiBxS,KAAKuS,mBAAmBtE,GAC/C,GAA+B,iBAApBqE,EAA8B,CACrC,MAAMG,EAAkBzS,KAAK2L,UAAU2G,GACjCI,EAAWnJ,KAAKoJ,MAClBF,EAAgBnI,gBAAkB,GAGtCsD,EAAa,CACTvK,MAAOiP,EACPvD,WAAY0D,EAAgBtI,QACtBwE,EAAW+D,EACX/D,EAAW+D,EACjBrO,KAAMoO,EAAgBpO,KACxB,CAGN,GAA8B,iBAAnBmO,EAA6B,CACpC,MAAMC,EAAkBzS,KAAK2L,UAAU6G,GACjCE,EAAWnJ,KAAKoJ,MAClBF,EAAgBnI,gBAAkB,GAGtCuD,EAAY,CACRxK,MAAOmP,EACPzD,WAAY0D,EAAgBtI,QACtByE,EAAW8D,EACX9D,EAAW8D,EACjBrO,KAAMoO,EAAgBpO,KACxB,CAGN,MAAMuO,EAAiB7P,IACnB,MAIMuK,GAHFtN,KAAK+L,eAAiBd,EAAYgB,WAC5BlJ,EAAMgP,QACNhP,EAAMiP,SACQF,EAExB9R,KAAKqN,OACD4E,EACA3E,EACAC,OACArN,OACAA,EACAyO,EACAC,EACAhB,EACAC,GAEJ7N,KAAKwQ,uBACLxQ,KAAKyQ,aAAa,EAGhBoC,EAAMA,KACR,IAAK,MAAMzG,KAAQpM,KAAK2L,UACpBS,EAAKzB,SAAU,EAGnB,IAAK,MAAMkH,KAAUD,EACjBC,EAAOhH,MAAMC,cAAgB,OAGjC9K,KAAKiQ,kBAELxI,SAASxD,oBAAoB,cAAe2O,GAC5CnL,SAASxD,oBAAoB,YAAa4O,GAC1CpL,SAASxD,oBAAoB,gBAAiB4O,GAE9C7S,KAAK+M,cAActJ,UAAKvD,EAAU,EAGtCuH,SAASzD,iBAAiB,cAAe4O,GACzCnL,SAASzD,iBAAiB,YAAa6O,GACvCpL,SAASzD,iBAAiB,gBAAiB6O,EAAI,EAGnDnB,EAAK1N,iBAAiB,cAAe2N,GAErC,MAAMmB,EAAsB,CACxBlI,UAAW8G,EACX/L,WAAYA,KACR+L,EAAKzN,oBAAoB,cAAe0N,GACxC3R,KAAKwP,cAAcgC,YAAYE,EAAK,GAI5C1R,KAAKwP,cAAcE,YAAYgC,GAC/B1R,KAAK6M,OAAOzJ,KAAK0P,EAAU,CAG1B1B,GACDpR,KAAKiR,SAAS,CAAC5N,IAId+N,GACe,iBAAT/M,GACO,eAAdA,EAAKN,MAEL/D,KAAK+S,sBAGT/S,KAAKiN,cAAcxJ,KAAK4G,EAC5B,CAEA0I,sBACI,MAAMC,EAAgC,GACtC,IAAIC,EAAe,EAEnB,IAAK,MAAM7G,KAAQpM,KAAK2L,UAChBS,EAAK7B,YAAc6B,EAAKhC,YAAc,IACtC4I,EAAkB5P,KAAKgJ,GACvB6G,GAAgB7G,EAAK/H,MAI7B,MAAMA,EAAOkF,KAAKoJ,MAAMM,EAAeD,EAAkB/R,QAEzD,IAAK,MAAMmL,KAAQ4G,EACf5G,EAAK/H,KAAO+E,EAAM/E,EAAM+H,EAAKhC,YAAagC,EAAK7B,aAGnD,MAAMqG,EAAUjH,EAAM3J,KAAK2L,UAAU1K,QAC/BuM,EAAqBoD,EAAQC,QAC9B7H,GAAMhJ,KAAK2L,UAAU3C,GAAGyB,WAAaU,EAAe2F,MAEnDrD,EAAsBmD,EAAQC,QAC/B7H,GAAMhJ,KAAK2L,UAAU3C,GAAGyB,WAAaU,EAAe4F,OAGzD/Q,KAAKiR,SAASzD,EAAoBC,EACtC,CAEOyF,WACH7P,EACA0M,EACAqB,QAAU,IAAVA,IAAAA,GAAa,GAGb,MAAMb,EAAWvQ,KAAK2L,UAAUpI,OAAOF,EAAO,GAAG,GAIjD,GAHAkN,EAAS9O,UAGLzB,KAAK2L,UAAU1K,QAAU,EAAG,CAC5B,MAAMgR,EAAY1I,KAAKD,IAAIjG,EAAQ,EAAG,GACrBrD,KAAK6M,OAAOtJ,OAAO0O,EAAW,GAAG,GACzCtM,YAAa,CAa1B,OAVKyL,GACDpR,KAAKiR,WAGLlB,GAA0B,eAAhBA,EAAOhM,MACjB/D,KAAK+S,sBAGT/S,KAAKmN,iBAAiB1J,KAAK8M,EAASlG,MAE7BkG,EAASlG,IACpB,CAEA8I,yBAAyB9P,GACrB,GAAIA,EAAQ,GAAKA,GAASrD,KAAK2L,UAAU1K,OACrC,MAAM,IAAIa,MAAM,uBAIpB,OADiB9B,KAAK2L,UAAUtI,GAChB4G,iBACpB,CAEOmJ,SAASxJ,EAAcC,GAC1B,MAAMI,EAAoBjK,KAAKmT,yBAAyBvJ,GAClDmG,OAC2B,IAAtB9F,EACDjK,KAAK0Q,YAAY9G,GACjBwB,EAAOG,UAAUtB,GACrBI,EAAOrK,KAAKkT,WAAWtJ,OAAM1J,GAAW,GAC9CF,KAAKgQ,QAAQ3F,EAAM0F,EAAQlG,EAC/B,CAEOwJ,OAAOhP,EAAcoH,GACxB,MAAM6H,EAAe/J,KAAKD,IAAItJ,KAAKqE,KAAMrE,KAAK8M,aAI9C,GAHA9M,KAAKqE,KAAOA,EACZrE,KAAKyL,eAAiBA,EAEjBzL,KAAK4L,YAiBN,IAAK,IAAI5C,EAAI,EAAGA,EAAIhJ,KAAK2L,UAAU1K,OAAQ+H,IAAK,CAC5C,MAAMoD,EAAOpM,KAAK2L,UAAU3C,GAE5BoD,EAAK/H,KAAO+E,EACRG,KAAKyH,MAAMhR,KAAK4L,YAAY5C,GAAK3E,GACjC+H,EAAKhC,YACLgC,EAAK7B,YACP,KAxBa,CACnB,MAAMqG,EAAUjH,EAAM3J,KAAK2L,UAAU1K,QAC/BuM,EAAqBoD,EAAQC,QAC9B7H,GAAMhJ,KAAK2L,UAAU3C,GAAGyB,WAAaU,EAAe2F,MAEnDrD,EAAsBmD,EAAQC,QAC/B7H,GAAMhJ,KAAK2L,UAAU3C,GAAGyB,WAAaU,EAAe4F,OAGzD/Q,KAAKqN,OACDrN,KAAK2L,UAAU1K,OAAS,EACxBoD,EAAOiP,OACPpT,EACAsN,EACAC,EACF,CAaNzN,KAAKwQ,uBACLxQ,KAAKyQ,aACT,CAEQQ,SACJzD,EACAC,GAEA,MAAMX,EAAc9M,KAAK2L,UAAUO,QAAO,CAACC,EAAGnD,IAAMmD,EAAInD,EAAE3E,MAAM,GAEhErE,KAAKqN,OACDrN,KAAK2L,UAAU1K,OAAS,EACxBjB,KAAKgK,MAAQ8C,OACb5M,EACAsN,EACAC,GAEJzN,KAAKwQ,uBACLxQ,KAAKyQ,cACLzQ,KAAKiQ,iBACT,CAEQO,qBAAqB+C,GACzB,MAAMzG,EAAc9M,KAAK2L,UAAUO,QAAO,CAACC,EAAGnD,IAAMmD,EAAInD,EAAE3E,MAAM,GAChE,IAAImP,EAAaxT,KAAKqE,KAAOyI,EAE7B,MAAM8D,EAAUjH,EAAM3J,KAAK2L,UAAU1K,OAAS,GAAI,GAC5CuM,EAAqBoD,EAAQC,QAC9B7H,GAAMhJ,KAAK2L,UAAU3C,GAAGyB,WAAaU,EAAe2F,MAEnDrD,EAAsBmD,EAAQC,QAC/B7H,GAAMhJ,KAAK2L,UAAU3C,GAAGyB,WAAaU,EAAe4F,OAGzD,IAAK,MAAM1N,KAASoK,EAChBxE,EAAY2H,EAASvN,GAGzB,IAAK,MAAMA,KAASmK,EAChBrE,EAAUyH,EAASvN,GAGS,iBAArBkQ,GACPpK,EAAUyH,EAAS2C,GAGvB,IAAK,IAAIvK,EAAI,EAAkB,IAAfwK,GAAoBxK,EAAI4H,EAAQ3P,OAAQ+H,IAAK,CACzD,MAAMoD,EAAOpM,KAAK2L,UAAUiF,EAAQ5H,IAC9B3E,EAAO+E,EACTgD,EAAK/H,KAAOmP,EACZpH,EAAKhC,YACLgC,EAAK7B,aAITiJ,GAFkBnP,EAAO+H,EAAK/H,KAG9B+H,EAAK/H,KAAOA,CAAK,CAEzB,CAEQ4L,kBACAjQ,KAAKqP,oBAAsBrP,KAAK8M,YAAc,IAC9C9M,KAAK6L,aAAe7L,KAAK2L,UAAUpK,KAC9ByH,GAAMA,EAAE3E,KAAOrE,KAAK8M,cAGjC,CAEQ2D,cACJzQ,KAAK8M,YAAc9M,KAAK2L,UAAUO,QAAO,CAACC,EAAGnD,IAAMmD,EAAInD,EAAE3E,MAAM,GAC/D,IAAIoP,EAAM,EACV,MAAM3F,EAAc,GAEpB9N,KAAKyM,uBAEL,IAAK,IAAIzD,EAAI,EAAGA,EAAIhJ,KAAK2L,UAAU1K,OAAS,EAAG+H,IAAK,CAChDyK,GAAOzT,KAAK2L,UAAU3C,GAAG3E,KACzByJ,EAAE1K,KAAKqQ,GAEP,MAAMC,EAASnK,KAAKF,IAAIE,KAAKD,IAAI,EAAGmK,EAAM,GAAIzT,KAAKqE,KAAO,GAEtDrE,KAAK+L,eAAiBd,EAAYgB,aAClCjM,KAAK6M,OAAO7D,GAAG4B,UAAUC,MAAM8I,KAAO,GAAGD,MACzC1T,KAAK6M,OAAO7D,GAAG4B,UAAUC,MAAM+I,IAAM,OAErC5T,KAAK+L,eAAiBd,EAAY4I,WAClC7T,KAAK6M,OAAO7D,GAAG4B,UAAUC,MAAM8I,KAAO,MACtC3T,KAAK6M,OAAO7D,GAAG4B,UAAUC,MAAM+I,IAAM,GAAGF,MAAU,CAG1D1T,KAAK2L,UAAUjK,SAAQ,CAAC2I,EAAMrB,KACtBhJ,KAAK+L,eAAiBd,EAAYgB,aAClC5B,EAAKO,UAAUC,MAAMiJ,MAAQ,GAAGzJ,EAAKhG,SACrCgG,EAAKO,UAAUC,MAAM8I,KAAY,GAAL3K,EAAS,MAAQ,GAAG8E,EAAE9E,EAAI,OACtDqB,EAAKO,UAAUC,MAAM+I,IAAM,GAC3BvJ,EAAKO,UAAUC,MAAMkJ,OAAS,IAE9B/T,KAAK+L,eAAiBd,EAAY4I,WAClCxJ,EAAKO,UAAUC,MAAMkJ,OAAS,GAAG1J,EAAKhG,SACtCgG,EAAKO,UAAUC,MAAM+I,IAAW,GAAL5K,EAAS,MAAQ,GAAG8E,EAAE9E,EAAI,OACrDqB,EAAKO,UAAUC,MAAMiJ,MAAQ,GAC7BzJ,EAAKO,UAAUC,MAAM8I,KAAO,IAGhCtJ,EAAKA,KAAKgJ,OAAOhJ,EAAKhG,KAAMrE,KAAK0L,gBAAgB,GAEzD,CAEQ6G,mBAAmB3B,GAEvB,IAAK,MAAMvN,KAASuN,EAAS,CACzB,MAAML,EAAWvQ,KAAK2L,UAAUtI,GAEhC,GAAKkN,EAASpG,SAIVoG,EAAS7F,KACT,OAAOrH,CAAK,CAKpB,IAAK,MAAMA,KAASuN,EAAS,CACzB,MAAML,EAAWvQ,KAAK2L,UAAUtI,GAEhC,GACIkN,EAASpG,SACToG,EAAShG,YAAcgG,EAASnG,YAAc,EAE9C,OAGJ,IAAKmG,EAASpG,SAAWoG,EAAS7F,KAC9B,OAAOrH,CAAK,CAKxB,CAEQoJ,uBACJ,IAAIuH,GAAW,EACf,MAAMC,EAAgBjU,KAAK2L,UAAUpK,KAChCyH,GAAOgL,EAAWhL,EAAE3E,KAAO2E,EAAEoB,YAAc,GAAK4J,IAGrDA,GAAW,EACX,MAAME,EAAclU,KAAK2L,UAAUpK,KAC9ByH,GAAOgL,EAAWhL,EAAEuB,YAAcvB,EAAE3E,KAAO,GAAK2P,IAG/CG,EAAe,IAAInU,KAAK2L,WAAWyI,UACzCJ,GAAW,EACX,MAAMK,EAAcF,EACf5S,KAAKyH,GAAOgL,EAAWhL,EAAE3E,KAAO2E,EAAEoB,YAAc,GAAK4J,IACrDI,UAELJ,GAAW,EACX,MAAMM,EAAYH,EACb5S,KAAKyH,GAAOgL,EAAWhL,EAAEuB,YAAcvB,EAAE3E,KAAO,GAAK2P,IACrDI,UAEL,IAAIG,EAAW,EACf,IAAK,IAAIlR,EAAQ,EAAGA,EAAQrD,KAAK6M,OAAO5L,OAAQoC,IAAS,CACrD,MAAMqO,EAAO1R,KAAK6M,OAAOxJ,GAEzBkR,GADiBvU,KAAK2L,UAAUtI,GACXgB,KAErB,MAAMgF,IAAQ4K,EAAc5Q,IAAUiR,EAAUjR,EAAQ,IAClDiG,IAAQ4K,EAAY7Q,IAAUgR,EAAYhR,EAAQ,IAExD,GAAIgG,GAAOC,EAAK,CACZ,MAAM0E,EAAYrE,EAAMtG,GAAQ,GAC1B4K,EAActE,EAAMtG,EAAQ,EAAGrD,KAAK2L,UAAU1K,QAC9CqR,EAAkBtS,KAAKuS,mBAAmBvE,GAC1CwE,EAAiBxS,KAAKuS,mBAAmBtE,GAEzCuG,EACyB,iBAApBlC,IACNtS,KAAK2L,UAAU2G,GAAiBnI,QAC/BsK,EACwB,iBAAnBjC,IACNxS,KAAK2L,UAAU6G,GAAgBrI,QAGhCqK,GACAH,EAAYhR,KACXkR,EAAW,GAAKvU,KAAKuM,sBAEtBvM,KAAK0U,WAAWhD,EAAMxG,EAAUyJ,SAEhCF,GACAR,EAAc5Q,KACbkR,EAAWvU,KAAK8M,aAAe9M,KAAK0M,oBAErC1M,KAAK0U,WAAWhD,EAAMxG,EAAU0J,SAEhC5U,KAAK0U,WAAWhD,EAAMxG,EAAU2J,SAAS,MAEtCxL,IAAQC,EACftJ,KAAK0U,WAAWhD,EAAMxG,EAAUyJ,UACxBtL,GAAOC,EACftJ,KAAK0U,WAAWhD,EAAMxG,EAAU0J,SAEhC5U,KAAK0U,WAAWhD,EAAMxG,EAAU4J,QAAQ,CAGpD,CAEQJ,WAAWhD,EAAiBqD,GAChClO,EAAY6K,EAAK9G,UAAW,WAAYmK,IAAU7J,EAAU2J,UAC5DhO,EAAY6K,EAAK9G,UAAW,UAAWmK,IAAU7J,EAAU4J,SAC3DjO,EAAY6K,EAAK9G,UAAW,UAAWmK,IAAU7J,EAAU0J,SAC3D/N,EAAY6K,EAAK9G,UAAW,UAAWmK,IAAU7J,EAAUyJ,QAC/D,CAmIQpF,sBACJ,MAAMzL,EAAU2D,SAAS4J,cAAc,OAEvC,OADAvN,EAAQgD,UAAY,iBACbhD,CACX,CAEQ2L,sBACJ,MAAM3L,EAAU2D,SAAS4J,cAAc,OAEvC,OADAvN,EAAQgD,UAAY,iBACbhD,CACX,CAEQsL,kBACJ,MAAMtL,EAAU2D,SAAS4J,cAAc,OACjC2D,EACFhV,KAAK+L,eAAiBd,EAAYgB,WAC5B,aACA,WAEV,OADAnI,EAAQgD,UAAY,wBAAwBkO,IACrClR,CACX,CAEOrC,UACHzB,KAAK+M,cAActL,UACnBzB,KAAKiN,cAAcxL,UACnBzB,KAAKmN,iBAAiB1L,UAEtB,IAAK,IAAIuH,EAAI,EAAGA,EAAIhJ,KAAK8D,QAAQ5C,SAASD,OAAQ+H,IAC9C,GAAIhJ,KAAK8D,QAAQ5C,SAASkL,KAAKpD,KAAOhJ,KAAK8D,QAAS,CAChD9D,KAAK8D,QAAQ0N,YAAYxR,KAAK8D,SAC9B,KAAM,CAId,IAAK,MAAMyM,KAAYvQ,KAAK2L,UACxB4E,EAAS9O,UAGbzB,KAAK8D,QAAQ6C,QACjB,ECjhCG,MAAMsO,UAAiBnQ,EAWtBoI,mBACA,OAA6BlN,KAAKkV,UAAUhI,YAChD,CACIE,sBACA,OAA6BpN,KAAKkV,UAAU9H,eAChD,CAEIhD,kBACA,OAAOpK,KAAKkV,UAAU9K,WAC1B,CAEIG,kBACA,OAAOvK,KAAKkV,UAAU3K,WAC1B,CAEIuB,kBACA,OAAO9L,KAAKkV,UAAUpJ,WAC1B,CAEIzH,WACA,OAAOrE,KAAKkV,UAAU7Q,IAC1B,CAEIoH,qBACA,OAAOzL,KAAKkV,UAAUzJ,cAC1B,CAEAtM,YACIyL,EACAhI,GAAwE,MAExEpD,QAvCI,KAAA2V,UAAwB,GAGxB,KAAAC,eAAgB,EAEP,KAAAC,aAAe,IAAI9S,EAC3B,KAAA4O,YAA2BnR,KAAKqV,aAAatS,MAmClD/C,KAAK+L,aAAkC,QAAnBlK,EAAAe,EAAQkJ,mBAAW,IAAAjK,EAAAA,EAAIoJ,EAAY4I,SAEvD7T,KAAK8D,QAAU2D,SAAS4J,cAAc,OACtCrR,KAAK8D,QAAQgD,UAAY,iBAEzB8D,EAAU8E,YAAY1P,KAAK8D,SAE3B9D,KAAKkV,UAAY,IAAI1J,EAAUxL,KAAK8D,QAAS,CACzCgI,YAAa9L,KAAK+L,aAClBsD,oBAAoB,EACpBO,WAAYhN,EAAQgN,aAKxB5P,KAAKsV,WAAW5T,SAAS6T,IACrB,MAAM5P,EAAa,IAAIb,EACnByQ,EAAKC,2BAA0B,KAC3BxV,KAAKyV,iBACLzV,KAAKqV,aAAa5R,UAAKvD,EAAU,KAInCwV,EAAqB,CACvBH,OACA5P,WAAY,CACRlE,QAASA,KACLkE,EAAWlE,SAAS,IAKhCzB,KAAKmV,UAAU/R,KAAKsS,GACpBH,EAAK9J,eAAiBzL,KAAKkV,UAAUzJ,cAAc,IAGvDzL,KAAKqF,eACDrF,KAAKqV,aACLrV,KAAKkV,UAAUlI,cAAa,KACxBhN,KAAKqV,aAAa5R,UAAKvD,EAAU,IAErCF,KAAKkV,UAAUhI,cAAa,KACxBlN,KAAKqV,aAAa5R,MAAM,IAE5BzD,KAAKkV,UAAU9H,iBAAgB,KAC3BpN,KAAKqV,aAAa5R,MAAM,IAGpC,CAEOkS,QACHJ,EACAlR,EACAhB,EACA+N,QADK,IAAL/N,IAAAA,EAAQrD,KAAKkV,UAAUjU,aACb,IAAVmQ,IAAAA,GAAa,GAEb,MAAMzL,EAAa4P,EAAKC,2BAA0B,KAC9CxV,KAAKyV,iBACLzV,KAAKqV,aAAa5R,UAAKvD,EAAU,IAG/BwV,EAAqB,CACvBH,OACA5P,WAAY,CACRlE,QAASA,KACLkE,EAAWlE,SAAS,IAKhCzB,KAAKmV,UAAU5R,OAAOF,EAAO,EAAGqS,GAEhCH,EAAK9J,eAAiBzL,KAAKkV,UAAUzJ,eACrCzL,KAAKkV,UAAUlF,QAAQuF,EAAMlR,EAAMhB,EAAO+N,EAC9C,CAEAV,YAAYrN,GACR,OAAOrD,KAAKkV,UAAUxE,YAAYrN,EACtC,CAEOiS,WACH,OAAOtV,KAAKkV,UAAUhE,UAC1B,CAEO0E,WACHvS,EACAT,QAAA,IAAAA,IAAAA,EAAoC,CAAEiT,aAAa,IAEnD,MAAMH,EAAW1V,KAAKmV,UAAU5R,OAAOF,EAAO,GAAG,GAQjD,OAPArD,KAAKkV,UAAUhC,WAAW7P,GAErBT,EAAQiT,cACTH,EAAS/P,WAAWlE,UACpBiU,EAASH,KAAK9T,WAGXiU,CACX,CAEOtC,SAASxJ,EAAcC,GAC1B,GAAID,IAASC,EACT,OAGJ,MAAMQ,EAAOrK,KAAK4V,WAAWhM,EAAM,CAAEiM,aAAa,IAElD7V,KAAKoV,eAAgB,EACrB,IACIpV,KAAK2V,QAAQtL,EAAKkL,KAAMlL,EAAKkL,KAAKlR,KAAMwF,GAAI,EAAO,CACtD,QACG7J,KAAKoV,eAAgB,CAAM,CAEnC,CAEO/B,OAAOhP,EAAcoH,GACxBzL,KAAKkV,UAAU7B,OAAOhP,EAAMoH,EAChC,CAEQgK,iBACAzV,KAAKoV,gBAILpV,KAAK8V,iBACLnR,aAAa3E,KAAK8V,gBAClB9V,KAAK8V,oBAAiB5V,GAG1B0G,EAAW5G,KAAK8D,QAAS,YAEzB9D,KAAK8V,eAAiBlR,YAAW,KAC7B5E,KAAK8V,oBAAiB5V,EACtBoG,EAActG,KAAK8D,QAAS,WAAW,GACxC,KACP,CAEOrC,UACHjC,MAAMiC,UAEFzB,KAAK8V,iBACLnR,aAAa3E,KAAK8V,gBAClB9V,KAAK8V,oBAAiB5V,GAG1BF,KAAKmV,UAAUzT,SAASgU,IACpBA,EAAS/P,WAAWlE,UACpBiU,EAASH,KAAK9T,SAAS,IAE3BzB,KAAKmV,UAAY,GAEjBnV,KAAKkV,UAAUzT,UACfzB,KAAK8D,QAAQ6C,QACjB,EC1MG,MAAMoP,EAWGC,mBACR,OAAOhW,KAAKqK,KAAK2L,YACrB,CAEYC,mBACR,OAAOjW,KAAKqK,KAAK4L,YACrB,CAEYC,oBACR,OAAOlW,KAAKqK,KAAK6L,aACrB,CAEYC,oBACR,OAAOnW,KAAKqK,KAAK8L,aACrB,CAEI1L,eACA,OAAOzK,KAAKqK,KAAKI,QACrB,CAEIC,WACA,OAAO1K,KAAKqK,KAAKK,IACrB,CAEIN,kBACA,OAAOpK,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKkW,cACLlW,KAAKgW,YACf,CAEIzL,kBACA,OAAOvK,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKmW,cACLnW,KAAKiW,YACf,CAEIG,4BACA,OAAOpW,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKgW,aACLhW,KAAKkW,aACf,CAEIG,4BACA,OAAOrW,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKiW,aACLjW,KAAKmW,aACf,CAEI1K,qBACA,OAAOzL,KAAK0L,eAChB,CAEIrH,WACA,OAAOrE,KAAKgK,KAChB,CAEIlG,cACA,OAAO9D,KAAKqK,KAAKvG,OACrB,CAEIgQ,YACA,OAAO9T,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKyL,eACLzL,KAAKqE,IACf,CAEI0P,aACA,OAAO/T,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKqE,KACLrE,KAAKyL,cACf,CAEAtM,YACoBkL,EACPyB,EACTL,EACApH,QAAI,IAAJA,IAAAA,EAAO,GAHS,KAAAgG,KAAAA,EACP,KAAAyB,YAAAA,EApFI,KAAAuJ,aAAe,IAAI9S,EAI3B,KAAA4O,YACLnR,KAAKqV,aAAatS,MAmFlB/C,KAAK0L,gBAAkBD,EACvBzL,KAAKgK,MAAQ3F,EAEbrE,KAAK0F,YAAc1F,KAAKqK,KAAK8G,aAAapO,IAClCA,EACA/C,KAAKqV,aAAa5R,KAAK,CACnBY,KACIrE,KAAK8L,cAAgBb,EAAY4I,SAC3B9Q,EAAM+Q,MACN/Q,EAAMgR,OAChBtI,eACIzL,KAAK8L,cAAgBb,EAAY4I,SAC3B9Q,EAAMgR,OACNhR,EAAM+Q,QAGpB9T,KAAKqV,aAAa5R,KAAK,CAAC,EAAG,GAGvC,CAEOsH,WAAWZ,GACVnK,KAAKqK,KAAKU,aACV/K,KAAKqK,KAAKU,WAAWZ,GACrBnK,KAAKqV,aAAa5R,KAAK,CAAC,GAEhC,CAEO4P,OAAOhP,EAAcoH,GACxBzL,KAAKgK,MAAQ3F,EACbrE,KAAK0L,gBAAkBD,EAEvBzL,KAAKqK,KAAKgJ,OAAOrT,KAAK8T,MAAO9T,KAAK+T,OACtC,CAEOtS,UACHzB,KAAKqV,aAAa5T,UAClBzB,KAAK0F,YAAYjE,SACrB,ECtHG,MAAM6U,UAAmBxR,EAgBxBgP,YACA,OAAO9T,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKqE,KACLrE,KAAKyL,cACf,CAEIsI,aACA,OAAO/T,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKyL,eACLzL,KAAKqE,IACf,CAEI+F,kBACA,OAAgC,IAAzBpK,KAAKkB,SAASD,OACf,EACAsI,KAAKD,OAAOtJ,KAAKkB,SAASK,KAAKgV,GAAMA,EAAEH,wBACjD,CAEI7L,kBACA,OAAOhB,KAAKF,OAAOrJ,KAAKkB,SAASK,KAAKgV,GAAMA,EAAEF,wBAClD,CAEID,4BACA,OAAOpW,KAAKkV,UAAU9K,WAC1B,CAEIiM,4BACA,OAAOrW,KAAKkV,UAAU3K,WAC1B,CAEIkB,qBACA,OAAOzL,KAAK0L,eAChB,CAEIrH,WACA,OAAOrE,KAAKgK,KAChB,CAEIgM,mBACA,OAAOhW,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKoW,sBACLpW,KAAKoK,WACf,CAEI8L,oBACA,OAAOlW,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKoK,YACLpK,KAAKoW,qBACf,CAEIH,mBACA,OAAOjW,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKqW,sBACLrW,KAAKuK,WACf,CAEI4L,oBACA,OAAOnW,KAAK8L,cAAgBb,EAAYgB,WAClCjM,KAAKuK,YACLvK,KAAKqW,qBACf,CAEI5L,eACA,GAA6B,IAAzBzK,KAAKkB,SAASD,OACd,OAAOkK,EAAeqL,OAG1B,MAAMC,EAAazW,KAAKkB,SAASK,KAAKgV,QACZ,IAAfA,EAAE9L,SACHU,EAAeqL,OACfD,EAAE9L,WAGZ,OAAIgM,EAAWC,MAAMC,GAAMA,IAAMxL,EAAe4F,OACrC5F,EAAe4F,KACf0F,EAAWC,MAAMC,GAAMA,IAAMxL,EAAe2F,MAC5C3F,EAAe2F,IAGnB3F,EAAeqL,MAC1B,CAEArX,YACa2M,EACAuD,EACAM,EACTtL,EACAoH,EACAmL,GAQA,GANApX,QAPS,KAAAsM,YAAAA,EACA,KAAAuD,mBAAAA,EACA,KAAAM,OAAAA,EAhGL,KAAAkH,oBAAmChW,EAAWgE,KAEtC,KAAA3D,SAAmB,GAElB,KAAAmU,aAAe,IAAI9S,EAI3B,KAAA4O,YACLnR,KAAKqV,aAAatS,MA6FlB/C,KAAK0L,gBAAkBD,EACvBzL,KAAKgK,MAAQ3F,EACbrE,KAAK8D,QAAU2D,SAAS4J,cAAc,OACtCrR,KAAK8D,QAAQgD,UAAY,cAEpB8P,EAOE,CACH,MAAMhH,EAAa,CACfC,MAAO+G,EAAiBrV,KAAKuV,IAClB,CACHzM,KAAMyM,EAAgBC,KACtB1S,KAAMyS,EAAgBC,KAAK1S,KAC3B8F,UACI2M,EAAgBC,gBAAgBhB,QACJ7V,IAA5B4W,EAAgB3M,UACV2M,EAAgB3M,YAIlC9F,KAAMrE,KAAKyL,gBAGfzL,KAAKkB,SAAW0V,EAAiBrV,KAAKgV,GAAMA,EAAEQ,OAC9C/W,KAAKkV,UAAY,IAAI1J,EAAUxL,KAAK8D,QAAS,CACzCgI,YAAa9L,KAAK8L,YAClB8D,aACAP,sBACD,MA3BHrP,KAAKkV,UAAY,IAAI1J,EAAUxL,KAAK8D,QAAS,CACzCgI,YAAa9L,KAAK8L,YAClBuD,qBACAM,WAEJ3P,KAAKkV,UAAU7B,OAAOrT,KAAKqE,KAAMrE,KAAKyL,gBAyB1CzL,KAAKqF,eACDrF,KAAKqV,aACLrV,KAAKkV,UAAUlI,cAAa,KACxBhN,KAAKqV,aAAa5R,KAAK,CAAC,EAAE,KAIlCzD,KAAKgX,qBACT,CAEAjM,WAAWZ,GACP,IAAK,MAAM3I,KAASxB,KAAKkB,SACrBM,EAAMuJ,WAAWZ,EAEzB,CAEA8M,eAAe5T,GACX,GAAIA,EAAQ,GAAKA,GAASrD,KAAKkB,SAASD,OACpC,MAAM,IAAIa,MAAM,iBAGpB,OAAO9B,KAAKkV,UAAU7E,cAAchN,EACxC,CAEA6T,gBAAgB7T,EAAe8G,GAC3B,GAAI9G,EAAQ,GAAKA,GAASrD,KAAKkB,SAASD,OACpC,MAAM,IAAIa,MAAM,iBAGhB9B,KAAKkV,UAAU7E,cAAchN,KAAW8G,GAI5CnK,KAAKkV,UAAU5E,eAAejN,EAAO8G,EACzC,CAEAgN,UAAUvN,EAAcC,GACpB,GAAID,IAASC,EACT,OAGJ,GAAID,EAAO,GAAKA,GAAQ5J,KAAKkB,SAASD,OAClC,MAAM,IAAIa,MAAM,sBAGhB8H,EAAOC,GACPA,IAGJ7J,KAAKkV,UAAU9B,SAASxJ,EAAMC,GAE9B,MAAMrI,EAAQxB,KAAKoX,aAAaxN,GAChC5J,KAAKqX,UAAU7V,EAAOqI,EAC1B,CAEAyN,aAAajU,GACT,GAAIA,EAAQ,GAAKA,GAASrD,KAAKkB,SAASD,OACpC,MAAM,IAAIa,MAAM,iBAGpB,OAAO9B,KAAKkV,UAAUxE,YAAYrN,EACtC,CAEAkU,YAAYlU,EAAegB,GACvB,GAAIhB,EAAQ,GAAKA,GAASrD,KAAKkB,SAASD,OACpC,MAAM,IAAIa,MAAM,iBAGpB9B,KAAKkV,UAAUvE,WAAWtN,EAAOgB,EACrC,CAEOgP,OAAOhP,EAAcoH,GACxBzL,KAAKgK,MAAQyB,EACbzL,KAAK0L,gBAAkBrH,EAEvBrE,KAAKkV,UAAU7B,OAAO5H,EAAgBpH,EAC1C,CAEOmT,SACHT,EACA1S,EACAhB,EACA+N,GAEA,GAAI/N,EAAQ,GAAKA,EAAQrD,KAAKkB,SAASD,OACnC,MAAM,IAAIa,MAAM,iBAGpB9B,KAAKkV,UAAUlF,QAAQ+G,EAAM1S,EAAMhB,EAAO+N,GAC1CpR,KAAKqX,UAAUN,EAAM1T,EACzB,CAEAoU,0BAA0BpU,GACtB,GAAIA,EAAQ,GAAKA,GAASrD,KAAKkB,SAASD,OACpC,MAAM,IAAIa,MAAM,iBAGpB,OAAO9B,KAAKkV,UAAU/B,yBAAyB9P,EACnD,CAEOmO,YAAYnO,EAAe0M,GAC9B,GAAI1M,EAAQ,GAAKA,GAASrD,KAAKkB,SAASD,OACpC,MAAM,IAAIa,MAAM,iBAIpB,OADA9B,KAAKkV,UAAUhC,WAAW7P,EAAO0M,GAC1B/P,KAAKoX,aAAa/T,EAC7B,CAEQgU,UAAUN,EAAY1T,GAC1BrD,KAAKkB,SAASqC,OAAOF,EAAO,EAAG0T,GAC/B/W,KAAKgX,qBACT,CAEQI,aAAa/T,GACjB,MAAO7B,GAASxB,KAAKkB,SAASqC,OAAOF,EAAO,GAG5C,OAFArD,KAAKgX,sBAEExV,CACX,CAEQwV,sBACJhX,KAAK6W,oBAAoBpV,UAEzBzB,KAAK6W,oBAAsBjW,EAAME,OAC1Bd,KAAKkB,SAASK,KAAKgV,GAAMA,EAAEpF,cADPvQ,EAExB8C,IAKC1D,KAAKqV,aAAa5R,KAAK,CAAEY,KAAMX,EAAE+H,gBAAiB,GAE1D,CAEOhK,UACHzB,KAAK6W,oBAAoBpV,UACzBzB,KAAKkV,UAAUzT,UACfzB,KAAKkB,SAASQ,SAASF,GAAUA,EAAMC,YAEvCjC,MAAMiC,SACV,EC5RJ,SAASiW,EAASC,EAAoBC,GAClC,GAAID,aAAwB5B,EACxB,OAAO4B,EAEX,GAAIA,aAAwBrB,EACxB,OAAOoB,EACHC,EAAazW,SAAS0W,EAAOD,EAAazW,SAASD,OAAS,EAAI,GAChE2W,GAGR,MAAM,IAAI9V,MAAM,eACpB,CAEA,SAAS+V,EACLd,EACA1S,EACAoH,GAEA,GAAIsL,aAAgBT,EAAY,CAC5B,MAAMxM,EAAS,IAAIwM,EACfwB,EAAWf,EAAKjL,aAChBiL,EAAK1H,mBACL0H,EAAKpH,OACLtL,EACAoH,GAGJ,IAAIsM,EAAY,EAEhB,IAAK,IAAI/O,EAAI+N,EAAK7V,SAASD,OAAS,EAAG+H,GAAK,EAAGA,IAAK,CAChD,MAAMxH,EAAQuV,EAAK7V,SAAS8H,GACtBgP,EACFxW,aAAiB8U,EAAa9U,EAAMiK,eAAiBjK,EAAM6C,KAE/D,IAAIkN,EACc,IAAdwF,EAAK1S,KACC,EACAkF,KAAKyH,MAAO3M,EAAO2T,EAAajB,EAAK1S,MAC/C0T,GAAaxG,EAGH,IAANvI,IACAuI,GAAWlN,EAAO0T,GAGtBjO,EAAO0N,SACHK,EAASrW,EAAOiK,EAAgB8F,GAChCA,EACA,GACA,EACF,CAGN,OAAOzH,CAAY,CAEnB,OAAO,IAAIiM,EACPgB,EAAK1M,KACLyN,EAAWf,EAAKjL,aAChBL,EAGZ,CA0BO,SAASwM,EAAgBnU,GAC5B,MAAMoU,EAAgBpU,EAAQoU,cAE9B,IAAKA,EACD,MAAM,IAAIpW,MAAM,wBAGpB,GAAI,gBAAgBqW,KAAKD,EAAcpR,WACnC,MAAO,GAGX,MAAMzD,EAnCH,SAAuBS,GAC1B,MAAMoU,EAAgBpU,EAAQoU,cAE9B,IAAKA,EACD,MAAM,IAAIpW,MAAM,wBAGpB,IAAIsW,EAAKF,EAAcG,kBACnBhV,EAAQ,EAEZ,KAAO+U,IAAOtU,GAAWsU,IAAOF,EAAcI,kBAAoBF,GAC9DA,EAAKA,EAAGG,mBACRlV,IAGJ,OAAOA,CACX,CAmBkBmV,CAAcN,GAE5B,MAAO,IAAID,EADMC,EAAcA,cAAeA,cAAeA,eACvB7U,EAC1C,CAEO,SAASoV,EACZC,EACAC,EACAC,GAEA,MAAM9M,EAwBH,SACH4M,EACAC,GAEA,OAAOA,EAAS1X,OAAS,GAAM,EACzB6W,EAAWY,GACXA,CACV,CA/BwBG,CAAuBH,EAAiBC,GACtDG,EAiBH,SAAiCF,GACpC,MAAqB,QAAdA,GAAqC,WAAdA,EACxB3N,EAAY4I,SACZ5I,EAAYgB,UACtB,CArBiC8M,CAAwBH,GAErD,GAAI9M,IAAgBgN,EAAsB,CACtC,MAAOE,EAAMC,GAAUtQ,EAAKgQ,GAC5B,IAAItV,EAAQ4V,EAMZ,MAJkB,UAAdL,GAAuC,WAAdA,IACzBvV,GAAS,GAGN,IAAI2V,EAAM3V,EAAO,CACrB,CACH,MAAMA,EAAsB,UAAduV,GAAuC,WAAdA,EAAyB,EAAI,EACpE,MAAO,IAAID,EAAUtV,EAAO,CAEpC,CAqCO,MAAMyU,EAAchM,GACvBA,IAAgBb,EAAYgB,WACtBhB,EAAY4I,SACZ5I,EAAYgB,WA4BtB,MAAMiN,EAAsBA,CACxBnC,EACAjL,KAEA,MAAMzH,EACFyH,IAAgBb,EAAY4I,SAAWkD,EAAKoC,IAAIrF,MAAQiD,EAAKoC,IAAIpF,OAErE,OApBG,SACHgD,GAEA,QAAUA,EAAa7V,QAC3B,CAgBSkY,CAAiBrC,GAaf,CACHhT,KAAM,SACN5D,KAAM4W,EAAK7V,SAASK,KAAKgV,GACrB2C,EAAoB3C,EAAGuB,EAAWhM,MAEtCzH,QAjBsC,iBAA3B0S,EAAK9M,kBACL,CACHlG,KAAM,OACN5D,KAAM4W,EAAK1M,KAAKgP,SAChBhV,KAAM0S,EAAK9M,kBACXE,SAAS,GAIV,CAAEpG,KAAM,OAAQ5D,KAAM4W,EAAK1M,KAAKgP,SAAUhV,OASpD,EAkCE,MAAMiV,EAYErY,aACP,OAAOjB,KAAKuZ,MAAQvZ,KAAKuZ,MAAMrY,SAASD,OAAS,CACrD,CAEW6K,kBACP,OAAO9L,KAAKwZ,KAAK1N,WACrB,CAEWA,gBAAYA,GACnB,GAAI9L,KAAKwZ,KAAK1N,cAAgBA,EAC1B,OAGJ,MAAM,KAAEzH,EAAI,eAAEoH,GAAmBzL,KAAKwZ,KACtCxZ,KAAKwZ,KAAO3B,EAAS7X,KAAKwZ,KAAM/N,EAAgBpH,GAChDrE,KAAKwZ,KAAKnG,OAAOhP,EAAMoH,EAC3B,CAEIqI,YACA,OAAO9T,KAAKwZ,KAAK1F,KACrB,CACIC,aACA,OAAO/T,KAAKwZ,KAAKzF,MACrB,CAEIiC,mBACA,OAAOhW,KAAKwZ,KAAKxD,YACrB,CACIE,oBACA,OAAOlW,KAAKwZ,KAAKtD,aACrB,CACID,mBACA,OAAOjW,KAAKwZ,KAAKrD,aACrB,CACIA,oBACA,OAAOnW,KAAKwZ,KAAKrD,aACrB,CAEOsD,YAGH,MAAO,CACHD,KAHSN,EAAoBlZ,KAAK0Z,UAAW1Z,KAAK8L,aAIlDgI,MAAO9T,KAAK8T,MACZC,OAAQ/T,KAAK+T,OACbjI,YAAa9L,KAAK8L,YAE1B,CAEOrK,UACHzB,KAAK2F,WAAWlE,UAChBzB,KAAKqV,aAAa5T,UAClBzB,KAAKwZ,KAAK/X,UAEVzB,KAAK8D,QAAQ6C,QACjB,CAEOhE,QACH,MAAMmJ,EAAc9L,KAAKwZ,KAAK1N,YAC9B9L,KAAKwZ,KAAO,IAAIlD,EACZxK,EACA9L,KAAKqP,mBACLrP,KAAK2P,OACL3P,KAAKwZ,KAAKnV,KACVrE,KAAKwZ,KAAK/N,eAElB,CAEOkO,YAAYC,EAAWC,GAC1B,MAAM/N,EAAc8N,EAAK9N,YACnBiI,EACFjI,IAAgBb,EAAY4I,SAAW+F,EAAK7F,OAAS6F,EAAK9F,MAC9D9T,KAAK8Z,aACDF,EAAKJ,KACL1N,EACA+N,EACA9F,EAER,CAEQ+F,aACJN,EACA1N,EACA+N,EACApO,GAEAzL,KAAKwZ,KAAOxZ,KAAK+Z,iBACbP,EACA1N,EACA+N,EACApO,EAER,CAEQsO,iBACJhD,EACAjL,EACA+N,EACApO,GAEA,IAAI3B,EACJ,GAAkB,WAAdiN,EAAKhT,KAAmB,CACxB,MACM7C,EADqB6V,EAAK5W,KACIoB,KAAKyY,IAC9B,CACHjD,KAAM/W,KAAK+Z,iBACPC,EACAlC,EAAWhM,GACX+N,EACA9C,EAAK1S,MAET8F,QAAU6P,EAAyC7P,YAI3DL,EAAS,IAAIwM,EACTxK,EACA9L,KAAKqP,mBACLrP,KAAK2P,OACLoH,EAAK1S,KACLoH,EAEAvK,EACF,MAEF4I,EAAS,IAAIiM,EACT8D,EAAaI,SAASlD,GACtBjL,EACAL,EACAsL,EAAK1S,MAIb,OAAOyF,CACX,CAEY0P,WACR,OAAOxZ,KAAKuZ,KAChB,CAEYC,SAAKA,GACb,MAAMU,EAAUla,KAAKuZ,MAEjBW,IACAA,EAAQzY,UACRzB,KAAK8D,QAAQ0N,YAAY0I,EAAQpW,UAGrC9D,KAAKuZ,MAAQC,EACbxZ,KAAK8D,QAAQ4L,YAAY1P,KAAKuZ,MAAMzV,SACpC9D,KAAK2F,WAAW3D,MAAQhC,KAAKuZ,MAAMpI,aAAazN,IAC5C1D,KAAKqV,aAAa5R,KAAKC,EAAE,GAEjC,CAMOyW,kCACH,IAAKna,KAAKuZ,MACN,OAGJ,MAAMW,EAAUla,KAAKwZ,KAWrB,GAVAU,EAAQpW,QAAQ6C,SAEhB3G,KAAKuZ,MAAQ,IAAIjD,EACbwB,EAAWoC,EAAQpO,aACnB9L,KAAKqP,mBACLrP,KAAK2P,OACL3P,KAAKwZ,KAAK/N,eACVzL,KAAKwZ,KAAKnV,MAGkB,IAA5B6V,EAAQhZ,SAASD,aAEd,GAAgC,IAA5BiZ,EAAQhZ,SAASD,OAAc,CAEtC,MAAMmZ,EAAiBF,EAAQhZ,SAAS,GAC1BgZ,EAAQ1I,YAAY,GAC5B/P,UACNyY,EAAQzY,UAERzB,KAAKuZ,MAAM/B,SAOPK,EACIuC,EACAA,EAAe3O,eACf2O,EAAe/V,MAEnB+G,EAAOC,WACP,EACF,MAEFrL,KAAKuZ,MAAM/B,SAAS0C,EAAS9O,EAAOC,WAAY,GAGpDrL,KAAK8D,QAAQ4L,YAAY1P,KAAKuZ,MAAMzV,SAEpC9D,KAAK2F,WAAW3D,MAAQhC,KAAKuZ,MAAMpI,aAAazN,IAC5C1D,KAAKqV,aAAa5R,KAAKC,EAAE,GAEjC,CAEO+F,KAAKkP,GACR,OAAO3Y,KAAKqa,gBAAgB1B,EAChC,CAEO3E,SAAS2E,GACZ,OAAO3Y,KAAKqa,gBAAgB1B,GAAU,EAC1C,CAIAe,QAAQf,GACJ,MAAM5B,EAAO4B,EAAW3Y,KAAKsa,QAAQ3B,GAAU,GAAK3Y,KAAKwZ,KACzD,OAAOxZ,KAAKua,UAAUxD,EAAM/W,KAAK8L,YACrC,CAEQyO,UACJxD,EACAjL,EACA7B,GAEA,MAAMkP,EAAM,CAAEpF,OAAQgD,EAAKhD,OAAQD,MAAOiD,EAAKjD,OAE/C,GAAIiD,aAAgBhB,EAChB,MAAO,CAAEoD,MAAK9O,KAAM0M,EAAK1M,KAAMJ,qBAGnC,MAAM/I,EAAkC,GAExC,IAAK,IAAI8H,EAAI,EAAGA,EAAI+N,EAAK7V,SAASD,OAAQ+H,IAAK,CAC3C,MAAMxH,EAAQuV,EAAK7V,SAAS8H,GACtBwR,EAAwBzD,EAAKU,0BAA0BzO,GAE7D9H,EAASkC,KACLpD,KAAKua,UACD/Y,EACAsW,EAAWhM,GACX0O,GAEN,CAGN,MAAO,CAAErB,MAAKjY,WAClB,CAEQmZ,gBAAgB1B,EAAoBvE,QAAO,IAAPA,IAAAA,GAAU,GAClD,MAAOqG,EAAM1D,GAAQ/W,KAAKsa,QAAQ3B,GAElC,KAAM5B,aAAgBhB,GAClB,MAAM,IAAIjU,MAAM,oBAGpB,IAAK,IAAIkH,EAAIyR,EAAKxZ,OAAS,EAAG+H,GAAK,EAAGA,IAAK,CACvC,MAAM0R,EAAID,EAAKzR,GACT2R,EAAIhC,EAAS3P,IAAM,EAIzB,GAHkCoL,EAC5BuG,EAAI,GAAK,EACTA,EAAI,EAAID,EAAExZ,SAASD,OAErB,OAAOyW,EAASgD,EAAExZ,SAASkT,EAAUuG,EAAI,EAAIA,EAAI,GAAIvG,EAAQ,CAIrE,OAAOsD,EAAS1X,KAAKwZ,KAAMpF,EAC/B,CAEAjV,YACakQ,EACAM,EACT7D,GAFS,KAAAuD,mBAAAA,EACA,KAAAM,OAAAA,EA9RL,KAAAhK,WAAgC,IAAIF,EAE3B,KAAA4P,aAAe,IAAI9S,EAI3B,KAAA4O,YACLnR,KAAKqV,aAAatS,MA0RlB/C,KAAK8D,QAAU2D,SAAS4J,cAAc,OACtCrR,KAAK8D,QAAQgD,UAAY,YACzB9G,KAAKwZ,KAAO,IAAIlD,EACZxK,EACAuD,EACAM,EACA,EACA,EAER,CAEAU,cAAcsI,GACV,MAAOK,EAAM3V,GAASsF,EAAKgQ,IACpB,CAAEiC,GAAU5a,KAAKsa,QAAQtB,GAEhC,KAAM4B,aAAkBtE,GACpB,MAAM,IAAIxU,MAAM,yBAGpB,OAAO8Y,EAAO3D,eAAe5T,EACjC,CAEAiN,eAAeqI,EAAoBxO,GAC/B,MAAO6O,EAAM3V,GAASsF,EAAKgQ,IACpB,CAAEiC,GAAU5a,KAAKsa,QAAQtB,GAEhC,KAAM4B,aAAkBtE,GACpB,MAAM,IAAIxU,MAAM,yBAGpB8Y,EAAO1D,gBAAgB7T,EAAO8G,EAClC,CAEOiJ,SAASyH,EAA0BjR,EAAcC,GACpD,MAAO,CAAE+Q,GAAU5a,KAAKsa,QAAQO,GAEhC,KAAMD,aAAkBtE,GACpB,MAAM,IAAIxU,MAAM,oBAGpB8Y,EAAOzD,UAAUvN,EAAMC,EAC3B,CAEOmG,QACH3F,EACAhG,EACAsU,GAEA,MAAOK,EAAM3V,GAASsF,EAAKgQ,IAEpBmC,EAAcF,GAAU5a,KAAKsa,QAAQtB,GAE5C,GAAI4B,aAAkBtE,EAAY,CAC9B,MAAMS,EAAO,IAAIhB,EACb1L,EACAyN,EAAW8C,EAAO9O,aAClB8O,EAAOnP,gBAEXmP,EAAOpD,SAAST,EAAM1S,EAAMhB,EAAO,KAChC,CACH,MAAO0X,KAAgBxM,GAAK,IAAIuM,GAAc1G,WACvC4G,KAAgBC,GAAM,IAAIjC,GAAM5E,UAEvC,IAAI8G,EAAkC,EAEtC,MAAMC,EACFJ,EAAYtD,0BAA0BuD,GACC,iBAAhCG,IACPD,EAAiB9P,EAAOG,UAAU4P,IAGxBJ,EAAYvJ,YAAYwJ,GAChCvZ,UAEN,MAAM2Z,EAAY,IAAI9E,EAClBsE,EAAO9O,YACP9L,KAAKqP,mBACLrP,KAAK2P,OACLiL,EAAOvW,KACPuW,EAAOnP,gBAEXsP,EAAYvD,SAAS4D,EAAWR,EAAOvW,KAAM2W,GAE7C,MAAMK,EAAa,IAAItF,EACnB6E,EAAOvQ,KACP0Q,EAAYjP,YACZ8O,EAAOvW,MAEX+W,EAAU5D,SAAS6D,EAAYH,EAAgB,GAE3B,iBAAT7W,GAAmC,UAAdA,EAAKN,OACjCM,EAAO,CAAEN,KAAM,QAASV,MAAO,IAGnC,MAAM0T,EAAO,IAAIhB,EACb1L,EACA0Q,EAAYjP,YACZ8O,EAAOvW,MAEX+W,EAAU5D,SAAST,EAAM1S,EAAMhB,EAAO,CAE9C,CAEOsD,OAAO0D,EAAiB0F,GAC3B,MAAM4I,EAAWV,EAAgB5N,EAAKvG,SACtC,OAAO9D,KAAKkT,WAAWyF,EAAU5I,EACrC,CAEAmD,WAAWyF,EAAoB5I,GAC3B,MAAOiJ,EAAM3V,GAASsF,EAAKgQ,IACpBmC,EAAcF,GAAU5a,KAAKsa,QAAQtB,GAE5C,KAAM4B,aAAkBtE,GACpB,MAAM,IAAIxU,MAAM,oBAGpB,MAAMwZ,EAAeV,EAAO1Z,SAASmC,GAErC,KAAMiY,aAAwBvF,GAC1B,MAAM,IAAIjU,MAAM,oBAMpB,GAHA8Y,EAAOpJ,YAAYnO,EAAO0M,GAC1BuL,EAAa7Z,UAEkB,IAA3BmZ,EAAO1Z,SAASD,OAChB,OAAOqa,EAAajR,KASxB,MAAMkR,EAAUX,EAAO1Z,SAAS,GAEhC,GAA4B,IAAxB4Z,EAAa7Z,OAGb,OAAIsa,aAAmBxF,IASvB6E,EAAOpJ,YAAY,EAAGzB,GAGtB/P,KAAKwZ,KAAO+B,GAVDD,EAAajR,KAiB5B,MAAO0Q,KAAgBxM,GAAK,IAAIuM,GAAc1G,WACvC4G,KAAgBC,GAAM,IAAIjC,GAAM5E,UAEjCoH,EAAmBZ,EAAO3D,eAAe,GAG/C2D,EAAOpJ,YAAY,EAAGzB,GAGtB,MAAMxC,EAAQwN,EAAY7Z,SAASK,KAAI,CAACyI,EAAOhB,IAC3C+R,EAAYzD,aAAatO,KAO7B,GAFA+R,EAAYvJ,YAAYwJ,EAAajL,GAAQtO,UAEzC8Z,aAAmBjF,EAAY,CAE/B/I,EAAMhK,OACFyX,EACA,KACGO,EAAQra,SAASK,KAAKgV,GAAMA,EAAElS,QAIrC,IAAK,IAAI2E,EAAI,EAAGA,EAAIuS,EAAQra,SAASD,OAAQ+H,IAAK,CAC9C,MAAMxH,EAAQ+Z,EAAQra,SAAS8H,GAC/B+R,EAAYvD,SAAShW,EAAOA,EAAM6C,KAAM2W,EAAchS,EAAG,CAAD,KAEzD,CAGH,MAAMqS,EAAa,IAAItF,EACnBwF,EAAQlR,KACRyN,EAAWyD,EAAQzP,aACnByP,EAAQlX,MAENoX,EAAgBD,EAChBD,EAAQ9P,eACRL,EAAOG,UAAUgQ,EAAQ9P,gBAE/BsP,EAAYvD,SAAS6D,EAAYI,EAAeT,EAAa,CAIjEO,EAAQ9Z,UAGR,IAAK,IAAIuH,EAAI,EAAGA,EAAIuE,EAAMtM,OAAQ+H,IAC9B+R,EAAYxD,YAAYvO,EAAGuE,EAAMvE,IAGrC,OAAOsS,EAAajR,IACxB,CAEOgJ,OAAOS,EAAeC,GACzB,MAAO1P,EAAMoH,GACTzL,KAAKwZ,KAAK1N,cAAgBb,EAAYgB,WAChC,CAAC8H,EAAQD,GACT,CAACA,EAAOC,GAClB/T,KAAKwZ,KAAKnG,OAAOhP,EAAMoH,EAC3B,CAEQ6O,QACJ3B,EACA5B,EACA0D,GAEA,QAHA,IAAA1D,IAAAA,EAAa/W,KAAKwZ,WAClB,IAAAiB,IAAAA,EAAqB,IAEG,IAApB9B,EAAS1X,OACT,MAAO,CAACwZ,EAAM1D,GAGlB,KAAMA,aAAgBT,GAClB,MAAM,IAAIxU,MAAM,oBAGpB,MAAOuB,KAAU2V,GAAQL,EAEzB,GAAItV,EAAQ,GAAKA,GAAS0T,EAAK7V,SAASD,OACpC,MAAM,IAAIa,MAAM,oBAGpB,MAAMN,EAAQuV,EAAK7V,SAASmC,GAG5B,OAFAoX,EAAKrX,KAAK2T,GAEH/W,KAAKsa,QAAQtB,EAAMxX,EAAOiZ,EACrC,ECpvBG,MAAMiB,EACLtR,kBACA,OAAOpK,KAAK2b,UAAUvR,WAC1B,CAEIG,kBACA,OAAOvK,KAAK2b,UAAUpR,WAC1B,CAEIwJ,aACA,OAAO/T,KAAK2b,UAAU5H,MAC1B,CAEID,YACA,OAAO9T,KAAK2b,UAAU7H,KAC1B,CAEI7S,aACA,OAAOjB,KAAK2b,UAAU1a,MAC1B,CAEI6K,kBACA,OAAO9L,KAAK2b,UAAU7P,WAC1B,CAEI8P,aACA,OAAO5b,KAAK2b,UAAUC,MAC1B,CAEIC,0BACA,OAAO7b,KAAK2b,UAAUE,mBAC1B,CAEIC,wBACA,OAAO9b,KAAK2b,UAAUG,iBAC1B,CAEI5O,mBACA,OAAOlN,KAAK2b,UAAUzO,YAC1B,CAEIE,sBACA,OAAOpN,KAAK2b,UAAUvO,eAC1B,CAEAjO,YAA6Bwc,GAAA,KAAAA,UAAAA,CAAiC,CAE9DI,cAAcnZ,GACV5C,KAAK2b,UAAUI,cAAcnZ,EACjC,CAEAoZ,YAAYC,EAAwBlM,GAChC/P,KAAK2b,UAAUK,YAAYC,EAAOlM,EACtC,CAEAmM,QACIlc,KAAK2b,UAAUO,OACnB,CAEAC,SAASC,GACL,OAAOpc,KAAK2b,UAAUQ,SAASC,EACnC,CAEA/I,OAAOS,EAAeC,GAClB,OAAO/T,KAAK2b,UAAUtI,OAAOS,EAAOC,EACxC,CAEAsI,SAAwCzZ,GACpC,OAAO5C,KAAK2b,UAAUU,SAASzZ,EACnC,CAEA0Z,UAAU1S,EAAcC,GACpB7J,KAAK2b,UAAUW,UAAU1S,EAAMC,EACnC,CAEAoQ,SAAS9Z,GACLH,KAAK2b,UAAU1B,SAAS9Z,EAC5B,CAEAkZ,SACI,OAAOrZ,KAAK2b,UAAUtC,QAC1B,CAEA1W,QACI3C,KAAK2b,UAAUhZ,OACnB,EAGG,MAAM4Z,EACLnS,kBACA,OAAOpK,KAAK2b,UAAUvR,WAC1B,CAEIG,kBACA,OAAOvK,KAAK2b,UAAUpR,WAC1B,CAEIwJ,aACA,OAAO/T,KAAK2b,UAAU5H,MAC1B,CAEID,YACA,OAAO9T,KAAK2b,UAAU7H,KAC1B,CAEI8H,aACA,OAAO5b,KAAK2b,UAAUC,MAC1B,CAEIE,wBACA,OAAO9b,KAAK2b,UAAUG,iBAC1B,CAEID,0BACA,OAAO7b,KAAK2b,UAAUE,mBAC1B,CAEI3O,mBACA,OAAOlN,KAAK2b,UAAUzO,YAC1B,CAEIE,sBACA,OAAOpN,KAAK2b,UAAUvO,eAC1B,CAEIoP,gBACA,MAAMC,EAAU,IAAIla,EAEdoD,EAAa3F,KAAK2b,UAAUa,WAAW9Y,IACzC+Y,EAAQhZ,KAAIiZ,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EAAIjZ,GAAC,CAAEkZ,IAAK5c,OAAO,IAQrC,OALAyc,EAAQhb,QAAU,KACdkE,EAAWlE,UACXgb,EAAQhb,SAAS,EAGdgb,EAAQ1Z,KACnB,CAEA5D,YAA6Bwc,GAAA,KAAAA,UAAAA,CAAgC,CAE7DK,YAAYC,GACRjc,KAAK2b,UAAUK,YAAYC,EAC/B,CAEAE,SAASC,GACL,OAAOpc,KAAK2b,UAAUQ,SAASC,EACnC,CAEAE,UAAU1S,EAAcC,GACpB7J,KAAK2b,UAAUW,UAAU1S,EAAMC,EACnC,CAEAqS,QACIlc,KAAK2b,UAAUO,OACnB,CAEA7I,OAAOS,EAAeC,GAClB/T,KAAK2b,UAAUtI,OAAOS,EAAOC,EACjC,CAEAsI,SAAwCzZ,GACpC,OAAO5C,KAAK2b,UAAUU,SAASzZ,EACnC,CAEAqX,SAAS9Z,GACLH,KAAK2b,UAAU1B,SAAS9Z,EAC5B,CAEAkZ,SACI,OAAOrZ,KAAK2b,UAAUtC,QAC1B,CAEA1W,QACI3C,KAAK2b,UAAUhZ,OACnB,EAGG,MAAMka,GACL3G,oBACA,OAAOlW,KAAK2b,UAAUzF,aAC1B,CAEIC,oBACA,OAAOnW,KAAK2b,UAAUxF,aAC1B,CAEIH,mBACA,OAAOhW,KAAK2b,UAAU3F,YAC1B,CAEIC,mBACA,OAAOjW,KAAK2b,UAAU1F,YAC1B,CAEInC,YACA,OAAO9T,KAAK2b,UAAU7H,KAC1B,CAEIC,aACA,OAAO/T,KAAK2b,UAAU5H,MAC1B,CAEI+H,wBACA,OAAO9b,KAAK2b,UAAUG,iBAC1B,CAEIgB,oBACA,OAAO9c,KAAK2b,UAAUoB,aAC1B,CAEIC,uBACA,OAAOhd,KAAK2b,UAAUsB,gBAC1B,CAEIC,6BACA,OAAOld,KAAK2b,UAAUwB,sBAC1B,CAEItB,0BACA,OAAO7b,KAAK2b,UAAUE,mBAC1B,CAEID,aACA,OAAO5b,KAAK2b,UAAUyB,MAC1B,CAEItR,kBACA,OAAO9L,KAAK2b,UAAU7P,WAC1B,CAEIA,gBAAY9J,GACZhC,KAAK2b,UAAUI,cAAc,CAAEjQ,YAAa9J,GAChD,CAEA7C,YAA6Bwc,GAAA,KAAAA,UAAAA,CAAgC,CAE7DO,QACIlc,KAAK2b,UAAUO,OACnB,CAEA7I,OAAOS,EAAeC,EAAgBsJ,QAAK,IAALA,IAAAA,GAAQ,GAC1Crd,KAAK2b,UAAUtI,OAAOS,EAAOC,EAAQsJ,EACzC,CAEAhB,SAAwCzZ,GACpC,OAAO5C,KAAK2b,UAAUU,SAASzZ,EACnC,CAEAoZ,YAAYC,EAAuBlM,GAC/B/P,KAAK2b,UAAUK,YAAYC,EAAOlM,EACtC,CAEAuM,UACIL,EACArZ,GAEA5C,KAAK2b,UAAUW,UAAUL,EAAOrZ,EACpC,CAEAuZ,SAASC,GACL,OAAOpc,KAAK2b,UAAUQ,SAASC,EACnC,CAEAnC,SAAS9Z,GACL,OAAOH,KAAK2b,UAAU1B,SAAS9Z,EACnC,CAEAkZ,SACI,OAAOrZ,KAAK2b,UAAUtC,QAC1B,CAEA1W,QACI3C,KAAK2b,UAAUhZ,OACnB,EAGG,MAAM2a,GACLlB,SACA,OAAOpc,KAAK2b,UAAUS,EAC1B,CAEItI,YACA,OAAO9T,KAAK2b,UAAU7H,KAC1B,CAEIC,aACA,OAAO/T,KAAK2b,UAAU5H,MAC1B,CAEImC,oBACA,OAAOlW,KAAK2b,UAAUzF,aAC1B,CAEIC,oBACA,OAAOnW,KAAK2b,UAAUxF,aAC1B,CAEIH,mBACA,OAAOhW,KAAK2b,UAAU3F,YAC1B,CAEIC,mBACA,OAAOjW,KAAK2b,UAAU1F,YAC1B,CAEI5R,WACA,OAAOrE,KAAK2b,UAAUtX,IAC1B,CAEIkZ,kBACA,OAAOvd,KAAK2b,UAAU4B,WAC1B,CAEIJ,6BACA,OAAOnd,KAAK2b,UAAUwB,sBAC1B,CAEIJ,oBACA,OAAO/c,KAAK2b,UAAUoB,aAC1B,CAEIE,uBACA,OAAOjd,KAAK2b,UAAUsB,gBAC1B,CAEIC,6BACA,OAAOld,KAAK2b,UAAUuB,sBAC1B,CAEIJ,oBACA,OAAO9c,KAAK2b,UAAUmB,aAC1B,CAEIE,uBACA,OAAOhd,KAAK2b,UAAUqB,gBAC1B,CAEInB,0BACA,OAAO7b,KAAK2b,UAAUE,mBAC1B,CAEIC,wBACA,OAAO9b,KAAK2b,UAAUG,iBAC1B,CAEIU,gBACA,OAAOxc,KAAK2b,UAAUa,SAC1B,CAEIZ,aACA,OAAO5b,KAAK2b,UAAUC,MAC1B,CAEIwB,aACA,OAAOpd,KAAK2b,UAAUyB,MAC1B,CAEII,kBACA,OAAOxd,KAAK2b,UAAU6B,WAC1B,CAEIC,kBACA,OAAOzd,KAAK2b,UAAU8B,WAC1B,CAEAte,YAA6Bwc,GAAA,KAAAA,UAAAA,CAAgC,CAE7DO,QACIlc,KAAK2b,UAAUO,OACnB,CAEAC,SAASC,GACL,OAAOpc,KAAK2b,UAAU+B,cAActB,EACxC,CAEA/I,OAAOS,EAAeC,EAAgBsJ,QAAK,IAALA,IAAAA,GAAQ,GAC1Crd,KAAK2b,UAAUtI,OAAOS,EAAOC,EAAQsJ,EACzC,CAEAhB,SAAwCzZ,GACpC,OAAO5C,KAAK2b,UAAUU,SAASzZ,EACnC,CAEAoZ,YAAYC,GACRjc,KAAK2b,UAAUK,YAAYC,EAC/B,CAEA0B,SAAS/a,GACL,OAAO5C,KAAK2b,UAAUgC,SAAS/a,EACnC,CAEAgb,WAAWhb,GACP5C,KAAK2b,UAAUiC,WAAWhb,EAC9B,CAEAib,eAAejb,GACX5C,KAAK2b,UAAUkC,eAAejb,EAClC,CAEAkb,iBACI,OAAO9d,KAAK2b,UAAUmC,gBAC1B,CAEAC,YAAYC,GACRhe,KAAK2b,UAAUoC,YAAgCC,EACnD,CAEAC,SAAS7B,GACL,OAAOpc,KAAK2b,UAAUQ,SAASC,EACnC,CAEA8B,iBACI9R,EACA+R,GAEA,OAAOne,KAAK2b,UAAUuC,iBAAiB9R,EAAM+R,EACjD,CAEAlE,SAAS9Z,GACLH,KAAK2b,UAAU1B,SAAS9Z,EAC5B,CAEAkZ,SACI,OAAOrZ,KAAK2b,UAAUtC,QAC1B,CAEA1W,QACI3C,KAAK2b,UAAUhZ,OACnB,ECxdG,MAAMyb,WAA4BtZ,EAGrC3F,YACY2E,EACAua,GAER7e,QAHQ,KAAAsE,QAAAA,EACA,KAAAua,UAAAA,EAJJ,KAAAC,OAA6B,KAQjCte,KAAKue,mBACT,CAEQA,oBACJve,KAAKqF,eACDnB,EACIlE,KAAK8D,QACL,aACCJ,IACG1D,KAAKse,OAAS5a,EAAE4a,OAChBte,KAAKqe,UAAUG,YAAY9a,EAAE,IAEjC,IAIR1D,KAAKqF,eACDnB,EACIlE,KAAK8D,QACL,YACCJ,IACGA,EAAE+a,iBAEEze,KAAKqe,UAAUK,YACf1e,KAAKqe,UAAUK,WAAWhb,EAAG,IAGrC,IAIR1D,KAAKqF,eACDnB,EAAsBlE,KAAK8D,QAAS,aAAcJ,IAC1C1D,KAAKse,SAAW5a,EAAE4a,SAClBte,KAAKse,OAAS,KAEdte,KAAKqe,UAAUM,YAAYjb,GAAG,KAK1C1D,KAAKqF,eACDnB,EAAsBlE,KAAK8D,QAAS,WAAYJ,IAC5C1D,KAAKse,OAAS,KACdte,KAAKqe,UAAUO,UAAUlb,EAAE,KAInC1D,KAAKqF,eACDnB,EAAsBlE,KAAK8D,QAAS,QAASJ,IACzC1D,KAAKqe,UAAUQ,OAAOnb,EAAE,IAGpC,EC9DG,SAASob,GAAoBlG,GAChC,OAAQA,GACJ,IAAK,QACD,MAAO,MACX,IAAK,QACD,MAAO,SACX,IAAK,OACD,MAAO,OACX,IAAK,QACD,MAAO,QACX,IAAK,SACD,MAAO,SACX,QACI,MAAM,IAAI9W,MAAM,sBAAsB8W,MAElD,CAEO,SAASmG,GAAoBxK,GAChC,OAAQA,GACJ,IAAK,MACD,MAAO,QACX,IAAK,SACD,MAAO,QACX,IAAK,OACD,MAAO,OACX,IAAK,QACD,MAAO,QACX,IAAK,SACD,MAAO,SACX,QACI,MAAM,IAAIzS,MAAM,qBAAqByS,MAEjD,CAaO,MAAMyK,WAAmBla,EAWxBiQ,YACA,OAAO/U,KAAKif,MAChB,CAEA9f,YACqB2E,EACAlB,GAYjBpD,QAbiB,KAAAsE,QAAAA,EACA,KAAAlB,QAAAA,EAXJ,KAAAsc,QAAU,IAAI3c,EACtB,KAAAsc,OAAiC7e,KAAKkf,QAAQnc,MAyBnD/C,KAAKmf,wBAA0B,IAAIC,IAC/Bpf,KAAK4C,QAAQyc,qBAGjBrf,KAAKqF,eACDrF,KAAKkf,QACL,IAAId,GAAoBpe,KAAK8D,QAAS,CAClC0a,YAAaA,KAAe,EAC5BE,WAAahb,IACT,GAA0C,IAAtC1D,KAAKmf,wBAAwB9a,KAE7B,YADArE,KAAKsf,mBAIT,MAAMxL,EAAQ9T,KAAK8D,QAAQyb,YACrBxL,EAAS/T,KAAK8D,QAAQ0b,aAE5B,GAAc,IAAV1L,GAA0B,IAAXC,EACf,OAGJ,MAAM0L,EACF/b,EAAEgc,cACJC,wBACI7R,EAAIpK,EAAEqO,QAAU0N,EAAK9L,KACrBiM,EAAIlc,EAAEsO,QAAUyN,EAAK7L,IAErBiM,EAAW7f,KAAK8f,kBAClB9f,KAAKmf,wBACLrR,EACA8R,EACA9L,EACAC,GAQJ,GAAI/T,KAAK+f,cAAcrc,IAAmB,OAAbmc,EAEzB7f,KAAKsf,uBAFT,CAMA,GAA8C,kBAAnCtf,KAAK4C,QAAQod,mBACpB,IAAKhgB,KAAK4C,QAAQod,kBAEd,YADAhgB,KAAKsf,wBAGN,IAAKtf,KAAK4C,QAAQod,kBAAkBtc,EAAGmc,GAE1C,YADA7f,KAAKsf,mBAITtf,KAAKigB,WAAWvc,GAEX1D,KAAKkgB,gBACNlgB,KAAKkgB,cAAgBzY,SAAS4J,cAAc,OAC5CrR,KAAKkgB,cAAcpZ,UAAY,uBAC/B9G,KAAKmgB,eAAiB1Y,SAAS4J,cAAc,OAC7CrR,KAAKmgB,eAAerZ,UAAY,wBAChC9G,KAAKif,OAAS,SACdjf,KAAKkgB,cAAcxQ,YAAY1P,KAAKmgB,gBAEpCngB,KAAK8D,QAAQ2C,UAAUjD,IAAI,eAC3BxD,KAAK8D,QAAQsc,OAAOpgB,KAAKkgB,gBAG7BlgB,KAAKqgB,cAAcR,EAAU/L,EAAOC,GAEpC/T,KAAKsgB,SAAST,EA7BH,CA6BY,EAE3BlB,YAAaA,KACT3e,KAAKsf,kBAAkB,EAE3BV,UAAWA,KACP5e,KAAKsf,kBAAkB,EAE3BT,OAASnb,IACLA,EAAE+a,iBAEF,MAAM1J,EAAQ/U,KAAKif,OAEnBjf,KAAKsf,mBAEDvK,IAGArR,EAAE6c,kBACFvgB,KAAKkf,QAAQzb,KAAK,CAAE8Q,SAAUQ,EAAOyL,YAAa9c,IAAK,IAK3E,CAEA+c,eAAepB,GACXrf,KAAKmf,wBAA0B,IAAIC,IAAIC,EAC3C,CAEA5d,UACIzB,KAAKsf,mBACL9f,MAAMiC,SACV,CAKQwe,WAAWld,GACdA,EAAcic,GAAW0B,gBAAiB,CAC/C,CAKQX,cAAchd,GAClB,MAAMf,EAASe,EAAcic,GAAW0B,eACxC,MAAwB,kBAAV1e,GAAuBA,CACzC,CAEQqe,cACJR,EACA/L,EACAC,GAAc,YAEd,IAAK/T,KAAKmgB,eACN,OAGJ,MAAMQ,EAAW7M,EAAQ,IACnB8M,EAAW7M,EAAS,IAEpB8M,EAAsB,SAAbhB,EACTiB,EAAuB,UAAbjB,EACVkB,EAAqB,QAAblB,EACRmB,EAAwB,WAAbnB,EAEXoB,GAAcN,GAAYG,EAC1BI,GAAaP,GAAYE,EACzBM,GAAYP,GAAYG,EACxBK,GAAeR,GAAYI,EAEjC,IAAI3c,EAAO,GAEmC,gBAAX,QAA/Bgd,EAAyB,QAAzBxf,EAAA7B,KAAK4C,QAAQ0e,oBAAY,IAAAzf,OAAA,EAAAA,EAAEwC,YAAI,IAAAgd,OAAA,EAAAA,EAAEtd,QACjCM,EAAO+E,EAAMpJ,KAAK4C,QAAQ0e,aAAajd,KAAKrC,MAAO,EAAG,KAAO,KAGnB,YAAX,QAA/Buf,EAAyB,QAAzBC,EAAAxhB,KAAK4C,QAAQ0e,oBAAY,IAAAE,OAAA,EAAAA,EAAEnd,YAAI,IAAAkd,OAAA,EAAAA,EAAExd,SAC7Bkd,GAAcC,KACd7c,EACI+E,EAAM,EAAGpJ,KAAK4C,QAAQ0e,aAAajd,KAAKrC,MAAO8R,GAC/CA,IAEJqN,GAAYC,KACZ/c,EACI+E,EAAM,EAAGpJ,KAAK4C,QAAQ0e,aAAajd,KAAKrC,MAAO+R,GAC/CA,IAIZ,MAAM0N,GAAa,EAAIpd,GAAQ,EAG/B,IAAIqd,EAGAA,EADAT,EACY,cAAc,IAAMQ,cALtBpd,KAMH6c,EACK,eAAe,IAAMO,cAPvBpd,KAQH8c,EACK,eAAe,IAAMM,cATvBpd,KAUH+c,EACK,cAAc,IAAMK,cAXtBpd,KAaE,GAGhBrE,KAAKmgB,eAAetV,MAAM6W,UAAYA,EAEtC7a,EAAY7G,KAAKmgB,eAAgB,cAAeQ,GAAYG,GAC5Dja,EAAY7G,KAAKmgB,eAAgB,aAAcQ,GAAYE,GAC3Dha,EAAY7G,KAAKmgB,eAAgB,YAAaS,GAAYG,GAC1Dla,EAAY7G,KAAKmgB,eAAgB,eAAgBS,GAAYI,EACjE,CAEQV,SAAST,GACb,OAAQA,GACJ,IAAK,MACD7f,KAAKif,OAAS,MACd,MACJ,IAAK,OACDjf,KAAKif,OAAS,OACd,MACJ,IAAK,SACDjf,KAAKif,OAAS,SACd,MACJ,IAAK,QACDjf,KAAKif,OAAS,QACd,MACJ,IAAK,SACDjf,KAAKif,OAAS,SAG1B,CAEQa,kBACJ6B,EACA7T,EACA8R,EACA9L,EACAC,GAAc,gBAEd,MAAM6N,OAC4C1hB,KAArB,QAAzB2B,EAAA7B,KAAK4C,QAAQ0e,oBAAY,IAAAzf,OAAA,EAAAA,EAAEggB,iBACyB,gBAAX,QAAzCL,EAAyB,QAAzBH,EAAArhB,KAAK4C,QAAQ0e,oBAAY,IAAAD,OAAA,EAAAA,EAAEQ,sBAAc,IAAAL,OAAA,EAAAA,EAAEzd,MAEzC/B,GA5SY8f,EA6S4B,QAA1CC,EAA0B,QAA1BC,EAAY,QAAZT,EAAAvhB,KAAK4C,eAAO,IAAA2e,OAAA,EAAAA,EAAED,oBAAY,IAAAU,OAAA,EAAAA,EAAEH,sBAAc,IAAAE,OAAA,EAAAA,EAAE/f,MA7SZigB,EA8ShC,GA7SsB,iBAAhBH,EAA2BA,EAAcG,GAD3D,IAA0BH,EAAkBG,EAiTpC,OAAIL,EAgCL,SACHD,EACA7T,EACA8R,EACA9L,EACAC,EACAmO,GAEA,MAAMC,EAAM,IAAMrU,EAAKgG,EACjBsO,EAAM,IAAMxC,EAAK7L,EAEvB,GAAI4N,EAAYU,IAAI,SAAWF,EAAKD,EAChC,MAAO,OAEX,GAAIP,EAAYU,IAAI,UAAYF,EAAK,IAAMD,EACvC,MAAO,QAEX,GAAIP,EAAYU,IAAI,QAAUD,EAAKF,EAC/B,MAAO,MAEX,GAAIP,EAAYU,IAAI,WAAaD,EAAK,IAAMF,EACxC,MAAO,SAGX,IAAKP,EAAYU,IAAI,UACjB,OAAO,KAGX,MAAO,QACX,CA5DmBC,CACHX,EACA7T,EACA8R,EACA9L,EACAC,EACA/R,GAwDT,SACH2f,EACA7T,EACA8R,EACA9L,EACAC,EACAmO,GAEA,GAAIP,EAAYU,IAAI,SAAWvU,EAAIoU,EAC/B,MAAO,OAEX,GAAIP,EAAYU,IAAI,UAAYvU,EAAIgG,EAAQoO,EACxC,MAAO,QAEX,GAAIP,EAAYU,IAAI,QAAUzC,EAAIsC,EAC9B,MAAO,MAEX,GAAIP,EAAYU,IAAI,WAAazC,EAAI7L,EAASmO,EAC1C,MAAO,SAGX,IAAKP,EAAYU,IAAI,UACjB,OAAO,KAGX,MAAO,QACX,CA9EeE,CACHZ,EACA7T,EACA8R,EACA9L,EACAC,EACA/R,EAER,CAEQsd,mBACAtf,KAAKkgB,gBACLlgB,KAAKif,YAAS/e,EACdF,KAAK8D,QAAQ0N,YAAYxR,KAAKkgB,eAC9BlgB,KAAKkgB,mBAAgBhgB,EACrBF,KAAKmgB,oBAAiBjgB,EACtBF,KAAK8D,QAAQ2C,UAAUE,OAAO,eAEtC,EApReqY,GAAA0B,cAAgB,wCC7C5B,MAAM8B,WACD1d,EAaJhB,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,cACIK,QAbI,KAAAmG,WAAa,IAAIF,EAER,KAAAmC,YAAc,IAAIrF,EAC1B,KAAAsF,WAA0B7H,KAAK4H,YAAY7E,MAEnC,KAAA+E,WAAa,IAAIvF,EACzB,KAAAwF,UAAyB/H,KAAK8H,WAAW/E,MAQ9C/C,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,oBAC1B9G,KAAKyiB,SAASC,UAAY,EAE1B1iB,KAAKqF,eAAerF,KAAK4H,YAAa5H,KAAK8H,WAO/C,CAEA6a,OACI3iB,KAAK8D,QAAQ+G,MAAM+X,QAAU,EACjC,CAEAC,OACI7iB,KAAK8D,QAAQ+G,MAAM+X,QAAU,MACjC,CAEOE,UAAU7G,GAAqB,MAClC,GAAIjc,KAAKic,QAAUA,EACf,OAEAjc,KAAKic,SACc,QAAfpa,EAAA7B,KAAKic,MAAM5R,YAAI,IAAAxI,OAAA,EAAAA,EAAEkhB,UACjB/iB,KAAKyiB,SAASjR,YAAYxR,KAAKic,MAAM5R,KAAK0Y,QAAQjf,SAEtD9D,KAAKic,WAAQ/b,GAEjBF,KAAKic,MAAQA,EAEb,MAAMtW,EAAa,IAAIb,EAEvB,GAAI9E,KAAKic,MAAM5R,KAAM,CACjB,MAAMzC,EAAc5H,KAAKic,MAAM5R,KAAK0Y,QAAQlb,WACtCC,EAAa9H,KAAKic,MAAM5R,KAAK0Y,QAAQhb,UAErCib,EAAetb,EAAW1H,KAAKyiB,UAErC9c,EAAWN,eACP2d,EACAA,EAAanb,YAAW,IAAM7H,KAAK4H,YAAYnE,SAC/Cuf,EAAajb,WAAU,IAAM/H,KAAK8H,WAAWrE,UAG7CmE,GACAjC,EAAWN,eACPuC,GAAY,IAAM5H,KAAK4H,YAAYnE,UAGvCqE,GACAnC,EAAWN,eACPyC,GAAW,IAAM9H,KAAK8H,WAAWrE,UAIzCzD,KAAKyiB,SAAS/S,YAAY1P,KAAKic,MAAM5R,KAAK0Y,QAAQjf,QAAS,CAG/D9D,KAAK2F,WAAW3D,MAAQ2D,CAC5B,CAEO0N,OAAO4P,EAAgBC,GAC1B,CAGGC,aAAU,WACgB,QAAzB3B,EAAgB,QAAhBH,EAAU,QAAVxf,EAAA7B,KAAKic,aAAK,IAAApa,OAAA,EAAAA,EAAEwI,YAAI,IAAAgX,OAAA,EAAAA,EAAE0B,eAAO,IAAAvB,OAAA,EAAAA,EAAE1d,WAC3B9D,KAAKyiB,SAASjR,YAAYxR,KAAKic,MAAM5R,KAAK0Y,QAAQjf,SAClD9D,KAAKic,WAAQ/b,EAErB,CAEOuB,UACHzB,KAAK2F,WAAWlE,UAChBjC,MAAMiC,SACV,EC9GG,IAAK2hB,IAAZ,SAAYA,GACRA,EAAAA,EAAA,aACAA,EAAAA,EAAA,iBACAA,EAAAA,EAAA,+BACAA,EAAAA,EAAA,cACH,CALD,CAAYA,KAAAA,GAAmB,KCAxB,MAAeC,WAAoBve,EAOtC3F,YAA+BiZ,GAC3B5Y,QAD2B,KAAA4Y,GAAAA,EANd,KAAAkL,eAAiB,IAAI7d,EACrB,KAAA8d,wBAA0B,IAAI9d,EAE9B,KAAA+d,aAAe,IAAIjhB,EAC3B,KAAAkhB,YAAczjB,KAAKwjB,aAAazgB,MAKrC/C,KAAKqF,eACDrF,KAAKwjB,aACLxjB,KAAKsjB,eACLtjB,KAAKujB,yBAGTvjB,KAAK0jB,WACT,CAIUC,YAAY3gB,GAClB,OAAO,CACX,CAEQ0gB,YACJ1jB,KAAKqF,eACDrF,KAAKwjB,aACLtf,EAAsBlE,KAAKoY,GAAI,aAAcrV,IACzC,GAAI/C,KAAK2jB,YAAY5gB,GAEjB,YADAA,EAAM0b,iBAIV,MAAM7M,EAAU,IACTvK,EAAqB,aACrBA,EAAqB,YAG5BrH,KAAKujB,wBAAwBvhB,MAAQ,CACjCP,QAASA,KACL,IAAK,MAAMoQ,KAAUD,EACjBC,EAAOhH,MAAMC,cAAgB,MAAO,GAKhD,IAAK,MAAM+G,KAAUD,EACjBC,EAAOhH,MAAMC,cAAgB,OAGjC9K,KAAKoY,GAAG3R,UAAUjD,IAAI,cACtBoB,YAAW,IAAM5E,KAAKoY,GAAG3R,UAAUE,OAAO,eAAe,GAEzD3G,KAAKsjB,eAAethB,MAAQhC,KAAKI,QAAQ2C,EAAM6gB,cAE3C7gB,EAAM6gB,eACN7gB,EAAM6gB,aAAaC,cAAgB,OAWnC9gB,EAAM6gB,aAAavjB,QACf,aACA,oCACF,IAGV6D,EAAsBlE,KAAKoY,GAAI,WAAW,KACtCpY,KAAKujB,wBAAwB9hB,UAC7BzB,KAAKsjB,eAAe7hB,SAAS,IAGzC,EChEG,MAAMqiB,WAAYhf,EAWVhB,cACP,OAAO9D,KAAKyiB,QAChB,CAEAtjB,YACoBI,EACCwkB,EACA/F,GAEjBxe,QAJgB,KAAAD,QAAAA,EACC,KAAAwkB,SAAAA,EACA,KAAA/F,MAAAA,EAbJ,KAAAgG,WAAa,IAAIzhB,EACzB,KAAA0hB,UAA+BjkB,KAAKgkB,WAAWjhB,MAEvC,KAAAmhB,WAAa,IAAI3hB,EACzB,KAAAsc,OAAiC7e,KAAKkkB,WAAWnhB,MAatD/C,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,MAC1B9G,KAAKyiB,SAASC,SAAW,EACzB1iB,KAAKyiB,SAAS0B,WAAY,EAE1Btd,EAAY7G,KAAK8D,QAAS,gBAAgB,GAE1C9D,KAAKqF,eACDrF,KAAKgkB,WACLhkB,KAAKkkB,WACL,IAAK,cAAsBb,GAAtBlkB,cAAA,oBACgB,KAAAoB,cACbZ,EAAuBa,aAgB/B,CAdIJ,UAMI,OALAJ,KAAKO,cAAcF,QACf,CAAC,IAAIjB,EAAc2kB,EAAS3H,GAAI4B,EAAM5B,GAAI7c,IAC1CH,EAAcqB,WAGX,CACHgB,QAASA,KACLzB,KAAKO,cAAcN,UACfb,EAAcqB,UACjB,EAGb,GACDT,KAAKyiB,WAGZziB,KAAKqF,eACDnB,EAAsBlE,KAAKyiB,SAAU,aAAc1f,IAC3CA,EAAMqhB,kBAIVpkB,KAAKgkB,WAAWvgB,KAAKV,EAAM,KAInC/C,KAAKqkB,WAAa,IAAIrF,GAAWhf,KAAKyiB,SAAU,CAC5CpD,oBAAqB,CAAC,UACtBW,kBAAmBA,CAACjd,EAAOwR,KACvB,GAAIvU,KAAKge,MAAMsG,OACX,OAAO,EAGX,MAAMnkB,EAAOG,IAEb,OAAIH,GAAQH,KAAK+jB,SAAS3H,KAAOjc,EAAKd,QAEb,OAAjBc,EAAKZ,SACLY,EAAKb,UAAYU,KAAKge,MAAM5B,KAMzBpc,KAAKT,UAAYY,EAAKZ,QAG1BS,KAAKge,MAAMuG,MAAMvE,kBACpBjd,EACAwR,EACA6O,GAAoBU,IACvB,IAIT9jB,KAAKqF,eACDrF,KAAKqkB,WAAWxF,QAAQ9b,IACpB/C,KAAKkkB,WAAWzgB,KAAKV,EAAM,IAE/B/C,KAAKqkB,WAEb,CAEOG,UAAUC,GACb5d,EAAY7G,KAAK8D,QAAS,aAAc2gB,GACxC5d,EAAY7G,KAAK8D,QAAS,gBAAiB2gB,EAC/C,CAEOC,WAAWC,GACV3kB,KAAK+iB,SACL/iB,KAAKyiB,SAASjR,YAAYxR,KAAK+iB,QAAQjf,SAE3C9D,KAAK+iB,QAAU4B,EACf3kB,KAAKyiB,SAAS/S,YAAY1P,KAAK+iB,QAAQjf,QAC3C,CAEOrC,UACHjC,MAAMiC,SACV,EClIG,MAAMmjB,WAAyBvB,GAIlClkB,YACI2E,EACiB+gB,EACA7G,GAEjBxe,MAAMsE,GAHW,KAAA+gB,WAAAA,EACA,KAAA7G,MAAAA,EANJ,KAAAzd,cACbZ,EAAuBa,cASvBR,KAAKqF,eACDnB,EACIJ,EACA,aACCJ,IACOA,EAAEohB,WAMkBphB,EhBsJzB+E,IAA6B,EgBtJD,IAG/B,GAGZ,CAESkb,YAAY3gB,GACjB,SAAIhD,KAAKge,MAAMpB,IAAImI,YAAe/hB,EAAO8hB,SAI7C,CAEA1kB,QAAQwjB,GACJ5jB,KAAKO,cAAcF,QACf,CAAC,IAAIjB,EAAcY,KAAK6kB,WAAY7kB,KAAKge,MAAM5B,GAAI,OACnDhd,EAAcqB,WAGlB,MAAMoK,EAAQxC,OAAO2c,iBAAiBhlB,KAAKoY,IAErC6M,EAAUpa,EAAMqa,iBAClB,sDAEEC,EAAQta,EAAMqa,iBAChB,2CAGJ,GAAItB,EAAc,CACd,MAAMwB,EAAe3d,SAAS4J,cAAc,OAE5C+T,EAAava,MAAMwa,gBAAkBJ,EACrCG,EAAava,MAAMsa,MAAQA,EAC3BC,EAAava,MAAMya,QAAU,UAC7BF,EAAava,MAAMkJ,OAAS,OAC5BqR,EAAava,MAAM0a,SAAW,OAC9BH,EAAava,MAAM2a,WAAa,OAChCJ,EAAava,MAAM4a,aAAe,OAClCL,EAAava,MAAM0J,SAAW,WAC9B6Q,EAAaM,YAAc,oBAAoB1lB,KAAKge,MAAM3Z,QCrE/D,SACHuf,EACAwB,GAGAxe,EAAWwe,EAAc,cAEzB3d,SAASke,KAAKjW,YAAY0V,GAC1BxB,EAAagC,aAAaR,EAAc,EAAG,GAE3CxgB,YAAW,KACP0B,EAAc8e,EAAc,cAC5BA,EAAaze,QAAQ,GACtB,EACP,CDyDYkf,CAAcjC,EAAcwB,EAAc,CAG9C,MAAO,CACH3jB,QAASA,KACLzB,KAAKO,cAAcN,UAAUb,EAAcqB,UAAU,EAGjE,EEvEG,MAAMqlB,WAAsBhhB,EAO3BhB,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,YACqB4kB,EACA/F,GAEjBxe,QAHiB,KAAAukB,SAAAA,EACA,KAAA/F,MAAAA,EATJ,KAAAkB,QAAU,IAAI3c,EACtB,KAAAsc,OAAiC7e,KAAKkf,QAAQnc,MAYnD/C,KAAKyiB,SAAWhb,SAAS4J,cAAc,OAEvCrR,KAAKyiB,SAAS3b,UAAY,iBAC1B9G,KAAKyiB,SAASC,SAAW,EACzB1iB,KAAKyiB,SAAS0B,WAAY,EAE1BnkB,KAAKqF,eACDrF,KAAKkf,QACLhb,EAAsBlE,KAAKyiB,SAAU,SAAS,KAC1CziB,KAAK+jB,SAASgC,iBAAiB/lB,KAAKge,MAAM,KAIlD,MAAMgI,EAAU,IAAIpB,GAAiB5kB,KAAKyiB,SAAUsB,EAAS3H,GAAI4B,GAEjEhe,KAAKimB,eAAiB,IAAIjH,GAAWhf,KAAKyiB,SAAU,CAChDpD,oBAAqB,CAAC,UACtBW,kBAAmBA,CAACjd,EAAOwR,KAAY,MACnC,MAAMpU,EAAOG,IAEb,OAAIH,GAAQH,KAAK+jB,SAAS3H,KAAOjc,EAAKd,QAEb,OAAjBc,EAAKZ,SACLY,EAAKb,UAAYU,KAAKge,MAAM5B,MAOF,QAAvBva,GjBjDH+G,EiBiDQ5I,KAAKge,MAAMpC,QjBhD5B3a,OAAS,EAAI2H,EAAIA,EAAI3H,OAAS,QAAKf,SiBgDA,IAAA2B,OAAA,EAAAA,EAAEua,MAAOjc,EAAKZ,QAGzCye,EAAMuG,MAAMvE,kBACfjd,EACAwR,EACA6O,GAAoB8C,OjBvDjC,IAAiBtd,CiBwDP,IAIT5I,KAAKqF,eACD2gB,EACAhmB,KAAKimB,eAAepH,QAAQ9b,IACxB/C,KAAKkf,QAAQzb,KAAKV,EAAM,IAE5B/C,KAAKimB,eAEb,ECtCG,MAAME,WACDrhB,EAmBJ8W,aACA,OAAO5b,KAAKomB,KAAK7kB,KAAKgN,GAAMA,EAAEvM,MAAMzC,SACxC,CAEI8E,WACA,OAAOrE,KAAKomB,KAAKnlB,MACrB,CAEIolB,aACA,OAAOrmB,KAAKsmB,OAChB,CAEID,WAAOrkB,GACPhC,KAAKsmB,QAAUtkB,EACfhC,KAAK8D,QAAQ+G,MAAM+X,QAAU5gB,EAAQ,OAAS,EAClD,CAEA2gB,OACS3iB,KAAKqmB,SACNrmB,KAAK8D,QAAQ+G,MAAM+X,QAAU,GAErC,CAEAC,OACI7iB,KAAKyiB,SAAS5X,MAAM+X,QAAU,MAClC,CAEA2D,uBAAuBziB,GACf9D,KAAKwmB,eAAiB1iB,IAGtB9D,KAAKwmB,eACLxmB,KAAKwmB,aAAa7f,SAClB3G,KAAKwmB,kBAAetmB,GAEpB4D,IACA9D,KAAKymB,sBAAsB/W,YAAY5L,GACvC9D,KAAKwmB,aAAe1iB,GAE5B,CAEA4iB,sBAAsB5iB,GACd9D,KAAK2mB,cAAgB7iB,IAGrB9D,KAAK2mB,cACL3mB,KAAK2mB,YAAYhgB,SACjB3G,KAAK2mB,iBAAczmB,GAEnB4D,IACA9D,KAAK4mB,qBAAqBlX,YAAY5L,GACtC9D,KAAK2mB,YAAc7iB,GAE3B,CAEIA,cACA,OAAO9D,KAAKyiB,QAChB,CAEOgC,SAASoC,GACZ,OACI7mB,KAAK8mB,eAAiB,GACtB9mB,KAAKomB,KAAKpmB,KAAK8mB,eAAe9kB,QAAU6kB,CAEhD,CAEOvjB,QAAQ8Y,GACX,OAAOpc,KAAKomB,KAAKW,WAAWF,GAAQA,EAAI7kB,MAAMzC,UAAY6c,GAC9D,CAEAjd,YACqB4kB,EACA/F,GAEjBxe,QAHiB,KAAAukB,SAAAA,EACA,KAAA/F,MAAAA,EAlFb,KAAAoI,KAAiC,GACjC,KAAAU,eAAiB,EAIjB,KAAAR,SAAU,EAED,KAAApH,QAAU,IAAI3c,EACtB,KAAAsc,OAAmC7e,KAAKkf,QAAQnc,MA8ErD/C,KAAKqF,eAAerF,KAAKkf,SAEzBlf,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,6BAE1BD,EACI7G,KAAKyiB,SACL,2BACwC,cAAxCziB,KAAK+jB,SAASnhB,QAAQokB,eAG1BhnB,KAAKqF,eACDrF,KAAK+jB,SAASjH,eAAepZ,IACrBA,EAAEkZ,IAAIoB,QAAUhe,KAAKge,OACrBnX,EACI7G,KAAKyiB,SACL,gBACc,IAAdziB,KAAKqE,KACP,IAGVrE,KAAK+jB,SAAS/G,kBAAkBtZ,IACxBA,EAAEkZ,IAAIoB,QAAUhe,KAAKge,OACrBnX,EACI7G,KAAKyiB,SACL,gBACc,IAAdziB,KAAKqE,KACP,KAKdrE,KAAKymB,sBAAwBhf,SAAS4J,cAAc,OACpDrR,KAAKymB,sBAAsB3f,UAAY,0BAEvC9G,KAAK4mB,qBAAuBnf,SAAS4J,cAAc,OACnDrR,KAAK4mB,qBAAqB9f,UAAY,yBAEtC9G,KAAKinB,aAAexf,SAAS4J,cAAc,OAC3CrR,KAAKinB,aAAangB,UAAY,iBAE9B9G,KAAKknB,cAAgB,IAAIpB,GAAc9lB,KAAK+jB,SAAU/jB,KAAKge,OAE3Dhe,KAAKyiB,SAAS/S,YAAY1P,KAAKinB,cAC/BjnB,KAAKyiB,SAAS/S,YAAY1P,KAAK4mB,sBAC/B5mB,KAAKyiB,SAAS/S,YAAY1P,KAAKknB,cAAcpjB,SAC7C9D,KAAKyiB,SAAS/S,YAAY1P,KAAKymB,uBAE/BzmB,KAAKqF,eACDrF,KAAKknB,cACLlnB,KAAKknB,cAAcrI,QAAQ9b,IACvB/C,KAAKkf,QAAQzb,KAAK,CACdV,MAAOA,EAAMyd,YACbnd,MAAOrD,KAAKomB,KAAKnlB,QACnB,IAENiD,EACIlE,KAAKknB,cAAcpjB,QACnB,aACCf,IAIG,IAFK/C,KAAK+jB,SAASnhB,QAAQukB,uBAIvBpkB,EAAM+hB,WACL9kB,KAAKge,MAAMpB,IAAImI,WAClB,CACEhiB,EAAM0b,iBAEN,MAAM,IAAE7K,EAAG,KAAED,GACT3T,KAAK8D,QAAQ6b,yBACT/L,IAAKwT,EAASzT,KAAM0T,GACxBrnB,KAAK+jB,SAASjgB,QAAQ6b,wBAE1B3f,KAAK+jB,SAAS7F,iBACVle,KAAKge,MACL,CACIlQ,EAAG6F,EAAO0T,EAAW,GACrBzH,EAAGhM,EAAMwT,EAAU,IAEvB,CAAEE,YAAY,GAChB,KAIdpjB,EAAsBlE,KAAKinB,aAAc,aAAclkB,IACnD,GAAIA,EAAMqhB,iBACN,OAGiC,IAAjBrhB,EAAMwkB,QAGtBvnB,KAAK+jB,SAASgC,iBAAiB/lB,KAAKge,MAAO,IAI3D,CAEOwG,UAAUgD,GACb,CAGIC,OACJZ,EACAxjB,GAEA,QAFA,IAAAA,IAAAA,EAAgBrD,KAAKomB,KAAKnlB,QAEtBoC,EAAQ,GAAKA,EAAQrD,KAAKomB,KAAKnlB,OAC/B,MAAM,IAAIa,MAAM,oBAGpB9B,KAAKinB,aAAaxV,aACdoV,EAAI7kB,MAAM8B,QACV9D,KAAKinB,aAAa/lB,SAASmC,IAG/BrD,KAAKomB,KAAO,IACLpmB,KAAKomB,KAAK7e,MAAM,EAAGlE,GACtBwjB,KACG7mB,KAAKomB,KAAK7e,MAAMlE,IAGnBrD,KAAK8mB,cAAgB,IACrB9mB,KAAK8mB,cAAgBzjB,EAE7B,CAEOO,OAAOwY,GACV,MAAM/Y,EAAQrD,KAAKomB,KAAKW,WAAWF,GAAQA,EAAI7kB,MAAMzC,UAAY6c,IAE3DsL,EAAc1nB,KAAKomB,KAAK7iB,OAAOF,EAAO,GAAG,IAEzC,MAAErB,EAAK,WAAE2D,GAAe+hB,EAE9B/hB,EAAWlE,UACXO,EAAMP,UACNO,EAAM8B,QAAQ6C,QAClB,CAEOghB,eAAe1L,GAClBjc,KAAKomB,KAAK1kB,SAASmlB,IACf,MAAMe,EAAgB3L,EAAMG,KAAOyK,EAAI7kB,MAAMzC,QAC7CsnB,EAAI7kB,MAAMwiB,UAAUoD,EAAc,GAE1C,CAEO9E,UACH7G,EACA5Y,GAAgC,MAEhC,QAFA,IAAAA,IAAAA,EAAgBrD,KAAKomB,KAAKnlB,QAEtBjB,KAAKomB,KAAKyB,MAAMhB,GAAQA,EAAI7kB,MAAMzC,UAAY0c,EAAMG,KACpD,OAEJ,MAAM0L,EAAW,IAAIhE,GAAI7H,EAAMG,GAAIpc,KAAK+jB,SAAU/jB,KAAKge,OACvD,KAAe,QAAVnc,EAAAoa,EAAM5R,YAAI,IAAAxI,OAAA,EAAAA,EAAEglB,KACb,MAAM,IAAI/kB,MAAM,4BAEpBgmB,EAASpD,WAAWzI,EAAM5R,KAAKwc,KAE/B,MAAMlhB,EAAab,EAAoB8E,KACnCke,EAAS7D,WAAWlhB,IAAS,MACzB,MAAMglB,GACD/nB,KAAK+jB,SAASnhB,QAAQukB,sBAErBa,EACFhoB,KAAKge,MAAMpB,IAAImI,YAA4B,IAAd/kB,KAAKqE,KAEtC,GACI0jB,IACCC,GACDjlB,EAAM+hB,SACR,CACE/hB,EAAM0b,iBAEN,MAAMxC,EAAQjc,KAAK+jB,SAASrG,cAAcoK,EAASvoB,UAE7C,IAAEqU,EAAG,KAAED,GACTmU,EAAShkB,QAAQ6b,yBACb/L,IAAKwT,EAASzT,KAAM0T,GACxBrnB,KAAK+jB,SAASjgB,QAAQ6b,wBAU1B,YARA3f,KAAK+jB,SAAS7F,iBACVjC,EACA,CACInO,EAAG6F,EAAO0T,EACVzH,EAAGhM,EAAMwT,GAEb,CAAEE,YAAY,GAEX,CAGX,MAAMW,EACFhM,EAAMG,MAAmC,QAA5Bva,EAAA7B,KAAKge,MAAMuG,MAAM/G,mBAAW,IAAA3b,OAAA,EAAAA,EAAEua,KAC3Cpc,KAAKge,MAAMuG,MAAM2D,iBAEgB,IAAjBnlB,EAAMwkB,SAENxkB,EAAMqhB,kBAI1BpkB,KAAKge,MAAMuG,MAAMzB,UAAU7G,EAAO,CAC9BkM,UAAWF,GACb,IAENH,EAASjJ,QAAQ9b,IACb/C,KAAKkf,QAAQzb,KAAK,CACdV,MAAOA,EAAMyd,YACbnd,MAAOrD,KAAKomB,KAAKW,WAAWjZ,GAAMA,EAAE9L,QAAU8lB,KAChD,KAIJ9lB,EAAgC,CAAEA,MAAO8lB,EAAUniB,cAEzD3F,KAAKynB,OAAOzlB,EAAOqB,EACvB,CAEO8f,WAAWlH,GACdjc,KAAK4D,OAAOqY,EAAMG,GACtB,CAEO3a,UACHjC,MAAMiC,UAEN,IAAK,MAAM,MAAEO,EAAK,WAAE2D,KAAgB3F,KAAKomB,KACrCzgB,EAAWlE,UACXO,EAAMP,UAGVzB,KAAKomB,KAAO,EAChB,EC5OG,MAAMgC,WACDtjB,EA4CJhB,cACA,MAAM,IAAIhC,MAAM,gBACpB,CAEI0b,kBACA,OAAOxd,KAAKqoB,YAChB,CAEI/D,aACA,OAAOtkB,KAAKsoB,OAChB,CAEIhE,WAAOtiB,GACPhC,KAAKsoB,QAAUtmB,EAEf6E,EACI7G,KAAK4K,UACL,mBACU,mBAAV5I,GAA8BA,EAEtC,CAEIyiB,eACA,OAAOzkB,KAAKwnB,cAChB,CAEI5L,aACA,OAAO5b,KAAKuoB,OAChB,CAEIlkB,WACA,OAAOrE,KAAKuoB,QAAQtnB,MACxB,CAEIunB,cACA,OAA+B,IAAxBxoB,KAAKuoB,QAAQtnB,MACxB,CAEIwnB,mBACA,SACIzoB,KAAK0oB,YAAa1oB,KAAK4K,UAAUlE,SAAS1G,KAAK0oB,UAAU5kB,SAEjE,CAEI6kB,aACA,OAAO3oB,KAAK4oB,aAChB,CAEIV,uBACA,QAAKzgB,SAASQ,eAGPhB,EACHQ,SAASQ,cACTjI,KAAK6oB,iBAAiB/kB,QAE9B,CAEIihB,iBACA,OAAO/kB,KAAK8oB,WAChB,CAEI/D,eAAW/iB,GACXhC,KAAK8oB,YAAc9mB,EAEnBhC,KAAK+oB,WAAWtI,eACZze,EAAQ,CAAC,UAAY,CAAC,MAAO,SAAU,OAAQ,QAAS,WAG5D6E,EAAY7G,KAAK4K,UAAW,wBAAyB5I,GAErDhC,KAAKgpB,WAAWpM,IAAIqM,0BAA0BxlB,KAAK,CAC/CshB,WAAY/kB,KAAK+kB,YAEzB,CAEA5lB,YACqByL,EACTmZ,EACD3H,EACUxZ,EACAomB,GAEjBxpB,QANiB,KAAAoL,UAAAA,EACT,KAAAmZ,SAAAA,EACD,KAAA3H,GAAAA,EACU,KAAAxZ,QAAAA,EACA,KAAAomB,WAAAA,EArHb,KAAAxB,gBAAiB,EACjB,KAAAc,SAAoC,EACpC,KAAAQ,aAAc,EAId,KAAAI,iBAAqC,GAE5B,KAAA7T,aAAe,IAAI9S,EAC3B,KAAA4O,YACLnR,KAAKqV,aAAatS,MAEd,KAAAkgB,OAAS,EACT,KAAAC,QAAU,EAEV,KAAAqF,QAA4B,GAEnB,KAAAY,QAAU,IAAI5mB,EACtB,KAAA6mB,OAAgCppB,KAAKmpB,QAAQpmB,MAErC,KAAAsmB,WAAa,IAAI9mB,EACzB,KAAAia,UAAuCxc,KAAKqpB,WAAWtmB,MAE/C,KAAAumB,eAAiB,IAAI/mB,EAC7B,KAAAua,cACL9c,KAAKspB,eAAevmB,MAEP,KAAAwmB,kBAAoB,IAAIhnB,EAChC,KAAAya,iBACLhd,KAAKupB,kBAAkBxmB,MAEV,KAAAymB,wBACb,IAAIjnB,EACC,KAAA2a,uBACLld,KAAKwpB,wBAAwBzmB,MAuF7B8D,EAAY7G,KAAK4K,UAAW,aAAa,GAEzC5K,KAAK4oB,cAAgB,IAAIzC,GAAcnmB,KAAK+jB,SAAU/jB,KAAKgpB,YAE3DhpB,KAAK6oB,iBAAmB,IAAIrG,GAE5BxiB,KAAK+oB,WAAa,IAAI/J,GAAWhf,KAAK6oB,iBAAiB/kB,QAAS,CAC5Dub,oBAAqB,CAAC,MAAO,SAAU,OAAQ,QAAS,UACxDW,kBAAmBA,CAACjd,EAAOwR,KACvB,GACoB,mBAAhBvU,KAAKskB,QACJtkB,KAAKskB,QAAuB,WAAb/P,EAEhB,OAAO,EAGX,MAAMpU,EAAOG,IAEb,IAAKH,GAAQ4C,EAAM+hB,WAAa9kB,KAAK+kB,WACjC,OAAO,EAGX,GAAI5kB,GAAQA,EAAKd,SAAWW,KAAK+jB,SAAS3H,GAAI,CAC1C,GAAIjc,EAAKb,UAAYU,KAAKoc,GAAI,CAC1B,GAAiB,WAAb7H,EAEA,OAAO,EAEX,GAAqB,OAAjBpU,EAAKZ,QAEL,OAAO,CAAK,CAOpB,QAF4B,IAAxBS,KAAKuoB,QAAQtnB,QAAgBd,EAAKb,UAAYU,KAAKoc,GAER,CAGnD,OAAOpc,KAAKggB,kBACRjd,EACAwR,EACA6O,GAAoB8C,MACvB,IAITtb,EAAUwV,OACNpgB,KAAK4oB,cAAc9kB,QACnB9D,KAAK6oB,iBAAiB/kB,SAG1B9D,KAAK2oB,OAAOtC,SAAWzjB,EAAQ6mB,WAC/BzpB,KAAKskB,OAAS1hB,EAAQ0hB,SAAU,EAEhCtkB,KAAKqF,eACDrF,KAAK4oB,cAAc/J,QAAQ9b,IACvB/C,KAAK0pB,gBAAgB3mB,EAAMA,MAAO,SAAUA,EAAMM,MAAM,IAE5DrD,KAAK6oB,iBAAiBhhB,YAAW,KAC7B7H,KAAK+jB,SAASgC,iBAAiB/lB,KAAKgpB,YAAY,EAAK,IAEzDhpB,KAAK6oB,iBAAiB9gB,WAAU,SAGhC/H,KAAK+oB,WAAWlK,QAAQ9b,IACpB/C,KAAK0pB,gBAAgB3mB,EAAMyd,YAAazd,EAAMwR,SAAS,IAE3DvU,KAAKmpB,QACLnpB,KAAKqV,aACLrV,KAAKqpB,WACLrpB,KAAKspB,eACLtpB,KAAKupB,kBACLvpB,KAAKwpB,wBAEb,CAEAG,aAAU,SACU,QAAZ9nB,EAAA7B,KAAK4C,eAAO,IAAAf,OAAA,EAAAA,EAAE+Z,SACd5b,KAAK4C,QAAQgZ,OAAOla,SAASua,IACzBjc,KAAK4pB,WAAW3N,EAAM,KAId,QAAZoF,EAAArhB,KAAK4C,eAAO,IAAAye,OAAA,EAAAA,EAAE7D,cACdxd,KAAK8iB,UAAU9iB,KAAK4C,QAAQ4a,aAKhCxd,KAAKwkB,UAAUxkB,KAAKykB,UAAU,GAAM,GACpCzkB,KAAK6pB,kBAED7pB,KAAK+jB,SAASnhB,QAAQknB,kCACtB9pB,KAAK+pB,oBACD/pB,KAAK+jB,SAASnhB,QAAQknB,gCAClB9pB,KAAKgpB,YAEbhpB,KAAKqF,eAAerF,KAAK+pB,qBACzB/pB,KAAK+pB,oBAAoBC,KAAK,CAC1BC,aAAc,IAAI3M,GAAYtd,KAAK+jB,UACnCnH,IAAK5c,KAAKgpB,WAAWpM,MAEzB5c,KAAK4oB,cAAcrC,uBACfvmB,KAAK+pB,oBAAoBjmB,UAI7B9D,KAAK+jB,SAASnhB,QAAQsnB,iCACtBlqB,KAAKmqB,mBACDnqB,KAAK+jB,SAASnhB,QAAQsnB,+BAClBlqB,KAAKgpB,YAEbhpB,KAAKqF,eAAerF,KAAKmqB,oBACzBnqB,KAAKmqB,mBAAmBH,KAAK,CACzBC,aAAc,IAAI3M,GAAYtd,KAAK+jB,UACnCnH,IAAK5c,KAAKgpB,WAAWpM,MAEzB5c,KAAK4oB,cAAclC,sBACf1mB,KAAKmqB,mBAAmBrmB,SAGpC,CAEOR,QAAQ2Y,GACX,OAAOjc,KAAK4oB,cAActlB,QAAQ2Y,EAAMG,GAC5C,CAEO/C,SAAM,MACT,MAAMvP,EAA8B,CAChC+F,MAAO7P,KAAK4oB,cAAchN,OAC1BwO,WAA6B,QAAjBvoB,EAAA7B,KAAKqoB,oBAAY,IAAAxmB,OAAA,EAAAA,EAAEua,GAC/BA,GAAIpc,KAAKoc,IAWb,OARoB,IAAhBpc,KAAKskB,SACLxa,EAAOwa,OAAStkB,KAAKskB,QAGrBtkB,KAAK2oB,OAAOtC,SACZvc,EAAO2f,YAAa,GAGjB3f,CACX,CAEO8T,WAAWhb,GAITA,IACDA,EAAU,CAAC,GAEVA,EAAQqZ,QACTrZ,EAAQqZ,MAAQjc,KAAKwd,aAGzB,MAAMna,EAAQT,EAAQqZ,MAAQjc,KAAK4b,OAAOtY,QAAQV,EAAQqZ,QAAU,EAEpE,IAAIoO,EAEJ,GAAIhnB,EAAQrD,KAAK4b,OAAO3a,OAAS,EAC7BopB,EAAkBhnB,EAAQ,MACvB,IAAKT,EAAQ0nB,aAGhB,OAFAD,EAAkB,CAEX,CAGXrqB,KAAK8iB,UAAU9iB,KAAK4b,OAAOyO,GAC/B,CAEOxM,eAAejb,GAWlB,GAPKA,IACDA,EAAU,CAAC,GAEVA,EAAQqZ,QACTrZ,EAAQqZ,MAAQjc,KAAKwd,cAGpB5a,EAAQqZ,MACT,OAGJ,MAAM5Y,EAAQrD,KAAK4b,OAAOtY,QAAQV,EAAQqZ,OAE1C,IAAIoO,EAEJ,GAAIhnB,EAAQ,EACRgnB,EAAkBhnB,EAAQ,MACvB,IAAKT,EAAQ0nB,aAGhB,OAFAD,EAAkBrqB,KAAK4b,OAAO3a,OAAS,CAEhC,CAGXjB,KAAK8iB,UAAU9iB,KAAK4b,OAAOyO,GAC/B,CAEOE,cAActO,GACjB,OAAOjc,KAAK4b,OAAO4O,SAASvO,EAChC,CAEA+N,KAAKS,GACD,CAGJC,OAAOD,GACH,CAGJvO,QAAK,QACuB,QAAxBmF,EAAiB,QAAjBxf,EAAA7B,KAAKqoB,oBAAY,IAAAxmB,OAAA,EAAAA,EAAEqa,aAAK,IAAAmF,GAAAA,EAAA7Z,KAAA3F,EAC5B,CAEOihB,UACH7G,EACArZ,QAAA,IAAAA,IAAAA,EAKI,CAAC,IAGwB,iBAAlBA,EAAQS,OACfT,EAAQS,MAAQrD,KAAK4b,OAAO3a,UAE5B2B,EAAQS,MAAQrD,KAAK4b,OAAO3a,QAGhC,MAAM0pB,IAAuB/nB,EAAQ+nB,mBAC/BC,IAAuBhoB,EAAQgoB,mBAGrC3O,EAAM4O,kBAAkB7qB,KAAKgpB,YAAY,GAErChpB,KAAKqoB,eAAiBpM,GAO1Bjc,KAAK4pB,WAAW3N,EAAOrZ,EAAQS,MAAOsnB,GAEjCA,GACD3qB,KAAK8qB,iBAAiB7O,GAGrB2O,GACD5qB,KAAK+jB,SAASgC,iBACV/lB,KAAKgpB,aACHpmB,EAAQulB,WAIlBnoB,KAAK6pB,mBAnBIe,GACD5qB,KAAK+jB,SAASgC,iBAAiB/lB,KAAKgpB,WAmBhD,CAEOhN,YAAY+O,GACf,MAAM3O,EACuB,iBAAlB2O,EACDA,EACAA,EAAc3O,GAElB4O,EAAgBhrB,KAAKuoB,QAAQV,MAAM5L,GAAUA,EAAMG,KAAOA,IAEhE,IAAK4O,EACD,MAAM,IAAIlpB,MAAM,qBAGpB,OAAO9B,KAAKirB,aAAaD,EAC7B,CAEOE,iBACH,GAAIlrB,KAAK4b,OAAO3a,OAAS,EAAG,CAExB,MAAMkqB,EAAc,IAAInrB,KAAK4b,QAC7B,IAAK,MAAMK,KAASkP,EAChBnrB,KAAKorB,QAAQnP,EAAM,MAGvBjc,KAAK+jB,SAAShG,YAAY/d,KAAKgpB,WAEvC,CAEO7F,WAAWlH,GACdjc,KAAKorB,QAAQnP,EACjB,CAEQmP,QAAQnP,GACZjc,KAAK+jB,SAAS/H,YAAYC,EAC9B,CAEOoP,cAAcpP,GACjB,OAAOjc,KAAKqoB,eAAiBpM,CACjC,CAEAqP,cAAcxnB,GACV9D,KAAK4oB,cAAcrC,uBAAuBziB,EAC9C,CAEO0gB,UACH+G,EACApD,EACA9K,GAAa,iBADJ,IAAT8K,IAAAA,GAAY,QACP,IAAL9K,IAAAA,GAAQ,GAEHA,GAASrd,KAAKykB,WAAa8G,GAOhCvrB,KAAKwnB,eAAiB+D,EAEtB1kB,EAAY7G,KAAK4K,UAAW,eAAgB2gB,GAC5C1kB,EAAY7G,KAAK4K,UAAW,kBAAmB2gB,GAE/CvrB,KAAK4oB,cAAcpE,UAAUxkB,KAAKykB,WAE7BzkB,KAAKqoB,cAAgBroB,KAAK4b,OAAO3a,OAAS,GAC3CjB,KAAK8qB,iBAAiB9qB,KAAK4b,OAAO,IAGtC5b,KAAK6pB,kBAED0B,IACKpD,GACuB,QAAxB5G,EAAiB,QAAjBC,EAAAxhB,KAAKqoB,oBAAY,IAAA7G,OAAA,EAAAA,EAAEtF,aAAK,IAAAqF,GAAAA,EAAA/Z,KAAAga,KArBvB2G,GACuB,QAAxB9G,EAAiB,QAAjBxf,EAAA7B,KAAKqoB,oBAAY,IAAAxmB,OAAA,EAAAA,EAAEqa,aAAK,IAAAmF,GAAAA,EAAA7Z,KAAA3F,EAuBpC,CAEOwR,OAAOS,EAAeC,GAAc,MACvC/T,KAAKijB,OAASnP,EACd9T,KAAKkjB,QAAUnP,EAEf/T,KAAK6oB,iBAAiBxV,OAAOrT,KAAKijB,OAAQjjB,KAAKkjB,UAE1B,QAAjBrhB,EAAA7B,KAAKqoB,oBAAY,IAAAxmB,OAAA,EAAAA,EAAEwR,SACnBrT,KAAKqoB,aAAahV,OAAOrT,KAAKijB,OAAQjjB,KAAKkjB,QAEnD,CAEQ+H,aAAahP,GACjB,MAAM2L,EAAgB5nB,KAAKqoB,eAAiBpM,EAI5C,GAFAjc,KAAKwrB,cAAcvP,GAEf2L,GAAiB5nB,KAAK4b,OAAO3a,OAAS,EAAG,CACzC,MAAMwqB,EAAYzrB,KAAKkpB,iBAAiB,GACxClpB,KAAK8iB,UAAU2I,EAAW,CAQ9B,OALIzrB,KAAKqoB,cAAuC,IAAvBroB,KAAK4b,OAAO3a,QACjCjB,KAAK8qB,sBAAiB5qB,GAG1BF,KAAK6pB,kBACE5N,CACX,CAEQuP,cAAcvP,GAClB,MAAM5Y,EAAQrD,KAAK4b,OAAOtY,QAAQ2Y,GAE9Bjc,KAAKqoB,eAAiBpM,GACtBjc,KAAK6oB,iBAAiB1F,aAG1BnjB,KAAK4oB,cAAchlB,OAAOqY,EAAMG,IAChCpc,KAAKuoB,QAAQhlB,OAAOF,EAAO,GAEvBrD,KAAKkpB,iBAAiBsB,SAASvO,IAC/Bjc,KAAKkpB,iBAAiB3lB,OAClBvD,KAAKkpB,iBAAiB5lB,QAAQ2Y,GAC9B,GAIRjc,KAAKupB,kBAAkB9lB,KAAK,CAAEwY,SAClC,CAEQ2N,WACJ3N,EACA5Y,EACAqoB,QADA,IAAAroB,IAAAA,EAAgBrD,KAAK4b,OAAO3a,aACf,IAAbyqB,IAAAA,GAAgB,GAEhB,MACMC,EADgB3rB,KAAKuoB,QAAQjlB,QAAQ2Y,IACD,EAE1Cjc,KAAK4oB,cAAc9F,UAAU7G,EAAO5Y,GAE/BqoB,GACD1rB,KAAK6oB,iBAAiB/F,UAAU7G,GAGpCjc,KAAK4oB,cAAcjG,OACnB3iB,KAAK6oB,iBAAiBlG,OAElBgJ,IAKJ3rB,KAAK4rB,UAAU3P,GACfjc,KAAK4b,OAAOrY,OAAOF,EAAO,EAAG4Y,GAE7Bjc,KAAKspB,eAAe7lB,KAAK,CAAEwY,UAC/B,CAEQ6O,iBAAiB7O,GACrBjc,KAAKqoB,aAAepM,EAEhBA,IACAjc,KAAK4oB,cAAcjB,eAAe1L,GAElCA,EAAM5I,OAAOrT,KAAKijB,OAAQjjB,KAAKkjB,SAE/BljB,KAAK4rB,UAAU3P,GAEfjc,KAAKwpB,wBAAwB/lB,KAAK,CAAEwY,UAE5C,CAEQ2P,UAAU3P,GACVjc,KAAKkpB,iBAAiBsB,SAASvO,IAC/Bjc,KAAKkpB,iBAAiB3lB,OAClBvD,KAAKkpB,iBAAiB5lB,QAAQ2Y,GAC9B,GAGRjc,KAAKkpB,iBAAmB,CAACjN,KAAUjc,KAAKkpB,iBAC5C,CAEQW,kBAAe,QAOnB,GANAhjB,EAAY7G,KAAK4K,UAAW,QAAS5K,KAAKwoB,SAE1CxoB,KAAK4b,OAAOla,SAASua,GACjBA,EAAM4O,kBAAkB7qB,KAAKgpB,WAAYhpB,KAAKykB,YAG9CzkB,KAAKwoB,UAAYxoB,KAAK0oB,UAAW,CACjC,MAAMA,EAAY1oB,KAAK+jB,SAAS8H,2BAChCnD,EAAUsB,KAAK,CACXC,aAAc,IAAI3M,GAAYtd,KAAK+jB,UACnC/F,MAAOhe,KAAKgpB,aAEhBhpB,KAAK0oB,UAAYA,EAEjBxkB,EAAsBlE,KAAK0oB,UAAU5kB,QAAS,SAAS,KAC9C9D,KAAKykB,UACNzkB,KAAK+jB,SAASgC,iBAAiB/lB,KAAKgpB,WAAY,IAIxDhpB,KAAK4oB,cAAc/F,OACnB7iB,KAAK6oB,iBAAiB/kB,QAAQ4L,YAAY1P,KAAK0oB,UAAU5kB,SAEzD9D,KAAK0oB,UAAUmC,kBAAkB7qB,KAAKgpB,YAAY,EAAM,EAEvDhpB,KAAKwoB,SAAWxoB,KAAK0oB,YACtB1oB,KAAK0oB,UAAU5kB,QAAQ6C,SACD,QAAtB0a,GAAAxf,EAAA7B,KAAK0oB,WAAUjnB,eAAO,IAAA4f,GAAAA,EAAA7Z,KAAA3F,GACtB7B,KAAK0oB,eAAYxoB,EACjBF,KAAK4oB,cAAcjG,OAE3B,CAEA3C,kBACIjd,EACAwR,EACA+J,GAGA,QAAIte,KAAK+jB,SAASnhB,QAAQkpB,gBACf9rB,KAAK+jB,SAASnhB,QAAQkpB,eAAe,CACxCtL,YAAazd,EACbub,SACAN,MAAOhe,KAAK+jB,SAAS5H,SAASnc,KAAKoc,IACnC7H,WACAnU,QAASE,GAIrB,CAEQopB,gBACJ3mB,EACAwR,EACAlR,GAEA,GAAoB,mBAAhBrD,KAAKskB,OACL,OAGJ,MAAMnkB,EAAOG,IAEb,GAAIH,GAAQA,EAAKd,SAAWW,KAAK+jB,SAAS3H,GAAI,CAC1C,GAAqB,OAAjBjc,EAAKZ,QAAkB,CAEvB,MAAM,QAAED,GAAYa,EAOpB,YALAH,KAAKmpB,QAAQ1lB,KAAK,CACd6a,OAAQ/J,EACRjV,QAASA,EACT+D,SAEG,CAMX,IAFkD,IAA9CrD,KAAK4oB,cAActlB,QAAQnD,EAAKZ,UAEa,IAA5BS,KAAK4oB,cAAcvkB,KACpC,OAGJ,MAAM,QAAE/E,EAAO,QAAEC,GAAYY,EAE7B,GADoBH,KAAKoc,KAAO9c,IACZiV,EAAU,CAE1B,GADiBvU,KAAK4oB,cAActlB,QAAQ/D,KAC3B8D,EACb,OAIRrD,KAAKmpB,QAAQ1lB,KAAK,CACd6a,OAAQ/J,EACRjV,QAASa,EAAKb,QACdysB,OAAQ5rB,EAAKZ,QACb8D,SACD,MAEHrD,KAAKqpB,WAAW5lB,KAAK,CACjB+c,YAAazd,EACbwR,WACAlR,QACAjD,QAASA,IAAME,KAG3B,CAEOmB,UAAO,UACVjC,MAAMiC,UAEQ,QAAdI,EAAA7B,KAAK0oB,iBAAS,IAAA7mB,GAAAA,EAAEiC,QAAQ6C,SACD,QAAvB6a,EAAc,QAAdH,EAAArhB,KAAK0oB,iBAAS,IAAArH,OAAA,EAAAA,EAAE5f,eAAO,IAAA+f,GAAAA,EAAAha,KAAA6Z,GAEvB,IAAK,MAAMpF,KAASjc,KAAK4b,OACrBK,EAAMxa,UAGVzB,KAAK+oB,WAAWtnB,UAChBzB,KAAK4oB,cAAcnnB,UACnBzB,KAAK6oB,iBAAiBpnB,SAC1B,EClzBG,MAAeuqB,WAAkBlnB,EAGhChB,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,YAAY+Y,GACR1Y,QAEI0Y,EACAlY,KAAKyiB,SAAWvK,GAEhBlY,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS5X,MAAMkJ,OAAS,OAC7B/T,KAAKyiB,SAAS5X,MAAMiJ,MAAQ,OAC5B9T,KAAKyiB,SAAS3b,UAAY,0BAG9B9G,KAAKqF,eACDO,EAAmB5F,KAAKyiB,UAAWwJ,IAC/B,GAAIjsB,KAAK+E,WAKL,OAEJ,MAAM,MAAE+O,EAAK,OAAEC,GAAWkY,EAAMC,YAChClsB,KAAKqT,OAAOS,EAAOC,EAAO,IAGtC,ECzBJ,MAAMoY,GAAe3iB,IAId,SAAS4iB,GAASxT,GACrB,OAAQA,GACJ,IAAK,OACD,MAAO,OACX,IAAK,QACD,MAAO,QACX,IAAK,QACD,MAAO,MACX,IAAK,QACD,MAAO,SAEX,QACI,MAAO,SAEnB,CAuCO,MAAeyT,WACVL,GAwBJ5P,SACA,OAAOpc,KAAKssB,GAChB,CAEIjoB,WACA,OAAOrE,KAAKusB,QAAQloB,IACxB,CAEI+Y,aACA,OAAOjc,MAAMyI,KAAK5J,KAAKusB,QAAQC,UAAUjrB,KAAKgN,GAAMA,EAAEvM,OAC1D,CAEI8R,YACA,OAAO9T,KAAKysB,SAAS3Y,KACzB,CAEIC,aACA,OAAO/T,KAAKysB,SAAS1Y,MACzB,CAEImC,oBACA,OAAOlW,KAAKysB,SAASvW,aACzB,CACIC,oBACA,OAAOnW,KAAKysB,SAAStW,aACzB,CACIH,mBACA,OAAOhW,KAAKysB,SAASzW,YACzB,CACIC,mBACA,OAAOjW,KAAKysB,SAASxW,YACzB,CAEIwH,kBACA,OAAOzd,KAAK0sB,YAChB,CAEAvtB,YAAYyD,GACRpD,MAAMoD,EAAQsV,eA3DD,KAAAoU,IAAMH,GAAa1iB,OACjB,KAAA8iB,QAAU,IAAInoB,IAKzB,KAAAuoB,mBAAqB,IAAIpqB,EACxB,KAAAuZ,kBAAoB9b,KAAK2sB,mBAAmB5pB,MAEpC,KAAA6pB,kBAAoB,IAAIrqB,EAChC,KAAA0a,iBAA6Bjd,KAAK4sB,kBAAkB7pB,MAE1C,KAAA8pB,eAAiB,IAAItqB,EAC/B,KAAAwa,cAA0B/c,KAAK6sB,eAAe9pB,MAEtC,KAAA+pB,wBAA0B,IAAIvqB,EACtC,KAAA4a,uBACLnd,KAAK8sB,wBAAwB/pB,MAEd,KAAAgqB,yBAA2B,IAAIxoB,EA0C9CvE,KAAKysB,SAAW,IAAInT,IACd1W,EAAQyM,mBACVzM,EAAQ+M,OACR/M,EAAQkJ,aAGZ9L,KAAK8D,QAAQ4L,YAAY1P,KAAKysB,SAAS3oB,SAEvC9D,KAAKqT,OAAO,EAAG,GAAG,GAElBrT,KAAKqF,eACDrF,KAAKysB,SAAStb,aAAY,KACtBnR,KAAK+sB,yBAAyBtpB,MAAM,IAExC7C,EAAME,IACFd,KAAK+c,cACL/c,KAAKid,iBACLjd,KAAKmd,uBAHTvc,EAIE,KACEZ,KAAK+sB,yBAAyBtpB,MAAM,IAExCzD,KAAK+sB,yBAAyBtoB,SAAQ,KAClCzE,KAAK2sB,mBAAmBlpB,MAAM,IAElCzD,KAAK+sB,yBAEb,CAQOhiB,WAAWkR,EAAU9R,GACxBnK,KAAKysB,SAASnc,eAAe2H,EAAgBgE,EAAMnY,SAAUqG,GAC7DnK,KAAK2sB,mBAAmBlpB,MAC5B,CAEOupB,UAAU/Q,GACb,OAAOjc,KAAKysB,SAASpc,cAAc4H,EAAgBgE,EAAMnY,SAC7D,CAEUmpB,WACNjP,EACArF,EACAtU,QADA,IAAAsU,IAAAA,EAAqB,CAAC,IAGtB3Y,KAAKysB,SAASzc,QAAQgO,EAAO3Z,QAAAA,EAAQ+G,EAAOC,WAAYsN,GAExD3Y,KAAK6sB,eAAeppB,KAAKua,GAEzBhe,KAAK+lB,iBAAiB/H,EAC1B,CAEUkP,cACNlP,EACApb,GAEA,IAAK5C,KAAKusB,QAAQlK,IAAIrE,EAAM5B,IACxB,MAAM,IAAIta,MAAM,qBAGpB,MAAMsK,EAAOpM,KAAKusB,QAAQY,IAAInP,EAAM5B,IAE9B/R,EAAOrK,KAAKysB,SAAS9lB,OAAOqX,EAAO5S,EAAOC,YAUhD,GARIe,KAASxJ,aAAO,EAAPA,EAASiT,eAClBzJ,EAAKzG,WAAWlE,UAChB2K,EAAKpK,MAAMP,UACXzB,KAAKusB,QAAQ3oB,OAAOoa,EAAM5B,KAG9Bpc,KAAK4sB,kBAAkBnpB,KAAKua,KAEvBpb,aAAO,EAAPA,EAASwqB,aAAcptB,KAAK0sB,eAAiB1O,EAAO,CACrD,MAAMZ,EAASjc,MAAMyI,KAAK5J,KAAKusB,QAAQC,UAEvCxsB,KAAK+lB,iBACD3I,EAAOnc,OAAS,EAAImc,EAAO,GAAGpb,WAAQ9B,EACxC,CAGN,OAAOmK,CACX,CAEO8R,SAASC,GAAU,MACtB,OAA2B,QAApBva,EAAA7B,KAAKusB,QAAQY,IAAI/Q,UAAG,IAAAva,OAAA,EAAAA,EAAEG,KACjC,CAEO+jB,iBAAiB/H,EAAsBmK,GAAmB,UACzDnoB,KAAK0sB,eAAiB1O,IAGtBhe,KAAK0sB,eACL1sB,KAAK0sB,aAAalI,WAAU,GACvB2D,GACsB,QAAvB9G,GAAAxf,EAAA7B,KAAK0sB,cAAaxQ,aAAK,IAAAmF,GAAAA,EAAA7Z,KAAA3F,IAI3Bmc,IACAA,EAAMwG,WAAU,GACX2D,GACU,QAAX3G,EAAAxD,EAAM9B,aAAK,IAAAsF,GAAAA,EAAAha,KAAAwW,IAInBhe,KAAK0sB,aAAe1O,EAEpBhe,KAAK8sB,wBAAwBrpB,KAAKua,GACtC,CAEOD,YAAYC,GACfhe,KAAKktB,cAAclP,EACvB,CAEOJ,WAAWhb,GAA0B,MAIxC,GAHKA,IACDA,EAAU,CAAC,IAEVA,EAAQob,MAAO,CAChB,IAAKhe,KAAKyd,YACN,OAEJ7a,EAAQob,MAAQhe,KAAKyd,WAAY,CAGrC,MAAM9E,EAAWV,EAAgBrV,EAAQob,MAAMla,SACzC2F,EAAmC,QAA5B5H,EAAA7B,KAAKysB,SAAShjB,KAAKkP,UAAS,IAAA9W,OAAA,EAAAA,EAAEwI,KAC3CrK,KAAK+lB,iBAAiBtc,EAC1B,CAEOoU,eAAejb,GAA0B,MAI5C,GAHKA,IACDA,EAAU,CAAC,IAEVA,EAAQob,MAAO,CAChB,IAAKhe,KAAKyd,YACN,OAEJ7a,EAAQob,MAAQhe,KAAKyd,WAAY,CAGrC,MAAM9E,EAAWV,EAAgBrV,EAAQob,MAAMla,SACzC2F,EAAuC,QAAhC5H,EAAA7B,KAAKysB,SAASzY,SAAS2E,UAAS,IAAA9W,OAAA,EAAAA,EAAEwI,KAC/CrK,KAAK+lB,iBAAiBtc,EAC1B,CAEO4J,OAAOS,EAAeC,EAAgBsZ,IAErCA,GAAevZ,IAAU9T,KAAK8T,OAASC,IAAW/T,KAAK+T,UAM3D/T,KAAKysB,SAAS3oB,QAAQ+G,MAAMkJ,OAAS,GAAGA,MACxC/T,KAAKysB,SAAS3oB,QAAQ+G,MAAMiJ,MAAQ,GAAGA,MAEvC9T,KAAKysB,SAASpZ,OAAOS,EAAOC,GAChC,CAEOtS,UACHzB,KAAK8sB,wBAAwBrrB,UAC7BzB,KAAK6sB,eAAeprB,UACpBzB,KAAK4sB,kBAAkBnrB,UACvBzB,KAAK2sB,mBAAmBlrB,UAExB,IAAK,MAAMuc,KAAShe,KAAKod,OACrBY,EAAMvc,UAGVzB,KAAKysB,SAAShrB,UAEdjC,MAAMiC,SACV,EC1PG,MAAM6rB,WAAqBxoB,EA+C1ByoB,gBACA,OAAOvtB,KAAKwtB,UAChB,CAEI/I,eACA,OAAOzkB,KAAKytB,SAChB,CACIT,gBACA,OAAOhtB,KAAK0tB,UAChB,CAEI5Z,YACA,OAAO9T,KAAKijB,MAChB,CAEIlP,aACA,OAAO/T,KAAKkjB,OAChB,CAEA/jB,YAAqBid,GACjB5c,QADiB,KAAA4c,GAAAA,EAjEb,KAAAoR,YAAa,EACb,KAAAC,WAAY,EACZ,KAAAC,YAAa,EACb,KAAAzK,OAAS,EACT,KAAAC,QAAU,EAED,KAAAyK,uBAAyB,IAAIloB,EAErC,KAAAmoB,sBAAwB,IAAIrrB,EAAmC,CACpEU,QAAQ,IAEH,KAAA4qB,sBAAwB7tB,KAAK4tB,sBAAsB7qB,MAEnD,KAAA+qB,kBAAoB,IAAIvrB,EAAoB,CACjDU,QAAQ,IAEH,KAAA8qB,iBAAsC/tB,KAAK8tB,kBAAkB/qB,MAE7D,KAAAirB,cAAgB,IAAIzrB,EACpB,KAAA0rB,aAA4BjuB,KAAKguB,cAAcjrB,MAE/C,KAAAmrB,uBAAyB,IAAI3rB,EAAyB,CAC3DU,QAAQ,IAEH,KAAAkrB,sBACLnuB,KAAKkuB,uBAAuBnrB,MAGvB,KAAAqrB,oBAAsB,IAAI7rB,EAC1B,KAAA8rB,mBACLruB,KAAKouB,oBAAoBrrB,MAEpB,KAAAurB,mBAAqB,IAAI/rB,EAAqB,CACnDU,QAAQ,IAEH,KAAAsrB,kBACLvuB,KAAKsuB,mBAAmBvrB,MAEnB,KAAAyrB,gBAAkB,IAAIjsB,EACtB,KAAAksB,eAA8BzuB,KAAKwuB,gBAAgBzrB,MAEnD,KAAA2rB,oBAAsB,IAAInsB,EAC1B,KAAAosB,mBACL3uB,KAAK0uB,oBAAoB3rB,MAyBzB/C,KAAKqF,eACDrF,KAAK+tB,kBAAkBhrB,IACnB/C,KAAKwtB,WAAazqB,EAAMwqB,SAAS,IAErCvtB,KAAKuuB,mBAAmBxrB,IACpB/C,KAAKytB,UAAY1qB,EAAM0hB,QAAQ,IAEnCzkB,KAAKmuB,uBAAuBprB,IACxB/C,KAAK0tB,WAAa3qB,EAAMiqB,SAAS,IAErChtB,KAAK6tB,uBAAuB9qB,IACxB/C,KAAKijB,OAASlgB,EAAM+Q,MACpB9T,KAAKkjB,QAAUngB,EAAMgR,MAAM,IAE/B/T,KAAK2tB,uBACL3tB,KAAK4tB,sBACL5tB,KAAK8tB,kBACL9tB,KAAKkuB,uBACLluB,KAAKsuB,mBACLtuB,KAAKguB,cACLhuB,KAAKwuB,gBACLxuB,KAAKouB,oBACLpuB,KAAK0uB,oBAEb,CAEO/E,WAAW1N,GACdjc,KAAK2tB,uBAAuB3rB,MAAQhC,KAAK0uB,oBAAoB3rB,OACxD6rB,IACG3S,EAAMyO,OAAO,CACTmE,OAAQD,GACV,GAGd,CAEA7jB,WAAWiiB,GACPhtB,KAAKouB,oBAAoB3qB,KAAK,CAAEupB,aACpC,CAEAxI,YACIxkB,KAAKwuB,gBAAgB/qB,MACzB,CAEAqrB,iBAAiBF,GACb5uB,KAAK0uB,oBAAoBjrB,KAAKmrB,EAClC,CAEAntB,UACIjC,MAAMiC,SACV,ECxJG,MAAMstB,WACDzB,GAqBRnuB,YAAYid,GACR5c,MAAM4c,GAnBD,KAAA4S,gCACL,IAAIzsB,EACC,KAAA0sB,+BACLjvB,KAAKgvB,gCAAgCjsB,MAGhC,KAAAmsB,wBAA0B,IAAI3sB,EAAoC,CACvEU,QAAQ,IAEH,KAAAksB,uBACLnvB,KAAKkvB,wBAAwBnsB,MAGxB,KAAAqsB,iBAAmB,IAAI7sB,EACvB,KAAA8sB,gBACLrvB,KAAKovB,iBAAiBrsB,MAMtB/C,KAAKqF,eACDrF,KAAKgvB,gCACLhvB,KAAKkvB,wBACLlvB,KAAKovB,iBAEb,CAEAE,eAAettB,GACXhC,KAAKgvB,gCAAgCvrB,KAAKzB,EAC9C,CAEAutB,QAAQxsB,GACJ/C,KAAKovB,iBAAiB3rB,KAAKV,EAC/B,EC/CG,MAAMysB,WACDT,GAgBJxZ,SAAKA,GACLvV,KAAKyvB,MAAQla,CACjB,CAEApW,YAAYid,GACR5c,MAAM4c,GAlBD,KAAAsT,sBAAwB,IAAIntB,EAAwB,CACzDU,QAAQ,IAEH,KAAA0sB,qBACL3vB,KAAK0vB,sBAAsB3sB,MAEtB,KAAA6sB,cAAgB,IAAIrtB,EAAoB,CAAC,GACzC,KAAAstB,aAAkC7vB,KAAK4vB,cAAc7sB,MACrD,KAAA+sB,cAAgB,IAAIvtB,EAAoB,CAAC,GACzC,KAAAwtB,aAAkC/vB,KAAK8vB,cAAc/sB,MAW1D/C,KAAKqF,eACDrF,KAAK0vB,sBACL1vB,KAAK4vB,cACL5vB,KAAK8vB,cAEb,CAEAE,YAAYC,GAAmB,MACjB,QAAVpuB,EAAA7B,KAAKyvB,aAAK,IAAA5tB,GAAAA,EAAEmuB,YAAYC,EAC5B,CAEIA,iBAAU,MACV,SAAmB,QAAVpuB,EAAA7B,KAAKyvB,aAAK,IAAA5tB,OAAA,EAAAA,EAAEouB,aACzB,ECzBG,MAAeC,WACVprB,EAYJhB,cACA,OAAO9D,KAAKyiB,QAChB,CAEI3O,YACA,OAAO9T,KAAKijB,MAChB,CAEIlP,aACA,OAAO/T,KAAKkjB,OAChB,CAEI2L,aAAM,MACN,OAAmB,QAAZhtB,EAAA7B,KAAKyqB,eAAO,IAAA5oB,OAAA,EAAAA,EAAEgtB,MACzB,CAEA1vB,YACoBid,EACGT,EACHiB,GAEhBpd,QAJgB,KAAA4c,GAAAA,EACG,KAAAT,UAAAA,EACH,KAAAiB,IAAAA,EA5BZ,KAAAsG,QAAU,EACV,KAAAD,OAAS,EA+BbjjB,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAASC,UAAY,EAC1B1iB,KAAKyiB,SAAS5X,MAAMslB,QAAU,OAC9BnwB,KAAKyiB,SAAS5X,MAAMkJ,OAAS,OAC7B/T,KAAKyiB,SAAS5X,MAAMiJ,MAAQ,OAC5B9T,KAAKyiB,SAAS5X,MAAMulB,SAAW,SAE/B,MAAMpN,EAAetb,EAAW1H,KAAKyiB,UAErCziB,KAAKqF,eACDrF,KAAK4c,IACLoG,EAAanb,YAAW,KACpB7H,KAAK4c,IAAIkR,kBAAkBrqB,KAAK,CAAE8pB,WAAW,GAAO,IAExDvK,EAAajb,WAAU,KACnB/H,KAAK4c,IAAIkR,kBAAkBrqB,KAAK,CAAE8pB,WAAW,GAAQ,IAEzDvK,EAER,CAEA9G,QACIlc,KAAK4c,IAAIoR,cAAcvqB,MAC3B,CAEA4P,OAAOS,EAAeC,GAClB/T,KAAKijB,OAASnP,EACd9T,KAAKkjB,QAAUnP,EACf/T,KAAK4c,IAAIgR,sBAAsBnqB,KAAK,CAAEqQ,QAAOC,WAEzC/T,KAAK2kB,MACD3kB,KAAKyqB,SACLzqB,KAAK2kB,KAAK+F,OAAO1qB,KAAKyqB,QAAQoE,OAG1C,CAEA7E,KAAK4E,GACD5uB,KAAKyqB,QAAUmE,EACf5uB,KAAK2kB,KAAO3kB,KAAKqwB,cACrB,CAEA3F,OAAO3nB,GAAuB,QAE1B/C,KAAKyqB,QAAO/N,OAAAC,OAAAD,OAAAC,OAAA,GACL3c,KAAKyqB,SAAO,CACfoE,OAAMnS,OAAAC,OAAAD,OAAAC,OAAA,GACa,QAAZ9a,EAAA7B,KAAKyqB,eAAO,IAAA5oB,OAAA,EAAAA,EAAEgtB,QACd9rB,EAAM8rB,UAQjB,IAAK,MAAMyB,KAAO5T,OAAO6T,KAAKxtB,EAAM8rB,aACN3uB,IAAtB6C,EAAM8rB,OAAOyB,WACNtwB,KAAKyqB,QAAQoE,OAAOyB,GAK1B,QAATjP,EAAArhB,KAAK2kB,YAAI,IAAAtD,GAAAA,EAAEqJ,OAAO,CAAEmE,OAAQ7uB,KAAKyqB,QAAQoE,QAC7C,CAEAxV,SAAM,QACF,MAAMwV,EAA6B,QAApBxN,EAAY,QAAZxf,EAAA7B,KAAKyqB,eAAO,IAAA5oB,OAAA,EAAAA,EAAEgtB,cAAM,IAAAxN,EAAAA,EAAI,CAAC,EAExC,MAAO,CACHjF,GAAIpc,KAAKoc,GACTT,UAAW3b,KAAK2b,UAChBkT,OAAQnS,OAAO6T,KAAK1B,GAAQ5tB,OAAS,EAAI4tB,OAAS3uB,EAE1D,CAEAuB,UAAO,MACHzB,KAAK4c,IAAInb,UACA,QAATI,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAEJ,UAEXjC,MAAMiC,SACV,EClFG,MAAe+uB,WACVN,GA8BJpkB,gBAAY9J,GACZhC,KAAK+L,aAAe/J,CACxB,CAEI8J,kBACA,OAAO9L,KAAK+L,YAChB,CAEI3B,kBAKA,OAJmBpK,KAAKywB,YACPzwB,KAAKiwB,aACajwB,KAAK0wB,iBAAmB,EAG/D,CAEInmB,kBAKA,OAJmBvK,KAAKywB,YACPzwB,KAAKiwB,aACajwB,KAAK2wB,iBAAmB,EAG/D,CAEItsB,WACA,OAAOrE,KAAKgK,KAChB,CAEIyB,qBACA,OAAOzL,KAAK0L,eAChB,CAEID,mBAAepH,GACfrE,KAAK0L,gBAAkBrH,CAC3B,CAEIusB,sBACA,OAAO5wB,KAAK0wB,gBAChB,CAEIE,oBAAgB5uB,GAChBhC,KAAK0wB,iBAAoC,iBAAV1uB,EAAqBA,EAAQ,CAChE,CAEI6uB,sBACA,OAAO7wB,KAAK2wB,gBAChB,CAEIE,oBAAgB7uB,GAChBhC,KAAK2wB,iBACgB,iBAAV3uB,EAAqBA,EAAQqK,OAAOC,iBACnD,CAEIwkB,oBACA,OAAO9wB,KAAK+wB,cAChB,CAEID,kBAAc9uB,GACdhC,KAAK+wB,eAAiB/uB,EACtBhC,KAAK2oB,OAAQ9d,MAAM+X,QAAU5gB,EAAQ,GAAK,MAC9C,CAEA7C,YACIid,EACAT,EACiBqV,EACjBllB,EACAmkB,EACAgB,GAEAzxB,MAAM4c,EAAIT,EAAW,IAAI6T,GAAqBpT,IAL7B,KAAA4U,gBAAAA,EA5Fb,KAAAE,2BAA+C,IAAI3uB,EACvD,CAAEU,QAAQ,IAEd,KAAAuS,0BAA4BxV,KAAKkxB,2BAA2BnuB,MAC3C,KAAAsS,aAAe,IAAI9S,EAI3B,KAAA4O,YACLnR,KAAKqV,aAAatS,MAEd,KAAA0tB,WAAa,GACb,KAAA/kB,gBAAkB,EAClB,KAAA1B,MAAQ,EACR,KAAA0mB,iBAAmB,IACnB,KAAAC,iBAA2BtkB,OAAOC,kBAClC,KAAA6kB,aAAc,EAKd,KAAAC,aAAe,EA6EnBpxB,KAAK4c,IAAIrH,KAAOvV,KAChBA,KAAK4c,IAAI+M,WAAW3pB,MAEpBA,KAAKmxB,YAAclB,EACnBjwB,KAAK+wB,eAAiBE,EAEtBjxB,KAAKkxB,2BAA2BztB,KAAKzD,KAAKiwB,cAE1CjwB,KAAK+L,aAAeD,EAEpB9L,KAAK8D,QAAQ2C,UAAUjD,IAAI,QAE3BxD,KAAKqF,eACDrF,KAAK4c,IAAIyS,iBAAiBtsB,IACtB/C,KAAKqV,aAAa5R,KAAK,CAAEY,KAAMtB,EAAMsB,MAAO,IAEhDH,EACIlE,KAAK8D,QACL,cACCutB,IACGrxB,KAAK4c,IAAIgT,cAAcnsB,KAAK4tB,EAAG,IAGvCntB,EACIlE,KAAK8D,QACL,cACCutB,IACGrxB,KAAK4c,IAAIkT,cAAcrsB,KAAK4tB,EAAG,KAK3CrxB,KAAKqF,eACDrF,KAAKkxB,2BACLlxB,KAAKwV,2BAA2B8b,IAC5BtxB,KAAK4c,IAAI8S,sBAAsBjsB,KAAK,CAChCwsB,WAAYqB,GACd,IAENtxB,KAAK4c,IAAImR,kBAAkBrqB,IAClB1D,KAAK2oB,SAGNjlB,EAAE6pB,UACF3mB,EAAW5G,KAAK2oB,OAAQ,WAExBriB,EAActG,KAAK2oB,OAAQ,WAAW,KAKlD3oB,KAAKuxB,YACT,CAEAxmB,WAAWiiB,GACPhtB,KAAK4c,IAAIsR,uBAAuBzqB,KAAK,CAAEupB,aAC3C,CAEAxI,UAAUC,GACNzkB,KAAK4c,IAAI0R,mBAAmB7qB,KAAK,CAAEghB,YACvC,CAEAwL,aACI,OAAOjwB,KAAKmxB,WAChB,CAEAnB,YAAYwB,GACJxxB,KAAKmxB,cAAgBK,IAIzBxxB,KAAKmxB,YAAcK,EAEfA,GACIxxB,KAAK8V,gBACLnR,aAAa3E,KAAK8V,gBAElB9V,KAAK2lB,MACL3lB,KAAK8D,QAAQ4L,YAAY1P,KAAK2lB,OAGlC3lB,KAAK8V,eAAiBlR,YAAW,KAAK,MACzB,QAAT/C,EAAA7B,KAAK2lB,YAAI,IAAA9jB,GAAAA,EAAE8E,QAAQ,GACpB,KAGP3G,KAAKqV,aAAa5R,KAAK+tB,EAAW,CAAEntB,KAAMrE,KAAK8T,OAAU,CAAC,GAC1D9T,KAAKkxB,2BAA2BztB,KAAK+tB,GACzC,CAEAne,OAAOhP,EAAcoH,GACjBzL,KAAKgK,MAAQ3F,EACbrE,KAAK0L,gBAAkBD,EACvB,MAAOqI,EAAOC,GACV/T,KAAK8L,cAAgBb,EAAYgB,WAC3B,CAAC5H,EAAMoH,GACP,CAACA,EAAgBpH,GACvBrE,KAAKiwB,eACLjwB,KAAKoxB,aAAetd,GAExBtU,MAAM6T,OAAOS,EAAOC,EACxB,CAEAiW,KAAK4E,GAAkC,QACnCpvB,MAAMwqB,KAAK4E,GAE+B,iBAA/BA,EAAWgC,kBAClB5wB,KAAK4wB,gBAAkBhC,EAAWgC,iBAEI,iBAA/BhC,EAAWiC,kBAClB7wB,KAAK6wB,gBAAkBjC,EAAWiC,iBAGtC7wB,KAAKyxB,SAAWzxB,KAAK0xB,mBACrB1xB,KAAK2xB,WAAa3xB,KAAK4xB,qBAEvB5xB,KAAKyxB,SAASzH,KAAItN,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EAAIiS,GAAU,CAAEhS,IAAK5c,KAAK4c,OAC9C5c,KAAK2xB,WAAW3H,KAAItN,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EAAIiS,GAAU,CAAEhS,IAAK5c,KAAK4c,OAEvC,QAAT/a,EAAA7B,KAAK2lB,YAAI,IAAA9jB,GAAAA,EAAEue,OAAOpgB,KAAKyxB,SAAS3tB,SACrB,QAAXud,EAAArhB,KAAK2oB,cAAM,IAAAtH,GAAAA,EAAEjB,OAAOpgB,KAAK2xB,WAAW7tB,SAEC,kBAA1B8qB,EAAWqB,YAClBjwB,KAAKgwB,YAAYpB,EAAWqB,WAEpC,CAEA5W,SACI,MAAMwV,EAAS7uB,KAAKyqB,QACpB,OAAA/N,OAAAC,OAAAD,OAAAC,OAAA,GACOnd,MAAM6Z,UAAQ,CACjB2X,gBAAiBhxB,KAAKgxB,gBACtBa,MAAOhD,EAAOgD,OAEtB,CAEQN,aACJvxB,KAAK2oB,OAASlhB,SAAS4J,cAAc,OACrCrR,KAAK2oB,OAAOjG,SAAW,EAEvB1iB,KAAK2oB,OAAO7hB,UAAY,cACxB9G,KAAK2oB,OAAO9d,MAAMkJ,OAAS,GAAG/T,KAAKywB,eACnCzwB,KAAK2oB,OAAO9d,MAAM2a,WAAa,GAAGxlB,KAAKywB,eACvCzwB,KAAK2oB,OAAO9d,MAAMinB,UAAY,GAAG9xB,KAAKywB,eACtCzwB,KAAK2oB,OAAO9d,MAAMknB,UAAY,GAAG/xB,KAAKywB,eAEtCzwB,KAAK8D,QAAQ4L,YAAY1P,KAAK2oB,QAE9B3oB,KAAK2lB,KAAOle,SAAS4J,cAAc,OAEnCrR,KAAK2lB,KAAK7e,UAAY,YAEtB9G,KAAK8D,QAAQ4L,YAAY1P,KAAK2lB,KAClC,CAGA0K,eACI,MAAO,CACH3F,OAASmE,IAAsB,QACd,QAAbhtB,EAAA7B,KAAKyxB,gBAAQ,IAAA5vB,GAAAA,EAAE6oB,OAAO,CAAEmE,WACT,QAAfxN,EAAArhB,KAAK2xB,kBAAU,IAAAtQ,GAAAA,EAAEqJ,OAAO,CAAEmE,UAAS,EAEvCptB,QAASA,KAAK,QACG,QAAbI,EAAA7B,KAAKyxB,gBAAQ,IAAA5vB,GAAAA,EAAEJ,UACA,QAAf4f,EAAArhB,KAAK2xB,kBAAU,IAAAtQ,GAAAA,EAAE5f,SAAS,EAGtC,ECpTG,MAAeuwB,WAA+BxB,GAOjDrxB,YACqB4kB,EACjB3H,EACAT,EACAqV,EACAllB,EACAmkB,EACAgC,GAEAzyB,MAAM4c,EAAIT,EAAWqV,EAAiBllB,EAAamkB,GAAY,GAR9C,KAAAlM,SAAAA,EAJJ,KAAAsF,WAAa,IAAI9mB,EACzB,KAAAia,UAAYxc,KAAKqpB,WAAWtmB,MAa5BkvB,GACDjyB,KAAKkyB,kBAEb,CAEQA,mBACJ,IAAKlyB,KAAK2oB,OACN,OAGJ,MAAMvM,EAAKpc,KAAKoc,GACVyI,EAAa7kB,KAAK+jB,SAAS3H,GACjCpc,KAAK2oB,OAAOxE,WAAY,EAExBnkB,KAAKgmB,QAAU,IAAK,cAA8B3C,GAC9CjjB,UAMI,OALAT,EAAuBa,cAAcH,QACjC,CAAC,IAAIZ,EAAaolB,EAAYzI,IAC9B3c,EAAagB,WAGV,CACHgB,QAASA,KACL9B,EAAuBa,cAAcP,UACjCR,EAAagB,UAChB,EAGb,GACDT,KAAK2oB,QAER3oB,KAAKse,OAAS,IAAIU,GAAWhf,KAAK8D,QAAS,CACvCub,oBAAqB,CAAC,MAAO,UAC7BiC,aAAc,CACVO,eAAgB,CAAE9d,KAAM,aAAc/B,MAAO,KAEjDge,kBAAoBjd,IAChB,MAAM5C,EAAOO,IAEb,SAAIP,GAEIA,EAAKT,SAAWM,KAAKoc,IACrBjc,EAAKd,SAAWW,KAAK+jB,SAAS3H,OAMlCpc,KAAK+jB,SAASnhB,QAAQkpB,gBACf9rB,KAAK+jB,SAASnhB,QAAQkpB,eAAe,CACxCtL,YAAazd,EACb3C,QAASM,EACTub,MAAOjc,MAIH,IAIpBA,KAAKqF,eACDrF,KAAKqpB,WACLrpB,KAAKgmB,QACLhmB,KAAKse,OACLte,KAAKse,OAAOO,QAAQ9b,IAChB/C,KAAK6e,OAAO9b,EAAM,IAG9B,CAEQ8b,OAAO9b,GACX,MAAM5C,EAAOO,IAEb,IAAKP,GAAQA,EAAKd,SAAWW,KAAK+jB,SAAS3H,GASvC,YANApc,KAAKqpB,WAAW5lB,KAAIiZ,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACf5Z,GAAK,CACRkZ,MAAOjc,KACP4c,IAAK,IAAIL,EAAYvc,KAAK+jB,UAC1B3jB,QAASM,KAKjB,MAAMupB,EAAgBjqB,KAAKyqB,QACtBR,aACC1qB,EAAUY,EAAKT,OAEfyyB,EAAgBlI,EAAa9N,SAAS5c,GAC5C,IAAK4yB,EAQD,YANAnyB,KAAKqpB,WAAW5lB,KAAIiZ,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACf5Z,GAAK,CACRkZ,MAAOjc,KACPI,QAASM,EACTkc,IAAK,IAAIL,EAAYvc,KAAK+jB,aAKlC,MAAMqO,EAAYnI,EAAarO,OAEzByW,EAAYD,EAAU9uB,QAAQ6uB,GACpC,IAAIG,EAAUrI,EAAarO,OAAOtY,QAAQtD,MAEnB,SAAnB+C,EAAMwR,UAA0C,QAAnBxR,EAAMwR,WACnC+d,EAAU/oB,KAAKD,IAAI,EAAGgpB,EAAU,IAEb,UAAnBvvB,EAAMwR,UAA2C,WAAnBxR,EAAMwR,WAChC8d,EAAYC,GACZA,IAEJA,EAAU/oB,KAAKF,IAAI+oB,EAAUnxB,OAAS,EAAGqxB,IAG7CrI,EAAa3N,UAAU+V,EAAWC,EACtC,ECjIG,MAAMC,WACDjF,GAiBRnuB,YAAYid,EAAYH,GACpBzc,MAAM4c,GAfO,KAAA4S,gCACb,IAAIzsB,EACC,KAAA0sB,+BACLjvB,KAAKgvB,gCAAgCjsB,MAEhC,KAAAmsB,wBAA0B,IAAI3sB,EAAmC,CACtEU,QAAQ,IAEH,KAAAksB,uBACLnvB,KAAKkvB,wBAAwBnsB,MAEhB,KAAAqsB,iBAAmB,IAAI7sB,EAC/B,KAAA8sB,gBAAoCrvB,KAAKovB,iBAAiBrsB,MAK/D/C,KAAKqF,eACDrF,KAAKgvB,gCACLhvB,KAAKkvB,wBACLlvB,KAAKovB,kBAGLnT,GACAjc,KAAK2pB,WAAW1N,EAExB,CAEOqT,eAAettB,GAClBhC,KAAKgvB,gCAAgCvrB,KAAKzB,EAC9C,CAEOutB,QAAQxsB,GACX/C,KAAKovB,iBAAiB3rB,KAAKV,EAC/B,EC5BG,MAAeyvB,WAGVtC,GAmBJzlB,eACA,OAAOzK,KAAKyyB,SAChB,CAEI/nB,WACA,OAAO1K,KAAK0yB,KAChB,CAEI1c,mBACA,MAAMlC,EAC4B,mBAAvB9T,KAAK2yB,cACN3yB,KAAK2yB,gBACL3yB,KAAK2yB,cAOf,OALI7e,IAAU9T,KAAK4yB,yBACf5yB,KAAK4yB,uBAAyB9e,EAC9B9T,KAAK6yB,qBAGF/e,CACX,CAEIoC,oBACA,MAAMnC,EAC6B,mBAAxB/T,KAAK8yB,eACN9yB,KAAK8yB,iBACL9yB,KAAK8yB,eAOf,OALI/e,IAAW/T,KAAK+yB,0BAChB/yB,KAAK+yB,wBAA0Bhf,EAC/B/T,KAAK6yB,qBAGF9e,CACX,CAEIoC,oBACA,MAAMpC,EAC6B,mBAAxB/T,KAAKgzB,eACNhzB,KAAKgzB,iBACLhzB,KAAKgzB,eAOf,OALIjf,IAAW/T,KAAKizB,0BAChBjzB,KAAKizB,wBAA0Blf,EAC/B/T,KAAK6yB,qBAGF9e,CACX,CAEIkC,mBACA,MAAMnC,EAC4B,mBAAvB9T,KAAKkzB,cACNlzB,KAAKkzB,gBACLlzB,KAAKkzB,cAOf,OALIpf,IAAU9T,KAAKmzB,yBACfnzB,KAAKmzB,uBAAyBrf,EAC9B9T,KAAK6yB,qBAGF/e,CACX,CAEI2Q,eACA,OAAOzkB,KAAK4c,IAAI6H,QACpB,CAEAtlB,YACIid,EACAT,EACA/Y,EAMAga,GAEApd,MAAM4c,EAAIT,EAAWiB,QAAAA,EAAU,IAAI2V,GAAqBnW,IA/FpD,KAAAwW,uBAAyB,EACzB,KAAAO,uBAAyB9mB,OAAO+mB,iBAChC,KAAAL,wBAA0B,EAC1B,KAAAE,wBAA0B5mB,OAAO+mB,iBAEjC,KAAAT,cAAyC,EACzC,KAAAG,eAA0C,EAC1C,KAAAI,cAAyC7mB,OAAO+mB,iBAChD,KAAAJ,eAA0C3mB,OAAO+mB,iBAEjD,KAAAV,OAAQ,EAEC,KAAArd,aAAe,IAAI9S,EAC3B,KAAA4O,YACLnR,KAAKqV,aAAatS,MAmFmB,iBAA1BH,aAAO,EAAPA,EAASoT,gBAChBhW,KAAK2yB,cAAgB/vB,EAAQoT,cAEI,iBAA1BpT,aAAO,EAAPA,EAASqT,gBAChBjW,KAAKkzB,cAAgBtwB,EAAQqT,cAEK,iBAA3BrT,aAAO,EAAPA,EAASsT,iBAChBlW,KAAK8yB,eAAiBlwB,EAAQsT,eAEI,iBAA3BtT,aAAO,EAAPA,EAASuT,iBAChBnW,KAAKgzB,eAAiBpwB,EAAQuT,eAGlCnW,KAAK4c,IAAI+M,WAAW3pB,MAEpBA,KAAKqF,eACDrF,KAAK4c,IAAIyR,oBAAoBtrB,IACzB,MAAM,UAAEiqB,GAAcjqB,GAChB,SAAEghB,GAAa/jB,KAAKyqB,QAC1B1G,EAAShZ,WAAW/K,KAAMgtB,EAAU,IAExChtB,KAAK4c,IAAI6R,gBAAe,KACpB,MAAM,SAAE1K,GAAa/jB,KAAKyqB,QAC1B1G,EAASS,UAAUxkB,KAAK,IAE5BA,KAAK4c,IAAIqS,gCAAgClsB,IAEH,iBAAvBA,EAAMiT,cACiB,mBAAvBjT,EAAMiT,eAEbhW,KAAK2yB,cAAgB5vB,EAAMiT,cAGI,iBAAxBjT,EAAMmT,eACkB,mBAAxBnT,EAAMmT,gBAEblW,KAAK8yB,eAAiB/vB,EAAMmT,eAGE,iBAAvBnT,EAAMkT,cACiB,mBAAvBlT,EAAMkT,eAEbjW,KAAKkzB,cAAgBnwB,EAAMkT,cAGI,iBAAxBlT,EAAMoT,eACkB,mBAAxBpT,EAAMoT,gBAEbnW,KAAKgzB,eAAiBjwB,EAAMoT,cAAc,IAGlDnW,KAAK4c,IAAIyS,iBAAiBtsB,IACtB/C,KAAKqV,aAAa5R,KAAK,CACnBsQ,OAAQhR,EAAMgR,OACdD,MAAO/Q,EAAM+Q,OACf,IAEN9T,KAAKqV,aAEb,CAEAtK,WAAWiiB,GACPhtB,KAAK4c,IAAIsR,uBAAuBzqB,KAAK,CAAEupB,aAC3C,CAEAxI,UAAUC,GACNzkB,KAAK4c,IAAI0R,mBAAmB7qB,KAAK,CAAEghB,YACvC,CAEAuF,KAAK4E,GACGA,EAAWzY,gBACXnW,KAAKgzB,eAAiBpE,EAAWzY,eAEjCyY,EAAW1Y,gBACXlW,KAAK8yB,eAAiBlE,EAAW1Y,eAEjC0Y,EAAW3Y,eACXjW,KAAKkzB,cAAgBtE,EAAW3Y,cAEhC2Y,EAAW5Y,eACXhW,KAAK2yB,cAAgB/D,EAAW5Y,cAGpChW,KAAKyyB,UAAY7D,EAAWnkB,SAC5BzK,KAAK0yB,QAAU9D,EAAWlkB,KAE1BlL,MAAMwqB,KAAK4E,GAEyB,kBAAzBA,EAAW5B,WAClBhtB,KAAK+K,WAAW6jB,EAAW5B,UAEnC,CAEQ6F,oBACJ7yB,KAAK4c,IAAIsS,wBAAwBzrB,KAAK,CAClCuS,aAAchW,KAAK4yB,uBACnB3c,aAAcjW,KAAKmzB,uBACnBjd,cAAelW,KAAK+yB,wBACpB5c,cAAenW,KAAKizB,yBAE5B,CAEA5Z,SACI,MAAMtE,EAAQvV,MAAM6Z,SACdga,EAAWrxB,GACbA,IAAUqK,OAAO+mB,sBAAmBlzB,EAAY8B,EAC9CsxB,EAAWtxB,GAAmBA,GAAS,OAAI9B,EAAY8B,EAE7D,OAAA0a,OAAAC,OAAAD,OAAAC,OAAA,GACO5H,GAAK,CACRmB,cAAeod,EAAQtzB,KAAKkW,eAC5BC,cAAekd,EAAQrzB,KAAKmW,eAC5BH,aAAcsd,EAAQtzB,KAAKgW,cAC3BC,aAAcod,EAAQrzB,KAAKiW,cAC3BvL,KAAM1K,KAAK0K,KACXD,SAAUzK,KAAKyK,UAEvB,ECpPG,MAAM8oB,WAAkChB,GAQvCxN,iBACA,IAAK/kB,KAAKwzB,OACN,MAAM,IAAI1xB,MAAM,6CAEpB,OAAO9B,KAAKwzB,OAAOjP,MAAMQ,UAC7B,CAEA5lB,YAAYid,EAA6B2H,GACrCvkB,MAAM4c,GAD+B,KAAA2H,SAAAA,EAZhC,KAAAkF,0BACL,IAAI1mB,EACC,KAAAkxB,yBACLzzB,KAAKipB,0BAA0BlmB,MAY/B/C,KAAKqF,eAAerF,KAAKipB,0BAC7B,CAEAyK,OAAO9wB,GAA2D,MAC9D,IAAK5C,KAAKwzB,OACN,MAAM,IAAI1xB,MAAM,6CAGpB9B,KAAK+jB,SAAS4P,iBACV/wB,EAAQob,MACRhe,KAAKwzB,OAAOpX,QACZlc,EACgB,QAAhB2B,EAAAe,EAAQ2R,gBAAQ,IAAA1S,EAAAA,EAAI,SAE5B,CAEA8nB,WAAW3L,GACPhe,KAAKwzB,OAASxV,CAClB,ECzBG,MAAM4V,WACDpB,GAKJ5W,aACA,OAAO5b,KAAK6zB,OAAOjY,MACvB,CAEI4B,kBACA,OAAOxd,KAAK6zB,OAAOrW,WACvB,CAEInZ,WACA,OAAOrE,KAAK6zB,OAAOxvB,IACvB,CAEIkgB,YACA,OAAOvkB,KAAK6zB,MAChB,CAEIvP,aACA,OAAOtkB,KAAK6zB,OAAOvP,MACvB,CAEIA,WAAOtiB,GACPhC,KAAK6zB,OAAOvP,OAAStiB,CACzB,CAEI2mB,aACA,OAAO3oB,KAAK6zB,OAAOlL,MACvB,CAEAxpB,YACI4kB,EACA3H,EACAxZ,GAEApD,MACI4c,EACA,oBACA,CACIlG,cAAe,IACfF,aAAc,KAElB,IAAIud,GAA0BnX,EAAI2H,IAGtC/jB,KAAK4c,IAAI+M,WAAW3pB,MAEpBA,KAAK6zB,OAAS,IAAIzL,GACdpoB,KAAK8D,QACLigB,EACA3H,EACAxZ,EACA5C,KAER,CAEA2pB,aACI3pB,KAAK6zB,OAAOlK,YAChB,CAEAnF,UAAUC,GACNjlB,MAAMglB,UAAUC,GAChBzkB,KAAKukB,MAAMC,UAAUC,EACzB,CAEApR,OAAOS,EAAeC,GAClBvU,MAAM6T,OAAOS,EAAOC,GACpB/T,KAAKukB,MAAMlR,OAAOS,EAAOC,EAC7B,CAEAsc,eACI,OAAOrwB,KAAK6zB,MAChB,CAEAxa,SACI,OAAOrZ,KAAKukB,MAAMlL,QACtB,ECxEG,MAAMya,WACDvB,GAgBJV,YACA,OAAO7xB,KAAKic,MAAM4V,KACtB,CAEItG,oBAAa,MACb,SAAmB,QAAV1pB,EAAA7B,KAAKge,aAAK,IAAAnc,OAAA,EAAAA,EAAE4iB,SACzB,CAEIzG,UAAMhc,GACN,MAAM+xB,EAAmB/zB,KAAKurB,cAE9BvrB,KAAKwzB,OAASxxB,EAEdhC,KAAKg0B,kBAAkBvwB,OAEnBzD,KAAKwzB,SACLxzB,KAAK2F,WAAW3D,MAAQhC,KAAKwzB,OAAO5W,IAAI2R,mBAAkB,KACtDvuB,KAAK8sB,wBAAwBrpB,MAAM,IAGnCzD,KAAKurB,gBAAkBwI,GACvB/zB,KAAK8sB,wBAAwBrpB,OAGzC,CAEIua,YACA,OAAOhe,KAAKwzB,MAChB,CAEAr0B,YACY8c,EACR+B,EACiB+F,GAEjBvkB,MAAMyc,EAAMG,IAJJ,KAAAH,MAAAA,EAES,KAAA8H,SAAAA,EA5CZ,KAAAkQ,kBAAoB,IAAI1xB,EACxB,KAAA2xB,iBAAmBl0B,KAAKi0B,kBAAkBlxB,MAElC,KAAA+pB,wBAA0B,IAAIvqB,EACtC,KAAA4a,uBAAyBnd,KAAK8sB,wBAAwB/pB,MAE9C,KAAAixB,kBAAoB,IAAIzxB,EAChC,KAAA4xB,iBAAmBn0B,KAAKg0B,kBAAkBjxB,MAElC,KAAA4C,WAAa,IAAIF,EAuC9BzF,KAAK2pB,WAAW1N,GAEhBjc,KAAKwzB,OAASxV,EAEdhe,KAAKqF,eACDrF,KAAK2F,WACL3F,KAAKi0B,kBACLj0B,KAAKg0B,kBACLh0B,KAAK8sB,wBAEb,CAEA4G,OAAO9wB,GAIN,MACG5C,KAAK+jB,SAAS4P,iBACV/wB,EAAQob,MACRhe,KAAKwzB,OAAOpX,GACZpc,KAAKic,MAAMG,GACK,QAAhBva,EAAAe,EAAQ2R,gBAAQ,IAAA1S,EAAAA,EAAI,SACpBe,EAAQS,MAEhB,CAEA+wB,SAASvC,GACL7xB,KAAKic,MAAMmY,SAASvC,EACxB,CAEAwC,QACIr0B,KAAKge,MAAMuG,MAAMpB,WAAWnjB,KAAKic,MACrC,EChGG,MAAMqY,WACDxvB,EASJ+pB,aACA,OAAO7uB,KAAKyqB,OAChB,CAEIoH,YACA,OAAO7xB,KAAKu0B,MAChB,CAEIvW,YACA,OAAOhe,KAAKwzB,MAChB,CAEAr0B,YACoBid,EAChB2H,EACiBkG,EACjBjM,EACS3T,GAET7K,QANgB,KAAA4c,GAAAA,EAEC,KAAA6N,aAAAA,EAER,KAAA5f,KAAAA,EAGTrK,KAAKwzB,OAASxV,EAEdhe,KAAK4c,IAAM,IAAIkX,GAAqB9zB,KAAMA,KAAKwzB,OAAQzP,GAEvD/jB,KAAKqF,eACDrF,KAAK4c,IAAI6R,gBAAe,KACpB1K,EAAS4D,eAAe3nB,KAAK,IAEjCA,KAAK4c,IAAIyS,iBAAiBtsB,IAGtB/C,KAAKge,MAAMpB,IAAI2S,QAAQxsB,EAAM,IAGzC,CAEOinB,KAAK6E,GACR7uB,KAAKyqB,QAAUoE,EAAOA,OAEtB7uB,KAAKqK,KAAK2f,KAAItN,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACTkS,GAAM,CACTjS,IAAK5c,KAAK4c,IACVqN,aAAcjqB,KAAKiqB,gBAGvBjqB,KAAKo0B,SAASvF,EAAOgD,MACzB,CAEA3V,QACIlc,KAAK4c,IAAIoR,cAAcvqB,MAC3B,CAEO4V,SACH,MAA4B,CACxB+C,GAAIpc,KAAKoc,GACToY,iBAAkBx0B,KAAKqK,KAAKmqB,iBAC5BC,aAAcz0B,KAAKqK,KAAKoqB,aACxB5F,OACInS,OAAO6T,KAAKvwB,KAAKyqB,SAAW,CAAC,GAAGxpB,OAAS,EACnCjB,KAAKyqB,aACLvqB,EACV2xB,MAAO7xB,KAAK6xB,MAEpB,CAEAuC,SAASvC,GACkBA,IAAU7xB,KAAK6xB,QAGlC7xB,KAAKu0B,OAAS1C,EAEd7xB,KAAKqK,KAAKqgB,OAAO,CACbmE,OAAQ,CACJA,OAAQ7uB,KAAKyqB,QACboH,MAAO7xB,KAAK6xB,SAGpB7xB,KAAK4c,IAAIqX,kBAAkBxwB,KAAK,CAAEouB,UAE1C,CAEOnH,OAAO3nB,GAEV/C,KAAKyqB,QAAO/N,OAAAC,OAAAD,OAAAC,OAAA,GACJ3c,KAAKyqB,SAAW,CAAC,GAClB1nB,EAAM8rB,QAOb,IAAK,MAAMyB,KAAO5T,OAAO6T,KAAKxtB,EAAM8rB,aACN3uB,IAAtB6C,EAAM8rB,OAAOyB,WACNtwB,KAAKyqB,QAAQ6F,GAK5BtwB,KAAKqK,KAAKqgB,OAAO,CACbmE,OAAQ,CACJA,OAAQ7uB,KAAKyqB,QACboH,MAAO7xB,KAAK6xB,QAGxB,CAEOhH,kBACH7M,EACAuN,GAEAvrB,KAAKwzB,OAASxV,EACdhe,KAAK4c,IAAIoB,MAAQA,EAEjB,MAAM0W,EAAiB10B,KAAKwzB,OAAOjP,MAAM8G,cAAcrrB,MAEvDA,KAAK4c,IAAI0R,mBAAmB7qB,KAAK,CAC7BghB,SAAU8G,GAAiBmJ,IAE/B10B,KAAK4c,IAAIsR,uBAAuBzqB,KAAK,CACjCupB,UAAW0H,IAGf10B,KAAKqK,KAAKwgB,kBACN7qB,KAAKwzB,OACLxzB,KAAKwzB,OAAOjP,MAAM8G,cAAcrrB,MAExC,CAEOqT,OAAOS,EAAeC,GAEzB/T,KAAK4c,IAAIgR,sBAAsBnqB,KAAK,CAChCqQ,QACAC,OAAQA,IAGZ/T,KAAKqK,KAAKgJ,OAAOS,EAAOC,EAC5B,CAEOtS,UACHzB,KAAK4c,IAAInb,UACTzB,KAAKqK,KAAK5I,SACd,ECjLJ,MAAMkzB,GAA4B9F,IAM9B,MAAM+F,EAAMntB,SAASotB,gBAAgB,6BAA8B,OACnED,EAAIE,eAAe,KAAM,SAAUjG,EAAO9a,QAC1C6gB,EAAIE,eAAe,KAAM,QAASjG,EAAO/a,OACzC8gB,EAAIE,eAAe,KAAM,UAAWjG,EAAOkG,SAC3CH,EAAIE,eAAe,KAAM,cAAe,SACxCF,EAAIE,eAAe,KAAM,YAAa,SACtCF,EAAInuB,UAAUjD,IAAI,gBAClB,MAAMiX,EAAOhT,SAASotB,gBAAgB,6BAA8B,QAGpE,OAFApa,EAAKqa,eAAe,KAAM,IAAKjG,EAAOpU,MACtCma,EAAIllB,YAAY+K,GACTma,CAAG,EAGDI,GAAoBA,IAC7BL,GAAyB,CACrB7gB,MAAO,KACPC,OAAQ,KACRghB,QAAS,YACTta,KAAM,+HCjBP,MAAMwa,WAAmBnwB,EASxBhB,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,cACIK,QAPI,KAAAqvB,OAAuC,CAAC,EAS5C7uB,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,cAE1B9G,KAAKk1B,SAAWztB,SAAS4J,cAAc,OACvCrR,KAAKk1B,SAASpuB,UAAY,cAE1B9G,KAAKm1B,iBAAmB1tB,SAAS4J,cAAc,OAC/CrR,KAAKm1B,iBAAiBruB,UAAY,mBAElC9G,KAAKo1B,MAAQ3tB,SAAS4J,cAAc,MACpCrR,KAAKo1B,MAAMtuB,UAAY,WAEvB9G,KAAKq1B,OAAS5tB,SAAS4J,cAAc,OACrCrR,KAAKq1B,OAAOvuB,UAAY,aACxB9G,KAAKq1B,OAAO3lB,YAAYslB,MAGxBh1B,KAAKyiB,SAAS/S,YAAY1P,KAAKk1B,UAC/Bl1B,KAAKyiB,SAAS/S,YAAY1P,KAAKm1B,kBAC/Bn1B,KAAKm1B,iBAAiBzlB,YAAY1P,KAAKo1B,OACvCp1B,KAAKo1B,MAAM1lB,YAAY1P,KAAKq1B,QAE5Br1B,KAAKqF,eACDnB,EAAsBlE,KAAKm1B,iBAAkB,aAAc9D,IACvDA,EAAG5S,gBAAgB,KAI3Bze,KAAKs1B,QACT,CAEO5K,OAAO3nB,GACV/C,KAAK6uB,OAAMnS,OAAAC,OAAAD,OAAAC,OAAA,GAAQ3c,KAAK6uB,QAAW9rB,EAAM8rB,QACzC7uB,KAAKs1B,QACT,CAEApZ,QACI,CAGG8N,KAAK6E,GACR7uB,KAAK6uB,OAASA,EACd7uB,KAAKk1B,SAASxP,YAAcmJ,EAAOgD,MAEnC3tB,EAAsBlE,KAAKq1B,OAAQ,SAAUhE,IACzCA,EAAG5S,iBACHze,KAAK6uB,OAAOjS,IAAIyX,OAAO,GAE/B,CAEAkB,cAAc/B,GACVxzB,KAAKs1B,QACT,CAEAE,qBAAqBC,GACjBz1B,KAAKs1B,QACT,CAEOjiB,OAAO4P,EAAgBC,GAC1B,CAGIoS,SACAt1B,KAAKk1B,SAASxP,cAAgB1lB,KAAK6uB,OAAOgD,QAC1C7xB,KAAKk1B,SAASxP,YAAc1lB,KAAK6uB,OAAOgD,MAEhD,ECrFG,SAAS6D,GACZtZ,EACAuZ,EACAC,EAGAC,EAGAC,EACA7T,QAPA,IAAA2T,IAAAA,EAEI,CAAC,QACL,IAAAC,IAAAA,EAEI,CAAC,GAIL,MAAME,EACuB,iBAAlBJ,EACDC,EAAWD,QACXz1B,EACJ81B,EACuB,iBAAlBL,EACDE,EAAoBF,QACpBz1B,EAEV,GAAI61B,GAAaC,EACb,MAAM,IAAIl0B,MACN,kBAAkBsa,kBAAmBuZ,4DAG7C,GAAIK,EAAoB,CACpB,IAAKF,EACD,MAAM,IAAIh0B,MACN,kBAAkBsa,+BAAgCuZ,6EAG1D,OAAOG,EAAyBJ,gBAC5BtZ,EACAuZ,EACAK,EACF,CAGN,IAAKD,EAAW,CACZ,GAAI9T,EACA,OAAOA,IAEX,MAAM,IAAIngB,MACN,kBAAkBsa,qBAAsBuZ,cAC1C,CAGN,OAAO,IAAII,EAAU3Z,EAAIuZ,EAC7B,CC9BO,MAAMM,GAOLlT,cACA,OAAO/iB,KAAKk1B,QAChB,CAEIrO,UACA,OAAO7mB,KAAKk2B,IAChB,CAEA/2B,YACqB4kB,EACA3H,EACRoY,EACAC,GAHQ,KAAA1Q,SAAAA,EACA,KAAA3H,GAAAA,EACR,KAAAoY,iBAAAA,EACA,KAAAC,aAAAA,EAfL,KAAAjB,OAAoC,KACpC,KAAAiC,gBAAkC,KAgBtCz1B,KAAKk1B,SAAWl1B,KAAKm2B,uBAAuBn2B,KAAKoc,GAAIoY,GACrDx0B,KAAKk2B,KAAOl2B,KAAKo2B,mBAAmBp2B,KAAKoc,GAAIqY,EACjD,CAEAzK,KAAK6E,GACD7uB,KAAK+iB,QAAQiH,KAAItN,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EAAIkS,GAAM,CAAEhI,IAAK7mB,KAAK6mB,OACzC7mB,KAAK6mB,IAAImD,KAAK6E,EAClB,CAEAhE,kBACI7M,EACA0W,GAEI1W,IAAUhe,KAAKwzB,SACfxzB,KAAKwzB,OAASxV,EACVhe,KAAKk1B,SAASK,eACdv1B,KAAKk1B,SAASK,cAAcvX,GAE5Bhe,KAAKk2B,KAAKX,eACVv1B,KAAKk2B,KAAKX,cAAcvX,IAI5B0W,IAAmB10B,KAAKy1B,kBACxBz1B,KAAKy1B,gBAAkBf,EACnB10B,KAAKk1B,SAASM,sBACdx1B,KAAKk1B,SAASM,qBAAqBd,GAEnC10B,KAAKk2B,KAAKV,sBACVx1B,KAAKk2B,KAAKV,qBAAqBd,GAG3C,CAEArhB,OAAOS,EAAeC,GAAc,QACb,QAAnBsN,GAAAxf,EAAA7B,KAAK+iB,SAAQ1P,cAAM,IAAAgO,GAAAA,EAAA7Z,KAAA3F,EAAGiS,EAAOC,EACjC,CAEA2W,OAAO3nB,GAAuB,YACP,QAAnBse,GAAAxf,EAAA7B,KAAK+iB,SAAQ2H,cAAM,IAAArJ,GAAAA,EAAA7Z,KAAA3F,EAAGkB,GACP,QAAfwe,GAAAC,EAAAxhB,KAAK6mB,KAAI6D,cAAM,IAAAnJ,GAAAA,EAAA/Z,KAAAga,EAAGze,EACtB,CAEAtB,UAAO,YACiB,QAApB4f,GAAAxf,EAAA7B,KAAK+iB,SAAQthB,eAAO,IAAA4f,GAAAA,EAAA7Z,KAAA3F,GACJ,QAAhB0f,GAAAC,EAAAxhB,KAAK6mB,KAAIplB,eAAO,IAAA8f,GAAAA,EAAA/Z,KAAAga,EACpB,CAEQ2U,uBACJ/Z,EACAuZ,GAAqB,MAErB,OAAOD,GACHtZ,EACAuZ,EACA31B,KAAK+jB,SAASnhB,QAAQgzB,YAAc,CAAC,EACrC51B,KAAK+jB,SAASnhB,QAAQizB,oBACyB,QAA/Ch0B,EAAA7B,KAAK+jB,SAASnhB,QAAQyzB,iCAAyB,IAAAx0B,OAAA,EAAAA,EAAEkhB,QAEzD,CAEQqT,mBACJha,EACAuZ,GAAsB,QAEtB,OAAIA,EACOD,GACHtZ,EACAuZ,EACA31B,KAAK+jB,SAASnhB,QAAQ0zB,cACtBt2B,KAAK+jB,SAASnhB,QAAQ2zB,uBACyB,QAA/C10B,EAAA7B,KAAK+jB,SAASnhB,QAAQyzB,iCAAyB,IAAAx0B,OAAA,EAAAA,EAAEglB,KACjD,IAAM,IAAIoO,KAEPj1B,KAAK+jB,SAASnhB,QAAQ4zB,oBACtBd,GACHtZ,EACApc,KAAK+jB,SAASnhB,QAAQ4zB,oBACtBx2B,KAAK+jB,SAASnhB,QAAQ0zB,cACtBt2B,KAAK+jB,SAASnhB,QAAQ2zB,uBACyB,QAA/ClV,EAAArhB,KAAK+jB,SAASnhB,QAAQyzB,iCAAyB,IAAAhV,OAAA,EAAAA,EAAEwF,KACjD,IAAM,IAAIoO,KAGP,IAAIA,EAEnB,EC5GG,MAAMwB,GACTt3B,YAA6BkU,GAAA,KAAAA,OAAAA,CAA4B,CAElD4G,SACHyc,EACA1Y,GAAyB,MAEzB,MAAMze,EAAUm3B,EAAUta,GACpByS,EAAS6H,EAAU7H,OACnBgD,EAAQ6E,EAAU7E,MAElB8E,EAAYD,EAA0BrsB,KAEtCmqB,EAAmBmC,EACnBA,EAAS5T,QAAQ3G,GACjBsa,EAAUlC,kBAAoB,UAC9BC,EAAekC,EACH,QAAZ90B,EAAA80B,EAAS9P,WAAG,IAAAhlB,OAAA,EAAAA,EAAEua,GACdsa,EAAUjC,aAEVpqB,EAAO,IAAI4rB,GACbj2B,KAAKqT,OACL9T,EACAi1B,EACAC,GAGExY,EAAQ,IAAIqY,GACd/0B,EACAS,KAAKqT,OACL,IAAIiK,GAAYtd,KAAKqT,QACrB2K,EACA3T,GAQJ,OALA4R,EAAM+N,KAAK,CACP6H,MAAOA,GAAStyB,EAChBsvB,OAAQA,GAAU,CAAC,IAGhB5S,CACX,ECnDG,MAAM2a,WACD9xB,EAOJhB,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,cACIK,QACAQ,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,YAE1B,MAAM+qB,EAAQpqB,SAAS4J,cAAc,OACrCwgB,EAAM/qB,UAAY,kBAElB,MAAM+vB,EAAapvB,SAAS4J,cAAc,QAC1CwlB,EAAWhsB,MAAMisB,SAAW,IAE5B,MAAM/T,EAAUtb,SAAS4J,cAAc,OACvC0R,EAAQjc,UAAY,oBAEpB9G,KAAKyiB,SAAS/S,YAAYmiB,GAC1B7xB,KAAKyiB,SAAS/S,YAAYqT,GAE1B,MAAMgU,EAAmBtvB,SAAS4J,cAAc,OAChD0lB,EAAiBjwB,UAAY,oBAE7B,MAAMkwB,EAAcvvB,SAAS4J,cAAc,OAC3C2lB,EAAYlwB,UAAY,eACxBkwB,EAAYtnB,YAAYslB,MAExB+B,EAAiBrnB,YAAYsnB,GAE7BnF,EAAMniB,YAAYmnB,GAClBhF,EAAMniB,YAAYqnB,GAElB/2B,KAAKqF,eACDnB,EAAsB8yB,EAAa,SAAU3F,IAAM,MAC/CA,EAAG5S,iBACCze,KAAKwzB,SACI,QAAT3xB,EAAA7B,KAAKi3B,YAAI,IAAAp1B,GAAAA,EAAEkc,YAAY/d,KAAKwzB,QAAQ,IAIpD,CAEA9I,OAAO1nB,GACH,CAGJkZ,QACI,CAGJ7I,OAAO4P,EAAgBC,GACnB,CAGJ8G,KAAKS,GACDzqB,KAAKi3B,KAAOxM,EAAQR,aACpBjqB,KAAKs1B,QACT,CAEAzK,kBAAkB7M,EAA2BkZ,GACzCl3B,KAAKwzB,OAASxV,EACdhe,KAAKs1B,QACT,CAEA7zB,UACIjC,MAAMiC,SACV,CAEQ6zB,SACJ,MAAM6B,KAAgBn3B,KAAKi3B,MAAQj3B,KAAKi3B,KAAK5yB,MAAQ,GACrDwC,EAAY7G,KAAK8D,QAAS,cAAeqzB,EAC7C,EC9EJ,MAAMC,GAAsB,MACxB,IAAIpjB,EAA+B,KAWnC,OATA,SAAmBlQ,GACXkQ,IAAalQ,GAAwB,OAAbkQ,GACxBnN,EAAYmN,EAAU,qBAAqB,GAG/CnN,EAAY/C,EAAS,qBAAqB,GAC1CkQ,EAAWlQ,CACf,CAGH,EAb2B,GAerB,MAAMuzB,WAAgBvyB,EAYzB3F,YACqByD,GAWjBpD,QAXiB,KAAAoD,QAAAA,EAZb,KAAA6f,SAAwBhb,SAAS4J,cAAc,OAEtC,KAAAgE,aAAe,IAAI9S,EAC3B,KAAA4O,YAA2BnR,KAAKqV,aAAatS,MAErC,KAAAu0B,gBAAkB,IAAI/0B,EAC9B,KAAAg1B,eAA8Bv3B,KAAKs3B,gBAAgBv0B,MAmBxD/C,KAAKqF,eAAerF,KAAKqV,aAAcrV,KAAKs3B,iBAE5Ct3B,KAAKyiB,SAAS3b,UAAY,sBAE1B9G,KAAKw3B,YAAY,OACjBx3B,KAAKw3B,YAAY,UACjBx3B,KAAKw3B,YAAY,QACjBx3B,KAAKw3B,YAAY,SACjBx3B,KAAKw3B,YAAY,WACjBx3B,KAAKw3B,YAAY,YACjBx3B,KAAKw3B,YAAY,cACjBx3B,KAAKw3B,YAAY,eAEjBx3B,KAAKyiB,SAAS/S,YAAY1P,KAAK4C,QAAQmgB,SACvC/iB,KAAK4C,QAAQgI,UAAU8E,YAAY1P,KAAKyiB,UAGxCziB,KAAKy3B,UAAU,CACX1jB,OAAQ/T,KAAK4C,QAAQmR,OACrBD,MAAO9T,KAAK4C,QAAQkR,MACpBF,IAAK5T,KAAK4C,QAAQgR,IAClBD,KAAM3T,KAAK4C,QAAQ+Q,MAE3B,CAEA8jB,UACIC,QAAA,IAAAA,IAAAA,EAKK,CAAC,GAEuB,iBAAlBA,EAAO3jB,SACd/T,KAAKyiB,SAAS5X,MAAMkJ,OAAS,GAAG2jB,EAAO3jB,YAEf,iBAAjB2jB,EAAO5jB,QACd9T,KAAKyiB,SAAS5X,MAAMiJ,MAAQ,GAAG4jB,EAAO5jB,WAEhB,iBAAf4jB,EAAO9jB,MACd5T,KAAKyiB,SAAS5X,MAAM+I,IAAM,GAAG8jB,EAAO9jB,SAEb,iBAAhB8jB,EAAO/jB,OACd3T,KAAKyiB,SAAS5X,MAAM8I,KAAO,GAAG+jB,EAAO/jB,UAGzC,MAAMgkB,EAAgB33B,KAAK4C,QAAQgI,UAAU+U,wBACvCiY,EAAc53B,KAAKyiB,SAAS9C,wBAK5BkY,EAAUtuB,KAAKD,IACjB,EACAsuB,EAAY9jB,MAAQ9T,KAAK4C,QAAQk1B,wBAI/BC,EAAUxuB,KAAKD,IACjB,EACAsuB,EAAY7jB,OAAS/T,KAAK4C,QAAQo1B,yBAGhCrkB,EAAOvK,EACTwuB,EAAYjkB,KAAOgkB,EAAchkB,MAChCkkB,EACDtuB,KAAKD,IAAI,EAAGquB,EAAc7jB,MAAQ8jB,EAAY9jB,MAAQ+jB,IAGpDjkB,EAAMxK,EACRwuB,EAAYhkB,IAAM+jB,EAAc/jB,KAC/BmkB,EACDxuB,KAAKD,IAAI,EAAGquB,EAAc5jB,OAAS6jB,EAAY7jB,OAASgkB,IAG5D/3B,KAAKyiB,SAAS5X,MAAM8I,KAAO,GAAGA,MAC9B3T,KAAKyiB,SAAS5X,MAAM+I,IAAM,GAAGA,MAE7B5T,KAAKqV,aAAa5R,MACtB,CAEA4V,SACI,MAAMzO,EAAY5K,KAAK4C,QAAQgI,UAAU+U,wBACnC7b,EAAU9D,KAAKyiB,SAAS9C,wBAE9B,MAAO,CACH/L,IAAK9P,EAAQ8P,IAAMhJ,EAAUgJ,IAC7BD,KAAM7P,EAAQ6P,KAAO/I,EAAU+I,KAC/BG,MAAOhQ,EAAQgQ,MACfC,OAAQjQ,EAAQiQ,OAExB,CAEAkkB,UACIC,EACAt1B,QAAA,IAAAA,IAAAA,EAAmC,CAAE0kB,YAAY,IAEjD,MAAM6Q,EAAO,IAAI1yB,EAEX2yB,EAAQA,KACV,IAAI1kB,EAA0C,KAE9C,MAAM9B,EAAU,IACTvK,EAAqB,aACrBA,EAAqB,YAG5B,IAAK,MAAMwK,KAAUD,EACjBC,EAAOhH,MAAMC,cAAgB,OAGjCqtB,EAAKn2B,MAAQ,IAAI8C,EACb,CACIrD,QAASA,KACL,IAAK,MAAMoQ,KAAUD,EACjBC,EAAOhH,MAAMC,cAAgB,MAAO,GAIhDjH,EAA4BwE,OAAQ,aAAc3E,IAC9C,MAAMi0B,EACF33B,KAAK4C,QAAQgI,UAAU+U,wBACrB7R,EAAIpK,EAAEqO,QAAU4lB,EAAchkB,KAC9BiM,EAAIlc,EAAEsO,QAAU2lB,EAAc/jB,IAEpC/M,EACI7G,KAAKyiB,SACL,gCACA,GAGJ,MAAMmV,EAAc53B,KAAKyiB,SAAS9C,wBACnB,OAAXjM,IACAA,EAAS,CACL5F,EAAGpK,EAAEqO,QAAU6lB,EAAYjkB,KAC3BiM,EAAGlc,EAAEsO,QAAU4lB,EAAYhkB,MAInC,MAAMikB,EAAUtuB,KAAKD,IACjB,EACAsuB,EAAY9jB,MAAQ9T,KAAK4C,QAAQk1B,wBAE/BC,EAAUxuB,KAAKD,IACjB,EACAsuB,EAAY7jB,OACR/T,KAAK4C,QAAQo1B,yBAGfrkB,EAAOvK,EACT0E,EAAI4F,EAAO5F,GACV+pB,EACDtuB,KAAKD,IACD,EACAquB,EAAc7jB,MAAQ8jB,EAAY9jB,MAAQ+jB,IAI5CjkB,EAAMxK,EACRwW,EAAIlM,EAAOkM,GACVmY,EACDxuB,KAAKD,IACD,EACAquB,EAAc5jB,OAAS6jB,EAAY7jB,OAASgkB,IAIpD/3B,KAAKy3B,UAAU,CAAE7jB,MAAKD,QAAO,IAEjC9P,EAA4BwE,OAAQ,WAAW,KAC3CxB,EACI7G,KAAKyiB,SACL,gCACA,GAGJ0V,EAAK12B,UACLzB,KAAKs3B,gBAAgB7zB,MAAM,IAElC,EAGLzD,KAAKqF,eACD8yB,EACAj0B,EAAsBg0B,EAAY,aAAcn1B,IACxCA,EAAMqhB,iBACNrhB,EAAM0b,iBAMN/V,EAAsB3F,IAI1Bq1B,GAAO,IAEXl0B,EACIlE,KAAK4C,QAAQmgB,QACb,aACChgB,IACOA,EAAMqhB,kBAMN1b,EAAsB3F,IAItBA,EAAM+hB,UACNsT,GAAQ,IAIpBl0B,EACIlE,KAAK4C,QAAQmgB,QACb,aACA,KACIqU,GAAoBp3B,KAAKyiB,SAAS,IAEtC,IAIR2U,GAAoBp3B,KAAKyiB,UAErB7f,EAAQ0kB,YACR8Q,GAER,CAEQZ,YACJ5e,GAUA,MAAMyf,EAAsB5wB,SAAS4J,cAAc,OACnDgnB,EAAoBvxB,UAAY,oBAAoB8R,IACpD5Y,KAAKyiB,SAAS/S,YAAY2oB,GAE1B,MAAMF,EAAO,IAAI1yB,EAEjBzF,KAAKqF,eACD8yB,EACAj0B,EAAsBm0B,EAAqB,aAAc30B,IACrDA,EAAE+a,iBAEF,IAAI6Z,EAKO,KAEX,MAAM1mB,EAAU,IACTvK,EAAqB,aACrBA,EAAqB,YAG5B,IAAK,MAAMwK,KAAUD,EACjBC,EAAOhH,MAAMC,cAAgB,OAGjCqtB,EAAKn2B,MAAQ,IAAI8C,EACbjB,EAA4BwE,OAAQ,aAAc3E,IAC9C,MAAMi0B,EACF33B,KAAK4C,QAAQgI,UAAU+U,wBACrBiY,EACF53B,KAAKyiB,SAAS9C,wBAEZC,EAAIlc,EAAEsO,QAAU2lB,EAAc/jB,IAC9B9F,EAAIpK,EAAEqO,QAAU4lB,EAAchkB,KAYpC,IAAIC,EACAG,EACAJ,EACAG,EAbkB,OAAlBwkB,IAEAA,EAAgB,CACZC,UAAW3Y,EACX4Y,eAAgBZ,EAAY7jB,OAC5B0kB,UAAW3qB,EACX4qB,cAAed,EAAY9jB,QASnC,MAAMkkB,EACFh4B,KAAK4C,QAAQo1B,wBACXF,EACF93B,KAAK4C,QAAQk1B,uBAEjB,SAASa,IACL/kB,EAAMxK,EACFwW,GACCvT,OAAOusB,UACRN,EAAeC,UACXD,EAAeE,eACfb,EAAc5jB,OACZ4jB,EAAc5jB,OACVikB,EACJzuB,KAAKD,IACD,EACAgvB,EAAeC,UACXD,EAAeE,eACfnB,GAAQwB,iBAG1B9kB,EACIukB,EAAeC,UACfD,EAAeE,eACf5kB,CACR,CAEA,SAASklB,IACLllB,EACI0kB,EAAeC,UACfD,EAAeE,eAEnBzkB,EAAS3K,EACLwW,EAAIhM,EACJA,EAAM,GACCA,EAAMokB,EACPX,GAAQwB,eACdxsB,OAAOusB,UAEf,CAEA,SAASG,IACLplB,EAAOvK,EACH0E,GACCzB,OAAOusB,UACRN,EAAeG,UACXH,EAAeI,cACff,EAAc7jB,MACZ6jB,EAAc7jB,MACVgkB,EACJvuB,KAAKD,IACD,EACAgvB,EAAeG,UACXH,EAAeI,cACfrB,GAAQ2B,gBAI1BllB,EACIwkB,EAAeG,UACfH,EAAeI,cACf/kB,CACR,CAEA,SAASslB,IACLtlB,EACI2kB,EAAeG,UACfH,EAAeI,cAEnB5kB,EAAQ1K,EACJ0E,EAAI6F,EACJA,EAAO,GACAA,EAAOmkB,EACRT,GAAQ2B,cACd3sB,OAAOusB,UAEf,CAEA,OAAQhgB,GACJ,IAAK,MACD+f,IACA,MACJ,IAAK,SACDG,IACA,MACJ,IAAK,OACDC,IACA,MACJ,IAAK,QACDE,IACA,MACJ,IAAK,UACDN,IACAI,IACA,MACJ,IAAK,WACDJ,IACAM,IACA,MACJ,IAAK,aACDH,IACAC,IACA,MACJ,IAAK,cACDD,IACAG,IAIRj5B,KAAKy3B,UAAU,CAAE1jB,SAAQD,QAAOF,MAAKD,QAAO,IAEhD,CACIlS,QAASA,KACL,IAAK,MAAMoQ,KAAUD,EACjBC,EAAOhH,MAAMC,cAAgB,MAAO,GAIhDjH,EAA4BwE,OAAQ,WAAW,KAC3C8vB,EAAK12B,UACLzB,KAAKs3B,gBAAgB7zB,MAAM,IAElC,IAGb,CAEShC,UACLzB,KAAKyiB,SAAS9b,SACdnH,MAAMiC,SACV,EA5be41B,GAAAwB,eAAiB,GACjBxB,GAAA2B,cAAgB,GCvB5B,MAAME,WACDp0B,EAGR3F,YAAqB6e,EAAoCmb,GACrD35B,QADiB,KAAAwe,MAAAA,EAAoC,KAAAmb,QAAAA,EAGrDn5B,KAAKqF,eAAe8zB,EACxB,CAEA5kB,SACImjB,GAOA13B,KAAKm5B,QAAQ1B,UAAUC,EAC3B,EC0GG,MAAM0B,WACD/M,GA8BJvgB,kBACA,OAAO9L,KAAKysB,SAAS3gB,WACzB,CAEIyR,kBACA,OAAOvd,KAAK4b,OAAO3a,MACvB,CAEI2a,aACA,OAAO5b,KAAKod,OAAOic,SAASrb,GAAUA,EAAMpC,QAChD,CAEIhZ,cACA,OAAO5C,KAAKs5B,QAChB,CAEI9b,kBACA,MAAMC,EAAczd,KAAKyd,YAEzB,GAAKA,EAIL,OAAOA,EAAYD,WACvB,CAEAre,YAAYyD,GACRpD,MAAM,CACF6P,oBAAoB,EACpBvD,YAAalJ,EAAQkJ,aAAeb,EAAYgB,WAChD0D,OAAQ/M,EAAQ+M,OAChBuI,cAAetV,EAAQsV,gBA1Dd,KAAAqhB,YAAc/vB,IACd,KAAAgwB,cAAgB,IAAI/C,GAA4Bz2B,MAGzD,KAAA0oB,UAAuC,KAE9B,KAAAW,WAAa,IAAI9mB,EACzB,KAAAia,UAAsCxc,KAAKqpB,WAAWtmB,MAE9C,KAAAwmB,kBAAoB,IAAIhnB,EAChC,KAAAya,iBACLhd,KAAKupB,kBAAkBxmB,MAEV,KAAAumB,eAAiB,IAAI/mB,EAC7B,KAAAua,cAAuC9c,KAAKspB,eAAevmB,MAEnD,KAAA02B,qBAAuB,IAAIl3B,EACnC,KAAAsZ,oBAAmC7b,KAAKy5B,qBAAqB12B,MAErD,KAAAymB,wBAA0B,IAAIjnB,EAGtC,KAAA2a,uBACLld,KAAKwpB,wBAAwBzmB,MAExB,KAAA22B,eAA+C,GAoCpD7yB,EAAY7G,KAAKysB,SAAS3oB,QAAS,eAAe,GAElD9D,KAAKqF,eACDrF,KAAKqpB,WACLzoB,EAAME,IACFd,KAAK+c,cACL/c,KAAKid,iBAFTrc,EAGE,KACEZ,KAAK25B,iBAAiB,IAE1B/4B,EAAME,IACFd,KAAK8c,cACL9c,KAAKgd,iBACLhd,KAAKkd,uBAHTtc,EAIE,KACEZ,KAAK+sB,yBAAyBtpB,MAAM,KAI5CzD,KAAKs5B,SAAW12B,EAEX5C,KAAK4C,QAAQgzB,aACd51B,KAAK4C,QAAQgzB,WAAa,CAAC,GAE1B51B,KAAK4C,QAAQizB,sBACd71B,KAAK4C,QAAQizB,oBAAsB,CAAC,GAEnC71B,KAAK4C,QAAQ2zB,yBACdv2B,KAAK4C,QAAQ2zB,uBAAyB,CAAC,GAEtCv2B,KAAK4C,QAAQ0zB,gBACdt2B,KAAK4C,QAAQ0zB,cAAgB,CAAC,GAG7Bt2B,KAAK4C,QAAQg3B,oBACb55B,KAAK4C,QAAQi3B,8BAEd75B,KAAK4C,QAAQg3B,mBAAqBhD,IAGtC,MAAM7N,EAAa,IAAI/J,GAAWhf,KAAK8D,QAAS,CAC5Ckc,kBAAmBA,CAACjd,EAAOwR,KACvB,MAAMpU,EAAOG,IAEb,OAAIH,EACIA,EAAKd,SAAWW,KAAKoc,KAIR,WAAb7H,GAGgC,IAAzBvU,KAAKysB,SAASxrB,UAMzBjB,KAAK4C,QAAQkpB,kBACI,WAAbvX,GAAkD,IAAzBvU,KAAKysB,SAASxrB,SASpCjB,KAAK4C,QAAQkpB,eAAe,CAC/BtL,YAAazd,EACbwR,SAAUA,EACV+J,OAAQ8E,GAAoB0W,KAC5B15B,QAASE,IAIL,EAEhB+e,oBAAqB,CAAC,MAAO,SAAU,OAAQ,QAAS,UACxDiC,aAAc,CACVO,eAAgB,CAAE9d,KAAM,SAAU/B,MAAO,IACzCqC,KAAM,CAAEN,KAAM,SAAU/B,MAAO,OAIvChC,KAAKqF,eACD0jB,EAAWlK,QAAQ9b,IACf,MAAM5C,EAAOG,IAETH,EACAH,KAAK2zB,iBACD3zB,KAAK+5B,cAAch3B,EAAMwR,UACzBpU,EAAKb,QACLa,EAAKZ,cAAWW,EAChB,UAGJF,KAAKqpB,WAAW5lB,KAAIiZ,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACf5Z,GAAK,CACR6Z,IAAK5c,KAAKi3B,KACVjZ,MAAO,KACP5d,QAASE,IACV,IAGXyoB,GAGJ/oB,KAAKi3B,KAAO,IAAI3Z,GAAYtd,MAE5BA,KAAK25B,iBACT,CAEAzb,iBACI9R,EACA+R,EACAvb,GAA4D,QAE5D,IAAIob,EAEJ,GAAI5R,aAAgBkoB,GAChBtW,EAAQhe,KAAKg6B,cAEbh6B,KAAKgc,YAAY5P,EAAM,CACnB6tB,kBAAkB,EAClBpkB,aAAa,IAGjBmI,EAAMuG,MAAMzB,UAAU1W,OACnB,CACH4R,EAAQ5R,EAGgC,kBAA7BxJ,aAAO,EAAPA,EAASs3B,kBAChBt3B,EAAQs3B,iBAGRl6B,KAAKktB,cAAc9gB,EAAM,CAAEyJ,aAAa,GAAO,CAIvDmI,EAAMuG,MAAMQ,YAAa,EAEzB,MAAMoV,EACkB,iBAAbhc,aAAK,EAALA,EAAOrQ,GAAiBvE,KAAKD,IAAI6U,EAAMrQ,EAAG,GAAK,IACpDssB,EACkB,iBAAbjc,aAAK,EAALA,EAAOyB,GAAiBrW,KAAKD,IAAI6U,EAAMyB,EAAG,GAAK,IAEpDuZ,EAAU,IAAI9B,GAAQ,CACxBzsB,UAAW5K,KAAKysB,SAAS3oB,QACzBif,QAAS/E,EAAMla,QACfiQ,OAAqB,QAAblS,EAAAsc,aAAK,EAALA,EAAOpK,cAAM,IAAAlS,EAAAA,EAAI,IACzBiS,MAAmB,QAAZuN,EAAAlD,aAAK,EAALA,EAAOrK,aAAK,IAAAuN,EAAAA,EAAI,IACvB1N,KAAMwmB,EACNvmB,IAAKwmB,EACLtC,uBAAwB,IACxBE,wBAAyB,MAGvB5f,EAAK4F,EAAMla,QAAQu2B,cAAc,mBAEvC,IAAKjiB,EACD,MAAM,IAAItW,MAAM,8BAGpBq3B,EAAQlB,UAAuB7f,EAAI,CAC/BkP,WACmC,kBAAxB1kB,aAAO,EAAPA,EAAS0kB,aACV1kB,EAAQ0kB,aAItB,MAAMgT,EAAqB,IAAIpB,GAC3Blb,EACAmb,GAGExzB,EAAaC,EAAmBoY,EAAMla,SAAUmoB,IAClD,MAAM,MAAEnY,EAAK,OAAEC,GAAWkY,EAAMC,YAChClO,EAAM3K,OAAOS,EAAOC,EAAO,IAG/BumB,EAAmBj1B,eACf8zB,EAAQhoB,aAAY,KAIhB6M,EAAM3K,OAAO2K,EAAMjK,OAAQiK,EAAMlK,MAAM,IAE3CqlB,EAAQ5B,gBAAe,KACnBv3B,KAAK+sB,yBAAyBtpB,MAAM,IAExCua,EAAM7M,aAAapO,IACfo2B,EAAQ1B,UAAU,CACd1jB,OAAQhR,aAAK,EAALA,EAAOgR,OACfD,MAAO/Q,aAAK,EAALA,EAAO+Q,OAChB,IAEN,CACIrS,QAASA,KACLkE,EAAWlE,UAEXuc,EAAMuG,MAAMQ,YAAa,E1CxVtC,SAAmB7S,EAAYlQ,GAClC,MAAMqB,EAAQ6O,EAAM6U,WAAWwT,GAAMA,IAAMv4B,IAEvCqB,GAAS,GACT6O,EAAM3O,OAAOF,EAAO,EAI5B,C0CiVoBsD,CAAO3G,KAAK05B,eAAgBY,GAC5Bt6B,KAAK25B,iBAAiB,IAKlC35B,KAAK05B,eAAet2B,KAAKk3B,GACzBt6B,KAAK25B,iBACT,CAEQI,cAAcxlB,GAClB,OAAQA,GACJ,IAAK,MACL,IAAK,SACGvU,KAAKysB,SAAS3gB,cAAgBb,EAAYgB,YAG1CjM,KAAKysB,SAAStS,kCAElB,MACJ,IAAK,OACL,IAAK,QACGna,KAAKysB,SAAS3gB,cAAgBb,EAAY4I,UAG1C7T,KAAKysB,SAAStS,kCAO1B,OAAQ5F,GACJ,IAAK,MACL,IAAK,OACL,IAAK,SACD,OAAOvU,KAAKw6B,sBAAsB,CAAC,IACvC,IAAK,SACL,IAAK,QACD,OAAOx6B,KAAKw6B,sBAAsB,CAACx6B,KAAKysB,SAASxrB,SACrD,QACI,MAAM,IAAIa,MAAM,wBAAwByS,KAEpD,CAEAwH,cAAcnZ,GACV,MAAM63B,EAC6B,iBAAxB73B,EAAQkJ,aACf9L,KAAKysB,SAAS3gB,cAAgBlJ,EAAQkJ,YAE1C9L,KAAKs5B,SAAQ5c,OAAAC,OAAAD,OAAAC,OAAA,GAAQ3c,KAAK4C,SAAYA,GAElC63B,IACAz6B,KAAKysB,SAAS3gB,YAAclJ,EAAQkJ,aAGxC9L,KAAKqT,OAAOrT,KAAKysB,SAAS3Y,MAAO9T,KAAKysB,SAAS1Y,QAAQ,EAC3D,CAESV,OACLS,EACAC,EACAsZ,GAIA,GAFA7tB,MAAM6T,OAAOS,EAAOC,EAAQsZ,GAExBrtB,KAAK05B,eACL,IAAK,MAAMgB,KAAY16B,KAAK05B,eAExBgB,EAASvB,QAAQ1B,WAG7B,CAEAvb,QAAK,MACe,QAAhBra,EAAA7B,KAAKyd,mBAAW,IAAA5b,GAAAA,EAAEqa,OACtB,CAEAwB,cAActB,GACV,OAAOpc,KAAK4b,OAAOiM,MAAM5L,GAAUA,EAAMG,KAAOA,GACpD,CAEAuL,eAAe1L,GACXjc,KAAK+lB,iBAAiB9J,EAAM+B,OAC5B/B,EAAM+B,MAAMuG,MAAMzB,UAAU7G,EAChC,CAEA2B,WAAWhb,GAA6B,MACpC,QADO,IAAAA,IAAAA,EAA2B,CAAC,IAC9BA,EAAQob,MAAO,CAChB,IAAKhe,KAAKyd,YACN,OAEJ7a,EAAQob,MAAQhe,KAAKyd,WAAY,CAGrC,GAAI7a,EAAQ+3B,cAAgB/3B,EAAQob,OAE5Bpb,EAAQob,MAAMR,cACd5a,EAAQob,MAAMpC,OAAOhZ,EAAQob,MAAMpC,OAAO3a,OAAS,GAGnD,YADA2B,EAAQob,MAAMuG,MAAM3G,WAAW,CAAE0M,cAAc,IAKvD,MAAM3R,EAAWV,EAAgBrV,EAAQob,MAAMla,SACzC2F,EAAuD,QAA5B5H,EAAA7B,KAAKysB,SAAShjB,KAAKkP,UAAS,IAAA9W,OAAA,EAAAA,EAAEwI,KAC/DrK,KAAK+lB,iBAAiBtc,EAC1B,CAEAoU,eAAejb,GAA6B,MACxC,QADW,IAAAA,IAAAA,EAA2B,CAAC,IAClCA,EAAQob,MAAO,CAChB,IAAKhe,KAAKyd,YACN,OAEJ7a,EAAQob,MAAQhe,KAAKyd,WAAY,CAGrC,GAAI7a,EAAQ+3B,cAAgB/3B,EAAQob,OAC5Bpb,EAAQob,MAAMR,cAAgB5a,EAAQob,MAAMpC,OAAO,GAEnD,YADAhZ,EAAQob,MAAMuG,MAAM1G,eAAe,CAAEyM,cAAc,IAK3D,MAAM3R,EAAWV,EAAgBrV,EAAQob,MAAMla,SACzC2F,EAAuC,QAAhC5H,EAAA7B,KAAKysB,SAASzY,SAAS2E,UAAS,IAAA9W,OAAA,EAAAA,EAAEwI,KAC3CZ,GACAzJ,KAAK+lB,iBAAiBtc,EAE9B,CAOA4P,SAAM,MACF,MAAMlZ,EAAOH,KAAKysB,SAAShT,YAErBmC,EAAS5b,KAAK4b,OAAO1P,QAAO,CAAC0uB,EAAY3e,KAC3C2e,EAAW3e,EAAMG,IAAMH,EAAM5C,SACtBuhB,IACR,CAAC,GAEEC,EAAoC76B,KAAK05B,eAAen4B,KACzDu5B,IACU,CACH36B,KAAM26B,EAAc9c,MAAM3E,SAC1B9E,SAAUumB,EAAc3B,QAAQ9f,aAKtCvP,EAA6B,CAC/BixB,KAAM56B,EACNyb,SACA6B,YAA6B,QAAhB5b,EAAA7B,KAAKyd,mBAAW,IAAA5b,OAAA,EAAAA,EAAEua,IAOnC,OAJIye,EAAO55B,OAAS,IAChB6I,EAAO4vB,eAAiBmB,GAGrB/wB,CACX,CAEAmQ,SAAS9Z,GAAwB,MAC7BH,KAAK2C,QAEL,MAAM,KAAEo4B,EAAI,OAAEnf,EAAM,YAAE6B,GAAgBtd,EAEtC,GAAuB,WAAnB46B,EAAKvhB,KAAKzV,OAAsB5C,MAAM65B,QAAQD,EAAKvhB,KAAKrZ,MACxD,MAAM,IAAI2B,MAAM,+BAIpB,MAAMgS,EAAQ9T,KAAK8T,MACbC,EAAS/T,KAAK+T,OAEdknB,EAAkC96B,IACpC,MAAM,GAAEic,EAAE,OAAEkI,EAAM,WAAEmF,EAAU,MAAE5Z,EAAK,WAAEua,GAAejqB,EAEhD6d,EAAQhe,KAAKg6B,YAAY,CAC3B5d,KACAkI,SAAUA,EACVmF,aAAcA,IAGlBzpB,KAAK6sB,eAAeppB,KAAKua,GAEzB,IAAK,MAAMxc,KAASqO,EAAO,CACvB,MAAMoM,EAAQjc,KAAKw5B,cAAcvf,SAAS2B,EAAOpa,GAAQwc,GAEnDyG,EACoB,iBAAf2F,GAA2BA,IAAenO,EAAMG,GAE3D4B,EAAMuG,MAAMzB,UAAU7G,EAAO,CACzB0O,oBAAqBlG,EACrBmG,oBAAoB,GACrB,CASP,OANK5M,EAAMR,aAAeQ,EAAMpC,OAAO3a,OAAS,GAC5C+c,EAAMuG,MAAMzB,UAAU9E,EAAMpC,OAAOoC,EAAMpC,OAAO3a,OAAS,GAAI,CACzD2pB,oBAAoB,IAIrB5M,CAAK,EAGhBhe,KAAKysB,SAAS9S,YAAYohB,EAAM,CAC5B9gB,SAAWlD,GACAkkB,EAA+BlkB,EAAK5W,QAInDH,KAAKqT,OAAOS,EAAOC,GAAQ,GAE3B,MAAMmnB,EAA8C,QAAnBr5B,EAAA1B,EAAKu5B,sBAAc,IAAA73B,EAAAA,EAAI,GAExD,IAAK,MAAMs5B,KAA2BD,EAA0B,CAC5D,MAAM,KAAE/6B,EAAI,SAAEoU,GAAa4mB,EACrBnd,EAAQid,EAA+B96B,GAE7CH,KAAKke,iBACDF,EACA,CACIlQ,EAAGyG,EAASZ,KACZiM,EAAGrL,EAASX,IACZG,OAAQQ,EAASR,OACjBD,MAAOS,EAAST,OAEpB,CAAEomB,iBAAiB,EAAM5S,YAAY,GACvC,CAGN,IAAK,MAAMwT,KAAiB96B,KAAK05B,eAC7BoB,EAAc3B,QAAQ1B,YAG1B,GAA2B,iBAAhBha,EAA0B,CACjC,MAAMxB,EAAQjc,KAAKmc,SAASsB,GACxBxB,GACAjc,KAAK+lB,iBAAiB9J,EAAM,CAIpCjc,KAAKy5B,qBAAqBh2B,MAC9B,CAEAd,QACI,MAAMya,EAASjc,MAAMyI,KAAK5J,KAAKusB,QAAQC,UAAUjrB,KAAKgN,GAAMA,EAAEvM,QAExDo5B,IAAmBp7B,KAAKyd,YACxB4d,IAAmBr7B,KAAKwd,YAE9B,IAAK,MAAMQ,KAASZ,EAEhBpd,KAAK+d,YAAYC,EAAO,CAAEoP,YAAY,IAGtCgO,GACAp7B,KAAK+lB,sBAAiB7lB,GAGtBm7B,GACAr7B,KAAKwpB,wBAAwB/lB,UAAKvD,GAGtCF,KAAKysB,SAAS9pB,OAClB,CAEAmb,iBACI,IAAK,MAAMmO,KAASjsB,KAAKusB,QAAQ+O,UAAW,CACxC,MAAO/sB,EAAGyP,GAASiO,EAEnBjO,EAAMhc,MAAMuiB,MAAM2G,gBAAiB,CAE3C,CAEA7O,SACIzZ,GAA2B,QAE3B,GAAI5C,KAAK4b,OAAOiM,MAAMtZ,GAAMA,EAAE6N,KAAOxZ,EAAQwZ,KACzC,MAAM,IAAIta,MAAM,iBAAiBc,EAAQwZ,qBAG7C,IAAImf,EAEJ,GAAI34B,EAAQ2R,UAAY3R,EAAQ83B,SAC5B,MAAM,IAAI54B,MACN,kFAIR,GAAIc,EAAQ2R,SACR,GAA4B3R,EAAQ2R,SC1kBhBinB,eD0kB2B,CAC3C,MAAMA,EACyC,iBAApC54B,EAAQ2R,SAASinB,eAClBx7B,KAAK0d,cAAc9a,EAAQ2R,SAASinB,gBACpC54B,EAAQ2R,SAASinB,eAE3B,IAAKA,EACD,MAAM,IAAI15B,MACN,kBAAkBc,EAAQ2R,SAASinB,iCAI3CD,EAAiBv7B,KAAKy7B,UAAUD,EAAgB,KAC7C,KCjlBZ,SACHr7B,GAEA,QAAKA,EAAuBo7B,cAIhC,CD0kBuBG,CAAwB94B,EAAQ2R,UAYpC,CACH,MAAMyJ,EAAQhe,KAAK+5B,cACfjb,GAA+Blc,EAAQ2R,SAASqE,YAE9CqD,EAAQjc,KAAK27B,YAAY/4B,EAASob,GAExC,OADAA,EAAMuG,MAAMzB,UAAU7G,GACfA,CAAM,CAXb,GANAsf,EAC+C,iBAApC34B,EAAQ2R,SAASgnB,eAC+B,QAAjD15B,EAAA7B,KAAKusB,QAAQY,IAAIvqB,EAAQ2R,SAASgnB,uBAAe,IAAA15B,OAAA,EAAAA,EAC3CG,MACNY,EAAQ2R,SAASgnB,gBAEtBA,EACD,MAAM,IAAIz5B,MACN,kBAAkBc,EAAQ2R,SAASgnB,gCAS9B,MAGjBA,EAAiBv7B,KAAKyd,YAG1B,IAAIxB,EAEJ,GAAIsf,EAAgB,CAChB,MAAMjd,EAAS8N,IACgB,QAAhB/K,EAAAze,EAAQ2R,gBAAQ,IAAA8M,OAAA,EAAAA,EAAEzI,YAAa,UAG9C,GAAIhW,EAAQ83B,SAAU,CAClB,MAAM1c,EAAQhe,KAAKg6B,cACnB/d,EAAQjc,KAAK27B,YAAY/4B,EAASob,GAClCA,EAAMuG,MAAMzB,UAAU7G,GAEtB,MAAM2f,EAC0B,iBAArBh5B,EAAQ83B,UACM,OAArB93B,EAAQ83B,SACF93B,EAAQ83B,SACR,CAAC,EAEX16B,KAAKke,iBAAiBF,EAAO4d,EAAG,CAC5BtU,YAAY,EACZ4S,iBAAiB,GAClB,MACA,GAAIqB,EAAe3e,IAAImI,YAAyB,WAAXzG,EACxCrC,EAAQjc,KAAK27B,YAAY/4B,EAAS24B,GAClCA,EAAehX,MAAMzB,UAAU7G,OAC5B,CACH,MAAMtD,EAAWV,EAAgBsjB,EAAez3B,SAC1C+3B,EAAmBpjB,EACrBzY,KAAKysB,SAAS3gB,YACd6M,EACA2F,GAEEN,EAAQhe,KAAKw6B,sBAAsBqB,GACzC5f,EAAQjc,KAAK27B,YAAY/4B,EAASob,GAClCA,EAAMuG,MAAMzB,UAAU7G,EAAO,CAAD,MAE7B,GAAIrZ,EAAQ83B,SAAU,CACzB,MAAM1c,EAAQhe,KAAKg6B,cACnB/d,EAAQjc,KAAK27B,YAAY/4B,EAASob,GAClCA,EAAMuG,MAAMzB,UAAU7G,GAEtB,MAAM2f,EAC0B,iBAArBh5B,EAAQ83B,UACM,OAArB93B,EAAQ83B,SACF93B,EAAQ83B,SACR,CAAC,EAEX16B,KAAKke,iBAAiBF,EAAO4d,EAAG,CAC5BtU,YAAY,EACZ4S,iBAAiB,GAClB,KACA,CACH,MAAMlc,EAAQhe,KAAKw6B,wBAEnBve,EAAQjc,KAAK27B,YAAY/4B,EAASob,GAElCA,EAAMuG,MAAMzB,UAAU7G,EAAO,CAGjC,OAAOA,CACX,CAEAD,YACIC,EACArZ,QAAA,IAAAA,IAAAA,EAA+D,CAC3Dq3B,kBAAkB,EAClBpkB,aAAa,IAGjB,MAAMmI,EAAQ/B,EAAM+B,MAEpB,IAAKA,EACD,MAAM,IAAIlc,MACN,uBAAuBma,EAAMG,6BAIrC4B,EAAMuG,MAAMvI,YAAYC,GAEnBrZ,EAAQiT,aACToG,EAAMxa,UAGS,IAAfuc,EAAM3Z,MAAczB,EAAQq3B,kBAC5Bj6B,KAAK+d,YAAYC,EAEzB,CAEA6N,2BAAwB,MACpB,OAAO6J,GACH,eACA,iBACA11B,KAAK4C,QAAQg3B,mBACP,CAAE,iBAAkB55B,KAAK4C,QAAQg3B,oBACjC,CAAC,EACP55B,KAAK4C,QAAQi3B,4BACP,CAAE,iBAAkB75B,KAAK4C,QAAQi3B,6BACjC,CAAC,EAC+B,QAAtCh4B,EAAA7B,KAAK4C,QAAQyzB,iCAAyB,IAAAx0B,OAAA,EAAAA,EAAE6mB,UAEhD,CAEQiR,kBAAe,QACnB,GAA4D,IAAxD35B,KAAKod,OAAOvM,QAAQ/C,IAAOA,EAAE8O,IAAImI,aAAY9jB,QAC7C,IAAKjB,KAAK0oB,UAAW,CACjB1oB,KAAK0oB,UAAY1oB,KAAK6rB,2BAEtB7rB,KAAK0oB,UAAUsB,KAAK,CAChBC,aAAc,IAAI3M,GAAYtd,QAGlC,MAAM87B,EAAqBr0B,SAAS4J,cAAc,OAClDyqB,EAAmBh1B,UAAY,yBAC/Bg1B,EAAmBpsB,YAAY1P,KAAK0oB,UAAU5kB,SAE9C9D,KAAKysB,SAAS3oB,QAAQ4L,YAAYosB,EAAoB,OAEnD97B,KAAK0oB,YACZ1oB,KAAK0oB,UAAU5kB,QAAQoU,cAAevR,SAChB,QAAtB0a,GAAAxf,EAAA7B,KAAK0oB,WAAUjnB,eAAO,IAAA4f,GAAAA,EAAA7Z,KAAA3F,GACtB7B,KAAK0oB,UAAY,KAEzB,CAEA/K,SAAS/a,GAAyB,MAC9B,MAAMob,EAAQhe,KAAKg6B,cAEnB,GAAIp3B,EAAS,CACT,IAAI24B,EAEJ,GAA4B34B,ECrrBG44B,eDqrBO,CAClC,MAAMA,EACgC,iBAA3B54B,EAAQ44B,eACTx7B,KAAK4b,OAAOiM,MACP5L,GAAUA,EAAMG,KAAOxZ,EAAQ44B,iBAEpC54B,EAAQ44B,eAElB,IAAKA,EACD,MAAM,IAAI15B,MACN,mBAAmBc,EAAQ44B,iCAMnC,GAFAD,EAAiBv7B,KAAKy7B,UAAUD,IAE3BD,EACD,MAAM,IAAIz5B,MACN,uCAAuCc,EAAQ44B,gCAClD,KAEF,KCpsBZ,SACHr7B,GAEA,QAAKA,EAAkCo7B,cAI3C,CD6rBuBQ,CAAwBn5B,GAW5B,CAIH,OAHc5C,KAAK+5B,cACfjb,GAA+Blc,EAAQgW,WAE9B,CATb,GALA2iB,EACsC,iBAA3B34B,EAAQ24B,eAC+B,QAAxC15B,EAAA7B,KAAKusB,QAAQY,IAAIvqB,EAAQ24B,uBAAe,IAAA15B,OAAA,EAAAA,EAAEG,MAC1CY,EAAQ24B,gBAEbA,EACD,MAAM,IAAIz5B,MACN,mBAAmBc,EAAQ24B,gCAOtB,CAGjB,MAAMjd,EAAS8N,GAAoBxpB,EAAQgW,WAAa,UAElDD,EAAWV,EAAgBsjB,EAAez3B,SAC1C+3B,EAAmBpjB,EACrBzY,KAAKysB,SAAS3gB,YACd6M,EACA2F,GAGJ,OADAte,KAAKitB,WAAWjP,EAAO6d,GAChB7d,CAAM,CAGb,OADAhe,KAAKitB,WAAWjP,GACTA,CAEf,CAEAD,YACIC,EACApb,GAKe,MAEf,MAAMgZ,EAAS,IAAIoC,EAAMpC,QAEzB,IAAK,MAAMK,KAASL,EAChB5b,KAAKgc,YAAYC,EAAO,CACpBge,kBAAkB,EAClBpkB,YAAiC,QAApBhU,EAAAe,aAAO,EAAPA,EAASiT,mBAAW,IAAAhU,GAAAA,IAIzC7B,KAAKktB,cAAclP,EAAOpb,EAC9B,CAEmBsqB,cACflP,EACApb,GAOA,MAAMk4B,EAAgB96B,KAAK05B,eAAe7R,MACrCtZ,GAAMA,EAAEyP,QAAUA,IAGvB,OAAI8c,IACKl4B,aAAO,EAAPA,EAASiT,eACVilB,EAAc9c,MAAMvc,UACpBzB,KAAKusB,QAAQ3oB,OAAOoa,EAAM5B,KAE9B0e,EAAcr5B,UAEPq5B,EAAc9c,OAGlBxe,MAAM0tB,cAAclP,EAAOpb,EACtC,CAEA+wB,iBACIqI,EACAC,EACAC,EACAC,EACAC,GAAyB,MAEzB,MAAMC,EAAcJ,EACiB,QAA/Bp6B,EAAA7B,KAAKusB,QAAQY,IAAI8O,UAAc,IAAAp6B,OAAA,EAAAA,EAAEG,WACjC9B,EAEN,QAAqBA,IAAjBg8B,EAWJ,GAAKC,GAA2C,WAAtBA,EAgBnB,CACH,MAAMG,EAAoBrkB,EAAgB+jB,EAAiBl4B,SACrDy4B,EAAiB9jB,EACnBzY,KAAKysB,SAAS3gB,YACdwwB,EACAH,GAGJ,GAAIE,GAAeA,EAAYh4B,KAAO,EAAG,CACrC,MAAOm4B,EAAsB3yB,GAAMlB,EAAK4zB,GAMxC,IAJmBv8B,KAAK05B,eAAe7R,MAClC/Z,GAAMA,EAAEkQ,QAAUqe,IAGN,CACb,MAAMI,EAAiBxkB,EAAgBokB,EAAYv4B,UAC5C44B,EAAsB9yB,GAAQjB,EAAK8zB,GAGtC5zB,EACI6zB,EACAF,IAMJx8B,KAAKysB,SAASrZ,SAASspB,EAAsB9yB,EAAMC,EAAG,CAK9D,MAAM8yB,EAAc38B,KAAKktB,cAAcmP,EAAa,CAChDjP,YAAY,EACZvX,aAAa,IAIX+mB,EAA2B3kB,EAC7B+jB,EAAiBl4B,SAEf6U,EAAWF,EACbzY,KAAKysB,SAAS3gB,YACd8wB,EACAT,GAEJn8B,KAAKitB,WAAW0P,EAAahkB,EAAU,KACpC,CACH,MAAMkkB,GACFR,aAAW,EAAXA,EAAa9X,MAAMvI,YAAYkgB,KAC/Bl8B,KAAK4b,OAAOiM,MAAM5L,GAAUA,EAAMG,KAAO8f,IAE7C,IAAKW,EACD,MAAM,IAAI/6B,MAAM,oBAAoBo6B,KAGxC,MAAMY,EAAerkB,EACjBzY,KAAKysB,SAAS3gB,YACdwwB,EACAH,GAGUn8B,KAAKw6B,sBAAsBsC,GACnCvY,MAAMzB,UAAU+Z,EAAW,CAAD,KAhFkB,CACtD,MAAMA,GACFR,aAAW,EAAXA,EAAa9X,MAAMvI,YAAYkgB,KAC/Bl8B,KAAK4b,OAAOiM,MAAM5L,GAAUA,EAAMG,KAAO8f,IAE7C,IAAKW,EACD,MAAM,IAAI/6B,MAAM,oBAAoBo6B,KAGR,KAA5BG,aAAW,EAAXA,EAAa9X,MAAMlgB,OACnBrE,KAAKktB,cAAcmP,GAGvBL,EAAiBzX,MAAMzB,UAAU+Z,EAAW,CACxCx5B,MAAO+4B,GACR,MAzBCC,GACAr8B,KAAK+8B,UACDV,EACAL,EACAG,EAyFhB,CAEQY,UACJV,EACAd,EACAjd,GAEA,GAAI+d,EACA,GAAK/d,GAAqB,WAAXA,EAeR,CACH,MAAMwc,EAAgB96B,KAAK05B,eAAe7R,MACrC/Z,GAAMA,EAAEkQ,QAAUqe,IAGnBvB,EACAA,EAAcr5B,UAEdzB,KAAKysB,SAASvZ,WACV+E,EAAgBokB,EAAYv4B,UAIpC,MAAMw4B,EAAoBrkB,EACtBsjB,EAAez3B,SAEbg5B,EAAerkB,EACjBzY,KAAKysB,SAAS3gB,YACdwwB,EACAhe,GAGJte,KAAKysB,SAASzc,QACVqsB,EACAjxB,EAAOC,WACPyxB,EACF,KAzC8B,CAChC,MAAMtf,EAAc6e,EAAY7e,YAC1B5B,EAAS,IAAIygB,EAAYzgB,QAAQra,KAAKoV,GACxC0lB,EAAY9X,MAAMvI,YAAYrF,EAAEyF,MAGJ,KAA5BigB,aAAW,EAAXA,EAAa9X,MAAMlgB,OACnBrE,KAAKktB,cAAcmP,GAGvB,IAAK,MAAMpgB,KAASL,EAChB2f,EAAehX,MAAMzB,UAAU7G,EAAO,CAClC0O,mBAAoB1O,IAAUuB,GAChC,CA+BlB,CAEAuI,iBACI/H,EACAmK,GAAmB,QAEnB,MAAM6U,EAAwBh9B,KAAK0sB,eAAiB1O,EACpDxe,MAAMumB,iBAAiB/H,EAAOmK,IAEzB6U,IAA0C,QAAjBn7B,EAAA7B,KAAK0sB,oBAAY,IAAA7qB,OAAA,EAAAA,EAAE2b,cAC7Cxd,KAAKwpB,wBAAwB/lB,KAAsB,QAAjB4d,EAAArhB,KAAK0sB,oBAAY,IAAArL,OAAA,EAAAA,EAAE7D,YAE7D,CAEAwc,YAAYp3B,GACHA,IACDA,EAAU,CAAC,GAGf,IAAIwZ,EAAKxZ,aAAO,EAAPA,EAASwZ,GASlB,GAPIA,GAAMpc,KAAKusB,QAAQlK,IAAIzf,EAAQwZ,MAC/Bla,QAAQC,KACJ,sBAAsBS,aAAO,EAAPA,EAASwZ,4CAEnCA,OAAKlc,IAGJkc,EAED,IADAA,EAAKpc,KAAKu5B,YAAY9vB,OACfzJ,KAAKusB,QAAQlK,IAAIjG,IACpBA,EAAKpc,KAAKu5B,YAAY9vB,OAI9B,MAAMY,EAAO,IAAIupB,GAAmB5zB,KAAMoc,EAAIxZ,GAG9C,GAFAyH,EAAK2f,KAAK,CAAE6E,OAAQ,CAAC,EAAG9K,SAAe,QAElC/jB,KAAKusB,QAAQlK,IAAIhY,EAAK+R,IAAK,CAC5B,MAAMzW,EAAa,IAAIb,EACnBuF,EAAKka,MAAM6E,QAAQrmB,IACf,MAAM,QAAEzD,EAAO,OAAEysB,EAAM,OAAEzN,EAAM,MAAEjb,GAAUN,EAC3C/C,KAAK2zB,iBAAiBtpB,EAAM/K,EAASysB,EAAQzN,EAAQjb,EAAM,IAE/DgH,EAAKka,MAAM/H,WAAWzZ,IAClB/C,KAAKqpB,WAAW5lB,KAAIiZ,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACf5Z,GAAK,CACR6Z,IAAK5c,KAAKi3B,KACVjZ,MAAO3T,IACT,IAENA,EAAKka,MAAMzH,eAAe/Z,IACtB/C,KAAKspB,eAAe7lB,KAAKV,EAAMkZ,MAAM,IAEzC5R,EAAKka,MAAMvH,kBAAkBja,IACzB/C,KAAKupB,kBAAkB9lB,KAAKV,EAAMkZ,MAAM,IAE5C5R,EAAKka,MAAMrH,wBAAwBna,IAC/B/C,KAAKwpB,wBAAwB/lB,KAAKV,EAAMkZ,MAAM,KAItDjc,KAAKusB,QAAQjoB,IAAI+F,EAAK+R,GAAI,CAAEpa,MAAOqI,EAAM1E,cAAc,CAO3D,OAFA0E,EAAKsf,aAEEtf,CACX,CAEQsxB,YACJ/4B,EACAob,GAEA,MAAMwW,EAAmB5xB,EAAQ+Y,UAC3B8Y,EACF7xB,EAAQ6xB,cAAgBz0B,KAAK4C,QAAQ4zB,oBAEnCnsB,EAAO,IAAI4rB,GACbj2B,KACA4C,EAAQwZ,GACRoY,EACAC,GAGExY,EAAQ,IAAIqY,GACd1xB,EAAQwZ,GACRpc,KACAA,KAAKi3B,KACLjZ,EACA3T,GAOJ,OALA4R,EAAM+N,KAAK,CACP6H,MAAOjvB,EAAQivB,OAASjvB,EAAQwZ,GAChCyS,QAAQjsB,aAAO,EAAPA,EAASisB,SAAU,CAAC,IAGzB5S,CACX,CAEQue,sBACJ7hB,QAAA,IAAAA,IAAAA,EAAqB,CAAC,IAEtB,MAAMqF,EAAQhe,KAAKg6B,cAEnB,OADAh6B,KAAKitB,WAAWjP,EAAOrF,GAChBqF,CACX,CAEQyd,UAAUxf,GAAqB,MACnC,OAEC,QAFMpa,EAAAV,MAAMyI,KAAK5J,KAAKusB,QAAQC,UAAU3E,MAAM7J,GAC3CA,EAAMhc,MAAMuiB,MAAMgG,cAActO,YACnC,IAAApa,OAAA,EAAAA,EAAEG,KACP,CAEOP,UACHzB,KAAKwpB,wBAAwB/nB,UAC7BzB,KAAKspB,eAAe7nB,UACpBzB,KAAKupB,kBAAkB9nB,UACvBzB,KAAKy5B,qBAAqBh4B,UAE1BjC,MAAMiC,SACV,EE7pCG,MAAMw7B,WACD5Q,GASJvgB,kBACA,OAAO9L,KAAKysB,SAAS3gB,WACzB,CAEIA,gBAAY9J,GACZhC,KAAKysB,SAAS3gB,YAAc9J,CAChC,CAEIY,cACA,OAAO5C,KAAKs5B,QAChB,CAEIzf,mBACA,OAAO7Z,KAAKw5B,aAChB,CAEI3f,iBAAa7X,GACbhC,KAAKw5B,cAAgBx3B,CACzB,CAEA7C,YAAYyD,GACRpD,MAAM,CACF0Y,cAAetV,EAAQsV,cACvB7I,mBAAoBzM,EAAQyM,mBAC5BvD,YAAalJ,EAAQkJ,YACrB6D,OAAQ/M,EAAQ+M,SA5BP,KAAAutB,qBAAuB,IAAI36B,EACnC,KAAAsZ,oBAAmC7b,KAAKk9B,qBAAqBn6B,MA8BlE/C,KAAKs5B,SAAW12B,EAEX5C,KAAK4C,QAAQgzB,aACd51B,KAAK4C,QAAQgzB,WAAa,CAAC,GAE1B51B,KAAK4C,QAAQizB,sBACd71B,KAAK4C,QAAQizB,oBAAsB,CAAC,EAE5C,CAEA9Z,cAAcnZ,GACV,MAAM63B,EAC6B,iBAAxB73B,EAAQkJ,aACf9L,KAAKysB,SAAS3gB,cAAgBlJ,EAAQkJ,YAE1C9L,KAAKs5B,SAAQ5c,OAAAC,OAAAD,OAAAC,OAAA,GAAQ3c,KAAK4C,SAAYA,GAElC63B,IACAz6B,KAAKysB,SAAS3gB,YAAclJ,EAAQkJ,aAGxC9L,KAAKqT,OAAOrT,KAAKysB,SAAS3Y,MAAO9T,KAAKysB,SAAS1Y,QAAQ,EAC3D,CAEAiI,YAAYC,GACRjc,KAAK+d,YAAY9B,EACrB,CAOO5C,SAAM,MAQT,MAAO,CACH0hB,KARS/6B,KAAKysB,SAAShT,YASvB+D,YAA6B,QAAhB3b,EAAA7B,KAAKyd,mBAAW,IAAA5b,OAAA,EAAAA,EAAEua,GAEvC,CAEArR,WAAWkR,EAAsB9R,GAC7BnK,KAAKysB,SAASnc,eAAe2H,EAAgBgE,EAAMnY,SAAUqG,EACjE,CAEAqa,UAAUvI,GACNjc,KAAKusB,QAAQ7qB,SAAQ,CAACM,EAAOZ,KACzBY,EAAMA,MAAMwiB,UAAUvI,IAAUja,EAAMA,MAAM,GAEpD,CAEAka,QAAK,MACe,QAAhBra,EAAA7B,KAAKyd,mBAAW,IAAA5b,GAAAA,EAAEqa,OACtB,CAEOjC,SAASkjB,GACZn9B,KAAK2C,QAEL,MAAM,KAAEo4B,EAAI,YAAEvd,GAAgB2f,EAExBC,EAAoB,GAGpBtpB,EAAQ9T,KAAK8T,MACbC,EAAS/T,KAAK+T,OA6CpB,GA3CA/T,KAAKysB,SAAS9S,YAAYohB,EAAM,CAC5B9gB,SAAWlD,IACP,MAAM,KAAE5W,GAAS4W,EACX1M,EAAOqrB,GACTv1B,EAAKic,GACLjc,EAAKwb,UACL3b,KAAK4C,QAAQgzB,YAAc,CAAC,EAC5B51B,KAAK4C,QAAQizB,qBAAuB,CAAC,EACrC71B,KAAK4C,QAAQyzB,0BACP,CACIX,gBACI11B,KAAK4C,QAAQyzB,0BACRX,sBAEbx1B,GAqBV,OAlBAk9B,EAAMh6B,MAAK,IACPiH,EAAK2f,KAAK,CACN6E,OAAQ1uB,EAAK0uB,OACb7Y,aAAc7V,EAAK6V,aACnBC,aAAc9V,EAAK8V,aACnBC,cAAe/V,EAAK+V,cACpBC,cAAehW,EAAKgW,cACpB1L,SAAUtK,EAAKsK,SACfC,OAAQvK,EAAKuK,KACbqZ,SAAU/jB,KACVgtB,UAAWjW,EAAK5M,YAIxBnK,KAAK6sB,eAAeppB,KAAK4G,GAEzBrK,KAAKq9B,cAAchzB,GAEZA,CAAI,IAInBrK,KAAKqT,OAAOS,EAAOC,GAAQ,GAE3BqpB,EAAM17B,SAAS47B,GAAMA,MAEM,iBAAhB9f,EAA0B,CACjC,MAAMvB,EAAQjc,KAAKmc,SAASqB,GACxBvB,GACAjc,KAAK+lB,iBAAiB9J,EAAM,CAIpCjc,KAAKk9B,qBAAqBz5B,MAC9B,CAEAd,QACI,MAAMy4B,EAAiBp7B,KAAKyd,YAEtBL,EAASjc,MAAMyI,KAAK5J,KAAKusB,QAAQC,UACvC,IAAK,MAAMxO,KAASZ,EAChBY,EAAMrY,WAAWlE,UACjBzB,KAAKktB,cAAclP,EAAMhc,MAAO,CAAEorB,YAAY,IAG9CgO,GACAp7B,KAAK+lB,sBAAiB7lB,GAG1BF,KAAKysB,SAAS9pB,OAClB,CAEA2Z,UACIL,EACArZ,GAAmE,MAEnE,IAAIi5B,EAEJ,MAAM0B,EAAev9B,KAAKysB,SAAS9lB,OAAOsV,GAEpCsf,EAAoD,QAAnC15B,EAAA7B,KAAKusB,QAAQY,IAAIvqB,EAAQ46B,kBAAU,IAAA37B,OAAA,EAAAA,EAAEG,MAE5D,IAAKu5B,EACD,MAAM,IAAIz5B,MACN,mBAAmBc,EAAQ46B,4BAInC,MAAMlf,EAAS8N,GAASxpB,EAAQgW,WAChC,GAAe,WAAX0F,EACA,MAAM,IAAIxc,MAAM,GAAGwc,gCAChB,CACH,MAAM3F,EAAWV,EAAgBsjB,EAAez3B,SAChD+3B,EAAmBpjB,EACfzY,KAAKysB,SAAS3gB,YACd6M,EACA2F,EACF,CAGNte,KAAKitB,WAAWsQ,EAAc1B,EAAkBj5B,EAAQyB,KAC5D,CAEOgY,SACHzZ,GAA+B,QAE/B,IAAIi5B,EAA6Bj5B,EAAQ+V,UAAY,CAAC,GAEtD,GAAoB,QAAhB9W,EAAAe,EAAQ2R,gBAAQ,IAAA1S,OAAA,EAAAA,EAAE25B,eAAgB,CAClC,MAAMD,EAEL,QAFsBla,EAAArhB,KAAKusB,QAAQY,IAChCvqB,EAAQ2R,SAASinB,uBACpB,IAAAna,OAAA,EAAAA,EAAErf,MAEH,IAAKu5B,EACD,MAAM,IAAIz5B,MACN,mBAAmBc,EAAQ2R,SAASinB,iCAI5C,MAAMld,EAAS8N,GAASxpB,EAAQ2R,SAASqE,WACzC,GAAe,WAAX0F,EACA,MAAM,IAAIxc,MAAM,GAAGwc,gCAChB,CACH,MAAM3F,EAAWV,EAAgBsjB,EAAez3B,SAChD+3B,EAAmBpjB,EACfzY,KAAKysB,SAAS3gB,YACd6M,EACA2F,EACF,CAAD,CAIT,MAAMjU,EAAOqrB,GACT9yB,EAAQwZ,GACRxZ,EAAQ+Y,UACR3b,KAAK4C,QAAQgzB,YAAc,CAAC,EAC5B51B,KAAK4C,QAAQizB,qBAAuB,CAAC,EACrC71B,KAAK4C,QAAQyzB,0BACP,CACIX,gBACI11B,KAAK4C,QAAQyzB,0BACRX,sBAEbx1B,GAmBV,OAhBAmK,EAAK2f,KAAK,CACN6E,OAAQjsB,EAAQisB,QAAU,CAAC,EAC3B7Y,aAAcpT,EAAQoT,aACtBC,aAAcrT,EAAQqT,aACtBC,cAAetT,EAAQsT,cACvBC,cAAevT,EAAQuT,cACvB1L,SAAU7H,EAAQ6H,SAClBC,OAAQ9H,EAAQ8H,KAChBqZ,SAAU/jB,KACVgtB,WAAW,IAGfhtB,KAAKq9B,cAAchzB,GAEnBrK,KAAKitB,WAAW5iB,EAAMwxB,EAAkBj5B,EAAQyB,MAEzCgG,CACX,CAEQgzB,cAAcphB,GAClB,MAAMtW,EAAa,IAAIb,EACnBmX,EAAMW,IAAImR,kBAAkBhrB,IACnBA,EAAMwqB,WAGXvtB,KAAKusB,QAAQ7qB,SAASm7B,IAClB,MAAM7e,EAAQ6e,EAAU76B,MACpBgc,IAAU/B,EACV+B,EAAMwG,WAAU,GAEhBxG,EAAMwG,WAAU,EAAM,GAE5B,KAIVxkB,KAAKusB,QAAQjoB,IAAI2X,EAAMG,GAAI,CACvBpa,MAAOia,EACPtW,cAER,CAEOo3B,UACHxB,EACAj8B,EACAgf,GAEA,MAAM+d,EAAcr8B,KAAKmc,SAAS7c,GAElC,IAAK+8B,EACD,MAAM,IAAIv6B,MAAM,qBAGpB,MAAMw6B,EAAoBrkB,EAAgBsjB,EAAez3B,SACnDy4B,EAAiB9jB,EACnBzY,KAAKysB,SAAS3gB,YACdwwB,EACAhe,IAGGke,EAAsB3yB,GAAMlB,EAAK4zB,GAClCE,EAAiBxkB,EAAgBokB,EAAYv4B,UAC5C44B,EAAsB9yB,GAAQjB,EAAK8zB,GAE1C,GAAI5zB,EAAe6zB,EAAsBF,GAMrC,YAFAx8B,KAAKysB,SAASrZ,SAASspB,EAAsB9yB,EAAMC,GAMvD,MAAM8yB,EAAc38B,KAAKktB,cAAcmP,EAAa,CAChDjP,YAAY,EACZvX,aAAa,IAIX+mB,EAA2B3kB,EAC7BsjB,EAAez3B,SAEb6U,EAAWF,EACbzY,KAAKysB,SAAS3gB,YACd8wB,EACAte,GAEJte,KAAKitB,WAAW0P,EAAahkB,EACjC,CAEAoF,YAAYC,GACRxe,MAAMue,YAAYC,EACtB,CAEOvc,UACHjC,MAAMiC,UAENzB,KAAKk9B,qBAAqBz7B,SAC9B,ECxVG,MAAMg8B,WACDzR,GAqBJpQ,aACA,OAAO5b,KAAKkV,UAAUhE,UAC1B,CAEItO,cACA,OAAO5C,KAAKs5B,QAChB,CAEIr4B,aACA,OAAOjB,KAAKuoB,QAAQlkB,IACxB,CAEIyH,kBACA,OAAO9L,KAAKkV,UAAUpJ,WAC1B,CAEIoJ,gBACA,OAAOlV,KAAK09B,UAChB,CAEIxoB,cAAUlT,GACVhC,KAAK09B,WAAa17B,EAElBhC,KAAK29B,2BAA2B37B,MAAQ,IAAI8C,EACxC9E,KAAK09B,WAAW1wB,cAAa,KACzBhN,KAAK2sB,mBAAmBlpB,UAAKvD,EAAU,IAE3CF,KAAK09B,WAAWxwB,cAAcxJ,GAAM1D,KAAKiN,cAAcxJ,KAAKC,KAC5D1D,KAAK09B,WAAWtwB,iBAAiB1J,GAC7B1D,KAAKmN,iBAAiB1J,KAAKC,KAGvC,CAEI0G,kBACA,OAAOpK,KAAKkV,UAAU9K,WAC1B,CAEIG,kBACA,OAAOvK,KAAKkV,UAAU3K,WAC1B,CAEIwJ,aACA,OAAO/T,KAAKkV,UAAUpJ,cAAgBb,EAAYgB,WAC5CjM,KAAKkV,UAAUzJ,eACfzL,KAAKkV,UAAU7Q,IACzB,CAEIyP,YACA,OAAO9T,KAAKkV,UAAUpJ,cAAgBb,EAAYgB,WAC5CjM,KAAKkV,UAAU7Q,KACfrE,KAAKkV,UAAUzJ,cACzB,CAEAtM,YAAYyD,GACRpD,MAAMoD,EAAQsV,eAzEV,KAAAylB,2BAA6B,IAAIl4B,EAGjC,KAAA8iB,QAAU,IAAInkB,IAGL,KAAA84B,qBAAuB,IAAI36B,EACnC,KAAAsZ,oBAAmC7b,KAAKk9B,qBAAqBn6B,MAErD,KAAAkK,cAAgB,IAAI1K,EAC5B,KAAA2K,aAAelN,KAAKiN,cAAclK,MAE1B,KAAAoK,iBAAmB,IAAI5K,EAC/B,KAAA6K,gBAAkBpN,KAAKmN,iBAAiBpK,MAEhC,KAAA4pB,mBAAqB,IAAIpqB,EACjC,KAAAuZ,kBAAiC9b,KAAK2sB,mBAAmB5pB,MA2D9D/C,KAAKs5B,SAAW12B,EAEXA,EAAQgzB,aACThzB,EAAQgzB,WAAa,CAAC,GAErBhzB,EAAQizB,sBACTjzB,EAAQizB,oBAAsB,CAAC,GAGnC71B,KAAKkV,UAAY,IAAI1J,EAAUxL,KAAK8D,QAASlB,GAE7C5C,KAAKqF,eACDrF,KAAKiN,cACLjN,KAAKk9B,qBACLl9B,KAAKmN,iBACLnN,KAAK2sB,mBAEb,CAEA5Q,cAAcnZ,GACV,MAAM63B,EAC6B,iBAAxB73B,EAAQkJ,aACf9L,KAAK4C,QAAQkJ,cAAgBlJ,EAAQkJ,YAEzC9L,KAAKs5B,SAAQ5c,OAAAC,OAAAD,OAAAC,OAAA,GAAQ3c,KAAK4C,SAAYA,GAElC63B,IACAz6B,KAAKkV,UAAUpJ,YAAclJ,EAAQkJ,aAGzC9L,KAAKkV,UAAU7B,OACXrT,KAAKkV,UAAU7Q,KACfrE,KAAKkV,UAAUzJ,eAEvB,CAEAyQ,QAAK,MACgB,QAAjBra,EAAA7B,KAAKqoB,oBAAY,IAAAxmB,GAAAA,EAAEqa,OACvB,CAEAI,UAAU1S,EAAcC,GACpB7J,KAAKkV,UAAU9B,SAASxJ,EAAMC,EAClC,CAEAkB,WAAWkR,EAAuB9R,GAC9B,MAAM9G,EAAQrD,KAAK4b,OAAOtY,QAAQ2Y,GAClCjc,KAAKkV,UAAU5E,eAAejN,EAAO8G,EACzC,CAEAqa,UAAUna,EAAsB8d,GAC5BnoB,KAAKqoB,aAAehe,EAEpBrK,KAAK4b,OACA/K,QAAQ+sB,GAAMA,IAAMvzB,IACpB3I,SAASk8B,IACNA,EAAEhhB,IAAI0R,mBAAmB7qB,KAAK,CAAEghB,UAAU,IACrC0D,GACDyV,EAAE1hB,OAAQ,IAGtB7R,EAAKuS,IAAI0R,mBAAmB7qB,KAAK,CAAEghB,UAAU,IACxC0D,GACD9d,EAAK6R,OAEb,CAEAF,YAAYC,EAAuBlM,GAC/B,MAAM3D,EAAOpM,KAAKuoB,QAAQ4E,IAAIlR,EAAMG,IAEpC,IAAKhQ,EACD,MAAM,IAAItK,MAAM,2BAA2Bma,EAAMG,MAGrDhQ,EAAK3K,UAELzB,KAAKuoB,QAAQ3kB,OAAOqY,EAAMG,IAE1B,MAAM/Y,EAAQrD,KAAK4b,OAAOmL,WAAWxY,GAAMA,IAAM0N,IAC7Bjc,KAAKkV,UAAUhC,WAAW7P,EAAO0M,GACzCtO,UAEZ,MAAMma,EAAS5b,KAAK4b,OAChBA,EAAO3a,OAAS,GAChBjB,KAAKwkB,UAAU5I,EAAOA,EAAO3a,OAAS,GAE9C,CAEAkb,SAASC,GACL,OAAOpc,KAAK4b,OAAOiM,MAAMxd,GAASA,EAAK+R,KAAOA,GAClD,CAEAC,SACIzZ,GAEA,GAAI5C,KAAKuoB,QAAQlG,IAAIzf,EAAQwZ,IACzB,MAAM,IAAIta,MAAM,SAASc,EAAQwZ,qBAGrC,MAAM/R,EAAOqrB,GACT9yB,EAAQwZ,GACRxZ,EAAQ+Y,UACR3b,KAAK4C,QAAQgzB,YAAc,CAAC,EAC5B51B,KAAK4C,QAAQizB,qBAAuB,CAAC,EACrC71B,KAAK4C,QAAQi7B,iBACP,CACInI,gBACI11B,KAAK4C,QAAQi7B,iBAAiBnI,sBAEtCx1B,GAGVmK,EAAKyB,YAAc9L,KAAKkV,UAAUpJ,YAElCzB,EAAK2f,KAAK,CACN6E,OAAQjsB,EAAQisB,QAAU,CAAC,EAC3BzkB,YAAaxH,EAAQwH,YACrBG,YAAa3H,EAAQ2H,YACrBG,KAAM9H,EAAQ8H,KACdD,SAAU7H,EAAQ6H,SAClBsZ,SAAU/jB,OAGd,MAAMqE,EACsB,iBAAjBzB,EAAQyB,KAAoBzB,EAAQyB,KAAO+G,EAAOC,WACvDhI,EACuB,iBAAlBT,EAAQS,MAAqBT,EAAQS,WAAQnD,EAOxD,OALAF,KAAKkV,UAAUlF,QAAQ3F,EAAMhG,EAAMhB,GAEnCrD,KAAK89B,UAAUzzB,GACfrK,KAAKwkB,UAAUna,GAERA,CACX,CAEAgJ,OAAOS,EAAeC,GAClB,MAAO1P,EAAMoH,GACTzL,KAAKkV,UAAUpJ,cAAgBb,EAAYgB,WACrC,CAAC6H,EAAOC,GACR,CAACA,EAAQD,GACnB9T,KAAKkV,UAAU7B,OAAOhP,EAAMoH,EAChC,CAEQqyB,UAAUzzB,GACd,MAAM1E,EAAa0E,EAAKuS,IAAImR,kBAAkBhrB,IACrCA,EAAMwqB,WAGXvtB,KAAKwkB,UAAUna,GAAM,EAAK,IAG9BrK,KAAKuoB,QAAQjkB,IAAI+F,EAAK+R,GAAIzW,EAC9B,CAEA0T,SAAM,MAaF,MAAO,CACHxJ,MAbsC7P,KAAKkV,UAC1ChE,WACA3P,KAAI,CAAC8I,EAAMrB,KAED,CACH3E,KAFSrE,KAAKkV,UAAUxE,YAAY1H,GAGpC7I,KAAMkK,EAAKgP,SACX3O,OAAQL,EAAKK,KACbD,SAAUJ,EAAKI,aAMvB2f,WAA6B,QAAjBvoB,EAAA7B,KAAKqoB,oBAAY,IAAAxmB,OAAA,EAAAA,EAAEua,GAC/B/X,KAAMrE,KAAKkV,UAAU7Q,KACrByH,YAAa9L,KAAKkV,UAAUpJ,YAEpC,CAEAmO,SAAS8jB,GACL/9B,KAAK2C,QAEL,MAAM,MAAEkN,EAAK,YAAE/D,EAAW,KAAEzH,EAAI,WAAE+lB,GAAe2T,EAE3CX,EAAoB,GAGpBtpB,EAAQ9T,KAAK8T,MACbC,EAAS/T,KAAK+T,OAwDpB,GAtDA/T,KAAKkV,UAAY,IAAI1J,EAAUxL,KAAK8D,QAAS,CACzCgI,cACAuD,mBAAoBrP,KAAK4C,QAAQyM,mBACjCO,WAAY,CACRvL,OACAwL,MAAOA,EAAMtO,KAAK8I,IACd,MAAMlK,EAAOkK,EAAKlK,KAElB,GAAIH,KAAKuoB,QAAQlG,IAAIliB,EAAKic,IACtB,MAAM,IAAIta,MAAM,SAAS3B,EAAKic,qBAGlC,MAAMH,EAAQyZ,GACVv1B,EAAKic,GACLjc,EAAKwb,UACL3b,KAAK4C,QAAQgzB,YAAc,CAAC,EAC5B51B,KAAK4C,QAAQizB,qBAAuB,CAAC,EACrC71B,KAAK4C,QAAQi7B,iBACP,CACInI,gBACI11B,KAAK4C,QAAQi7B,iBACRnI,sBAEbx1B,GAsBV,OAnBAk9B,EAAMh6B,MAAK,KACP6Y,EAAM+N,KAAK,CACP6E,OAAQ1uB,EAAK0uB,QAAU,CAAC,EACxBzkB,YAAajK,EAAKiK,YAClBG,YAAapK,EAAKoK,YAClBG,KAAML,EAAKK,KACXD,SAAUJ,EAAKI,SACfsZ,SAAU/jB,MACZ,IAGNic,EAAMnQ,YAAcA,EAEpB9L,KAAK89B,UAAU7hB,GACfrX,YAAW,KAEP5E,KAAKiN,cAAcxJ,KAAKwY,EAAM,GAC/B,GAEI,CAAE5X,KAAMgG,EAAKhG,KAAMgG,KAAM4R,EAAO,OAKnDjc,KAAKqT,OAAOS,EAAOC,GAEnBqpB,EAAM17B,SAAS47B,GAAMA,MAEK,iBAAflT,EAAyB,CAChC,MAAMnO,EAAQjc,KAAKmc,SAASiO,GACxBnO,GACAjc,KAAKwkB,UAAUvI,EAAM,CAI7Bjc,KAAKk9B,qBAAqBz5B,MAC9B,CAEAd,QACI,IAAK,MAAMgD,KAAc3F,KAAKuoB,QAAQiE,SAClC7mB,EAAWlE,UAKf,IAFAzB,KAAKuoB,QAAQ5lB,QAEN3C,KAAKkV,UAAUjU,OAAS,GAAG,CACjBjB,KAAKkV,UAAUhC,WAAW,EAAG9H,EAAOC,YAAY,GACxD5J,SAAU,CAEvB,CAEAA,UACI,IAAK,MAAMkE,KAAc3F,KAAKuoB,QAAQiE,SAClC7mB,EAAWlE,UAGfzB,KAAKuoB,QAAQ5lB,QAEb,MAAMkN,EAAQ7P,KAAKkV,UAAUhE,WAE7BlR,KAAK29B,2BAA2Bl8B,UAChCzB,KAAKkV,UAAUzT,UAEf,IAAK,MAAM4I,KAAQwF,EACfxF,EAAK5I,UAGTjC,MAAMiC,SACV,EClbG,MAAMu8B,WACDl5B,EAWJhB,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,cACIK,QAba,KAAAy+B,cZgBjBtJ,GAAyB,CACrB7gB,MAAO,KACPC,OAAQ,KACRghB,QAAS,YACTta,KAAM,oEYnBO,KAAAyjB,eZuBjBvJ,GAAyB,CACrB7gB,MAAO,KACPC,OAAQ,KACRghB,QAAS,YACTta,KAAM,qEY1BO,KAAA9U,WAAa,IAAIF,EAI1B,KAAA04B,OAA+C,CAAEvhB,IAAK,MAS1D5c,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAK8D,QAAQgD,UAAY,iBAEzB9G,KAAKk1B,SAAWztB,SAAS4J,cAAc,QACvCrR,KAAKo+B,UAAY32B,SAAS4J,cAAc,OACxCrR,KAAKo+B,UAAUt3B,UAAY,4BAE3B9G,KAAK8D,QAAQ4L,YAAY1P,KAAKo+B,WAC9Bp+B,KAAK8D,QAAQ4L,YAAY1P,KAAKk1B,UAE9Bl1B,KAAKqF,eACDnB,EAAsBlE,KAAKyiB,SAAU,SAAS,KAAK,MAChC,QAAf5gB,EAAA7B,KAAKm+B,OAAOvhB,WAAG,IAAA/a,GAAAA,EAAEmuB,aAAahwB,KAAKm+B,OAAOvhB,IAAIqT,WAAW,IAGrE,CAEAjG,KAAK6E,GACD7uB,KAAKm+B,OAAOvhB,IAAMiS,EAAOjS,IAEzB5c,KAAKk1B,SAASxP,YAAcmJ,EAAOgD,MAEnC7xB,KAAKq+B,aAELr+B,KAAK2F,WAAW3D,MAAQ6sB,EAAOjS,IAAI+S,sBAAqB,KACpD3vB,KAAKq+B,YAAY,GAEzB,CAEQA,aAAU,MACd,MAAMpO,KAA8B,QAAfpuB,EAAA7B,KAAKm+B,OAAOvhB,WAAG,IAAA/a,OAAA,EAAAA,EAAEouB,YACtCppB,EAAY7G,KAAKo+B,UAAW,aAAcnO,GAEtCA,GACIjwB,KAAKo+B,UAAU13B,SAAS1G,KAAKk+B,iBAC7Bl+B,KAAKk+B,eAAev3B,SAEnB3G,KAAKo+B,UAAU13B,SAAS1G,KAAKi+B,gBAC9Bj+B,KAAKo+B,UAAU1uB,YAAY1P,KAAKi+B,iBAGhCj+B,KAAKo+B,UAAU13B,SAAS1G,KAAKi+B,gBAC7Bj+B,KAAKi+B,cAAct3B,SAElB3G,KAAKo+B,UAAU13B,SAAS1G,KAAKk+B,iBAC9Bl+B,KAAKo+B,UAAU1uB,YAAY1P,KAAKk+B,gBAG5C,CAEAxT,OAAOD,GACH,CAGJhpB,UACIzB,KAAK2F,WAAWlE,UAChBjC,MAAMiC,SACV,ECzDJ,MAAM0qB,GAAe3iB,IA6Bd,MAAM80B,WAAsBtM,GAC/B7yB,YACqByD,GAYjBpD,MACIoD,EAAQmhB,SACRnhB,EAAQwZ,GACRxZ,EAAQ+Y,UACR/Y,EAAQouB,gBACRpuB,EAAQkJ,YACRlJ,EAAQqtB,WACRrtB,EAAQqvB,YAnBK,KAAArvB,QAAAA,CAqBrB,CAEA8uB,mBACI,OAAO1xB,KAAK4C,QAAQ+iB,IACxB,CAEAiM,qBACI,OAAO5xB,KAAK4C,QAAQ+lB,MACxB,EA2CG,MAAM4V,WAA0BvS,GAsB/B5P,SACA,OAAOpc,KAAKssB,GAChB,CAEI1Q,aACA,OAAO5b,KAAKw+B,SAASlpB,UACzB,CAEIkpB,aAASx8B,GACThC,KAAKy+B,UAAYz8B,EAEjBhC,KAAK0F,YAAY1D,MAAQ,IAAI8C,EACzB9E,KAAKy+B,UAAUttB,aAAY,KACvBnR,KAAK2sB,mBAAmBlpB,UAAKvD,EAAU,IAE3CF,KAAKy+B,UAAUvxB,cAAcxJ,GAAM1D,KAAKiN,cAAcxJ,KAAKC,KAC3D1D,KAAKy+B,UAAUrxB,iBAAiB1J,GAAM1D,KAAKmN,iBAAiB1J,KAAKC,KAEzE,CAEI86B,eACA,OAAOx+B,KAAKy+B,SAChB,CAEIr0B,kBACA,OAAOpK,KAAKw+B,SAASp0B,WACzB,CAEIG,kBACA,OAAOvK,KAAKw+B,SAASj0B,WACzB,CAEIwJ,aACA,OAAO/T,KAAKw+B,SAAS1yB,cAAgBb,EAAYgB,WAC3CjM,KAAKw+B,SAAS/yB,eACdzL,KAAKw+B,SAASn6B,IACxB,CAEIyP,YACA,OAAO9T,KAAKw+B,SAAS1yB,cAAgBb,EAAYgB,WAC3CjM,KAAKw+B,SAASn6B,KACdrE,KAAKw+B,SAAS/yB,cACxB,CAEI7I,cACA,OAAO5C,KAAKs5B,QAChB,CAEAn6B,YAAYyD,GACRpD,MAAMoD,EAAQsV,eAtED,KAAAoU,IAAMH,GAAa1iB,OAE5B,KAAA/D,YAAc,IAAID,EAClB,KAAAi5B,iBAAmB,IAAIt6B,IAGd,KAAA84B,qBAAuB,IAAI36B,EACnC,KAAAsZ,oBAAmC7b,KAAKk9B,qBAAqBn6B,MAErD,KAAA4pB,mBAAqB,IAAIpqB,EACjC,KAAAuZ,kBAAiC9b,KAAK2sB,mBAAmB5pB,MAEjD,KAAAsmB,WAAa,IAAI9mB,EACzB,KAAAia,UAAsCxc,KAAKqpB,WAAWtmB,MAE9C,KAAAkK,cAAgB,IAAI1K,EAC5B,KAAA2K,aAAelN,KAAKiN,cAAclK,MAE1B,KAAAoK,iBAAmB,IAAI5K,EAC/B,KAAA6K,gBAAkBpN,KAAKmN,iBAAiBpK,MAqD7C/C,KAAKqF,eACDrF,KAAK2sB,mBACL3sB,KAAKk9B,qBACLl9B,KAAKqpB,WACLrpB,KAAKiN,cACLjN,KAAKmN,kBAGTnN,KAAKs5B,SAAW12B,EAEXA,EAAQgzB,aACThzB,EAAQgzB,WAAa,CAAC,GAErBhzB,EAAQizB,sBACTjzB,EAAQizB,oBAAsB,CAAC,GAGnC71B,KAAKw+B,SAAW,IAAIvpB,EAASjV,KAAK8D,QAAS,CAEvCgI,YAAab,EAAY4I,WAG7B7T,KAAKqF,eAAerF,KAAK0F,YAC7B,CAEAwW,QACI,CAGJH,cAAcnZ,GACV5C,KAAKs5B,SAAQ5c,OAAAC,OAAAD,OAAAC,OAAA,GAAQ3c,KAAK4C,SAAYA,EAC1C,CAEAyZ,SACIzZ,GAEA,MAAM+iB,EAAO+P,GACT9yB,EAAQwZ,GACRxZ,EAAQ+Y,UACR3b,KAAK4C,QAAQgzB,YAAc,CAAC,EAC5B51B,KAAK4C,QAAQizB,qBAAuB,CAAC,EACrC71B,KAAK4C,QAAQi7B,iBACP,CACInI,gBACI11B,KAAK4C,QAAQi7B,iBAAiBlY,KAAK+P,sBAE3Cx1B,GAGV,IAAIyoB,EAGAA,EADA/lB,EAAQouB,gBACC0E,GACL9yB,EAAQwZ,GACRxZ,EAAQouB,gBACRhxB,KAAK4C,QAAQ+7B,kBAAoB,CAAC,EAClC3+B,KAAK4C,QAAQg8B,0BACb5+B,KAAK4C,QAAQi7B,iBACP,CACInI,gBACI11B,KAAK4C,QAAQi7B,iBAAiBlV,OACzB+M,sBAEbx1B,GAGD,IAAI89B,GAGjB,MAAM3zB,EAAO,IAAIi0B,GAAc,CAC3BliB,GAAIxZ,EAAQwZ,GACZT,UAAW/Y,EAAQ+Y,UACnBqV,gBAAiBpuB,EAAQouB,gBACzBrI,SACAhD,OACA7Z,YAAab,EAAY4I,SACzBoc,aAAcrtB,EAAQqtB,WACtBgC,aAAcjyB,KAAK4C,QAAQqvB,WAC3BlO,SAAU/jB,OAGdA,KAAK4pB,WAAWvf,GAEhB,MAAMhG,EACsB,iBAAjBzB,EAAQyB,KAAoBzB,EAAQyB,KAAO+G,EAAOC,WACvDhI,EACuB,iBAAlBT,EAAQS,MAAqBT,EAAQS,WAAQnD,EAexD,OAbAmK,EAAK2f,KAAK,CACN6E,OAAQjsB,EAAQisB,QAAU,CAAC,EAC3B+B,gBAAiBhuB,EAAQguB,gBACzBC,gBAAiBjuB,EAAQiuB,gBACzBZ,WAAYrtB,EAAQqtB,WACpB4B,MAAOjvB,EAAQivB,MACf5H,aAAc,IAAI1N,EAAYvc,QAGlCA,KAAKw+B,SAAS7oB,QAAQtL,EAAMhG,EAAMhB,GAElCgH,EAAKyB,YAAc9L,KAAKw+B,SAAS1yB,YAE1BzB,CACX,CAEA2R,YAAYC,GACR,MACM5Y,EADQrD,KAAK4b,OACCmL,WAAWxY,GAAMA,IAAM0N,IAC3Cjc,KAAKw+B,SAAS5oB,WAAWvS,GAEzBrD,KAAKwrB,cAAcvP,EACvB,CAEAK,UAAU1S,EAAcC,GACpB7J,KAAKw+B,SAASprB,SAASxJ,EAAMC,EACjC,CAEAsS,SAASC,GACL,OAAOpc,KAAK4b,OAAOiM,MAAMxd,GAASA,EAAK+R,KAAOA,GAClD,CAEA/I,OAAOS,EAAeC,GAClB,MAAO1P,EAAMoH,GACTzL,KAAKw+B,SAAS1yB,cAAgBb,EAAYgB,WACpC,CAAC6H,EAAOC,GACR,CAACA,EAAQD,GACnB9T,KAAKw+B,SAASnrB,OAAOhP,EAAMoH,EAC/B,CAEA4N,SACI,MAAMga,EAAWrxB,GACbA,IAAUqK,OAAO+mB,kBACjBpxB,IAAUqK,OAAOC,uBACXpM,EACA8B,EAgBV,MAAO,CACH6N,MAdqC7P,KAAKw+B,SACzClpB,WACA/T,KAAI,CAAC8I,EAAMrB,KAER,MAAO,CACH3E,KAFSrE,KAAKw+B,SAAS9tB,YAAY1H,GAGnC7I,KAAMkK,EAAKgP,SACXjP,aATKpI,EASgBqI,EAAKumB,gBATF5uB,GAAS,OAAI9B,EAAY8B,GAUjDuI,YAAa8oB,EAAQhpB,EAAKwmB,iBAC1BW,SAAUnnB,EAAK4lB,cAXVjuB,KAYR,IAKLqC,KAAMrE,KAAKw+B,SAASn6B,KAE5B,CAEA4V,SAAS4kB,GACL7+B,KAAK2C,QAEL,MAAM,MAAEkN,EAAK,KAAExL,GAASw6B,EAElBzB,EAAoB,GAGpBtpB,EAAQ9T,KAAK8T,MACbC,EAAS/T,KAAK+T,OAEpB/T,KAAKw+B,SAAW,IAAIvpB,EAASjV,KAAK8D,QAAS,CACvCgI,YAAab,EAAY4I,SACzBjE,WAAY,CACRvL,OACAwL,MAAOA,EAAMtO,KAAK8I,IACd,MAAMlK,EAAOkK,EAAKlK,KAEZwlB,EAAO+P,GACTv1B,EAAKic,GACLjc,EAAKwb,UACL3b,KAAK4C,QAAQgzB,YAAc,CAAC,EAC5B51B,KAAK4C,QAAQizB,qBAAuB,CAAC,EACrC71B,KAAK4C,QAAQi7B,iBACP,CACInI,gBACI11B,KAAK4C,QAAQi7B,iBAAiBlY,KACzB+P,sBAEbx1B,GAGV,IAAIyoB,EAGAA,EADAxoB,EAAK6wB,gBACI0E,GACLv1B,EAAKic,GACLjc,EAAK6wB,gBACLhxB,KAAK4C,QAAQ+7B,kBAAoB,CAAC,EAClC3+B,KAAK4C,QAAQg8B,2BAA6B,CAAC,EAC3C5+B,KAAK4C,QAAQi7B,iBACP,CACInI,gBACI11B,KAAK4C,QAAQi7B,iBAAiBlV,OACzB+M,sBAEbx1B,GAGD,IAAI89B,GAGjB,MAAM/hB,EAAQ,IAAIqiB,GAAc,CAC5BliB,GAAIjc,EAAKic,GACTT,UAAWxb,EAAKwb,UAChBqV,gBAAiB7wB,EAAK6wB,gBACtBrI,SACAhD,OACA7Z,YAAab,EAAY4I,SACzBoc,aAAc5lB,EAAKmnB,SACnBS,aAAcjyB,KAAK4C,QAAQqvB,WAC3BlO,SAAU/jB,OAsBd,OAnBAA,KAAK4pB,WAAW3N,GAEhBmhB,EAAMh6B,MAAK,KACP6Y,EAAM+N,KAAK,CACP6E,OAAQ1uB,EAAK0uB,QAAU,CAAC,EACxB+B,gBAAiBvmB,EAAKD,YACtBymB,gBAAiBxmB,EAAKE,YACtBsnB,MAAO1xB,EAAK0xB,MACZ5B,aAAc5lB,EAAKmnB,SACnBvH,aAAc,IAAI1N,EAAYvc,QAElCic,EAAMnQ,YAAc9L,KAAKw+B,SAAS1yB,WAAW,IAGjDlH,YAAW,KAEP5E,KAAKiN,cAAcxJ,KAAKwY,EAAM,GAC/B,GAEI,CAAE5X,KAAMgG,EAAKhG,KAAMgG,KAAM4R,EAAO,OAKnDjc,KAAKqT,OAAOS,EAAOC,GAEnBqpB,EAAM17B,SAAS47B,GAAMA,MAErBt9B,KAAKk9B,qBAAqBz5B,MAC9B,CAEAd,QACI,IAAK,MAAO4L,EAAGvM,KAAUhC,KAAK0+B,iBAAiBpD,UAC3Ct5B,EAAMP,UAEVzB,KAAK0+B,iBAAiB/7B,QAEtB3C,KAAKw+B,SAAS/8B,SAClB,CAEQmoB,WAAW3N,GACf,MAAMtW,EAAasW,EAAMO,WAAWzZ,IAChC/C,KAAKqpB,WAAW5lB,KAAKV,EAAM,IAG/B/C,KAAK0+B,iBAAiBp6B,IAAI2X,EAAMG,GAAIzW,EACxC,CAEQ6lB,cAAcvP,GAClB,MAAMtW,EAAa3F,KAAK0+B,iBAAiBvR,IAAIlR,EAAMG,IAE/CzW,IACAA,EAAWlE,UACXzB,KAAK0+B,iBAAiB96B,OAAOqY,EAAMG,IAE3C,CAEO3a,UACHjC,MAAMiC,UAEN,IAAK,MAAO8M,EAAGvM,KAAUhC,KAAK0+B,iBAAiBpD,UAC3Ct5B,EAAMP,UAEVzB,KAAK0+B,iBAAiB/7B,QAEtB3C,KAAKw+B,SAAS/8B,SAClB,ECpdG,MAAeq9B,WACV5O,GAoBJzlB,eACA,OAAOzK,KAAKyyB,SAChB,CAEI3mB,gBAAY9J,GACZhC,KAAK+L,aAAe/J,CACxB,CAEI8J,kBACA,OAAO9L,KAAK+L,YAChB,CAEI3B,kBACA,MAAM/F,EAC2B,mBAAtBrE,KAAK++B,aACN/+B,KAAK++B,eACL/+B,KAAK++B,aAOf,OALI16B,IAASrE,KAAKg/B,wBACdh/B,KAAKg/B,sBAAwB36B,EAC7BrE,KAAK6yB,qBAGFxuB,CACX,CAEIkG,kBACA,MAAMlG,EAC2B,mBAAtBrE,KAAKi/B,aACNj/B,KAAKi/B,eACLj/B,KAAKi/B,aAOf,OALI56B,IAASrE,KAAKk/B,wBACdl/B,KAAKk/B,sBAAwB76B,EAC7BrE,KAAK6yB,qBAGFxuB,CACX,CAEIqG,WACA,OAAO1K,KAAK0yB,KAChB,CAEAvzB,YAAYid,EAAYuZ,GACpBn2B,MAAM4c,EAAIuZ,EAAe,IAAI5G,GAAsB3S,IA9D/C,KAAA4iB,sBAAwB,EACxB,KAAAE,sBAAwB7yB,OAAOC,kBAE/B,KAAAyyB,aAAwC,EACxC,KAAAE,aAAwC5yB,OAAOC,kBAE/C,KAAAomB,OAAQ,EAIC,KAAArd,aAAe,IAAI9S,EAI3B,KAAA4O,YACLnR,KAAKqV,aAAatS,MAiDlB/C,KAAK4c,IAAI+M,WAAW3pB,MAEpBA,KAAKqF,eACDrF,KAAKqV,aACLrV,KAAK4c,IAAIyR,oBAAoBtrB,IACzB,MAAM,UAAEiqB,GAAcjqB,GAChB,SAAEghB,GAAa/jB,KAAKyqB,QAC1B1G,EAAShZ,WAAW/K,KAAMgtB,EAAU,IAExChtB,KAAK4c,IAAI6R,gBAAe,KACpB,MAAM,SAAE1K,GAAa/jB,KAAKyqB,QAC1B1G,EAASS,UAAUxkB,KAAK,IAE5BA,KAAK4c,IAAIqS,gCAAgClsB,IAEJ,iBAAtBA,EAAMqH,aACgB,mBAAtBrH,EAAMqH,cAEbpK,KAAK++B,aAAeh8B,EAAMqH,aAGG,iBAAtBrH,EAAMwH,aACgB,mBAAtBxH,EAAMwH,cAEbvK,KAAKi/B,aAAel8B,EAAMwH,aAE9BvK,KAAK6yB,mBAAmB,IAE5B7yB,KAAK4c,IAAIyS,iBAAiBtsB,IACtB/C,KAAKqV,aAAa5R,KAAK,CAAEY,KAAMtB,EAAMsB,MAAO,IAGxD,CAEA0G,WAAWiiB,GACPhtB,KAAK4c,IAAIsR,uBAAuBzqB,KAAK,CAAEupB,aAC3C,CAEAxI,UAAUC,GACNzkB,KAAK4c,IAAI0R,mBAAmB7qB,KAAK,CAAEghB,YACvC,CAEApR,OAAOhP,EAAcoH,GACjB,MAAOqI,EAAOC,GACV/T,KAAK8L,cAAgBb,EAAYgB,WAC3B,CAAC5H,EAAMoH,GACP,CAACA,EAAgBpH,GAC3B7E,MAAM6T,OAAOS,EAAOC,EACxB,CAEAiW,KAAK4E,GACDpvB,MAAMwqB,KAAK4E,GAEX5uB,KAAKyyB,UAAY7D,EAAWnkB,SAExBmkB,EAAWxkB,cACXpK,KAAK++B,aAAenQ,EAAWxkB,aAE/BwkB,EAAWrkB,cACXvK,KAAKi/B,aAAerQ,EAAWrkB,aAE/BqkB,EAAWlkB,OACX1K,KAAK0yB,MAAQ9D,EAAWlkB,KAEhC,CAEA2O,SAQI,OAAAqD,OAAAC,OAAAD,OAAAC,OAAA,GACOnd,MAAM6Z,UAAQ,CACjBjP,aAJapI,EAIQhC,KAAKoK,YAJMpI,GAAS,OAAI9B,EAAY8B,GAKzDuI,YAVavI,IACbA,IAAUqK,OAAO+mB,kBACjBpxB,IAAUqK,OAAOC,uBACXpM,EACA8B,EAMOqxB,CAAQrzB,KAAKuK,eALbvI,KAOrB,CAEQ6wB,oBACJ7yB,KAAK4c,IAAIsS,wBAAwBzrB,KAAK,CAClC8G,YAAavK,KAAKk/B,sBAClB90B,YAAapK,KAAKg/B,uBAE1B,E,8HCrJJ,MAAMG,EAGFA,CAACC,EAAOC,KACR,MAAO9wB,EAAG+wB,GAAiBC,EAAAA,WACrBC,EAASD,EAAAA,OAAqBH,EAAMK,gBAmB1C,OAjBAF,EAAAA,oBACIF,GACA,MACI3U,OAAS+U,IACLD,EAAOE,QAAOhjB,OAAAC,OAAAD,OAAAC,OAAA,GAAQ6iB,EAAOE,SAAYD,GAOzCH,EAAcK,KAAKC,MAAM,KAGjC,IAGGL,EAAAA,cAAoBH,EAAMzjB,UAAW6jB,EAAOE,QAAQ,EAE/DP,EAAqBU,YAAc,wBAOnC,MAAMC,EAA2B,MAC7B,IAAI99B,EAAQ,EACZ,MAAO,CAAEyH,KAAMA,IAAM,8BAA8BzH,KAAS0H,aAC/D,EAHgC,GAKpBq2B,EAAmBR,EAAAA,cAAwB,CAAC,GAElD,MAAMS,EAWT7gC,YACqByb,EACAqlB,EACAtkB,EACAiT,EACAsR,GAJA,KAAAtlB,OAAAA,EACA,KAAAqlB,YAAAA,EACA,KAAAtkB,UAAAA,EACA,KAAAiT,WAAAA,EACA,KAAAsR,QAAAA,EAbb,KAAAC,cAA4B,CAAC,EAM7B,KAAAC,UAAW,EASfpgC,KAAKqgC,cACT,CAEO3V,OAAO0U,GACV,GAAIp/B,KAAKogC,SACL,MAAM,IAAIt+B,MAAM,mDAGf9B,KAAKsgC,kBAINtgC,KAAKsgC,kBAAkB5V,OAAO0U,GAF9Bp/B,KAAKmgC,cAAazjB,OAAAC,OAAAD,OAAAC,OAAA,GAAQ3c,KAAKmgC,eAAkBf,EAIzD,CAEQiB,eACJ,GAAIrgC,KAAKogC,SACL,MAAM,IAAIt+B,MAAM,mDAGpB,GAA8B,mBAAnB9B,KAAK2b,UAMZ,MAAM,IAAI7Z,MACN,0EAIR,MAAMy+B,EAAkBhB,EAAAA,cACpBA,EAAAA,WAAiBJ,GACjB,CACIxjB,UAAW3b,KACN2b,UACL8jB,eAAgBz/B,KAAK4uB,WACrByQ,IAAMv7B,IACF9D,KAAKsgC,kBAAoBx8B,EAErB4Y,OAAO6T,KAAKvwB,KAAKmgC,eAAel/B,OAAS,IACzCjB,KAAKsgC,kBAAkB5V,OAAO1qB,KAAKmgC,eACnCngC,KAAKmgC,cAAgB,CAAC,E,IAMhCppB,EAAO/W,KAAKkgC,QACZX,EAAAA,cACIQ,EAAiBS,SACjB,CAAEx+B,MAAOhC,KAAKkgC,SACdK,GAEJA,EAEAE,EAASC,EAAAA,aACX3pB,EACA/W,KAAK4a,OACLklB,EAAyBr2B,QAG7BzJ,KAAKq/B,IAAM,CACPoB,SACA96B,WAAY3F,KAAKigC,YAAYU,UAAUF,GAE/C,CAEOh/B,UAAO,MACF,QAARI,EAAA7B,KAAKq/B,WAAG,IAAAx9B,GAAAA,EAAE8D,WAAWlE,UACrBzB,KAAKogC,UAAW,CACpB,EAaG,MAAMQ,EAA2CA,KACpD,MAAOC,EAASC,GAAcvB,EAAAA,SAAoC,IAElEA,EAAAA,cAAoB,iBAAiBsB,EAAQ5/B,UAoB7C,MAAO,CAAC4/B,EAlBUtB,EAAAA,aAAmBkB,IACjCK,GAAYC,GAAoB,IAAIA,EAAiBN,KACrD,IAAIL,GAAW,EACf,MAAO,CACH3+B,QAASA,KACL,GAAI2+B,EACA,MAAM,IAAIt+B,MACN,gDAGRs+B,GAAW,EACXU,GAAYC,GACRA,EAAgBlwB,QAAQ8F,GAAMA,IAAM8pB,KACvC,EAER,GACF,IAEwB,ECpLxB,MAAMO,EAULl9B,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,YACoBid,EACCT,EACAslB,GAFD,KAAA7kB,GAAAA,EACC,KAAAT,UAAAA,EACA,KAAAslB,iBAAAA,EAbJ,KAAAr5B,YAAc,IAAIs5B,EAAAA,GAC1B,KAAAr5B,WAAkC7H,KAAK4H,YAAY7E,MAE3C,KAAA+E,WAAa,IAAIo5B,EAAAA,GACzB,KAAAn5B,UAAiC/H,KAAK8H,WAAW/E,MAWtD/C,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,qBAC9B,CAEAoV,QACI,CAGG8N,KAAK4E,GACR5uB,KAAK2kB,KAAO,IAAIqb,EACZhgC,KAAK8D,QACL9D,KAAKihC,iBACLjhC,KAAK2b,UACL,CACIkT,OAAQD,EAAWC,OACnBjS,IAAKgS,EAAWhS,IAChBqN,aAAc2E,EAAW3E,cAGrC,CAEOS,OAAO3nB,GAAuB,MACxB,QAATlB,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAE6oB,OAAO3nB,EAAM8rB,OAC5B,CAEOxb,OAAO4P,EAAgBC,GAC1B,CAGGzhB,UAAO,MACVzB,KAAK4H,YAAYnG,UACjBzB,KAAK8H,WAAWrG,UACP,QAATI,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAEJ,SACf,ECtDG,MAAM0/B,EAILr9B,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,YACoBid,EACCT,EACAslB,GAFD,KAAA7kB,GAAAA,EACC,KAAAT,UAAAA,EACA,KAAAslB,iBAAAA,EAEjBjhC,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,qBAC9B,CAEAoV,QACI,CAGG8N,KAAK4E,GACR5uB,KAAK2kB,KAAO,IAAIqb,EACZhgC,KAAK8D,QACL9D,KAAKihC,iBACLjhC,KAAK2b,UACL,CACIkT,OAAQD,EAAWC,OACnBjS,IAAKgS,EAAWhS,IAChBqN,aAAc2E,EAAW3E,cAGrC,CAEOS,OAAO3nB,GAAuB,MACxB,QAATlB,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAE6oB,OAAO3nB,EAAM8rB,OAC5B,CAEOxb,OAAO4P,EAAgBC,GAC1B,CAGGzhB,UAAO,MACD,QAATI,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAEJ,SACf,ECnCG,MAAM2/B,EAKLt9B,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,YACoBid,EACCT,EACAslB,GAFD,KAAA7kB,GAAAA,EACC,KAAAT,UAAAA,EACA,KAAAslB,iBAAAA,EAEjBjhC,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,qBAC9B,CAEAkjB,KAAK4E,GACD5uB,KAAK2kB,KAAO,IAAIqb,EACZhgC,KAAK8D,QACL9D,KAAKihC,iBACLjhC,KAAK2b,UACL,CACIqC,MAAO4Q,EAAW5Q,MAClBiM,aAAc2E,EAAW3E,aACzBoK,MAAOA,KACCzF,EAAW5Q,OACX4Q,EAAW3E,aAAalM,YAAY6Q,EAAW5Q,MAAO,GAK1E,CAEA9B,QACI,CAGJwO,OAAOmE,GAAwB,QACvB7uB,KAAK4uB,aACL5uB,KAAK4uB,WAAWC,OAASA,EAAOA,QAG3B,QAAThtB,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAE6oB,OAAO,CAAEmE,QAAuB,QAAfxN,EAAArhB,KAAK4uB,kBAAU,IAAAvN,OAAA,EAAAA,EAAEwN,SAAU,CAAC,GAC5D,CAEAxb,OAAO4P,EAAgBC,GACnB,CAGJ2H,kBACI2I,EACAiC,GAEA,CAGJh0B,UAAO,MACM,QAATI,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAEJ,SACf,ECzDG,MAAM4/B,EAKLv9B,cACA,OAAO9D,KAAKyiB,QAChB,CAEIkC,WACA,OAAO3kB,KAAKshC,KAChB,CAEItjB,YACA,OAAOhe,KAAKwzB,MAChB,CAEAr0B,YACqBwc,EACAslB,EACAzN,GAFA,KAAA7X,UAAAA,EACA,KAAAslB,iBAAAA,EACA,KAAAzN,OAAAA,EAnBb,KAAA+N,kBAAoB,IAAIC,EAAAA,GAqB5BxhC,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS3b,UAAY,qBAC9B,CAEAoV,QACI,CAGG8N,KAAK4E,GAIR5uB,KAAKuhC,kBAAkBv/B,MAAQ,IAAIy/B,EAAAA,GAC/BzhC,KAAKwzB,OAAOjP,MAAMzH,eAAc,KAC5B9c,KAAK0hC,cAAc,IAEvB1hC,KAAKwzB,OAAOjP,MAAMvH,kBAAiB,KAC/Bhd,KAAK0hC,cAAc,IAEvB1hC,KAAKwzB,OAAOjP,MAAMrH,wBAAuB,KACrCld,KAAK2hC,mBAAmB,IAE5B/S,EAAWhS,IAAI2R,mBAAkB,KAC7BvuB,KAAK4hC,mBAAmB,KAIhC5hC,KAAKshC,MAAQ,IAAItB,EACbhgC,KAAK8D,QACL9D,KAAKihC,iBACLjhC,KAAK2b,UACL,CACIiB,IAAKgS,EAAWhS,IAChBqN,aAAc2E,EAAW3E,aACzBrO,OAAQ5b,KAAKwzB,OAAOjP,MAAM3I,OAC1B4B,YAAaxd,KAAKwzB,OAAOjP,MAAM/G,YAC/B+N,cAAevrB,KAAKwzB,OAAO5W,IAAI6H,SAC/BzG,MAAOhe,KAAKwzB,QAGxB,CAEO9I,OAAO3nB,GAAuB,MACvB,QAAVlB,EAAA7B,KAAKshC,aAAK,IAAAz/B,GAAAA,EAAE6oB,OAAO3nB,EAAM8rB,OAC7B,CAEOptB,UAAO,MACVzB,KAAKuhC,kBAAkB9/B,UACb,QAAVI,EAAA7B,KAAKshC,aAAK,IAAAz/B,GAAAA,EAAEJ,SAChB,CAEQigC,eACJ1hC,KAAK0qB,OAAO,CAAEmE,OAAQ,CAAEjT,OAAQ5b,KAAKwzB,OAAOjP,MAAM3I,SACtD,CAEQ+lB,oBACJ3hC,KAAK0qB,OAAO,CACRmE,OAAQ,CACJrR,YAAaxd,KAAKwzB,OAAOjP,MAAM/G,cAG3C,CAEQokB,oBACJ5hC,KAAK0qB,OAAO,CACRmE,OAAQ,CACJtD,cAAevrB,KAAKwzB,OAAO5W,IAAI6H,WAG3C,ECxFJ,SAASod,EACLlmB,EACAmmB,GAEA,OAAOnmB,EACAqN,GACU,IAAIqY,EACP1lB,EACAmmB,EACA9Y,QAGR9oB,CACV,CAoCA,MAAM6hC,EAAoB,4BAEbC,EAAgBzC,EAAAA,YACzB,CAACH,EAA4BC,KACzB,MAAM4C,EAAS1C,EAAAA,OAA6B,MACtC2C,EAAc3C,EAAAA,UACbsB,EAASF,GAAaC,IAgN7B,OA9MArB,EAAAA,oBAA0BF,GAAK,IAAM4C,EAAOvC,SAAU,IAEtDH,EAAAA,WAAgB,KACZ,IAAK0C,EAAOvC,QACR,MAAO,OAKX,MAAMyC,EAA+C,CACjDpf,QAAS,CACL2S,gBAAiBA,CACbpJ,EACA8V,EACAzmB,IAEO,IAAIqlB,EACPoB,EACAzmB,EACA,CACIglB,eAKhB9Z,IAAK,CACD6O,gBAAiBA,CACbpJ,EACA8V,EACAzmB,IAEO,IAAIwlB,EACPiB,EACAzmB,EACA,CACIglB,eAKhBjY,UAAW,CACPgN,gBAAiBA,CACbpJ,EACA8V,EACAzmB,IAEO,IAAIylB,EAAmBgB,EAAazmB,EAAW,CAClDglB,gBAMVpK,EAAyB6I,EAAM9I,eAAiB,CAAC,EAEnD8I,EAAM5I,sBACND,EAAuBwL,GACnB3C,EAAM5I,qBAGd,MAAM6L,EAAW,IAAIjJ,EAAAA,GAAkB,CACnClhB,cAAe+pB,EAAOvC,QACtBrJ,0BAA2B8L,EAC3BtM,oBAAqBuJ,EAAMxJ,WAC3BW,yBACAsD,4BAA6BuF,EAAMxF,mBACnCpD,oBAAqB4I,EAAM5I,oBACrBuL,OACA7hC,EACNyP,OAAQyvB,EAAMkD,YACR,CAAEpyB,gBAAiB,oBACnBhQ,EACN4rB,eAAgBsT,EAAMtT,eACtB5B,+BAAgC2X,EAC5BzC,EAAMmD,2BACN,CAAE5B,cAEN7W,gCAAiC+X,EAC7BzC,EAAMoD,4BACN,CAAE7B,cAEN3Z,cAAeoY,EAAMpY,cACrBG,sBAAuBiY,EAAMjY,yBAG3B,YAAE5H,EAAW,aAAEC,GAAiByiB,EAAOvC,QAS7C,OARA2C,EAAShvB,OAAOkM,EAAaC,GAEzB4f,EAAMqD,SACNrD,EAAMqD,QAAQ,CAAE7lB,IAAK,IAAIU,EAAAA,GAAY+kB,KAGzCH,EAAYxC,QAAU2C,EAEf,KACHA,EAAS5gC,SAAS,CACrB,GACF,IAEH89B,EAAAA,WAAgB,KACZ,IAAK2C,EAAYxC,QACb,MAAO,OAKX,MAAM/5B,EAAau8B,EAAYxC,QAAQljB,WAAWzZ,IAC1Cq8B,EAAM5iB,WACN4iB,EAAM5iB,UAAUzZ,EAAO,IAI/B,MAAO,KACH4C,EAAWlE,SAAS,CACvB,GACF,CAAC29B,EAAM5iB,YAEV+iB,EAAAA,WAAgB,KACP2C,EAAYxC,SAGjBwC,EAAYxC,QAAQ3jB,cAAc,CAC9B8Z,oBAAqBuJ,EAAMxJ,YAC7B,GACH,CAACwJ,EAAMxJ,aAEV2J,EAAAA,WAAgB,KACP2C,EAAYxC,SAGjBwC,EAAYxC,QAAQ3jB,cAAc,CAC9B8d,4BAA6BuF,EAAMxF,oBACrC,GACH,CAACwF,EAAMxF,qBAEV2F,EAAAA,WAAgB,KACP2C,EAAYxC,SAGjBwC,EAAYxC,QAAQ3jB,cAAc,CAC9B+P,eAAgBsT,EAAMtT,gBACxB,GACH,CAACsT,EAAMtT,iBAEVyT,EAAAA,WAAgB,KACP2C,EAAYxC,SAGjBwC,EAAYxC,QAAQ3jB,cAAc,CAC9Bwa,uBAAwB6I,EAAM9I,eAChC,GACH,CAAC8I,EAAM9I,gBAEViJ,EAAAA,WAAgB,KACP2C,EAAYxC,SAGjBwC,EAAYxC,QAAQ3jB,cAAc,CAC9BoL,sBAAuBiY,EAAMjY,uBAC/B,GACH,CAACiY,EAAMjY,wBAEVoY,EAAAA,WAAgB,KACZ,IAAK2C,EAAYxC,QACb,OAGJ,MAAMnJ,EAAyB6I,EAAM9I,eAAiB,CAAC,EAEnD8I,EAAM5I,sBACND,EAAuBwL,GACnB3C,EAAM5I,qBAGd0L,EAAYxC,QAAQ3jB,cAAc,CAC9Bya,oBAAqB4I,EAAM5I,oBACrBuL,OACA7hC,EACNq2B,0BACF,GACH,CAAC6I,EAAM5I,sBAEV+I,EAAAA,WAAgB,KACP2C,EAAYxC,SAGjBwC,EAAYxC,QAAQ3jB,cAAc,CAC9B+N,gCAAiC+X,EAC7BzC,EAAMoD,4BACN,CAAE7B,eAER,GACH,CAACvB,EAAMoD,8BAEVjD,EAAAA,WAAgB,KACP2C,EAAYxC,SAGjBwC,EAAYxC,QAAQ3jB,cAAc,CAC9BmO,+BAAgC2X,EAC5BzC,EAAMmD,2BACN,CAAE5B,eAER,GACH,CAACvB,EAAMmD,6BAGNhD,EAAAA,cAAA,OACIz4B,UAAWs4B,EAAMt4B,UACjB+D,MAAO,CAAEkJ,OAAQ,OAAQD,MAAO,QAChCurB,IAAK4C,GAEJpB,EACC,IAIlBmB,EAAcnC,YAAc,oBCxSrB,MAAM6C,EAAcA,IACvBnD,EAAAA,cAAA,OACIxrB,OAAO,KACPD,MAAM,KACN6uB,QAAQ,YAAW,cACN,QACbC,WAAW,EACX97B,UAAU,gBAEVy4B,EAAAA,cAAA,QAAM59B,EAAE,gI,gVCJT,MAAMkhC,EAERhhC,IAMA,IANA,IACD+a,EACAqN,aAAc6Y,EACdjU,OAAQpE,EAAO,UACfsY,GAASlhC,EACNmX,EAAIgqB,EAAAnhC,EALN,6CAOD,MAAMohC,EAAU1D,EAAAA,aACXx8B,IACGA,EAAMwd,kBACN3D,EAAIyX,OAAO,GAEf,CAACzX,IAGCsmB,EAAU3D,EAAAA,aACXx8B,IACG6Z,EAAI4H,YAEAxL,EAAKkqB,SACLlqB,EAAKkqB,QAAQngC,EAAO,GAG5B,CAAC6Z,EAAK5D,EAAKkqB,UAGf,OACI3D,EAAAA,cAAA,MAAA7iB,OAAAC,OAAA,eACgB,wBACR3D,EAAI,CACRkqB,QAASA,EACTp8B,UAAU,uBAEVy4B,EAAAA,cAAA,QAAMz4B,UAAU,4BAA4B8V,EAAIiV,QAC9CkR,GACExD,EAAAA,cAAA,OAAKz4B,UAAU,yBAAyBo8B,QAASD,GAC7C1D,EAAAA,cAACmD,EAAW,OAGlB,ECxCP,MAAMS,UAAuBrE,EAAAA,GAChC3/B,YACIid,EACAT,EACiBynB,EACAnC,GAEjBzhC,MAAM4c,EAAIT,GAHO,KAAAynB,eAAAA,EACA,KAAAnC,iBAAAA,CAGrB,CAEA5Q,eAAY,MACR,OAAO,IAAI2P,EACPhgC,KAAK8D,QACL9D,KAAKihC,iBACLjhC,KAAKojC,eACL,CACIvU,QAAoB,QAAZhtB,EAAA7B,KAAKyqB,eAAO,IAAA5oB,OAAA,EAAAA,EAAEgtB,SAAU,CAAC,EACjCjS,IAAK5c,KAAK4c,IACVqN,aAAc,IAAIvO,EAAAA,GACb1b,KAAKyqB,QAAoC1G,WAI1D,ECCG,MAAMsf,EAAiB9D,EAAAA,YAC1B,CAACH,EAA6BC,KAC1B,MAAM4C,EAAS1C,EAAAA,OAA6B,MACtC+D,EAAe/D,EAAAA,UACdsB,EAASF,GAAaC,IAoD7B,OAlDArB,EAAAA,oBAA0BF,GAAK,IAAM4C,EAAOvC,SAAU,IAEtDH,EAAAA,WAAgB,KACZ,MAAMrqB,EAAY,IAAIuoB,EAAAA,GAAmB,CACrCvlB,cAAe+pB,EAAOvC,QACtB5zB,YAAaszB,EAAMtzB,aAAeb,EAAAA,GAAYgB,WAC9C4pB,oBAAqBuJ,EAAMxJ,WAC3BiI,iBAAkB,CACdnI,gBAAiBA,CACbtZ,EACAgmB,EACAzmB,IAEO,IAAIwnB,EAAe/mB,EAAIgmB,EAAazmB,EAAW,CAClDglB,eAIZtxB,mBACwC,kBAA7B+vB,EAAM/vB,oBACP+vB,EAAM/vB,mBAEhBM,OAAQyvB,EAAMkD,YACR,CAAEpyB,gBAAiB,oBACnBhQ,KAGJ,YAAEqf,EAAW,aAAEC,GAAiByiB,EAAOvC,QAS7C,OARAxqB,EAAU7B,OAAOkM,EAAaC,GAE1B4f,EAAMqD,SACNrD,EAAMqD,QAAQ,CAAE7lB,IAAK,IAAIlB,EAAAA,GAAaxG,KAG1CouB,EAAa5D,QAAUxqB,EAEhB,KACHA,EAAUzT,SAAS,CACtB,GACF,IAEH89B,EAAAA,WAAgB,KACP+D,EAAa5D,SAGlB4D,EAAa5D,QAAQ3jB,cAAc,CAC/B8Z,oBAAqBuJ,EAAMxJ,YAC7B,GACH,CAACwJ,EAAMxJ,aAGN2J,EAAAA,cAAA,OACIz4B,UAAWs4B,EAAMt4B,UACjB+D,MAAO,CAAEkJ,OAAQ,OAAQD,MAAO,QAChCurB,IAAK4C,GAEJpB,EACC,IAIlBwC,EAAexD,YAAc,qBC1FtB,MAAM0D,UAA2B/Q,EAAAA,GACpCrzB,YACIid,EACAT,EACiBynB,EACAnC,GAEjBzhC,MAAM4c,EAAIT,GAHO,KAAAynB,eAAAA,EACA,KAAAnC,iBAAAA,CAGrB,CAEA5Q,eAAY,MACR,OAAO,IAAI2P,EACPhgC,KAAK8D,QACL9D,KAAKihC,iBACLjhC,KAAKojC,eACL,CACIvU,QAAoB,QAAZhtB,EAAA7B,KAAKyqB,eAAO,IAAA5oB,OAAA,EAAAA,EAAEgtB,SAAU,CAAC,EACjCjS,IAAK5c,KAAK4c,IACVqN,aAAc,IAAIpN,EAAAA,GACb7c,KAAKyqB,QAAmC1G,WAIzD,ECAG,MAAMyf,EAAgBjE,EAAAA,YACzB,CAACH,EAA4BC,KACzB,MAAM4C,EAAS1C,EAAAA,OAA6B,MACtCkE,EAAclE,EAAAA,UACbsB,EAASF,GAAaC,IA2D7B,OAzDArB,EAAAA,oBAA0BF,GAAK,IAAM4C,EAAOvC,SAAU,IAEtDH,EAAAA,WAAgB,KACZ,IAAK0C,EAAOvC,QACR,MAAO,OAKX,MAAMjT,EAAW,IAAIwQ,EAAAA,GAAkB,CACnC/kB,cAAe+pB,EAAOvC,QACtBrwB,mBACwC,kBAA7B+vB,EAAM/vB,oBACP+vB,EAAM/vB,mBAEhBvD,YAAaszB,EAAMtzB,aAAeb,EAAAA,GAAYgB,WAC9C4pB,oBAAqBuJ,EAAMxJ,WAC3BS,0BAA2B,CACvBX,gBAAiBA,CAACtZ,EAAYgmB,EAAazmB,IAChC,IAAI4nB,EACPnnB,EACAgmB,EACAzmB,EACA,CACIglB,eAKhBhxB,OAAQyvB,EAAMkD,YACR,CAAEpyB,gBAAiB,oBACnBhQ,KAGJ,YAAEqf,EAAW,aAAEC,GAAiByiB,EAAOvC,QAS7C,OARAjT,EAASpZ,OAAOkM,EAAaC,GAEzB4f,EAAMqD,SACNrD,EAAMqD,QAAQ,CAAE7lB,IAAK,IAAIC,EAAAA,GAAY4P,KAGzCgX,EAAY/D,QAAUjT,EAEf,KACHA,EAAShrB,SAAS,CACrB,GACF,IAEH89B,EAAAA,WAAgB,KACPkE,EAAY/D,SAGjB+D,EAAY/D,QAAQ3jB,cAAc,CAC9B8Z,oBAAqBuJ,EAAMxJ,YAC7B,GACH,CAACwJ,EAAMxJ,aAGN2J,EAAAA,cAAA,OACIz4B,UAAWs4B,EAAMt4B,UACjB+D,MAAO,CAAEkJ,OAAQ,OAAQD,MAAO,QAChCurB,IAAK4C,GAEJpB,EACC,IAIlB2C,EAAc3D,YAAc,oBCjGrB,MAAM6D,EAIL5/B,cACA,OAAO9D,KAAKyiB,QAChB,CAEAtjB,YACoBid,EACCT,EACAslB,GAFD,KAAA7kB,GAAAA,EACC,KAAAT,UAAAA,EACA,KAAAslB,iBAAAA,EAEjBjhC,KAAKyiB,SAAWhb,SAAS4J,cAAc,OACvCrR,KAAKyiB,SAAS5X,MAAMkJ,OAAS,OAC7B/T,KAAKyiB,SAAS5X,MAAMiJ,MAAQ,MAChC,CAEOkW,KAAK4E,GACR5uB,KAAK2kB,KAAO,IAAIqb,EACZhgC,KAAK8D,QACL9D,KAAKihC,iBACLjhC,KAAK2b,UACL,CACIkT,OAAQD,EAAWC,OACnBjS,IAAKgS,EAAWhS,IAChBiV,MAAOjD,EAAWiD,MAClB5H,aAAc2E,EAAW3E,cAGrC,CAEO5Q,SACH,MAAO,CACH+C,GAAIpc,KAAKoc,GAEjB,CAEOsO,OAAOmE,GAAwB,MACzB,QAAThtB,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAE6oB,OAAOmE,EAAOA,OAC7B,CAEOptB,UAAO,MACD,QAATI,EAAA7B,KAAK2kB,YAAI,IAAA9iB,GAAAA,EAAEJ,SACf,EClBG,MAAMkiC,EAAgBpE,EAAAA,YACzB,CAACH,EAA4BC,KACzB,MAAM4C,EAAS1C,EAAAA,OAA6B,MACtCqE,EAAcrE,EAAAA,UACbsB,EAASF,GAAaC,IAkG7B,OAhGArB,EAAAA,oBAA0BF,GAAK,IAAM4C,EAAOvC,SAAU,IAEtDH,EAAAA,WAAgB,KACZ,MAAM7J,EAAkBA,CACpBtZ,EACAynB,EACAloB,IAEA,IAAI+nB,EAAiBtnB,EAAIT,EAAW,CAChCglB,cAGFnC,EAAW,IAAID,EAAAA,EAAkB,CACnCrmB,cAAe+pB,EAAOvC,QACtB7J,oBAAqBuJ,EAAMxJ,WAC3BA,WAAY,CAAC,EACb+I,iBAAkB,CAAC,EACnB1M,WAAYmN,EAAMnN,WAClB2M,0BAA2BQ,EAAMT,iBACjCd,iBAAkB,CACdlV,OAAQ,CACJ+M,mBAEJ/P,KAAM,CACF+P,oBAGR5J,eAAgBsT,EAAMtT,iBAGpBlP,EAAM,IAAIL,EAAAA,GAAYiiB,IAEtB,YAAEjf,EAAW,aAAEC,GAAiByiB,EAAOvC,QAS7C,OARAlB,EAASnrB,OAAOkM,EAAaC,GAEzB4f,EAAMqD,SACNrD,EAAMqD,QAAQ,CAAE7lB,QAGpBgnB,EAAYlE,QAAUlB,EAEf,KACHA,EAAS/8B,SAAS,CACrB,GACF,IAEH89B,EAAAA,WAAgB,KACPqE,EAAYlE,SAGjBkE,EAAYlE,QAAQ3jB,cAAc,CAC9B8Z,oBAAqBuJ,EAAMxJ,YAC7B,GACH,CAACwJ,EAAMxJ,aAEV2J,EAAAA,WAAgB,KACPqE,EAAYlE,SAGjBkE,EAAYlE,QAAQ3jB,cAAc,CAC9B6iB,0BAA2BQ,EAAMT,kBACnC,GACH,CAACS,EAAMT,mBAEVY,EAAAA,WAAgB,KACZ,IAAKqE,EAAYlE,QACb,MAAO,OAKX,MAAMlB,EAAWoF,EAAYlE,QAEvB/5B,EAAa64B,EAAShiB,WAAWzZ,IAC/Bq8B,EAAM5iB,WACN4iB,EAAM5iB,UAASE,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACV5Z,GAAK,CACR6Z,IAAK,IAAIL,EAAAA,GAAYiiB,KACtB,IAIX,MAAO,KACH74B,EAAWlE,SAAS,CACvB,GACF,CAAC29B,EAAM5iB,YAEV+iB,EAAAA,WAAgB,KACPqE,EAAYlE,SAGjBkE,EAAYlE,QAAQ3jB,cAAc,CAC9B+P,eAAgBsT,EAAMtT,gBACxB,GACH,CAACsT,EAAMtT,iBAGNyT,EAAAA,cAAA,OACIz4B,UAAWs4B,EAAMt4B,UACjB+D,MAAO,CAAEkJ,OAAQ,OAAQD,MAAO,QAChCurB,IAAK4C,GAEJpB,EACC,IAIlB8C,EAAc9D,YAAc,mB,yDC7I5B,MAAMjK,EAAa,CACfkO,QAAU1E,GAEFG,EAAAA,cAAA,OAAK10B,MAAO,CAAEya,QAAS,OAAQH,MAAO,UACjCia,EAAMvQ,OAAOgD,QAoF9B,EA9E8BuN,GAsEtBG,EAAAA,cAACyC,EAAAA,GAAa,CACVpM,WAAYA,EACZ6M,QAvES1/B,IACb,MAAMkZ,EAAQlZ,EAAM6Z,IAAIP,SAAS,CAC7BD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,aAIf5V,EAAM+B,MAAMsG,QAAS,EACrBrI,EAAM+B,MAAM2K,OAAOtC,QAAS,EAE5BtjB,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,aAIf9uB,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,aAIf9uB,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,WAGvC7V,EAAM6Z,IAAIP,SAAS,CAC9BD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,WAMtD7V,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,WAGtD7V,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,UACpD,EAOE9R,UAAWs4B,EAAM2E,OAAS,wB,wDClFtC,MAAMnO,EAAa,CACfkO,QAAU1E,GACCG,EAAAA,cAAA,OAAK10B,MAAO,CAAEya,QAAS,SAAW8Z,EAAMvQ,OAAOgD,QAIjDmS,EAAiBA,IA4EtBzE,EAAAA,cAACiE,EAAAA,GAAa,CACV5N,WAAYA,EACZ6M,QA7ES1/B,IACbA,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,aAIf9uB,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,aAIf9uB,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,aAIf9uB,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,WAGtD7V,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,WAGtD7V,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,SAClD5C,aAAc,KAGlBjT,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,SAClD5C,aAAc,KAGlBjT,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXtd,SAAU,CAAEinB,eAAgB,UAAW5iB,UAAW,SAClD5C,aAAc,IAChB,EAOE3G,oBAAoB,EACpBvD,YAAab,EAAAA,GAAY4I,SACzB/M,UAAU,wB,yDCxFtB,MAAM8uB,EAAa,CACfkO,QAAU1E,GAEFG,EAAAA,cAAA,OACI10B,MAAO,CACHya,QAAS,OACTvR,OAAQ,OACRsR,gBAAiB,kBAGpB+Z,EAAMvQ,OAAOgD,QA0CxB8M,EAAmB,CACrBsF,kBArCuB7E,IACvB,MAAO5N,EAAUxB,GAAeuP,EAAAA,SAC5BH,EAAMxiB,IAAIqT,YAGdsP,EAAAA,WAAgB,KACZ,MAAM55B,EAAay5B,EAAMxiB,IAAI+S,sBAAsB5sB,IAC/CitB,EAAYjtB,EAAMktB,WAAW,IAGjC,MAAO,KACHtqB,EAAWlE,SAAS,CACvB,GACF,IAMH,OACI89B,EAAAA,cAAA,OACI10B,MAAO,CACHya,QAAS,OACTvR,OAAQ,OACRsR,gBAAiB,kBAGrBka,EAAAA,cAAA,KACI2D,QAbIA,KACZ9D,EAAMxiB,IAAIoT,aAAawB,EAAS,EAaxB1qB,UAAW0qB,EAAW,WAAa,cAEvC+N,EAAAA,cAAA,YAAOH,EAAMvQ,OAAOgD,OAClB,GAQDqS,EAAiBA,IA+BtB3E,EAAAA,cAACoE,EAAAA,GAAa,CACV/N,WAAYA,EACZ+I,iBAAkBA,EAClB8D,QAjCS1/B,IACbA,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXA,MAAO,YAGX9uB,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXA,MAAO,YAGX9uB,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXA,MAAO,WACT,EAQE/qB,UAAU,wB,yDC1FtB,MAAM8uB,EAAa,CACfkO,QAAU1E,GACCG,EAAAA,cAAA,OAAK10B,MAAO,CAAEya,QAAS,SAAW8Z,EAAMvQ,OAAOgD,QAIjDsS,EAAmB/E,GA+BxBG,EAAAA,cAAC8D,EAAAA,GAAc,CACXzN,WAAYA,EACZvmB,mBAAoB+vB,EAAMgF,aAC1B3B,QAjCS1/B,IACbA,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXznB,YAAa,MAGjBrH,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXznB,YAAa,MAGjBrH,EAAM6Z,IAAIP,SAAS,CACfD,GAAI,UACJT,UAAW,UACXkT,OAAQ,CACJgD,MAAO,WAEXznB,YAAa,KACf,EAQE0B,YAAab,EAAAA,GAAYgB,WACzBnF,UAAU,wB,4MCxCf,MAAMu9B,EAAc,CAC1BC,iBAAkB,EAClBC,YAAa,8EAEDC,EAAe,eACfC,EAAW,CACtB,cAAiB,QACjB,GAAM,sBACN,MAAS,eACT,YAAe,6EACf,OAAU,+CACV,cAAiB,IACjB,KAAQ,IACR,UAAa,SACb,OAAS,EACT,QAAW,sIACX,KAAQ,GACR,QAAW,QACX,gBAAmB,EACnB,YAAe,CACb,iBAAoB,EACpB,YAAe,8EAEjB,QAAW,kBACX,KAAQ,CACN,MAAS,QACT,UAAa,gBAGJC,EAAS,CAEtB,EAOaC,EAAM,CAAC,CAClB3iC,MAAO,cACPoa,GAAI,cACJwoB,MAAO,IAGHC,EAAc,CAClBF,OAEIG,EAAY,UACH,SAASC,EAAUC,GAG9B,IAH+B,WACjCpP,KACGwJ,GACJ4F,EACC,OAAOC,EAAAA,EAAAA,IAACH,GAASI,EAAAA,EAAAA,GAAA,GAAKL,EAAiBzF,EAAK,CAAExJ,WAAYA,EAAYuP,QAAQ,eAG5EF,EAAAA,EAAAA,IAAA,MACE,GAAM,gBACH,iBACLA,EAAAA,EAAAA,IAAA,UAAGA,EAAAA,EAAAA,IAAA,UAAQG,WAAW,KAAM,YAAqB,kFACjDH,EAAAA,EAAAA,IAAA,MACE,GAAM,eACH,gBACLA,EAAAA,EAAAA,IAAA,UAAGA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,YAAyB,8BAA4BH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,mBAAgC,SAAOH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,uBAAoC,iBAAeH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,YAAyB,kBAC/RH,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,kBACV,4BAEPH,EAAAA,EAAAA,IAAA,SAAK,6DAA2DA,EAAAA,EAAAA,IAAA,KAAGG,WAAW,IAC1E,KAAQ,sEACPH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,sCAAsD,iDAExFH,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,mEAEPH,EAAAA,EAAAA,IAAA,SAAK,gDACLA,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACx7B,GAAG,wBAAwBs7B,QAAQ,SACzCF,EAAAA,EAAAA,IAAA,UAAI,cAEJA,EAAAA,EAAAA,IAAA,OAAKp6B,MAAO,CACVkJ,OAAQ,QACRsR,gBAAiB,gBACjBF,MAAO,QACPmgB,OAAQ,cAEVL,EAAAA,EAAAA,IAACM,EAAAA,EAAc,CAACJ,QAAQ,qBAExBF,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACx7B,GAAG,yBAAyBs7B,QAAQ,SAC1CF,EAAAA,EAAAA,IAAA,UAAI,eAEJA,EAAAA,EAAAA,IAAA,OAAKp6B,MAAO,CACVkJ,OAAQ,QACRsR,gBAAiB,gBACjBF,MAAO,QACPmgB,OAAQ,cAEVL,EAAAA,EAAAA,IAACd,EAAAA,EAAe,CAACgB,QAAQ,sBAEzBF,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACx7B,GAAG,wBAAwBs7B,QAAQ,SACzCF,EAAAA,EAAAA,IAAA,UAAI,cAEJA,EAAAA,EAAAA,IAAA,OAAKp6B,MAAO,CACVkJ,OAAQ,QACRsR,gBAAiB,gBACjBF,MAAO,QACPmgB,OAAQ,cAEVL,EAAAA,EAAAA,IAACjB,EAAAA,EAAc,CAACmB,QAAQ,qBAExBF,EAAAA,EAAAA,IAACI,EAAAA,EAAI,CAACx7B,GAAG,wBAAwBs7B,QAAQ,SACzCF,EAAAA,EAAAA,IAAA,UAAI,cAEJA,EAAAA,EAAAA,IAAA,OAAKp6B,MAAO,CACVkJ,OAAQ,QACRsR,gBAAiB,gBACjBF,MAAO,QACPmgB,OAAQ,cAEVL,EAAAA,EAAAA,IAACf,EAAAA,EAAc,CAACiB,QAAQ,oBAG5B,CAEAJ,EAAWS,gBAAiB,C,0DCnI5B,SAASC,EAAgBC,EAAKpV,EAAKtuB,GAYjC,OAXIsuB,KAAOoV,EACThpB,OAAOipB,eAAeD,EAAKpV,EAAK,CAC9BtuB,MAAOA,EACP4jC,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZJ,EAAIpV,GAAOtuB,EAGN0jC,CACT,CAoBA,SAASK,EAAQC,EAAQC,GACvB,IAAI1V,EAAO7T,OAAO6T,KAAKyV,GAEvB,GAAItpB,OAAOwpB,sBAAuB,CAChC,IAAIC,EAAUzpB,OAAOwpB,sBAAsBF,GACvCC,IAAgBE,EAAUA,EAAQt1B,QAAO,SAAUu1B,GACrD,OAAO1pB,OAAO2pB,yBAAyBL,EAAQI,GAAKR,UACtD,KACArV,EAAKntB,KAAKkjC,MAAM/V,EAAM4V,EACxB,CAEA,OAAO5V,CACT,CAEA,SAASgW,EAAejoB,GACtB,IAAK,IAAItV,EAAI,EAAGA,EAAIhI,UAAUC,OAAQ+H,IAAK,CACzC,IAAIw9B,EAAyB,MAAhBxlC,UAAUgI,GAAahI,UAAUgI,GAAK,CAAC,EAEhDA,EAAI,EACN+8B,EAAQrpB,OAAO8pB,IAAS,GAAM9kC,SAAQ,SAAU4uB,GAC9CmV,EAAgBnnB,EAAQgS,EAAKkW,EAAOlW,GACtC,IACS5T,OAAO+pB,0BAChB/pB,OAAOgqB,iBAAiBpoB,EAAQ5B,OAAO+pB,0BAA0BD,IAEjET,EAAQrpB,OAAO8pB,IAAS9kC,SAAQ,SAAU4uB,GACxC5T,OAAOipB,eAAernB,EAAQgS,EAAK5T,OAAO2pB,yBAAyBG,EAAQlW,GAC7E,GAEJ,CAEA,OAAOhS,CACT,CAiBA,SAASqoB,EAAyBH,EAAQI,GACxC,GAAc,MAAVJ,EAAgB,MAAO,CAAC,EAE5B,IAEIlW,EAAKtnB,EAFLsV,EAlBN,SAAuCkoB,EAAQI,GAC7C,GAAc,MAAVJ,EAAgB,MAAO,CAAC,EAC5B,IAEIlW,EAAKtnB,EAFLsV,EAAS,CAAC,EACVuoB,EAAanqB,OAAO6T,KAAKiW,GAG7B,IAAKx9B,EAAI,EAAGA,EAAI69B,EAAW5lC,OAAQ+H,IACjCsnB,EAAMuW,EAAW79B,GACb49B,EAAStjC,QAAQgtB,IAAQ,IAC7BhS,EAAOgS,GAAOkW,EAAOlW,IAGvB,OAAOhS,CACT,CAKewoB,CAA8BN,EAAQI,GAInD,GAAIlqB,OAAOwpB,sBAAuB,CAChC,IAAIa,EAAmBrqB,OAAOwpB,sBAAsBM,GAEpD,IAAKx9B,EAAI,EAAGA,EAAI+9B,EAAiB9lC,OAAQ+H,IACvCsnB,EAAMyW,EAAiB/9B,GACnB49B,EAAStjC,QAAQgtB,IAAQ,GACxB5T,OAAOjc,UAAUumC,qBAAqBx/B,KAAKg/B,EAAQlW,KACxDhS,EAAOgS,GAAOkW,EAAOlW,GAEzB,CAEA,OAAOhS,CACT,CAEA,IAII2oB,EAA0B,gBAAoB,CAAC,GAS/CC,EAAmB,SAA0BtR,GAC/C,IAAIuR,EAAoB,aAAiBF,GACrCG,EAAgBD,EAMpB,OAJIvR,IACFwR,EAjBoB,mBAiBOxR,EAAcA,EAAWuR,GAAqBZ,EAAeA,EAAe,CAAC,EAAGY,GAAoBvR,IAG1HwR,CACT,EACIC,EAAc,SAAqBjI,GACrC,IAAIgI,EAAgBF,EAAiB9H,EAAMxJ,YAC3C,OAAoB,gBAAoBqR,EAAWzG,SAAU,CAC3Dx+B,MAAOolC,GACNhI,EAAMl+B,SACX,EAEIomC,EAAiB,UACjBC,EAAW,CACbC,WAAY,OACZC,QAAS,SAAiBzC,GACxB,IAAI9jC,EAAW8jC,EAAK9jC,SACpB,OAAoB,gBAAoB,WAAgB,CAAC,EAAGA,EAC9D,GAEEwmC,EAAgC,cAAiB,SAAUtI,EAAOC,GACpE,IAAIsI,EAAiBvI,EAAMxJ,WACvBuP,EAAU/F,EAAM+F,QAChByC,EAAexI,EAAMwI,aACrBxC,EAAahG,EAAMgG,WACnByC,EAAMlB,EAAyBvH,EAAO,CAAC,aAAc,UAAW,eAAgB,eAEhFxJ,EAAasR,EAAiBS,GAC9B5jC,EAAOohC,EACPpP,EAAYH,EAAW,GAAGkS,OAAO1C,EAAY,KAAK0C,OAAO/jC,KAAU6xB,EAAW7xB,IAASwjC,EAASxjC,IAAS6jC,EAE7G,OAAID,EACkB,gBAAoB5R,EAAWwQ,EAAeA,EAAe,CAC/ElH,IAAKA,GACJwI,GAAM,CAAC,EAAG,CACXjS,WAAY+R,KAII,gBAAoB5R,EAAWwQ,EAAe,CAChElH,IAAKA,GACJwI,GACL,IAEA,SAASx2B,EAAetN,EAAMq7B,GAC5B,IAAIn6B,EAAOjE,UACPmkC,EAAU/F,GAASA,EAAM+F,QAE7B,GAAoB,iBAATphC,GAAqBohC,EAAS,CACvC,IAAI4C,EAAa9iC,EAAKhE,OAClB+mC,EAAwB,IAAI7mC,MAAM4mC,GACtCC,EAAsB,GAAKN,EAC3B,IAAIO,EAAW,CAAC,EAEhB,IAAK,IAAI3X,KAAO8O,EACV8I,eAAe1gC,KAAK43B,EAAO9O,KAC7B2X,EAAS3X,GAAO8O,EAAM9O,IAI1B2X,EAASL,aAAe7jC,EACxBkkC,EAASX,GAAkC,iBAATvjC,EAAoBA,EAAOohC,EAC7D6C,EAAsB,GAAKC,EAE3B,IAAK,IAAIj/B,EAAI,EAAGA,EAAI++B,EAAY/+B,IAC9Bg/B,EAAsBh/B,GAAK/D,EAAK+D,GAGlC,OAAO,gBAAoBs9B,MAAM,KAAM0B,EACzC,CAEA,OAAO,gBAAoB1B,MAAM,KAAMrhC,EACzC,CA7BAyiC,EAAiB7H,YAAc,kB","sources":["webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./sandboxes/simple-dockview/src/app.tsx","webpack://dockview-docs/./src/components/simpleGridview.tsx","webpack://dockview-docs/./src/components/simplePaneview.tsx","webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./versioned_docs/version-1.8.2/index.mdx","webpack://dockview-docs/../../node_modules/@mdx-js/react/dist/esm.js"],"sourcesContent":["class TransferObject {\n    constructor() {\n        //\n    }\n}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    public static from(...args: IDisposable[]): CompositeDisposable {\n        return new CompositeDisposable(...args);\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\nexport enum LayoutPriority {\n    Low = 'low',\n    High = 'high',\n    Normal = 'normal',\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private contentSize = 0;\n    private _proportions: number[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): number[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        this.relayout([index]);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n\n                item.size = clamp(\n                    Math.round(this.proportions[i] * size),\n                    item.minimumSize,\n                    item.maximumSize\n                );\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this._proportions = this.viewItems.map(\n                (i) => i.size / this.contentSize\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this.contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any | undefined;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n            this._onDidChange.fire({});\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(...this.children.map((c) => c.minimumOrthogonalSize));\n    }\n\n    get maximumSize(): number {\n        return Math.min(...this.children.map((c) => c.maximumOrthogonalSize));\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n    setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = Event.any(\n            ...this.children.map((c) => c.onDidChange)\n        )((e) => {\n            /**\n             * indicate a change has occured to allows any re-rendering but don't bubble\n             * event because that was specific to this branch\n             */\n            this._onDidChange.fire({ size: e.orthogonalSize });\n        });\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    private _root: BranchNode | undefined;\n    public readonly element: HTMLElement;\n    private disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get length(): number {\n        return this.component.length;\n    }\n\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    addPanel<T extends object = Parameters>(options: AddSplitviewComponentOptions<T>): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    addPanel<T extends object = Parameters>(options: AddPaneviewComponentOptions<T>): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    addPanel<T extends object = Parameters>(options: AddComponentOptions<T>): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    get id(): string {\n        return this.component.id;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    get size(): number {\n        return this.component.size;\n    }\n\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    addPanel<T extends object = Parameters>(options: AddPanelOptions<T>): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.target = e.target;\n                    this.callbacks.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n                    if (this.callbacks.onDragOver) {\n                        this.callbacks.onDragOver(e);\n                    }\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                if (this.target === e.target) {\n                    this.target = null;\n\n                    this.callbacks.onDragLeave(e);\n                }\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.target = null;\n                this.callbacks.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.callbacks.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.addDisposables(\n            this._onDrop,\n            new DragAndDropObserver(this.element, {\n                onDragEnter: () => undefined,\n                onDragOver: (e) => {\n                    if (this._acceptedTargetZonesSet.size === 0) {\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    const width = this.element.clientWidth;\n                    const height = this.element.clientHeight;\n\n                    if (width === 0 || height === 0) {\n                        return; // avoid div!0\n                    }\n\n                    const rect = (\n                        e.currentTarget as HTMLElement\n                    ).getBoundingClientRect();\n                    const x = e.clientX - rect.left;\n                    const y = e.clientY - rect.top;\n\n                    const quadrant = this.calculateQuadrant(\n                        this._acceptedTargetZonesSet,\n                        x,\n                        y,\n                        width,\n                        height\n                    );\n\n                    /**\n                     * If the event has already been used by another DropTarget instance\n                     * then don't show a second drop target, only one target should be\n                     * active at any one time\n                     */\n                    if (this.isAlreadyUsed(e) || quadrant === null) {\n                        // no drop target should be displayed\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    if (typeof this.options.canDisplayOverlay === 'boolean') {\n                        if (!this.options.canDisplayOverlay) {\n                            this.removeDropTarget();\n                            return;\n                        }\n                    } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    this.markAsUsed(e);\n\n                    if (!this.targetElement) {\n                        this.targetElement = document.createElement('div');\n                        this.targetElement.className = 'drop-target-dropzone';\n                        this.overlayElement = document.createElement('div');\n                        this.overlayElement.className = 'drop-target-selection';\n                        this._state = 'center';\n                        this.targetElement.appendChild(this.overlayElement);\n\n                        this.element.classList.add('drop-target');\n                        this.element.append(this.targetElement);\n                    }\n\n                    this.toggleClasses(quadrant, width, height);\n\n                    this.setState(quadrant);\n                },\n                onDragLeave: () => {\n                    this.removeDropTarget();\n                },\n                onDragEnd: () => {\n                    this.removeDropTarget();\n                },\n                onDrop: (e) => {\n                    e.preventDefault();\n\n                    const state = this._state;\n\n                    this.removeDropTarget();\n\n                    if (state) {\n                        // only stop the propagation of the event if we are dealing with it\n                        // which is only when the target has state\n                        e.stopPropagation();\n                        this._onDrop.fire({ position: state, nativeEvent: e });\n                    }\n                },\n            })\n        );\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nexport interface IContentContainer extends IDisposable {\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        // for hosted containers\n        // 1) register a drop target on the host\n        // 2) register window dragStart events to disable pointer events\n        // 3) register dragEnd events\n        // 4) register mouseMove events (if no buttons are present we take this as a dragEnd event)\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n        if (this.panel) {\n            if (this.panel.view?.content) {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n        this.panel = panel;\n\n        const disposable = new CompositeDisposable();\n\n        if (this.panel.view) {\n            const _onDidFocus = this.panel.view.content.onDidFocus;\n            const _onDidBlur = this.panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(this._element);\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this._element.appendChild(this.panel.view.content.element);\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel?.view?.content?.element) {\n            this._element.removeChild(this.panel.view.content.element);\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    params?: { [key: string]: any };\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<void>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(dataTransfer?: DataTransfer | null): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event.dataTransfer);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    /**\n                     * Although this is not used by dockview many third party dnd libraries will check\n                     * dataTransfer.types to determine valid drag events.\n                     *\n                     * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                     * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                     * dnd logic. You can see the code at\n                     * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                     */\n                    event.dataTransfer.setData(\n                        'text/plain',\n                        '__dockview_internal_drag_event__'\n                    );\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\n\nexport interface ITab extends IDisposable {\n    readonly panelId: string;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content?: ITabRenderer;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panelId: string,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            new (class Handler extends DragHandler {\n                private readonly panelTransfer =\n                    LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n                getData(): IDisposable {\n                    this.panelTransfer.setData(\n                        [new PanelTransfer(accessor.id, group.id, panelId)],\n                        PanelTransfer.prototype\n                    );\n\n                    return {\n                        dispose: () => {\n                            this.panelTransfer.clearData(\n                                PanelTransfer.prototype\n                            );\n                        },\n                    };\n                }\n            })(this._element)\n        );\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            })\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panelId !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessorId: string,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.isFloating && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dataTransfer: DataTransfer | null): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessorId, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor.id, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    hidden: boolean;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panelId);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panelId === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(this._onDrop);\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        !this.group.api.isFloating\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panelId === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panelId;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panelId === panel.id)) {\n            return;\n        }\n        const tabToAdd = new Tab(panel.id, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tabToAdd.setContent(panel.view.tab);\n\n        const disposable = CompositeDisposable.from(\n            tabToAdd.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.isFloating && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tabToAdd.panelId);\n\n                    const { top, left } =\n                        tabToAdd.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tabToAdd.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tabToAdd),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tabToAdd, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Droptarget, Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    ITabsContainer,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _isFloating = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get isFloating(): boolean {\n        return this._isFloating;\n    }\n\n    set isFloating(value: boolean) {\n        this._isFloating = value;\n\n        this.dropTarget.setTargetZones(\n            value ? ['center'] : ['top', 'bottom', 'left', 'right', 'center']\n        );\n\n        toggleClass(this.container, 'dv-groupview-floating', value);\n\n        this.groupPanel.api._onDidFloatingStateChange.fire({\n            isFloating: this.isFloating,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer();\n\n        this.dropTarget = new Droptarget(this.contentContainer.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.locked === 'no-drop-target' ||\n                    (this.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (!data && event.shiftKey && !this.isFloating) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this._panels.length === 1 && data.groupId === this.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked || false;\n\n        this.addDisposables(\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.dropTarget.dispose();\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(parentElement?: HTMLElement) {\n        super();\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    private readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize || width !== this.width || height !== this.height;\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any | undefined;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly isFloating: boolean;\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly isFloating: boolean;\n}\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidFloatingStateChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidFloatingStateChange.event;\n\n    get isFloating() {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n        return this._group.model.isFloating;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidFloatingStateChange);\n    }\n\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            undefined,\n            options.position ?? 'center'\n        );\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 100,\n                minimumWidth: 100,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\n/*\n * omit visibility modifiers since the visibility of a single group doesn't make sense\n * because it belongs to a groupview\n */\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    close(): void;\n    setTitle(title: string): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return !!this.group?.isActive;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: IDockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n\n    private _title: string | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        public readonly id: string,\n        accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel\n    ) {\n        super();\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params || {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: { new (id: string, component: string): T };\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components || {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly layout: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent || 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.layout,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.layout,\n            new DockviewApi(this.layout),\n            group,\n            view\n        );\n\n        panel.init({\n            title: title || panelId,\n            params: params || {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    constructor(\n        private readonly options: {\n            height: number;\n            width: number;\n            left: number;\n            top: number;\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth: number;\n            minimumInViewportHeight: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(\n        bounds: Partial<{\n            height: number;\n            width: number;\n            top: number;\n            left: number;\n        }> = {}\n    ): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(\n            0,\n            overlayRect.width - this.options.minimumInViewportWidth\n        );\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset = Math.max(\n            0,\n            overlayRect.height - this.options.minimumInViewportHeight\n        );\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): { top: number; left: number; height: number; width: number } {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        overlayRect.width - this.options.minimumInViewportWidth\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        overlayRect.height -\n                            this.options.minimumInViewportHeight\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const minimumInViewportHeight =\n                            this.options.minimumInViewportHeight;\n                        const minimumInViewportWidth =\n                            this.options.minimumInViewportWidth;\n\n                        function moveTop(): void {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? containerRect.height -\n                                          minimumInViewportHeight\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        }\n\n                        function moveBottom(): void {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0\n                                    ? -top + minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        }\n\n                        function moveLeft(): void {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? containerRect.width -\n                                          minimumInViewportWidth\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        }\n\n                        function moveRight(): void {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0\n                                    ? -left + minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        }\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport {\n    DockviewFloatingGroupPanel,\n    IDockviewFloatingGroupPanel,\n} from './dockviewFloatingGroupPanel';\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: { height: number; width: number; left: number; top: number };\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'disableFloatingGroups'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly floatingGroups: IDockviewFloatingGroupPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    readonly floatingGroups: DockviewFloatingGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation || Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n        });\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n\n        this.addDisposables(\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId || undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.isFloating = true;\n\n        const overlayLeft =\n            typeof coord?.x === 'number' ? Math.max(coord.x, 0) : 100;\n        const overlayTop =\n            typeof coord?.y === 'number' ? Math.max(coord.y, 0) : 100;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth: 100,\n            minimumInViewportHeight: 100,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.isFloating = false;\n                    remove(this.floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this.floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this.floatingGroups) {\n            for (const floating of this.floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this.floatingGroups.map(\n            (floatingGroup) => {\n                return {\n                    data: floatingGroup.group.toJSON() as GroupPanelViewState,\n                    position: floatingGroup.overlay.toJSON(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        const createGroupFromSerializedState = (data: GroupPanelViewState) => {\n            const { id, locked, hideHeader, views, activeView } = data;\n\n            const group = this.createGroup({\n                id,\n                locked: !!locked,\n                hideHeader: !!hideHeader,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            for (const child of views) {\n                const panel = this._deserializer.fromJSON(panels[child], group);\n\n                const isActive =\n                    typeof activeView === 'string' && activeView === panel.id;\n\n                group.model.openPanel(panel, {\n                    skipSetPanelActive: !isActive,\n                    skipSetGroupActive: true,\n                });\n            }\n\n            if (!group.activePanel && group.panels.length > 0) {\n                group.model.openPanel(group.panels[group.panels.length - 1], {\n                    skipSetGroupActive: true,\n                });\n            }\n\n            return group;\n        };\n\n        this.gridview.deserialize(grid, {\n            fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                return createGroupFromSerializedState(node.data);\n            },\n        });\n\n        this.layout(width, height, true);\n\n        const serializedFloatingGroups = data.floatingGroups ?? [];\n\n        for (const serializedFloatingGroup of serializedFloatingGroups) {\n            const { data, position } = serializedFloatingGroup;\n            const group = createGroupFromSerializedState(data);\n\n            this.addFloatingGroup(\n                group,\n                {\n                    x: position.left,\n                    y: position.top,\n                    height: position.height,\n                    width: position.width,\n                },\n                { skipRemoveGroup: true, inDragMode: false }\n            );\n        }\n\n        for (const floatingGroup of this.floatingGroups) {\n            floatingGroup.overlay.setBounds();\n        }\n\n        if (typeof activeGroup === 'string') {\n            const panel = this.getPanel(activeGroup);\n            if (panel) {\n                this.doSetGroupActive(panel);\n            }\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n            } else if (referenceGroup.api.isFloating || target === 'center') {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => !x.api.isFloating).length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        this.doRemoveGroup(group, options);\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        const floatingGroup = this.floatingGroups.find(\n            (_) => _.group === group\n        );\n\n        if (floatingGroup) {\n            if (!options?.skipDispose) {\n                floatingGroup.group.dispose();\n                this._groups.delete(group.id);\n            }\n            floatingGroup.dispose();\n\n            return floatingGroup.group;\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ||\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                const isFloating = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (!isFloating) {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ||\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                const floatingGroup = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (floatingGroup) {\n                    floatingGroup.dispose();\n                } else {\n                    this.gridview.removeView(\n                        getGridLocation(sourceGroup.element)\n                    );\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const isGroupAlreadyFocused = this._activeGroup === group;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (!isGroupAlreadyFocused && this._activeGroup?.activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent || this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view\n        );\n        panel.init({\n            title: options.title || options.id,\n            params: options?.params || {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n\n    public dispose(): void {\n        this._onDidActivePanelChange.dispose();\n        this._onDidAddPanel.dispose();\n        this._onDidRemovePanel.dispose();\n        this._onDidLayoutFromJSON.dispose();\n\n        super.dispose();\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { FrameworkFactory } from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: {\n            new (id: string, component: string): ITabRenderer;\n        };\n    };\n    components?: {\n        [componentName: string]: {\n            new (id: string, component: string): IContentRenderer;\n        };\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.gridview.deserialize(grid, {\n            fromJSON: (node) => {\n                const { data } = node;\n                const view = createComponent(\n                    data.id,\n                    data.component,\n                    this.options.components || {},\n                    this.options.frameworkComponents || {},\n                    this.options.frameworkComponentFactory\n                        ? {\n                              createComponent:\n                                  this.options.frameworkComponentFactory\n                                      .createComponent,\n                          }\n                        : undefined\n                );\n\n                queue.push(() =>\n                    view.init({\n                        params: data.params,\n                        minimumWidth: data.minimumWidth,\n                        maximumWidth: data.maximumWidth,\n                        minimumHeight: data.minimumHeight,\n                        maximumHeight: data.maximumHeight,\n                        priority: data.priority,\n                        snap: !!data.snap,\n                        accessor: this,\n                        isVisible: node.visible,\n                    })\n                );\n\n                this._onDidAddGroup.fire(view);\n\n                this.registerPanel(view);\n\n                return view;\n            },\n        });\n\n        this.layout(width, height, true);\n\n        queue.forEach((f) => f());\n\n        if (typeof activePanel === 'string') {\n            const panel = this.getPanel(activePanel);\n            if (panel) {\n                this.doSetGroupActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location || [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params || {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params || {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params || {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents || {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params || {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents || {},\n                            this.options.headerframeworkComponents || {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params || {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: any | React.ReactElement\n): element is React.ReactElement {\n    return element?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params || {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents || {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents || {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & { hideClose?: boolean };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.stopPropagation();\n            api.close();\n        },\n        [api]\n    );\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div className=\"dv-react-tab-close-btn\" onClick={onClose}>\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params || {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                orientation: props.orientation || Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params || {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation || Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default App;\n","import {\n    IGridviewPanelProps,\n    Orientation,\n    GridviewReact,\n    GridviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleGridview = () => {\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n    };\n\n    return (\n        <GridviewReact\n            components={components}\n            onReady={onReady}\n            proportionalLayout={false}\n            orientation={Orientation.VERTICAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const SimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tsidebar_position: 0,\n\tdescription: 'A zero dependency layout manager supporting ReactJS and Vanilla TypeScript'\n};\nexport const contentTitle = 'Introduction';\nexport const metadata = {\n  \"unversionedId\": \"index\",\n  \"id\": \"version-1.8.2/index\",\n  \"title\": \"Introduction\",\n  \"description\": \"A zero dependency layout manager supporting ReactJS and Vanilla TypeScript\",\n  \"source\": \"@site/versioned_docs/version-1.8.2/index.mdx\",\n  \"sourceDirName\": \".\",\n  \"slug\": \"/\",\n  \"permalink\": \"/docs/\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.8.2/index.mdx\",\n  \"tags\": [],\n  \"version\": \"1.8.2\",\n  \"sidebarPosition\": 0,\n  \"frontMatter\": {\n    \"sidebar_position\": 0,\n    \"description\": \"A zero dependency layout manager supporting ReactJS and Vanilla TypeScript\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"next\": {\n    \"title\": \"Theme\",\n    \"permalink\": \"/docs/theme\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleSplitview } from '@site/src/components/simpleSplitview';\nimport { SimpleGridview } from '@site/src/components/simpleGridview';\nimport { SimplePaneview } from '@site/src/components/simplePaneview';\nimport SimpleDockview from '@site/sandboxes/simple-dockview/src/app';\nimport Link from '@docusaurus/Link';\nexport const toc = [{\n  value: 'Quick start',\n  id: 'quick-start',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p><strong parentName=\"p\">{`dockview`}</strong>{` is a zero dependency layout manager that supports tab, grids and splitviews.`}</p>\n    <h2 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick start`}</h2>\n    <p><inlineCode parentName=\"p\">{`dockview`}</inlineCode>{` has a peer dependency on `}<inlineCode parentName=\"p\">{`react >= 16.8.0`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`react-dom >= 16.8.0`}</inlineCode>{`. To install `}<inlineCode parentName=\"p\">{`dockview`}</inlineCode>{` you can run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm install dockview\n`}</code></pre>\n    <p>{`You must also import the dockview stylesheet found under `}<a parentName=\"p\" {...{\n        \"href\": \"https://unpkg.com/browse/dockview@latest/dist/styles/dockview.css\"\n      }}><inlineCode parentName=\"a\">{`dockview/dict/styles/dockview.css`}</inlineCode></a>{`,\ndepending on your solution this might be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@import './node_modules/dockview/dist/styles/dockview.css';\n`}</code></pre>\n    <p>{`There are 4 components you may want to use:`}</p>\n    <Link to=\"./components/dockview\" mdxType=\"Link\">\n    <h2>Dockview</h2>\n    </Link>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleDockview mdxType=\"SimpleDockview\" />\n    </div>\n    <Link to=\"./components/splitview\" mdxType=\"Link\">\n    <h2>Splitview</h2>\n    </Link>\n    <div style={{\n      height: '100px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleSplitview mdxType=\"SimpleSplitview\" />\n    </div>\n    <Link to=\"./components/gridview\" mdxType=\"Link\">\n    <h2>Gridview</h2>\n    </Link>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleGridview mdxType=\"SimpleGridview\" />\n    </div>\n    <Link to=\"./components/paneview\" mdxType=\"Link\">\n    <h2>Paneview</h2>\n    </Link>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimplePaneview mdxType=\"SimplePaneview\" />\n    </div>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n","import React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/React.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/React.createElement(React.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/React.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return React.createElement.apply(null, createElementArgArray);\n  }\n\n  return React.createElement.apply(null, args);\n}\n\nexport { MDXContext, MDXProvider, createElement as mdx, useMDXComponents, withMDXComponents };\n"],"names":["TransferObject","constructor","PanelTransfer","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","static","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","getInstance","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","children","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","create","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","CompositeDisposable","isDisposed","_isDisposed","args","_len2","_key2","_disposables","addDisposables","_len3","_key3","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","from","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","contentSize","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","array","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","lowPriorityIndex","emptyDelta","sum","offset","left","top","VERTICAL","width","height","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","getNode","_getViews","nodeCachedVisibleSize","path","n","l","parent","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","activePanel","activeGroup","getGroupPanel","addGroup","moveToNext","moveToPrevious","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","preventDefault","onDragOver","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","getBoundingClientRect","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","transform","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","fallback","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","ContentContainer","_element","tabIndex","show","display","hide","openPanel","content","focusTracker","_width","_height","closePanel","DockviewDropTargets","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","dataTransfer","effectAllowed","Tab","accessor","_onChanged","onChanged","_onDropped","draggable","defaultPrevented","droptarget","locked","model","setActive","isActive","setContent","part","GroupDragHandler","accessorId","shiftKey","isFloating","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","Panel","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","tab","selectedIndex","findIndex","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","tabToAdd","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_isFloating","dropTarget","groupPanel","_onDidFloatingStateChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","entry","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onDidVisibilityChange","onDidVisibilityChange","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","DockviewGroupPanelApiImpl","_group","onDidFloatingStateChange","moveTo","moveGroupOrPanel","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","setTitle","close","DockviewPanel","_title","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","minimumInViewportWidth","yOffset","minimumInViewportHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onDidLayoutFromJSON","floatingGroups","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","overlayLeft","overlayTop","querySelector","floatingGroupPanel","t","createGroupAtLocation","hasOrientationChanged","floating","includePanel","collection","floats","floatingGroup","grid","isArray","createGroupFromSerializedState","serializedFloatingGroups","serializedFloatingGroup","hasActiveGroup","hasActivePanel","entries","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","isGroupAlreadyFocused","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","__rest","onClose","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","theme","SimpleGridview","myHeaderComponent","SimplePaneview","SimpleSplitview","proportional","frontMatter","sidebar_position","description","contentTitle","metadata","assets","toc","level","layoutProps","MDXLayout","MDXContent","_ref","mdx","_extends","mdxType","parentName","Link","margin","SimpleDockview","isMDXComponent","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","source","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","MDXContext","useMDXComponents","contextComponents","allComponents","MDXProvider","TYPE_PROP_NAME","DEFAULTS","inlineCode","wrapper","MDXCreateElement","propComponents","originalType","etc","concat","argsLength","createElementArgArray","newProps","hasOwnProperty"],"sourceRoot":""}