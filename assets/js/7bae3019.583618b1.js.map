{"version":3,"file":"assets/js/7bae3019.583618b1.js","mappings":"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","sources":["webpack://dockview-docs/../../node_modules/@docusaurus/core/lib/client/exports/BrowserOnly.js","webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/popoutWindow.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPopoutGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/constants.ts","webpack://dockview-docs/../dockview-core/src/overlayRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./sandboxes/editor-gridview/src/app.tsx","webpack://dockview-docs/./sandboxes/simple-gridview/src/app.tsx","webpack://dockview-docs/./src/components/gridview/events.tsx","webpack://dockview-docs/./src/components/ui/console/console.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./src/components/ui/reference/docRef.tsx","webpack://dockview-docs/./versioned_docs/version-1.9.0/components/gridview.mdx"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { isValidElement } from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n// Similar comp to the one described here:\n// https://www.joshwcomeau.com/react/the-perils-of-rehydration/#abstractions\nexport default function BrowserOnly({ children, fallback, }) {\n    const isBrowser = useIsBrowser();\n    if (isBrowser) {\n        if (typeof children !== 'function' &&\n            process.env.NODE_ENV === 'development') {\n            throw new Error(`Docusaurus error: The children of <BrowserOnly> must be a \"render function\", e.g. <BrowserOnly>{() => <span>{window.location.href}</span>}</BrowserOnly>.\nCurrent type: ${isValidElement(children) ? 'React element' : typeof children}`);\n        }\n        return <>{children?.()}</>;\n    }\n    return fallback ?? null;\n}\n","class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n\n    export function from(func: () => void): IDisposable {\n        return {\n            dispose: () => {\n                func();\n            },\n        };\n    }\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function addStyles(document: Document, styleSheetList: StyleSheetList) {\n    const styleSheets = Array.from(styleSheetList);\n\n    for (const styleSheet of styleSheets) {\n        if (styleSheet.href) {\n            const link = document.createElement('link');\n            link.href = styleSheet.href;\n            link.type = styleSheet.type;\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n        }\n\n        let cssTexts: string[] = [];\n\n        try {\n            if (styleSheet.cssRules) {\n                cssTexts = Array.from(styleSheet.cssRules).map(\n                    (rule) => rule.cssText\n                );\n            }\n        } catch (err) {\n            // security errors (lack of permissions), ignore\n        }\n\n        for (const rule of cssTexts) {\n            const style = document.createElement('style');\n            style.appendChild(document.createTextNode(rule));\n            document.head.appendChild(style);\n        }\n    }\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n\n/**\n * Check whether an element is in the DOM (including the Shadow DOM)\n * @see https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\n */\nexport function isInDocument(element: Element): boolean {\n    let currentElement: Element | ParentNode = element;\n\n    while (currentElement?.parentNode) {\n        if (currentElement.parentNode === document) {\n            return true;\n        } else if (currentElement.parentNode instanceof DocumentFragment) {\n            // handle shadow DOMs\n            currentElement = (currentElement.parentNode as ShadowRoot).host;\n        } else {\n            currentElement = currentElement.parentNode;\n        }\n    }\n\n    return false;\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private _contentSize = 0;\n    private _proportions: (number | undefined)[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get contentSize(): number {\n        return this._contentSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): (number | undefined)[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            let total = 0;\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                } else {\n                    size -= item.size;\n                }\n            }\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(\n                        Math.round((proportion * size) / total),\n                        item.minimumSize,\n                        item.maximumSize\n                    );\n                }\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this._proportions = this.viewItems.map((i) =>\n                i.visible ? i.size / this._contentSize : undefined\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this._contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidVisibilityChange = new Emitter<boolean>();\n    readonly onDidVisibilityChange: Event<boolean> =\n        this._onDidVisibilityChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(\n                  ...this.children.map((c, index) =>\n                      this.splitview.isViewVisible(index)\n                          ? c.minimumOrthogonalSize\n                          : 0\n                  )\n              );\n    }\n\n    get maximumSize(): number {\n        return Math.min(\n            ...this.children.map((c, index) =>\n                this.splitview.isViewVisible(index)\n                    ? c.maximumOrthogonalSize\n                    : Number.POSITIVE_INFINITY\n            )\n        );\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this._onDidVisibilityChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n     setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        const wereAllChildrenHidden = this.splitview.contentSize === 0;\n        this.splitview.setViewVisible(index, visible);\n        const areAllChildrenHidden = this.splitview.contentSize === 0;\n\n        // If all children are hidden then the parent should hide the entire splitview\n        // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n        if (\n            (visible && wereAllChildrenHidden) ||\n            (!visible && areAllChildrenHidden)\n        ) {\n            this._onDidVisibilityChange.fire(visible);\n        }\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = new CompositeDisposable(\n            Event.any(...this.children.map((c) => c.onDidChange))((e) => {\n                /**\n                 * indicate a change has occured to allows any re-rendering but don't bubble\n                 * event because that was specific to this branch\n                 */\n                this._onDidChange.fire({ size: e.orthogonalSize });\n            }),\n            ...this.children.map((c, i) => {\n                if (c instanceof BranchNode) {\n                    return c.onDidVisibilityChange((visible) => {\n                        this.setChildVisible(i, visible);\n                    });\n                }\n                return Disposable.NONE;\n            })\n        );\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    readonly element: HTMLElement;\n\n    private _root: BranchNode | undefined;\n    private _maximizedNode: LeafNode | undefined = undefined;\n    private readonly disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidMaxmizedNodeChange = new Emitter<void>();\n    readonly onDidMaxmizedNodeChange = this._onDidMaxmizedNodeChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    maximizedView(): IGridView | undefined {\n        return this._maximizedNode?.view;\n    }\n\n    hasMaximizedView(): boolean {\n        return this._maximizedNode !== undefined;\n    }\n\n    maximizeView(view: IGridView): void {\n        const location = getGridLocation(view.element);\n        const [_, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            return;\n        }\n\n        if (this._maximizedNode === node) {\n            return;\n        }\n\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        function hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n            for (let i = 0; i < parent.children.length; i++) {\n                const child = parent.children[i];\n                if (child instanceof LeafNode) {\n                    if (child !== exclude) {\n                        parent.setChildVisible(i, false);\n                    }\n                } else {\n                    hideAllViewsBut(child, exclude);\n                }\n            }\n        }\n\n        hideAllViewsBut(this.root, node);\n        this._maximizedNode = node;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    exitMaximizedView(): void {\n        if (!this._maximizedNode) {\n            return;\n        }\n\n        function showViewsInReverseOrder(parent: BranchNode): void {\n            for (let index = parent.children.length - 1; index >= 0; index--) {\n                const child = parent.children[index];\n                if (child instanceof LeafNode) {\n                    parent.setChildVisible(index, true);\n                } else {\n                    showViewsInReverseOrder(child);\n                }\n            }\n        }\n\n        showViewsInReverseOrder(this.root);\n\n        this._maximizedNode = undefined;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    public serialize(): SerializedGridview<any> {\n        if (this.hasMaximizedView()) {\n            /**\n             * do not persist maximized view state but we must first exit any maximized views\n             * before serialization to ensure the correct dimensions are persisted\n             */\n            this.exitMaximizedView();\n        }\n\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this._onDidMaxmizedNodeChange.dispose();\n        this.root.dispose();\n        this._maximizedNode = undefined;\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize<T>(\n        json: SerializedGridview<T>,\n        deserializer: IViewDeserializer\n    ): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this._maximizedNode = undefined;\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\nimport { Box } from '../types';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    maximizeGroup(panel: IDockviewPanel): void {\n        this.component.maximizeGroup(panel.group);\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.component.hasMaximizedGroup();\n    }\n\n    exitMaxmizedGroup(): void {\n        this.component.exitMaximizedGroup();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.component.onDidMaxmizedGroupChange;\n    }\n\n    /**\n     * Add a popout group in a new Window\n     */\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        this.component.addPopoutGroup(item, options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport type MeasuredValue = { value: number; type: 'pixels' | 'percentage' };\n\nexport type DroptargetOverlayModel = {\n    size?: MeasuredValue;\n    activationSize?: MeasuredValue;\n};\n\nconst DEFAULT_ACTIVATION_SIZE: MeasuredValue = {\n    value: 20,\n    type: 'percentage',\n};\n\nconst DEFAULT_SIZE: MeasuredValue = {\n    value: 50,\n    type: 'percentage',\n};\n\nconst SMALL_WIDTH_BOUNDARY = 100;\nconst SMALL_HEIGHT_BOUNDARY = 100;\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: DroptargetOverlayModel;\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this._state = quadrant;\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    setOverlayModel(model: DroptargetOverlayModel): void {\n        this.options.overlayModel = model;\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance of DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < SMALL_WIDTH_BOUNDARY;\n        const isSmallY = height < SMALL_HEIGHT_BOUNDARY;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 1;\n\n        const sizeOptions = this.options.overlayModel?.size ?? DEFAULT_SIZE;\n\n        if (sizeOptions.type === 'percentage') {\n            size = clamp(sizeOptions.value, 0, 100) / 100;\n        } else {\n            if (rightClass || leftClass) {\n                size = clamp(0, sizeOptions.value, width) / width;\n            }\n            if (topClass || bottomClass) {\n                size = clamp(0, sizeOptions.value, height) / height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-small-vertical',\n            isSmallY\n        );\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-small-horizontal',\n            isSmallX\n        );\n        toggleClass(this.overlayElement, 'dv-drop-target-left', isLeft);\n        toggleClass(this.overlayElement, 'dv-drop-target-right', isRight);\n        toggleClass(this.overlayElement, 'dv-drop-target-top', isTop);\n        toggleClass(this.overlayElement, 'dv-drop-target-bottom', isBottom);\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-center',\n            quadrant === 'center'\n        );\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const activationSizeOptions =\n            this.options.overlayModel?.activationSize ??\n            DEFAULT_ACTIVATION_SIZE;\n\n        const isPercentage = activationSizeOptions.type === 'percentage';\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                activationSizeOptions.value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            activationSizeOptions.value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    renderer?: DockviewPanelRenderer;\n    params?: { [key: string]: any };\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { DockviewDropTargets } from '../../types';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel, options: { asActive: boolean }): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (\n                    !data &&\n                    event.shiftKey &&\n                    this.group.location !== 'floating'\n                ) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(\n        panel: IDockviewPanel,\n        options: { asActive: boolean } = { asActive: true }\n    ): void {\n        const doRender =\n            options.asActive ||\n            (this.panel && this.group.isPanelActive(this.panel));\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.overlayRenderContainer.detatch(panel);\n                if (this.panel) {\n                    if (doRender) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container = this.accessor.overlayRenderContainer.attach({\n                    panel,\n                    referenceContainer: this,\n                });\n                break;\n        }\n\n        if (doRender) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        this.renderPanel(panel);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.accessor.options.defaultRenderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.location === 'floating' && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        this.group.api.location !== 'floating'\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.location === 'floating' && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport type DockviewGroupLocation = 'grid' | 'floating' | 'popout';\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    // private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private _location: DockviewGroupLocation = 'grid';\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get location(): DockviewGroupLocation {\n        return this._location;\n    }\n\n    set location(value: DockviewGroupLocation) {\n        this._location = value;\n\n        toggleClass(this.container, 'dv-groupview-floating', false);\n        toggleClass(this.container, 'dv-groupview-popout', false);\n\n        switch (value) {\n            case 'grid':\n                this.contentContainer.dropTarget.setTargetZones([\n                    'top',\n                    'bottom',\n                    'left',\n                    'right',\n                    'center',\n                ]);\n                break;\n            case 'floating':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n                this.contentContainer.dropTarget.setTargetZones(\n                    value\n                        ? ['center']\n                        : ['top', 'bottom', 'left', 'right', 'center']\n                );\n\n                toggleClass(this.container, 'dv-groupview-floating', true);\n\n                break;\n            case 'popout':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n\n                toggleClass(this.container, 'dv-groupview-popout', true);\n\n                break;\n        }\n\n        this.groupPanel.api._onDidLocationChange.fire({\n            location: this.location,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel, { asActive: false });\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { isInDocument, watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement?: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!this._element.offsetParent) {\n                    /**\n                     * offsetParent === null is equivalent to display: none being set on the element or one\n                     * of it's parents. In the display: none case the size will become (0, 0) which we do\n                     * not want to propagate.\n                     *\n                     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n                     *\n                     * You could use checkVisibility() but at the time of writing it's not supported across\n                     * all Browsers\n                     *\n                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility\n                     */\n                    return;\n                }\n\n                if (!isInDocument(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n    maximizeGroup(panel: T): void;\n    isMaximizedGroup(panel: T): boolean;\n    exitMaximizedGroup(): void;\n    hasMaximizedGroup(): boolean;\n    readonly onDidMaxmizedGroupChange: Event<void>;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    maximizeGroup(panel: T): void {\n        this.gridview.maximizeView(panel);\n    }\n\n    isMaximizedGroup(panel: T): boolean {\n        return this.gridview.maximizedView() === panel;\n    }\n\n    exitMaximizedGroup(): void {\n        this.gridview.exitMaximizedView();\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.gridview.hasMaximizedView();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.gridview.onDidMaxmizedNodeChange;\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position, positionToDirection } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly location: DockviewGroupLocation;\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly location: DockviewGroupLocation;\n}\n\n// TODO find a better way to initialize and avoid needing null checks\nconst NOT_INITIALIZED_MESSAGE = 'DockviewGroupPanelApiImpl not initialized';\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidLocationChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidLocationChange.event;\n\n    get location(): DockviewGroupLocation {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        return this._group.model.location;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidLocationChange);\n    }\n\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        const group =\n            options.group ??\n            this.accessor.addGroup({\n                direction: positionToDirection(options.position ?? 'right'),\n            });\n\n        this.accessor.moveGroupOrPanel(\n            group,\n            this._group.id,\n            undefined,\n            options.group ? options.position ?? 'center' : 'center'\n        );\n    }\n\n    maximize(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.location !== 'grid') {\n            // only grid groups can be maximized\n            return;\n        }\n\n        this.accessor.maximizeGroup(this._group);\n    }\n\n    isMaximized(): boolean {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        return this.accessor.isMaximizedGroup(this._group);\n    }\n\n    exitMaximized(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.isMaximized()) {\n            this.accessor.exitMaximizedGroup();\n        }\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nconst MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH = 100;\nconst MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT = 100;\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT,\n                minimumWidth: MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { DockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        // omit properties that do not make sense here\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return this.group.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n\n    maximize(): void {\n        this.group.api.maximize();\n    }\n\n    isMaximized(): boolean {\n        return this.group.api.isMaximized();\n    }\n\n    exitMaximized(): void {\n        this.group.api.exitMaximized();\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { Box } from '../types';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: Box & {\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(bounds: Partial<Box> = {}): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): Box {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import { addStyles } from './dom';\nimport { Emitter, addDisposableWindowListener } from './events';\nimport { CompositeDisposable, IDisposable } from './lifecycle';\nimport { Box } from './types';\n\nexport type PopoutWindowOptions = {\n    url: string;\n} & Box;\n\nexport class PopoutWindow extends CompositeDisposable {\n    private readonly _onDidClose = new Emitter<void>();\n    readonly onDidClose = this._onDidClose.event;\n\n    private _window: { value: Window; disposable: IDisposable } | null = null;\n\n    constructor(\n        private readonly id: string,\n        private readonly className: string,\n        private readonly options: PopoutWindowOptions\n    ) {\n        super();\n\n        this.addDisposables(this._onDidClose, {\n            dispose: () => {\n                this.close();\n            },\n        });\n    }\n\n    dimensions(): Box | null {\n        if (!this._window) {\n            return null;\n        }\n\n        const left = this._window.value.screenX;\n        const top = this._window.value.screenY;\n        const width = this._window.value.innerWidth;\n        const height = this._window.value.innerHeight;\n\n        return { top, left, width, height };\n    }\n\n    close(): void {\n        if (this._window) {\n            this._window.disposable.dispose();\n            this._window.value.close();\n            this._window = null;\n        }\n    }\n\n    open(content: HTMLElement): void {\n        if (this._window) {\n            throw new Error('instance of popout window is already open');\n        }\n\n        const url = `${this.options.url}`;\n\n        const features = Object.entries({\n            top: this.options.top,\n            left: this.options.left,\n            width: this.options.width,\n            height: this.options.height,\n        })\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n        const externalWindow = window.open(url, this.id, features);\n\n        if (!externalWindow) {\n            return;\n        }\n\n        const disposable = new CompositeDisposable();\n\n        this._window = { value: externalWindow, disposable };\n\n        const cleanUp = () => {\n            this._onDidClose.fire();\n            this._window = null;\n        };\n\n        // prevent any default content from loading\n        // externalWindow.document.body.replaceWith(document.createElement('div'));\n\n        disposable.addDisposables(\n            addDisposableWindowListener(window, 'beforeunload', () => {\n                cleanUp();\n                this.close();\n            })\n        );\n\n        externalWindow.addEventListener('load', () => {\n            const externalDocument = externalWindow.document;\n            externalDocument.title = document.title;\n\n            const div = document.createElement('div');\n            div.classList.add('dv-popout-window');\n            div.style.position = 'absolute';\n            div.style.width = '100%';\n            div.style.height = '100%';\n            div.style.top = '0px';\n            div.style.left = '0px';\n            div.classList.add(this.className);\n            div.appendChild(content);\n\n            externalDocument.body.replaceChildren(div);\n            externalDocument.body.classList.add(this.className);\n\n            addStyles(externalDocument, window.document.styleSheets);\n\n            externalWindow.addEventListener('beforeunload', () => {\n                // TODO: indicate external window is closing\n                cleanUp();\n            });\n        });\n    }\n}\n","import { CompositeDisposable } from '../lifecycle';\nimport { PopoutWindow } from '../popoutWindow';\nimport { Box } from '../types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\n\nexport class DockviewPopoutGroupPanel extends CompositeDisposable {\n    readonly window: PopoutWindow;\n\n    constructor(\n        readonly id: string,\n        readonly group: DockviewGroupPanel,\n        private readonly options: {\n            className: string;\n            popoutUrl: string;\n            box: Box;\n        }\n    ) {\n        super();\n\n        this.window = new PopoutWindow(id, options.className ?? '', {\n            url: this.options.popoutUrl,\n            left: this.options.box.left,\n            top: this.options.box.top,\n            width: this.options.box.width,\n            height: this.options.box.height,\n        });\n\n        group.model.location = 'popout';\n\n        this.addDisposables(\n            this.window,\n            {\n                dispose: () => {\n                    group.model.location = 'grid';\n                },\n            },\n            this.window.onDidClose(() => {\n                this.dispose();\n            })\n        );\n\n        this.window.open(group.element);\n    }\n}\n","export const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100 };\n","import { DragAndDropObserver } from './dnd/dnd';\nimport { Droptarget } from './dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from './dom';\nimport { CompositeDisposable, Disposable, IDisposable } from './lifecycle';\nimport { IDockviewPanel } from './dockview/dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class OverlayRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        {\n            panel: IDockviewPanel;\n            disposable: IDisposable;\n            destroy: IDisposable;\n            element: HTMLElement;\n        }\n    > = {};\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            Disposable.from(() => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                    value.destroy.dispose();\n                }\n            })\n        );\n    }\n\n    detatch(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            const { disposable, destroy } = this.map[panel.api.id];\n            disposable.dispose();\n            destroy.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    attach(options: {\n        panel: IDockviewPanel;\n        referenceContainer: IRenderable;\n    }): HTMLElement {\n        const { panel, referenceContainer } = options;\n\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                panel,\n                disposable: Disposable.NONE,\n                destroy: Disposable.NONE,\n\n                element,\n            };\n        }\n\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls, possible performance bottleneck?\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.location === 'floating'\n            );\n        };\n\n        const visibilityChanged = () => {\n            if (panel.api.isVisible) {\n                resize();\n            }\n\n            focusContainer.style.display = panel.api.isVisible ? '' : 'none';\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             *\n             * the dnd observer does not need to be conditional on whether the panel is visible since\n             * non-visible panels are 'display: none' and in such case the dnd observer will not fire.\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n\n            panel.api.onDidVisibilityChange((event) => {\n                /**\n                 * Control the visibility of the content, however even when not visible (display: none)\n                 * the content is still maintained within the DOM hence DOM specific attributes\n                 * such as scroll position are maintained when next made visible.\n                 */\n                visibilityChanged();\n            }),\n            panel.api.onDidDimensionsChange(() => {\n                if (!panel.api.isVisible) {\n                    return;\n                }\n\n                resize();\n            })\n        );\n\n        this.map[panel.api.id].destroy = Disposable.from(() => {\n            focusContainer.removeChild(panel.view.content.element);\n            this.element.removeChild(focusContainer);\n        });\n\n        queueMicrotask(() => {\n            if (this.isDisposed) {\n                return;\n            }\n\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            visibilityChanged();\n        });\n\n        // dispose of logic asoccciated with previous reference-container\n        this.map[panel.api.id].disposable.dispose();\n        // and reset the disposable to the active reference-container\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport {\n    directionToPosition,\n    Droptarget,\n    DroptargetOverlayModel,\n    Position,\n} from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable, Disposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { Box } from '../types';\nimport { DockviewPopoutGroupPanel } from './dockviewPopoutGroupPanel';\nimport {\n    DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n    DEFAULT_FLOATING_GROUP_POSITION,\n} from '../constants';\nimport {\n    DockviewPanelRenderer,\n    OverlayRenderContainer,\n} from '../overlayRenderContainer';\n\nconst DEFAULT_ROOT_OVERLAY_MODEL: DroptargetOverlayModel = {\n    activationSize: { type: 'pixels', value: 10 },\n    size: { type: 'pixels', value: 20 },\n};\n\nfunction getTheme(element: HTMLElement): string | undefined {\n    function toClassList(element: HTMLElement) {\n        const list: string[] = [];\n\n        for (let i = 0; i < element.classList.length; i++) {\n            list.push(element.classList.item(i)!);\n        }\n\n        return list;\n    }\n\n    let theme: string | undefined = undefined;\n    let parent: HTMLElement | null = element;\n\n    while (parent !== null) {\n        theme = toClassList(parent).find((cls) =>\n            cls.startsWith('dockview-theme-')\n        );\n        if (typeof theme === 'string') {\n            break;\n        }\n        parent = parent.parentElement;\n    }\n\n    return theme;\n}\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: Box;\n}\n\nexport interface SerializedPopoutGroup {\n    data: GroupPanelViewState;\n    position: Box | null;\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n    popoutGroups?: SerializedPopoutGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n    | 'rootOverlayModel'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly overlayRenderContainer: OverlayRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _floatingGroups: DockviewFloatingGroupPanel[] = [];\n    private readonly _popoutGroups: DockviewPopoutGroupPanel[] = [];\n    private readonly _rootDropTarget: Droptarget;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-overlay-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.overlayRenderContainer = new OverlayRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.overlayRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Disposable.from(() => {\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._floatingGroups]) {\n                    group.dispose();\n                }\n\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._popoutGroups]) {\n                    group.dispose();\n                }\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        this._rootDropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel:\n                this.options.rootOverlayModel ?? DEFAULT_ROOT_OVERLAY_MODEL,\n        });\n\n        this.addDisposables(\n            this._rootDropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            this._rootDropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addPopoutGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        options?: {\n            skipRemoveGroup?: boolean;\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        let group: DockviewGroupPanel;\n        let box: Box | undefined = options?.position;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n\n            if (!box) {\n                box = this.element.getBoundingClientRect();\n            }\n        } else {\n            group = item;\n\n            if (!box) {\n                box = group.element.getBoundingClientRect();\n            }\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        const theme = getTheme(this.gridview.element);\n\n        const popoutWindow = new DockviewPopoutGroupPanel(\n            `${this.id}-${group.id}`, // globally unique within dockview\n            group,\n            {\n                className: theme ?? '',\n                popoutUrl: options?.popoutUrl ?? '/popout.html',\n                box: {\n                    left: window.screenX + box.left,\n                    top: window.screenY + box.top,\n                    width: box.width,\n                    height: box.height,\n                },\n            }\n        );\n\n        popoutWindow.addDisposables(\n            {\n                dispose: () => {\n                    remove(this._popoutGroups, popoutWindow);\n                    this.updateWatermark();\n                },\n            },\n            popoutWindow.window.onDidClose(() => {\n                this.doAddGroup(group, [0]);\n            })\n        );\n\n        this._popoutGroups.push(popoutWindow);\n        this.updateWatermark();\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.location = 'floating';\n\n        const overlayLeft =\n            typeof coord?.x === 'number'\n                ? Math.max(coord.x, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.left;\n        const overlayTop =\n            typeof coord?.y === 'number'\n                ? Math.max(coord.y, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.top;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.location = 'grid';\n                    remove(this._floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this._floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const changed_orientation =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const changed_floatingGroupBounds =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        const changed_rootOverlayOptions =\n            options.rootOverlayModel !== undefined &&\n            options.rootOverlayModel !== this.options.rootOverlayModel;\n\n        this._options = { ...this.options, ...options };\n\n        if (changed_orientation) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (changed_floatingGroupBounds) {\n            for (const group of this._floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        if (changed_rootOverlayOptions) {\n            this._rootDropTarget.setOverlayModel(options.rootOverlayModel!);\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this._floatingGroups) {\n            for (const floating of this._floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this._floatingGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.overlay.toJSON(),\n                };\n            }\n        );\n\n        const popoutGroups: SerializedPopoutGroup[] = this._popoutGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.window.dimensions(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        if (popoutGroups.length > 0) {\n            result.popoutGroups = popoutGroups;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            const serializedPopoutGroups = data.popoutGroups ?? [];\n\n            for (const serializedPopoutGroup of serializedPopoutGroups) {\n                const { data, position } = serializedPopoutGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addPopoutGroup(group, {\n                    skipRemoveGroup: true,\n                    position: position ?? undefined,\n                });\n            }\n\n            for (const floatingGroup of this._floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this._floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (\n                referenceGroup.api.location === 'floating' ||\n                target === 'center'\n            ) {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.overlayRenderContainer.detatch(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => x.api.location === 'grid').length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        if (group.api.location === 'floating') {\n            const floatingGroup = this._floatingGroups.find(\n                (_) => _.group === group\n            );\n\n            if (floatingGroup) {\n                if (!options?.skipDispose) {\n                    floatingGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                remove(this._floatingGroups, floatingGroup);\n                floatingGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return floatingGroup.group;\n            }\n\n            throw new Error('failed to find floating group');\n        }\n\n        if (group.api.location === 'popout') {\n            const selectedGroup = this._popoutGroups.find(\n                (_) => _.group === group\n            );\n\n            if (selectedGroup) {\n                if (!options?.skipDispose) {\n                    selectedGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                selectedGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return selectedGroup.group;\n            }\n\n            throw new Error('failed to find popout group');\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                if (sourceGroup.api.location === 'grid') {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                switch (sourceGroup.api.location) {\n                    case 'grid':\n                        this.gridview.removeView(\n                            getGridLocation(sourceGroup.element)\n                        );\n                        break;\n                    case 'floating': {\n                        const selectedFloatingGroup = this._floatingGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedFloatingGroup) {\n                            throw new Error('failed to find floating group');\n                        }\n                        selectedFloatingGroup.dispose();\n                        break;\n                    }\n                    case 'popout': {\n                        const selectedPopoutGroup = this._popoutGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedPopoutGroup) {\n                            throw new Error('failed to find popout group');\n                        }\n                        selectedPopoutGroup.dispose();\n                    }\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { DroptargetOverlayModel, Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    popoutUrl?: string;\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n    rootOverlayModel?: DroptargetOverlayModel;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n    DroptargetOverlayModel,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n    rootOverlayModel?: DroptargetOverlayModel;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n                rootOverlayModel: props.rootOverlayModel,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                rootOverlayModel: props.rootOverlayModel,\n            });\n        }, [props.rootOverlayModel]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    GridviewApi,\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    LayoutPriority,\n    Orientation,\n    SerializedGridviewComponent,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n    header: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#3C3C3C', height: '100%' }}></div>\n        );\n    },\n    footer: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#007ACC', height: '100%' }}></div>\n        );\n    },\n    sidebar: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#333333', height: '100%' }}></div>\n        );\n    },\n    'left-expander': (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#252526', height: '100%' }}></div>\n        );\n    },\n    'right-expander': (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#252526', height: '100%' }}></div>\n        );\n    },\n    main: (props: IGridviewPanelProps) => {\n        return (\n            <div\n                style={{\n                    backgroundColor: '#1E1E1E',\n                    height: '100%',\n                    color: 'white',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                    fontSize: '0.8em',\n                    padding: '10px',\n                }}\n            >\n                <div>{'This entire mockup is built using a gridview.'}</div>\n\n                <div>{`Press 'Ctrl+B' to toggle the left sidebar and 'Ctrl+Alt+B' to toggle the right sidebar or manually resize them.`}</div>\n            </div>\n        );\n    },\n};\n\nconst serializedGridview: SerializedGridviewComponent = {\n    grid: {\n        root: {\n            type: 'branch',\n            data: [\n                {\n                    type: 'leaf',\n                    data: {\n                        id: 'header-id',\n                        component: 'header',\n                        minimumHeight: 30,\n                        maximumHeight: 30,\n                    },\n                },\n                {\n                    type: 'branch',\n                    data: [\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'sidebar-id',\n                                component: 'sidebar',\n                                minimumWidth: 30,\n                                maximumWidth: 30,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'left-expander-id',\n                                component: 'left-expander',\n                                minimumWidth: 100,\n                                snap: true,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            size: 100,\n                            data: {\n                                id: 'main-id',\n                                component: 'main',\n                                minimumWidth: 100,\n                                minimumHeight: 100,\n                                /**\n                                 * it's important to give the main content a high layout priority as we want\n                                 * the main layout to have priority when allocating new space\n                                 */\n                                priority: LayoutPriority.High,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'right-expander-id',\n                                component: 'right-expander',\n                                snap: true,\n                                minimumWidth: 100,\n                            },\n                        },\n                    ],\n                },\n                {\n                    type: 'leaf',\n                    data: {\n                        id: 'footer-id',\n                        component: 'footer',\n                        minimumHeight: 30,\n                        maximumHeight: 30,\n                    },\n                },\n            ],\n        },\n        width: 1000,\n        height: 1000,\n        orientation: Orientation.VERTICAL,\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<GridviewApi>();\n\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.fromJSON(serializedGridview);\n\n        setApi(event.api);\n    };\n\n    const onKeyDown = (event: React.KeyboardEvent) => {\n        if (!api) {\n            return;\n        }\n\n        console.log(event);\n\n        const leftExpander = api.getPanel('left-expander-id');\n        const rightExpander = api.getPanel('right-expander-id');\n\n        if (!leftExpander || !rightExpander) {\n            return;\n        }\n\n        switch (event.key) {\n            case 'b':\n                if (event.ctrlKey) {\n                    if (event.altKey) {\n                        // toggle right\n                        rightExpander.api.setVisible(\n                            !rightExpander.api.isVisible\n                        );\n                        if (rightExpander.api.width === 0) {\n                            rightExpander.api.setSize({ width: 150 });\n                        }\n                    } else {\n                        // toggle left\n                        leftExpander.api.setVisible(\n                            !leftExpander.api.isVisible\n                        );\n                        if (leftExpander.api.width === 0) {\n                            leftExpander.api.setSize({ width: 150 });\n                        }\n                    }\n                }\n        }\n    };\n\n    return (\n        <div\n            tabIndex={-1}\n            className=\"simple-gridview-example\"\n            onKeyDown={onKeyDown}\n            style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n            <div style={{ flexGrow: 1 }}>\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    hideBorders={true}\n                    orientation={Orientation.VERTICAL}\n                    className={props.theme || 'dockview-theme-abyss'}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import {\n    GridviewApi,\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    LayoutPriority,\n    Orientation,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<GridviewApi>();\n\n    const onReady = (event: GridviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            priority: LayoutPriority.High,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n\n            position: { referencePanel: 'panel_2', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        setApi(event.api);\n    };\n\n    return (\n        <div\n            style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n            <div>\n                <button\n                    onClick={() => {\n                        if (!api) {\n                            return;\n                        }\n\n                        const panel = api.getPanel('panel_3');\n\n                        if (!panel) {\n                            return;\n                        }\n\n                        // panel.api.setVisible(!panel.api.isVisible);\n\n                        if (panel.height === 0) {\n                            panel.api.setSize({ height: 200 });\n                        } else {\n                            panel.api.setSize({ height: 0 });\n                        }\n                    }}\n                >\n                    Resize\n                </button>\n            </div>\n            <div style={{ flexGrow: 1 }}>\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    // proportionalLayout={false}\n                    orientation={Orientation.VERTICAL}\n                    className={props.theme || 'dockview-theme-abyss'}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import {\n    IGridviewPanelProps,\n    Orientation,\n    GridviewReact,\n    GridviewReadyEvent,\n    GridviewApi,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from '../ui/console/console';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const EventsGridview = () => {\n    const [lines, setLines] = React.useState<Line[]>([]);\n    const [checked, setChecked] = React.useState<boolean>(false);\n\n    const [api, setApi] = React.useState<GridviewApi | undefined>();\n\n    React.useEffect(() => {\n        if (!api) {\n            return () => {\n                //noop\n            };\n        }\n\n        const disposables = [\n            api.onDidAddPanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddPanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemovePanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemovePanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActivePanelChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActivePanelChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidLayoutChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutChange` },\n                ]);\n            }),\n            api.onDidLayoutFromJSON((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutFromJSON` },\n                ]);\n            }),\n        ];\n\n        return () => {\n            disposables.forEach((disposable) => disposable.dispose());\n        };\n    }, [api]);\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        setLines((lines) => [\n            ...lines,\n            {\n                timestamp: new Date(),\n                text: `Rebuilding view fromJSON:${checked}`,\n                css: { color: 'yellow', backgroundColor: 'grey' },\n            },\n        ]);\n\n        if (checked) {\n            api.fromJSON({\n                grid: {\n                    root: {\n                        type: 'branch',\n                        data: [\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_3',\n                                            component: 'default',\n                                            params: { title: 'Panel 3' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                    {\n                                        type: 'branch',\n                                        data: [\n                                            {\n                                                type: 'leaf',\n                                                data: {\n                                                    id: 'panel_5',\n                                                    component: 'default',\n                                                    params: {\n                                                        title: 'Panel 5',\n                                                    },\n                                                    snap: false,\n                                                },\n                                                size: 50,\n                                            },\n                                            {\n                                                type: 'branch',\n                                                data: [\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_6',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 6',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 131,\n                                                    },\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_8',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 8',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 131,\n                                                    },\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_7',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 7',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 132,\n                                                    },\n                                                ],\n                                                size: 50,\n                                            },\n                                        ],\n                                        size: 394,\n                                    },\n                                ],\n                                size: 100,\n                            },\n                            {\n                                type: 'leaf',\n                                data: {\n                                    id: 'panel_2',\n                                    component: 'default',\n                                    params: { title: 'Panel 2' },\n                                    snap: false,\n                                },\n                                size: 100,\n                            },\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_1',\n                                            component: 'default',\n                                            params: { title: 'Panel 1' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_4',\n                                            component: 'default',\n                                            params: { title: 'Panel 4' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                ],\n                                size: 100,\n                            },\n                        ],\n                        size: 788,\n                    },\n                    width: 788,\n                    height: 300,\n                    orientation: Orientation.VERTICAL,\n                },\n                activePanel: 'panel_8',\n            });\n            return;\n        }\n\n        api.clear();\n        api.orientation = Orientation.VERTICAL;\n\n        api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n    }, [api, checked]);\n\n    const onReady = (event: GridviewReadyEvent) => {\n        setApi(event.api);\n    };\n\n    return (\n        <>\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    onChange={(e) => setChecked(e.target.checked)}\n                />\n                <span>{'fromJSON'}</span>\n            </label>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    proportionalLayout={false}\n                    orientation={Orientation.VERTICAL}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n\n            <Console lines={lines} />\n        </>\n    );\n};\n","import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: {\n    id: string;\n    hideThemePicker?: boolean;\n}) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            {!props.hideThemePicker && <ThemePicker />}\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    rel='noopener'\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton\n                    id={sandboxId}\n                    hideThemePicker={props.hideThemePicker}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","import * as React from 'react';\nimport CodeBlock from '@theme/CodeBlock';\nimport './docRef.scss';\n\nexport interface DocRefProps {\n    declaration: string;\n}\n\nimport docsJson from '../../../generated/api.output.json';\n\ntype DocsContent = { kind: string; text: string; tag?: string };\ntype DocsTag = { tag: string; content: DocsContent[] };\ntype DocsComment = {\n    summary?: DocsContent[];\n    blockTags?: DocsTag[];\n};\ntype DocsJson = {\n    [index: string]: Array<{\n        name: string;\n        code: string;\n        comment?: DocsComment;\n        kind: 'accessor' | 'property' | 'method';\n    }>;\n};\n\nexport const Text = (props: { content: DocsContent[] }) => {\n    return (\n        <div className=\"doc-text\">\n            {props.content.map((piece, i) => {\n                switch (piece.kind) {\n                    case 'text': {\n                        return <span key={i}>{piece.text}</span>;\n                    }\n                    case 'code':\n                        return (\n                            <code key={i}>\n                                {piece.text.substring(1, piece.text.length - 1)}\n                            </code>\n                        );\n                    default:\n                        throw new Error(`unhandled piece ${piece.kind}`);\n                }\n            })}\n        </div>\n    );\n};\n\nexport const Tags = (props: { tags: DocsTag[] }) => {\n    return (\n        <div>\n            {props.tags.map((tag, i) => {\n                return (\n                    <div key={i}>\n                        <div>{tag.tag}</div>\n                        <Text content={tag.content} />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport const Summary = (props: { summary: DocsComment }) => {\n    return (\n        <div>\n            <Text content={props.summary.summary ?? []} />\n            {/* <Tags tags={props.summary.blockTags ?? []} /> */}\n        </div>\n    );\n};\n\nexport const Markdown = (props: { children: string }) => {\n    return <span>{props.children}</span>;\n};\n\nexport const DocRef = (props: DocRefProps) => {\n    const docs = React.useMemo(\n        () => (docsJson as DocsJson)[props.declaration],\n        [props.declaration]\n    );\n\n    if (!docs) {\n        return null;\n    }\n\n    return (\n        <div>\n            <table className=\"doc-ref-table\">\n                <tbody>\n                    {docs.map((doc) => {\n                        return (\n                            <tr>\n                                <th\n                                    style={{\n                                        width: '30%',\n                                        display: 'flex',\n                                    }}\n                                >\n                                    <div\n                                        style={{\n                                            // width: '30%',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            alignItems: 'start',\n                                        }}\n                                    >\n                                        <h6\n                                            style={{\n                                                fontFamily: 'monospace',\n                                                fontSize: '1.2em',\n                                            }}\n                                        >\n                                            {doc.name}\n                                        </h6>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                alignItems: 'start',\n                                            }}\n                                        >\n                                            {/* <span\n                                                style={{\n                                                    fontSize: '0.75em',\n                                                    color: 'var(--ifm-color-content-secondary)',\n                                                }}\n                                            >\n                                                {'Type'}\n                                            </span>\n                                            <span\n                                                style={{\n                                                    color: 'var(--ifm-color-primary)',\n                                                }}\n                                            >\n                                                {doc.type}\n                                            </span> */}\n                                        </div>\n                                    </div>\n                                </th>\n                                <th\n                                // style={{ width: '70%' }}\n                                >\n                                    {/* <div>{'-'}</div> */}\n                                    <div>\n                                        <div>\n                                            {doc.comment && (\n                                                <Summary\n                                                    summary={doc.comment}\n                                                />\n                                            )}\n                                        </div>\n                                        <CodeBlock language=\"tsx\">\n                                            {doc.code}\n                                        </CodeBlock>\n                                    </div>\n                                </th>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","\n\nexport const frontMatter = {\n\tdescription: 'Gridview Documentation'\n};\nexport const contentTitle = 'Gridview';\nexport const metadata = {\n  \"id\": \"components/gridview\",\n  \"title\": \"Gridview\",\n  \"description\": \"Gridview Documentation\",\n  \"source\": \"@site/versioned_docs/version-1.9.0/components/gridview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/gridview\",\n  \"permalink\": \"/docs/components/gridview\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.9.0/components/gridview.mdx\",\n  \"tags\": [],\n  \"version\": \"1.9.0\",\n  \"frontMatter\": {\n    \"description\": \"Gridview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Dockview\",\n    \"permalink\": \"/docs/components/dockview\"\n  },\n  \"next\": {\n    \"title\": \"Paneview\",\n    \"permalink\": \"/docs/components/paneview\"\n  }\n};\nexport const assets = {\n\n};\n\n// import SimpleGridview from '@site/sandboxes/simple-gridview/src/app';\n// import IDEExample from '@site/sandboxes/ide-example/src/app';\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {MultiFrameworkContainer} from '@site/src/components/ui/container';\nimport SimpleGridview from '@site/sandboxes/simple-gridview/src/app';\nimport EditorGridview from '@site/sandboxes/editor-gridview/src/app';\n// import SimpleGridview from '@site/sandboxes/simple-gridview/src/app';\nimport {EventsGridview} from '@site/src/components/gridview/events';\n// import IDEExample from '@site/sandboxes/ide-example/src/app';\nimport Link from '@docusaurus/Link';\nimport {DocRef} from '@site/src/components/ui/reference/docRef';\nexport const toc = [{\n  \"value\": \"Introduction\",\n  \"id\": \"introduction\",\n  \"level\": 2\n}, {\n  \"value\": \"GridviewReact Component\",\n  \"id\": \"gridviewreact-component\",\n  \"level\": 2\n}, {\n  \"value\": \"Gridview API\",\n  \"id\": \"gridview-api\",\n  \"level\": 2\n}, {\n  \"value\": \"Gridview Panel API\",\n  \"id\": \"gridview-panel-api\",\n  \"level\": 2\n}, {\n  \"value\": \"Resizing\",\n  \"id\": \"resizing\",\n  \"level\": 2\n}, {\n  \"value\": \"Panel Resizing\",\n  \"id\": \"panel-resizing\",\n  \"level\": 3\n}, {\n  \"value\": \"Panels\",\n  \"id\": \"panels\",\n  \"level\": 2\n}, {\n  \"value\": \"Add Panel\",\n  \"id\": \"add-panel\",\n  \"level\": 3\n}, {\n  \"value\": \"Theme\",\n  \"id\": \"theme\",\n  \"level\": 2\n}, {\n  \"value\": \"Events\",\n  \"id\": \"events\",\n  \"level\": 2\n}, {\n  \"value\": \"Complex Example\",\n  \"id\": \"complex-example\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"gridview\",\n      children: \"Gridview\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Gridview is a collection of nested splitviews and is the foundation for the \", _jsx(_components.a, {\n        href: \"./dockview\",\n        children: \"Dockview\"\n      }), \" component.\\nGridview serves a purpose when you want only the nested splitviews with no tabs and no headers.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"introduction\",\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"simple-gridview\",\n      react: SimpleGridview\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"gridviewreact-component\",\n      children: \"GridviewReact Component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ReactGridview } from 'dockview';\\n\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"IGridviewReactProps\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"gridview-api\",\n      children: \"Gridview API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\\n    // props.containerApi...\\n\\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onReady = (event: GridviewReadyEvent) => {\\n    // event.api...\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"GridviewApi\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"gridview-panel-api\",\n      children: \"Gridview Panel API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\\n    // props.api...\\n\\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"GridviewPanelApi\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"resizing\",\n      children: \"Resizing\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"panel-resizing\",\n      children: \"Panel Resizing\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can set the size of a panel using \", _jsx(_components.code, {\n        children: \"props.api.setSize(...)\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// it's mandatory to provide either a height or a width, providing both is optional\\nprops.api.setSize({\\n    height: 100,\\n    width: 200,\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can update any constraints on the panel. All parameters are optional.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"props.api.setConstraints({\\n    minimumHeight: 100,\\n    maximumHeight: 1000\\n    minimumWidth: 100,\\n    maximumWidth: 1000\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can hide a panel by setting it's visibility to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \". Hidden panels retain their size\\nat the point of being hidden, if made visible again they will try to resize to the remembered size.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"props.api.setVisible(false);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"panels\",\n      children: \"Panels\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"add-panel\",\n      children: \"Add Panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the gridview API you can access the \", _jsx(_components.code, {\n        children: \"addPanel\"\n      }), \" method which returns an instance of the created panel.\\nThe minimum method signature is:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"where \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" is the unique id of the panel and \", _jsx(_components.code, {\n        children: \"component\"\n      }), \" is the implenentation which\\nwill be used to render the panel. You will have registered this using the \", _jsx(_components.code, {\n        children: \"components\"\n      }), \" prop of the \", _jsx(_components.code, {\n        children: \"GridviewReactComponent\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can pass bounding constraints to limit the size of the panel.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    minimumHeight: 100,\\n    maximumHeight: 1000,\\n    minimumWidth: 100,\\n    maximumWidth: 1000,\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass a \", _jsx(_components.code, {\n        children: \"snap\"\n      }), \" parameter which will hide the panel when an attempt is made to move it beyond a minimum width or height if one exists.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    minimumHeight: 100,\\n    snap: true,\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass a \", _jsx(_components.code, {\n        children: \"priority\"\n      }), \" parameter which will keep the panel a certain priority when being resized. This is useful when you know you want this\\npanel to always take the first available or last available space. The default is \", _jsx(_components.code, {\n        children: \"LayoutPriority.Normal\"\n      }), \" which defers space allocations to the libraries discression.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    minimumHeight: 100,\\n    priority: LayoutPriority.High,\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass properties to the panel using the \", _jsx(_components.code, {\n        children: \"params\"\n      }), \" key.\\nYou can update these properties through the panels \", _jsx(_components.code, {\n        children: \"api\"\n      }), \" object and its \", _jsx(_components.code, {\n        children: \"updateParameters\"\n      }), \" method.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    params: {\\n        myCustomKey: 'my_custom_value',\\n    },\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"panel.api.updateParameters({\\n    myCustomKey: 'my_custom_value',\\n    myOtherCustomKey: 'my_other_custom_key',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Note \", _jsx(_components.code, {\n          children: \"updateParameters\"\n        }), \" does not accept partial parameter updates, you should call it with the entire set of parameters\\nyou want the panel to receive.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally \", _jsx(_components.code, {\n        children: \"addPanel\"\n      }), \" accepts a \", _jsx(_components.code, {\n        children: \"position\"\n      }), \" object which tells dockview where to place the panel.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"This object accepts a \", _jsx(_components.code, {\n          children: \"referencePanel\"\n        }), \" which can be the associated id as a string\\nor the panel object reference.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"This object accepts a \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" property which dictates where,\\nrelative to the provided reference the new panel will be placed.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"If a \", _jsx(_components.code, {\n          children: \"referencePanel\"\n        }), \" is not passed then the \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" will be treated as absolute.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"If no \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" is provided the library will place the new panel in a pre-determined position.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'panel_1',\\n    component: 'default',\\n});\\n\\nconst panel2 = api.addPanel({\\n    id: 'panel_2',\\n    component: 'default',\\n    position: {\\n        referencePanel: panel1,\\n        direction: 'right',\\n    },\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Note \", _jsx(_components.code, {\n          children: \"updateParameters\"\n        }), \" does not accept partial parameter updates, you should call it with the entire set of parameters\\nyou want the panel to receive.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"theme\",\n      children: \"Theme\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As well as importing the \", _jsx(_components.code, {\n        children: \"dockview\"\n      }), \" stylesheet you must provide a class-based theme somewhere in your application. For example.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// Providing a theme directly through the DockviewReact component props\\n<GridviewReact className=\\\"dockview-theme-dark\\\" />\\n\\n// Providing a theme somewhere in the DOM tree\\n<div className=\\\"dockview-theme-dark\\\">\\n  <div>\\n    {/**...  */}\\n    <GridviewReact  />\\n  </div>\\n</div>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find more details on theming \", _jsx(Link, {\n        to: \"../theme\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"events\",\n      children: \"Events\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"GridviewReact\"\n      }), \" exposes a number of events that the developer can listen to and below is a simple example with a log panel showing those events that occur.\"]\n    }), \"\\n\", _jsx(EventsGridview, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"complex-example\",\n      children: \"Complex Example\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"editor-gridview\",\n      react: EditorGridview,\n      hideThemePicker: true\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n"],"names":["BrowserOnly","_ref","children","fallback","useIsBrowser","_jsx","_Fragment","TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","from","func","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","width","height","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","array","findIndex","t","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","contentSize","_contentSize","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","total","proportion","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","_onDidVisibilityChange","onDidVisibilityChange","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","wereAllChildrenHidden","areAllChildrenHidden","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","maximizedView","_maximizedNode","hasMaximizedView","maximizeView","getNode","exitMaximizedView","hideAllViewsBut","parent","exclude","_onDidMaxmizedNodeChange","showViewsInReverseOrder","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","_getViews","nodeCachedVisibleSize","path","n","l","onDidMaxmizedNodeChange","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","maximizeGroup","hasMaximizedGroup","exitMaxmizedGroup","exitMaximizedGroup","onDidMaxmizedGroupChange","addPopoutGroup","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","onDragOver","preventDefault","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","DEFAULT_ACTIVATION_SIZE","DEFAULT_SIZE","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","stopPropagation","nativeEvent","setTargetZones","setOverlayModel","model","overlayModel","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","sizeOptions","_b","translate","transform","overlayType","activationSizeOptions","activationSize","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","DockviewDropTargets","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","Panel","show","display","hide","renderPanel","asActive","doRender","isPanelActive","content","renderer","overlayRenderContainer","detatch","attach","referenceContainer","focusTracker","openPanel","_width","_height","closePanel","defaultRenderer","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","setActive","isActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_location","groupPanel","_onDidLocationChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","updateActions","isGroupActive","_d","_c","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","disableResizing","_disableResizing","entry","offsetParent","currentElement","DocumentFragment","host","isInDocument","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","isMaximizedGroup","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","NOT_INITIALIZED_MESSAGE","DockviewGroupPanelApiImpl","_group","onDidLocationChange","moveTo","moveGroupOrPanel","maximize","isMaximized","exitMaximized","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","PopoutWindow","_onDidClose","onDidClose","_window","dimensions","screenX","screenY","innerWidth","innerHeight","open","url","features","entries","join","externalWindow","cleanUp","externalDocument","div","replaceChildren","styleSheetList","styleSheets","styleSheet","href","link","rel","head","cssTexts","cssRules","rule","cssText","err","createTextNode","addStyles","DockviewPopoutGroupPanel","popoutUrl","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DEFAULT_FLOATING_GROUP_POSITION","OverlayRenderContainer","destroy","createFocusableElement","focusContainer","box2","visibilityChanged","DEFAULT_ROOT_OVERLAY_MODEL","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","_floatingGroups","_popoutGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","_rootDropTarget","Edge","rootOverlayModel","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","theme","toClassList","list","cls","startsWith","getTheme","popoutWindow","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","_f","_e","minimumHeightWithinViewport","querySelector","floatingGroupPanel","createGroupAtLocation","changed_orientation","changed_floatingGroupBounds","changed_rootOverlayOptions","floating","includePanel","doSetGroupAndPanelActive","collection","floats","popoutGroups","grid","floatingGroups","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","serializedPopoutGroups","serializedPopoutGroup","floatingGroup","hasActiveGroup","hasActivePanel","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","selectedGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","selectedFloatingGroup","selectedPopoutGroup","GridviewComponent","_onDidLayoutfromJSON","hasOrientationChanged","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","footer","sidebar","main","_jsxs","justifyContent","flexDirection","setApi","onKeyDown","log","leftExpander","rightExpander","ctrlKey","altKey","EventsGridview","lines","setLines","checked","setChecked","timestamp","text","css","onChange","margin","Console","formatTime","pad","getHours","getMinutes","getSeconds","getMilliseconds","scrollTop","scrollHeight","line","CodeSandboxButton","hideThemePicker","ThemePicker","alignItems","fontWeight","paddingRight","Spinner","ReactIcon","marginRight","src","useBaseUrl","JavascriptIcon","themes","setTheme","localStorage","getItem","setItem","dispatchEvent","StorageEvent","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","sandboxId","background","zIndex","react","cursor","border","MultiFrameworkContainer","Text","piece","kind","substring","Summary","summary","DocRef","docs","docsJson","declaration","doc","fontFamily","name","comment","CodeBlock","language","code","frontMatter","description","contentTitle","metadata","assets","toc","_createMdxContent","_components","a","blockquote","h1","h2","h3","li","pre","ul","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}