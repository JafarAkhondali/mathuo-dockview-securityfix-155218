{"version":3,"file":"assets/js/1df93b7f.d64e1f4f.js","mappings":"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","sources":["webpack://dockview-docs/../../node_modules/@docusaurus/core/lib/client/exports/BrowserOnly.js","webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/popoutWindow.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPopoutGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/constants.ts","webpack://dockview-docs/../dockview-core/src/overlayRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./src/components/HomepageFeatures/styles.module.css","webpack://dockview-docs/./src/components/HomepageFeatures/index.tsx","webpack://dockview-docs/./src/components/ui/browserHeader.tsx","webpack://dockview-docs/./sandboxes/demo-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/dockview-app/src/app.tsx","webpack://dockview-docs/./src/components/HomepageFeatures/introduction.tsx","webpack://dockview-docs/./src/pages/index.module.css","webpack://dockview-docs/./src/pages/index.tsx","webpack://dockview-docs/./static/img/dockview_grid_3.svg","webpack://dockview-docs/./static/img/dockview_grid_4.svg","webpack://dockview-docs/./static/img/dockview_splash_2.svg"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { isValidElement } from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n// Similar comp to the one described here:\n// https://www.joshwcomeau.com/react/the-perils-of-rehydration/#abstractions\nexport default function BrowserOnly({ children, fallback, }) {\n    const isBrowser = useIsBrowser();\n    if (isBrowser) {\n        if (typeof children !== 'function' &&\n            process.env.NODE_ENV === 'development') {\n            throw new Error(`Docusaurus error: The children of <BrowserOnly> must be a \"render function\", e.g. <BrowserOnly>{() => <span>{window.location.href}</span>}</BrowserOnly>.\nCurrent type: ${isValidElement(children) ? 'React element' : typeof children}`);\n        }\n        return <>{children?.()}</>;\n    }\n    return fallback ?? null;\n}\n","class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n\n    export function from(func: () => void): IDisposable {\n        return {\n            dispose: () => {\n                func();\n            },\n        };\n    }\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function addStyles(document: Document, styleSheetList: StyleSheetList) {\n    const styleSheets = Array.from(styleSheetList);\n\n    for (const styleSheet of styleSheets) {\n        if (styleSheet.href) {\n            const link = document.createElement('link');\n            link.href = styleSheet.href;\n            link.type = styleSheet.type;\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n        }\n\n        let cssTexts: string[] = [];\n\n        try {\n            if (styleSheet.cssRules) {\n                cssTexts = Array.from(styleSheet.cssRules).map(\n                    (rule) => rule.cssText\n                );\n            }\n        } catch (err) {\n            // security errors (lack of permissions), ignore\n        }\n\n        for (const rule of cssTexts) {\n            const style = document.createElement('style');\n            style.appendChild(document.createTextNode(rule));\n            document.head.appendChild(style);\n        }\n    }\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n\n/**\n * Check whether an element is in the DOM (including the Shadow DOM)\n * @see https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\n */\nexport function isInDocument(element: Element): boolean {\n    let currentElement: Element | ParentNode = element;\n\n    while (currentElement && currentElement.parentNode) {\n        if (currentElement.parentNode === document) {\n            return true;\n        } else if (currentElement.parentNode instanceof DocumentFragment) {\n            // handle shadow DOMs\n            currentElement = (currentElement.parentNode as ShadowRoot).host;\n        } else {\n            currentElement = currentElement.parentNode;\n        }\n    }\n\n    return false;\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private _contentSize = 0;\n    private _proportions: (number | undefined)[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get contentSize(): number {\n        return this._contentSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): (number | undefined)[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            let total = 0;\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                } else {\n                    size -= item.size;\n                }\n            }\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(\n                        Math.round((proportion * size) / total),\n                        item.minimumSize,\n                        item.maximumSize\n                    );\n                }\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this._proportions = this.viewItems.map((i) =>\n                i.visible ? i.size / this._contentSize : undefined\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this._contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidVisibilityChange = new Emitter<boolean>();\n    readonly onDidVisibilityChange: Event<boolean> =\n        this._onDidVisibilityChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(\n                  ...this.children.map((c, index) =>\n                      this.splitview.isViewVisible(index)\n                          ? c.minimumOrthogonalSize\n                          : 0\n                  )\n              );\n    }\n\n    get maximumSize(): number {\n        return Math.min(\n            ...this.children.map((c, index) =>\n                this.splitview.isViewVisible(index)\n                    ? c.maximumOrthogonalSize\n                    : Number.POSITIVE_INFINITY\n            )\n        );\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this._onDidVisibilityChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n     setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        const wereAllChildrenHidden = this.splitview.contentSize === 0;\n        this.splitview.setViewVisible(index, visible);\n        const areAllChildrenHidden = this.splitview.contentSize === 0;\n\n        // If all children are hidden then the parent should hide the entire splitview\n        // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n        if (\n            (visible && wereAllChildrenHidden) ||\n            (!visible && areAllChildrenHidden)\n        ) {\n            this._onDidVisibilityChange.fire(visible);\n        }\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = new CompositeDisposable(\n            Event.any(...this.children.map((c) => c.onDidChange))((e) => {\n                /**\n                 * indicate a change has occured to allows any re-rendering but don't bubble\n                 * event because that was specific to this branch\n                 */\n                this._onDidChange.fire({ size: e.orthogonalSize });\n            }),\n            ...this.children.map((c, i) => {\n                if (c instanceof BranchNode) {\n                    return c.onDidVisibilityChange((visible) => {\n                        this.setChildVisible(i, visible);\n                    });\n                }\n                return Disposable.NONE;\n            })\n        );\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    readonly element: HTMLElement;\n\n    private _root: BranchNode | undefined;\n    private _maximizedNode: LeafNode | undefined = undefined;\n    private readonly disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidMaxmizedNodeChange = new Emitter<void>();\n    readonly onDidMaxmizedNodeChange = this._onDidMaxmizedNodeChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    maximizedView(): IGridView | undefined {\n        return this._maximizedNode?.view;\n    }\n\n    hasMaximizedView(): boolean {\n        return this._maximizedNode !== undefined;\n    }\n\n    maximizeView(view: IGridView): void {\n        const location = getGridLocation(view.element);\n        const [_, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            return;\n        }\n\n        if (this._maximizedNode === node) {\n            return;\n        }\n\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        function hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n            for (let i = 0; i < parent.children.length; i++) {\n                const child = parent.children[i];\n                if (child instanceof LeafNode) {\n                    if (child !== exclude) {\n                        parent.setChildVisible(i, false);\n                    }\n                } else {\n                    hideAllViewsBut(child, exclude);\n                }\n            }\n        }\n\n        hideAllViewsBut(this.root, node);\n        this._maximizedNode = node;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    exitMaximizedView(): void {\n        if (!this._maximizedNode) {\n            return;\n        }\n\n        function showViewsInReverseOrder(parent: BranchNode): void {\n            for (let index = parent.children.length - 1; index >= 0; index--) {\n                const child = parent.children[index];\n                if (child instanceof LeafNode) {\n                    parent.setChildVisible(index, true);\n                } else {\n                    showViewsInReverseOrder(child);\n                }\n            }\n        }\n\n        showViewsInReverseOrder(this.root);\n\n        this._maximizedNode = undefined;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this._onDidMaxmizedNodeChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\nimport { Box } from '../types';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    maximizeGroup(panel: IDockviewPanel): void {\n        this.component.maximizeGroup(panel.group);\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.component.hasMaximizedGroup();\n    }\n\n    exitMaxmizedGroup(): void {\n        this.component.exitMaximizedGroup();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.component.onDidMaxmizedGroupChange;\n    }\n\n    /**\n     * Add a popout group in a new Window\n     */\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        this.component.addPopoutGroup(item, options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this.setState(quadrant);\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    renderer?: DockviewPanelRenderer;\n    params?: { [key: string]: any };\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { DockviewDropTargets } from '../../types';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (\n                    !data &&\n                    event.shiftKey &&\n                    this.group.location !== 'floating'\n                ) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(panel: IDockviewPanel): void {\n        const isActive = panel === this.group.activePanel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.overlayRenderContainer.remove(panel);\n                if (isActive) {\n                    if (this.panel) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container =\n                    this.accessor.overlayRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n        }\n\n        if (isActive) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        const renderer = panel.api.renderer;\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (renderer) {\n            case 'always':\n                container =\n                    this.accessor.overlayRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n            case 'onlyWhenVisibile':\n                this._element.appendChild(this.panel.view.content.element);\n                container = this._element;\n                break;\n        }\n\n        const _onDidFocus = this.panel.view.content.onDidFocus;\n        const _onDidBlur = this.panel.view.content.onDidBlur;\n\n        const disposable = new CompositeDisposable();\n        const focusTracker = trackFocus(container);\n\n        disposable.addDisposables(\n            focusTracker,\n            focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n            focusTracker.onDidBlur(() => this._onDidBlur.fire())\n        );\n\n        if (_onDidFocus) {\n            disposable.addDisposables(\n                _onDidFocus(() => this._onDidFocus.fire())\n            );\n        }\n        if (_onDidBlur) {\n            disposable.addDisposables(_onDidBlur(() => this._onDidBlur.fire()));\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.accessor.options.defaultRenderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.location === 'floating' && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        this.group.api.location !== 'floating'\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.location === 'floating' && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport type DockviewGroupLocation = 'grid' | 'floating' | 'popout';\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    // private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private _location: DockviewGroupLocation = 'grid';\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get location(): DockviewGroupLocation {\n        return this._location;\n    }\n\n    set location(value: DockviewGroupLocation) {\n        this._location = value;\n\n        toggleClass(this.container, 'dv-groupview-floating', false);\n        toggleClass(this.container, 'dv-groupview-popout', false);\n\n        switch (value) {\n            case 'grid':\n                this.contentContainer.dropTarget.setTargetZones([\n                    'top',\n                    'bottom',\n                    'left',\n                    'right',\n                    'center',\n                ]);\n                break;\n            case 'floating':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n                this.contentContainer.dropTarget.setTargetZones(\n                    value\n                        ? ['center']\n                        : ['top', 'bottom', 'left', 'right', 'center']\n                );\n\n                toggleClass(this.container, 'dv-groupview-floating', true);\n\n                break;\n            case 'popout':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n\n                toggleClass(this.container, 'dv-groupview-popout', true);\n\n                break;\n        }\n\n        this.groupPanel.api._onDidLocationChange.fire({\n            location: this.location,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel);\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { isInDocument, watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement?: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!isInDocument(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n    maximizeGroup(panel: T): void;\n    isMaximizedGroup(panel: T): boolean;\n    exitMaximizedGroup(): void;\n    hasMaximizedGroup(): boolean;\n    readonly onDidMaxmizedGroupChange: Event<void>;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    maximizeGroup(panel: T): void {\n        this.gridview.maximizeView(panel);\n    }\n\n    isMaximizedGroup(panel: T): boolean {\n        return this.gridview.maximizedView() === panel;\n    }\n\n    exitMaximizedGroup(): void {\n        this.gridview.exitMaximizedView();\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.gridview.hasMaximizedView();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.gridview.onDidMaxmizedNodeChange;\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position, positionToDirection } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly location: DockviewGroupLocation;\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly location: DockviewGroupLocation;\n}\n\n// TODO find a better way to initialize and avoid needing null checks\nconst NOT_INITIALIZED_MESSAGE = 'DockviewGroupPanelApiImpl not initialized';\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidLocationChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidLocationChange.event;\n\n    get location(): DockviewGroupLocation {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        return this._group.model.location;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidLocationChange);\n    }\n\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        const group =\n            options.group ??\n            this.accessor.addGroup({\n                direction: positionToDirection(options.position ?? 'right'),\n            });\n\n        this.accessor.moveGroupOrPanel(\n            group,\n            this._group.id,\n            undefined,\n            options.group ? options.position ?? 'center' : 'center'\n        );\n    }\n\n    maximize(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.location !== 'grid') {\n            // only grid groups can be maximized\n            return;\n        }\n\n        this.accessor.maximizeGroup(this._group);\n    }\n\n    isMaximized(): boolean {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        return this.accessor.isMaximizedGroup(this._group);\n    }\n\n    exitMaximized(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.isMaximized()) {\n            this.accessor.exitMaximizedGroup();\n        }\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 0,\n                minimumWidth: 0,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { DockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        // omit properties that do not make sense here\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return this.group.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n\n    maximize(): void {\n        this.group.api.maximize();\n    }\n\n    isMaximized(): boolean {\n        return this.group.api.isMaximized();\n    }\n\n    exitMaximized(): void {\n        this.group.api.exitMaximized();\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { Box } from '../types';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: Box & {\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(bounds: Partial<Box> = {}): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): Box {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import { addStyles } from './dom';\nimport { Emitter, addDisposableWindowListener } from './events';\nimport { CompositeDisposable, IDisposable } from './lifecycle';\nimport { Box } from './types';\n\nexport type PopoutWindowOptions = {\n    url: string;\n} & Box;\n\nexport class PopoutWindow extends CompositeDisposable {\n    private readonly _onDidClose = new Emitter<void>();\n    readonly onDidClose = this._onDidClose.event;\n\n    private _window: { value: Window; disposable: IDisposable } | null = null;\n\n    constructor(\n        private readonly id: string,\n        private readonly className: string,\n        private readonly options: PopoutWindowOptions\n    ) {\n        super();\n\n        this.addDisposables(this._onDidClose, {\n            dispose: () => {\n                this.close();\n            },\n        });\n    }\n\n    dimensions(): Box | null {\n        if (!this._window) {\n            return null;\n        }\n\n        const left = this._window.value.screenX;\n        const top = this._window.value.screenY;\n        const width = this._window.value.innerWidth;\n        const height = this._window.value.innerHeight;\n\n        return { top, left, width, height };\n    }\n\n    close(): void {\n        if (this._window) {\n            this._window.disposable.dispose();\n            this._window.value.close();\n            this._window = null;\n        }\n    }\n\n    open(content: HTMLElement): void {\n        if (this._window) {\n            throw new Error('instance of popout window is already open');\n        }\n\n        const url = `${this.options.url}`;\n\n        const features = Object.entries({\n            top: this.options.top,\n            left: this.options.left,\n            width: this.options.width,\n            height: this.options.height,\n        })\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n        const externalWindow = window.open(url, this.id, features);\n\n        if (!externalWindow) {\n            return;\n        }\n\n        const disposable = new CompositeDisposable();\n\n        this._window = { value: externalWindow, disposable };\n\n        const cleanUp = () => {\n            this._onDidClose.fire();\n            this._window = null;\n        };\n\n        // prevent any default content from loading\n        // externalWindow.document.body.replaceWith(document.createElement('div'));\n\n        disposable.addDisposables(\n            addDisposableWindowListener(window, 'beforeunload', () => {\n                cleanUp();\n                this.close();\n            })\n        );\n\n        externalWindow.addEventListener('load', () => {\n            const externalDocument = externalWindow.document;\n            externalDocument.title = document.title;\n\n            const div = document.createElement('div');\n            div.classList.add('dv-popout-window');\n            div.style.position = 'absolute';\n            div.style.width = '100%';\n            div.style.height = '100%';\n            div.style.top = '0px';\n            div.style.left = '0px';\n            div.classList.add(this.className);\n            div.appendChild(content);\n\n            externalDocument.body.replaceChildren(div);\n            externalDocument.body.classList.add(this.className);\n\n            addStyles(externalDocument, window.document.styleSheets);\n\n            externalWindow.addEventListener('beforeunload', () => {\n                // TODO: indicate external window is closing\n                cleanUp();\n            });\n        });\n    }\n}\n","import { CompositeDisposable } from '../lifecycle';\nimport { PopoutWindow } from '../popoutWindow';\nimport { Box } from '../types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\n\nexport class DockviewPopoutGroupPanel extends CompositeDisposable {\n    readonly window: PopoutWindow;\n\n    constructor(\n        readonly group: DockviewGroupPanel,\n        private readonly options: {\n            className: string;\n            popoutUrl: string;\n            box: Box;\n        }\n    ) {\n        super();\n\n        this.window = new PopoutWindow('test', options.className ?? '', {\n            url: this.options.popoutUrl,\n            left: this.options.box.left,\n            top: this.options.box.top,\n            width: this.options.box.width,\n            height: this.options.box.height,\n        });\n\n        group.model.location = 'popout';\n\n        this.addDisposables(\n            this.window,\n            {\n                dispose: () => {\n                    group.model.location = 'grid';\n                },\n            },\n            this.window.onDidClose(() => {\n                this.dispose();\n            })\n        );\n\n        this.window.open(group.element);\n    }\n}\n","export const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100 };\n","import { DragAndDropObserver } from './dnd/dnd';\nimport { Droptarget } from './dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from './dom';\nimport { CompositeDisposable, Disposable, IDisposable } from './lifecycle';\nimport { IDockviewPanel } from './dockview/dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class OverlayRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        { disposable: IDisposable; element: HTMLElement }\n    > = {};\n\n    get allIds(): string[] {\n        return Object.keys(this.map);\n    }\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables({\n            dispose: () => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                }\n            },\n        });\n    }\n\n    remove(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            this.map[panel.api.id].disposable.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    setReferenceContentContainer(\n        panel: IDockviewPanel,\n        referenceContainer: IRenderable\n    ): HTMLElement {\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                disposable: Disposable.NONE,\n                element,\n            };\n        }\n\n        this.map[panel.api.id]?.disposable.dispose();\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls, possible performance bottleneck?\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.location === 'floating'\n            );\n        };\n\n        const visibilityChanged = () => {\n            if (panel.api.isVisible) {\n                resize();\n            }\n\n            focusContainer.style.display = panel.api.isVisible ? '' : 'none';\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n            panel.api.onDidVisibilityChange((event) => {\n                /**\n                 * Control the visibility of the content, however even when not visible (display: none)\n                 * the content is still maintained within the DOM hence DOM specific attributes\n                 * such as scroll position are maintained when next made visible.\n                 */\n                visibilityChanged();\n            }),\n            panel.api.onDidDimensionsChange(() => {\n                if (!panel.api.isVisible) {\n                    return;\n                }\n\n                resize();\n            }),\n            {\n                dispose: () => {\n                    focusContainer.removeChild(panel.view.content.element);\n                    this.element.removeChild(focusContainer);\n                },\n            }\n        );\n\n        queueMicrotask(() => {\n            if (this.isDisposed) {\n                return;\n            }\n\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            visibilityChanged();\n        });\n\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable, Disposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { Box } from '../types';\nimport { DockviewPopoutGroupPanel } from './dockviewPopoutGroupPanel';\nimport {\n    DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n    DEFAULT_FLOATING_GROUP_POSITION,\n} from '../constants';\nimport {\n    DockviewPanelRenderer,\n    OverlayRenderContainer,\n} from '../overlayRenderContainer';\n\nfunction getTheme(element: HTMLElement): string | undefined {\n    function toClassList(element: HTMLElement) {\n        const list: string[] = [];\n\n        for (let i = 0; i < element.classList.length; i++) {\n            list.push(element.classList.item(i)!);\n        }\n\n        return list;\n    }\n\n    let theme: string | undefined = undefined;\n    let parent: HTMLElement | null = element;\n\n    while (parent !== null) {\n        theme = toClassList(parent).find((cls) =>\n            cls.startsWith('dockview-theme-')\n        );\n        if (typeof theme === 'string') {\n            break;\n        }\n        parent = parent.parentElement;\n    }\n\n    return theme;\n}\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: Box;\n}\n\nexport interface SerializedPopoutGroup {\n    data: GroupPanelViewState;\n    position: Box | null;\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n    popoutGroups?: SerializedPopoutGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly overlayRenderContainer: OverlayRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _floatingGroups: DockviewFloatingGroupPanel[] = [];\n    private readonly _popoutGroups: DockviewPopoutGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-overlay-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.overlayRenderContainer = new OverlayRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.overlayRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Disposable.from(() => {\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._floatingGroups]) {\n                    group.dispose();\n                }\n\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._popoutGroups]) {\n                    group.dispose();\n                }\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addPopoutGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        options?: {\n            skipRemoveGroup?: boolean;\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        let group: DockviewGroupPanel;\n        let box: Box | undefined = options?.position;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n\n            if (!box) {\n                box = this.element.getBoundingClientRect();\n            }\n        } else {\n            group = item;\n\n            if (!box) {\n                box = group.element.getBoundingClientRect();\n            }\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        const theme = getTheme(this.gridview.element);\n\n        const popoutWindow = new DockviewPopoutGroupPanel(group, {\n            className: theme ?? '',\n            popoutUrl: options?.popoutUrl ?? '/popout.html',\n            box: {\n                left: box.left,\n                top: box.top,\n                width: box.width,\n                height: box.height,\n            },\n        });\n\n        popoutWindow.addDisposables(\n            {\n                dispose: () => {\n                    remove(this._popoutGroups, popoutWindow);\n                },\n            },\n            popoutWindow.window.onDidClose(() => {\n                this.doAddGroup(group, [0]);\n            })\n        );\n\n        this._popoutGroups.push(popoutWindow);\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.location = 'floating';\n\n        const overlayLeft =\n            typeof coord?.x === 'number'\n                ? Math.max(coord.x, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.left;\n        const overlayTop =\n            typeof coord?.y === 'number'\n                ? Math.max(coord.y, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.top;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.location = 'grid';\n                    remove(this._floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this._floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const hasFloatingGroupOptionsChanged =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (hasFloatingGroupOptionsChanged) {\n            for (const group of this._floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this._floatingGroups) {\n            for (const floating of this._floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this._floatingGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.overlay.toJSON(),\n                };\n            }\n        );\n\n        const popoutGroups: SerializedPopoutGroup[] = this._popoutGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.window.dimensions(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        if (popoutGroups.length > 0) {\n            result.popoutGroups = popoutGroups;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            const serializedPopoutGroups = data.popoutGroups ?? [];\n\n            for (const serializedPopoutGroup of serializedPopoutGroups) {\n                const { data, position } = serializedPopoutGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addPopoutGroup(group, {\n                    skipRemoveGroup: true,\n                    position: position ?? undefined,\n                });\n            }\n\n            for (const floatingGroup of this._floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this._floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (\n                referenceGroup.api.location === 'floating' ||\n                target === 'center'\n            ) {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.overlayRenderContainer.remove(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => x.api.location === 'grid').length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        if (group.api.location === 'floating') {\n            const floatingGroup = this._floatingGroups.find(\n                (_) => _.group === group\n            );\n\n            if (floatingGroup) {\n                if (!options?.skipDispose) {\n                    floatingGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                remove(this._floatingGroups, floatingGroup);\n                floatingGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return floatingGroup.group;\n            }\n\n            throw new Error('failed to find floating group');\n        }\n\n        if (group.api.location === 'popout') {\n            const selectedGroup = this._popoutGroups.find(\n                (_) => _.group === group\n            );\n\n            if (selectedGroup) {\n                if (!options?.skipDispose) {\n                    selectedGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                selectedGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return selectedGroup.group;\n            }\n\n            throw new Error('failed to find popout group');\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                if (sourceGroup.api.location === 'grid') {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                switch (sourceGroup.api.location) {\n                    case 'grid':\n                        this.gridview.removeView(\n                            getGridLocation(sourceGroup.element)\n                        );\n                        break;\n                    case 'floating': {\n                        const selectedFloatingGroup = this._floatingGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedFloatingGroup) {\n                            throw new Error('failed to find floating group');\n                        }\n                        selectedFloatingGroup.dispose();\n                        break;\n                    }\n                    case 'popout': {\n                        const selectedPopoutGroup = this._popoutGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedPopoutGroup) {\n                            throw new Error('failed to find popout group');\n                        }\n                        selectedPopoutGroup.dispose();\n                    }\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    popoutUrl?: string;\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: {\n    id: string;\n    hideThemePicker?: boolean;\n}) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            {!props.hideThemePicker && <ThemePicker />}\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton\n                    id={sandboxId}\n                    hideThemePicker={props.hideThemePicker}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"features\":\"features_t9lD\",\"featureSvg\":\"featureSvg_GfXr\"};","import React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.module.css';\n\ntype FeatureItem = {\n    title: string;\n    Svg: React.ComponentType<React.ComponentProps<'svg'>>;\n    description: JSX.Element;\n};\n\nconst FeatureList: FeatureItem[] = [\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_grid_3.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Serializable Layouts\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Add and remove panels using the provided api or use the\n                        serialziation methods to persist layouts.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Customizable Theme\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Adjust a number of provided CSS Properties for a simple\n                        change or target specific classes for a more customized\n                        approach.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Choose Your Control\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Choose from a simple splitview, gridview, collapsable\n                        panes or a full docking solution. Combine multiple for\n                        complex layouts.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_grid_4.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Rich Feature Control\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Customize header features to add additional icons and\n                        more as well as custom tab rendering.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Floating Group Support\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Built-in support for floating groups with a supporting\n                        api for progmatic control.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">Drag And Drop</h3>\n                    <p className=\"feature-banner-content\">\n                        Drag and Drop tab to position your layout as well as\n                        interacting with external drag events.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_splash_2.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">Zero Dependencies</h3>\n                    <p className=\"feature-banner-content\">\n                        Zero dependencies, that's all.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Code Quality and Transparency\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        All of the code is run through Sonarcloud Code Analysis,\n                        which along with the source code and high test coverage\n                        can be viewed from the Github page.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        React or Vanilla TypeScript\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Exposes native support for both ReactJS components and\n                        Vanilla TypeScript.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n];\n\nfunction Feature({ title, Svg, description }: FeatureItem) {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                margin: 'auto',\n                justifyContent: 'center',\n            }}\n            className=\"dockview-feature\"\n        >\n            <Svg className={styles.featureSvg} role=\"img\" />\n            <div style={{ maxWidth: '400px', padding: '0px 20px' }}>\n                <h3>{title}</h3>\n                {description}\n            </div>\n        </div>\n    );\n}\n\nexport default function HomepageFeatures(): JSX.Element {\n    return (\n        <section className={styles.features}>\n            <div className=\"container\">\n                <div className=\"row\">\n                    {FeatureList.map((props, idx) => (\n                        <Feature key={idx} {...props} />\n                    ))}\n                </div>\n            </div>\n        </section>\n    );\n}\n","import * as React from 'react';\n\nexport const BrowserHeader = () => (\n    <div\n        style={{\n            height: '30px',\n            borderBottom: '1px solid #BABABA',\n            backgroundColor: '#DCDCDC',\n            borderTopLeftRadius: '15px',\n            borderTopRightRadius: '15px',\n            padding: '0px 15px',\n            display: 'flex',\n            alignItems: 'center',\n        }}\n    >\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#FD605E',\n                marginRight: 7,\n            }}\n        />\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#FBBC3F',\n                marginRight: 7,\n            }}\n        />\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#34C942',\n                marginRight: 7,\n            }}\n        />\n    </div>\n);\n","import {\n    DockviewDefaultTab,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelHeaderProps,\n    IDockviewPanelProps,\n    IDockviewHeaderActionsProps,\n} from 'dockview';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { v4 } from 'uuid';\nimport './app.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ height: '100%', overflow: 'auto', color: 'white' }}>\n                {''}\n            </div>\n        );\n    },\n};\n\nconst headerComponents = {\n    default: (props: IDockviewPanelHeaderProps) => {\n        const onContextMenu = (event: React.MouseEvent) => {\n            event.preventDefault();\n            alert('context menu');\n        };\n        return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n    },\n};\n\nconst Popover = (props: {\n    children: React.ReactNode;\n    position?: { x: number; y: number };\n    close: () => void;\n}) => {\n    const uuid = React.useMemo(() => v4(), []);\n\n    React.useEffect(() => {\n        const listener = (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                props.close();\n            }\n        };\n        const listener2 = (event: MouseEvent) => {\n            let target = event.target;\n\n            while (target) {\n                if (target instanceof HTMLElement) {\n                    if (target.classList.contains(uuid)) {\n                        return;\n                    } else {\n                        target = target.parentElement;\n                    }\n                } else {\n                    target = null;\n                }\n            }\n\n            props.close();\n        };\n        window.addEventListener('keypress', listener);\n        window.addEventListener('mousedown', listener2);\n\n        return () => {\n            window.removeEventListener('keypress', listener);\n            window.removeEventListener('mousedown', listener2);\n        };\n    }, [props.close, uuid]);\n\n    if (!props.position) {\n        return null;\n    }\n\n    return ReactDOM.createPortal(\n        <div\n            className={uuid}\n            style={{\n                position: 'absolute',\n                top: props.position.y,\n                left: props.position.x,\n                background: 'white',\n                border: '1px solid black',\n                zIndex: 99,\n                padding: '10px',\n            }}\n        >\n            {props.children}\n        </div>,\n        document.body\n    );\n};\n\nconst Icon = (props: {\n    icon: string;\n    onClick?: (event: React.MouseEvent) => void;\n}) => {\n    return (\n        <div className=\"action\" onClick={props.onClick}>\n            <span\n                style={{ fontSize: 'inherit' }}\n                className=\"material-symbols-outlined\"\n            >\n                {props.icon}\n            </span>\n        </div>\n    );\n};\n\nconst groupControlsComponents: Record<string, React.FC> = {\n    panel_1: () => {\n        return <Icon icon=\"file_download\" />;\n    },\n};\n\nconst RightControls = (props: IDockviewHeaderActionsProps) => {\n    const Component = React.useMemo(() => {\n        if (!props.isGroupActive || !props.activePanel) {\n            return null;\n        }\n\n        return groupControlsComponents[props.activePanel.id];\n    }, [props.isGroupActive, props.activePanel]);\n\n    const [icon, setIcon] = React.useState<string>(\n        props.containerApi.hasMaximizedGroup()\n            ? 'collapse_content'\n            : 'expand_content'\n    );\n\n    const [popoutIcon, setPopoutIcon] = React.useState<string>(\n        props.api.location === 'popout' ? 'close_fullscreen' : 'open_in_new'\n    );\n\n    React.useEffect(() => {\n        const disposable = props.containerApi.onDidMaxmizedGroupChange(() => {\n            setIcon(\n                props.containerApi.hasMaximizedGroup()\n                    ? 'collapse_content'\n                    : 'expand_content'\n            );\n        });\n\n        const disposable2 = props.api.onDidLocationChange(() => {\n            setPopoutIcon(\n                props.api.location === 'popout'\n                    ? 'close_fullscreen'\n                    : 'open_in_new'\n            );\n        });\n\n        return () => {\n            disposable.dispose();\n            disposable2.dispose();\n        };\n    }, [props.containerApi]);\n\n    const onClick = () => {\n        if (props.containerApi.hasMaximizedGroup()) {\n            props.containerApi.exitMaxmizedGroup();\n        } else {\n            props.activePanel?.api.maximize();\n        }\n    };\n\n    const onClick2 = () => {\n        if (props.api.location !== 'popout') {\n            props.containerApi.addPopoutGroup(props.group);\n        } else {\n            props.api.moveTo({ position: 'right' });\n        }\n    };\n\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            {props.isGroupActive && <Icon icon=\"star\" />}\n            {Component && <Component />}\n            <Icon icon={popoutIcon} onClick={onClick2} />\n            <Icon icon={icon} onClick={onClick} />\n        </div>\n    );\n};\n\nlet counter = 0;\n\nconst LeftControls = (props: IDockviewHeaderActionsProps) => {\n    const onClick = () => {\n        props.containerApi.addPanel({\n            id: `id_${Date.now().toString()}`,\n            component: 'default',\n            title: `Tab ${counter++}`,\n            position: {\n                referenceGroup: props.group,\n            },\n        });\n    };\n\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            <Icon onClick={onClick} icon=\"add\" />\n        </div>\n    );\n};\n\nconst PrefixHeaderControls = (props: IDockviewHeaderActionsProps) => {\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            <Icon icon=\"Menu\" />\n        </div>\n    );\n};\n\nconst DockviewDemo = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n            position: { referencePanel: 'panel_2', direction: 'below' },\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            title: 'Panel 5',\n            position: { referencePanel: 'panel_3', direction: 'below' },\n        });\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            title: 'Panel 6',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.getPanel('panel_1')!.api.setActive();\n\n        console.log(event.api.toJSON());\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            defaultTabComponent={headerComponents.default}\n            rightHeaderActionsComponent={RightControls}\n            leftHeaderActionsComponent={LeftControls}\n            prefixHeaderActionsComponent={PrefixHeaderControls}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default DockviewDemo;\n","import {\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst paneComponents = {\n    default: (props: IPaneviewPanelProps) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n    panes: (props: IGridviewPanelProps) => {\n        const onReady = (event: PaneviewReadyEvent) => {\n            event.api.addPanel({\n                id: 'pane_1',\n                component: 'default',\n                title: 'Pane 1',\n                isExpanded: false,\n            });\n\n            event.api.addPanel({\n                id: 'pane_2',\n                component: 'default',\n                title: 'Pane 2',\n                isExpanded: true,\n            });\n\n            event.api.addPanel({\n                id: 'pane_3',\n                component: 'default',\n                title: 'Pane 3',\n                isExpanded: true,\n            });\n\n            event.api.addPanel({\n                id: 'pane_4',\n                component: 'default',\n                title: 'Pane 4',\n                isExpanded: false,\n            });\n        };\n\n        return <PaneviewReact onReady={onReady} components={paneComponents} />;\n    },\n};\n\nconst DockviewDemo2 = (props: { theme?: string }) => {\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panes',\n            component: 'panes',\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            position: { referencePanel: 'panes', direction: 'right' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            position: { referencePanel: 'panel_1', direction: 'below' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            position: { referencePanel: 'panel_2', direction: 'below' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n    };\n\n    return (\n        <GridviewReact\n            onReady={onReady}\n            components={components}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nexport default DockviewDemo2;\n","import useBaseUrl from '@docusaurus/useBaseUrl';\nimport HomepageFeatures from '.';\nimport { BrowserHeader } from '../ui/browserHeader';\nimport { MultiFrameworkContainer } from '../ui/container';\nimport * as React from 'react';\nimport DockviewDemo from '@site/sandboxes/demo-dockview/src/app';\nimport DockviewDemo2 from '@site/sandboxes/dockview-app/src/app';\n\nexport const Introduction = () => {\n    return (\n        <>\n            <HomepageFeatures />\n            <div\n                id=\"live-demo\"\n                style={{\n                    height: '30px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '1.5em',\n                    fontWeight: 'bold',\n                }}\n            >\n                <img src={useBaseUrl('/img/dockview_logo.svg')} height={30} />\n                <span style={{ paddingLeft: '8px' }}>Dockview Live Demos</span>\n            </div>\n            <div style={{ padding: '20px' }}>\n                <BrowserHeader />\n                <MultiFrameworkContainer\n                    height={500}\n                    sandboxId=\"demo-dockview\"\n                    react={DockviewDemo}\n                />\n            </div>\n            <div style={{ padding: '20px' }}>\n                <BrowserHeader />\n                <MultiFrameworkContainer\n                    height={500}\n                    react={DockviewDemo2}\n                    sandboxId=\"dockview-app\"\n                />\n            </div>\n        </>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"heroBanner\":\"heroBanner_qdFl\",\"buttons\":\"buttons_AeoN\"};","import React from 'react';\nimport clsx from 'clsx';\nimport Layout from '@theme/Layout';\nimport Link from '@docusaurus/Link';\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport { Introduction } from '../components/HomepageFeatures/introduction';\nimport styles from './index.module.css';\nimport './index.scss';\n\nfunction HomepageHeader2() {\n    const { siteConfig } = useDocusaurusContext();\n    return (\n        <header className={clsx('hero hero--primary', styles.heroBanner)}>\n            <div className=\"container homepage\">\n                <img src={useBaseUrl('/img/dockview_logo.svg')} />\n                <h1 className=\"hero__title\">{siteConfig.title}</h1>\n                {/* <div className=\"badge-container\">\n                            <img src=\"https://badge.fury.io/js/dockview.svg\" />\n                            <img src=\"https://github.com/mathuo/dockview/workflows/CI/badge.svg\" />\n                            <img src=\"https://sonarcloud.io/api/project_badges/measure?project=mathuo_dockview&metric=coverage\" />\n                            <img src=\"https://sonarcloud.io/api/project_badges/measure?project=mathuo_dockview&metric=alert_status\" />\n                        </div> */}\n                <p className=\"hero__subtitle\">{siteConfig.tagline}</p>\n                <div className={styles.buttons}>\n                    <Link\n                        className=\"button button--secondary button--lg\"\n                        to={useBaseUrl('docs/')}\n                    >\n                        Get Started\n                    </Link>\n                    <Link\n                        className=\"button button--secondary button--lg\"\n                        to={'#live-demo'}\n                    >\n                        Live Demo\n                    </Link>\n                </div>\n            </div>\n        </header>\n    );\n}\n\nexport default function Home(): JSX.Element {\n    const { siteConfig } = useDocusaurusContext();\n    return (\n        <Layout\n            title={`${siteConfig.tagline}`}\n            description={`${siteConfig.description}`}\n        >\n            <HomepageHeader2 />\n\n            <main className=\"container\">\n                <Introduction />\n            </main>\n        </Layout>\n    );\n}\n","var _rect, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _rect10, _rect11, _rect12, _rect13, _rect14, _rect15, _rect16, _path18, _path19, _path20, _path21, _path22, _path23, _rect17, _rect18, _path24, _path25, _path26, _path27, _rect19, _rect20, _path28, _path29;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewGrid3 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 311.504,\n    height: 200,\n    rx: 5,\n    fill: \"#fff\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#A8A8A8\",\n    d: \"M0 11h156v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M156 11h156v91H156zM234 102h78v98h-78zM156 102h78v98h-78zM0 24h156v176H0z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M157 102h155v1H157zM157 11h-1v189h1zM234 103h-1v97h1v-97Z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h156v14H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M0 11h30v14H0zM31 11h30v14H31z\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M62 11h30v14H62z\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M30 11h1v14h-1zM61 11h1v14h-1zM92 11h1v14h-1z\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M157 11h155v14H157z\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M157 11h30v14h-30z\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M188 11h30v14h-30z\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M187 11h1v14h-1zM218 11h1v14h-1z\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M234 103h78v14h-78z\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M234 103h24v14h-24z\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M258 103h24v14h-24z\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M258 103h.503v14H258zM282 103h.503v14H282z\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 66,\n    y: 16,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 76,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 260,\n    y: 108,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 268,\n    y: 108,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 206,\n    y: 16,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 160,\n    y: 16,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 166,\n    y: 16,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 237,\n    y: 108,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 33,\n    y: 16,\n    width: 15,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 2,\n    y: 16,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 16,\n    width: 18,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#E1E1E1\",\n    fillOpacity: 0.25,\n    d: \"M297 11h15v189h-15z\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M90.5 18.5h48v13h-48z\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M140.344 22.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M139.5 23.5h4v2h-4z\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M97.33 23.09h.421l.989 2.416h.034l.989-2.415h.42V26h-.33v-2.21h-.028L98.916 26h-.318l-.91-2.21h-.028V26h-.33v-2.91Zm4.889 2.018v-1.29h.335V26h-.335v-.37h-.023a.713.713 0 0 1-.238.283.692.692 0 0 1-.41.115.727.727 0 0 1-.363-.09.623.623 0 0 1-.25-.272 1.03 1.03 0 0 1-.091-.462v-1.386h.335v1.364c0 .159.045.286.134.38.09.095.204.142.343.142a.571.571 0 0 0 .563-.596Zm1.284-2.017V26h-.335v-2.91h.335Zm1.563.727v.284h-1.13v-.284h1.13Zm-.801-.523h.335v2.08c0 .095.014.166.042.213a.212.212 0 0 0 .107.094.438.438 0 0 0 .141.023.598.598 0 0 0 .091-.006l.057-.012.068.302a.7.7 0 0 1-.528-.021.556.556 0 0 1-.225-.187.532.532 0 0 1-.088-.315v-2.17ZM105.57 26v-2.182h.336V26h-.336Zm.171-2.546a.238.238 0 0 1-.169-.066.216.216 0 0 1-.07-.16c0-.063.024-.117.07-.161a.238.238 0 0 1 .169-.067c.065 0 .121.022.168.067a.214.214 0 0 1 .071.16.214.214 0 0 1-.071.16.236.236 0 0 1-.168.067Zm.779 3.364v-3h.324v.347h.039c.025-.038.059-.086.103-.145a.596.596 0 0 1 .19-.16.683.683 0 0 1 .338-.07c.184 0 .346.046.486.138a.92.92 0 0 1 .328.39c.079.169.118.368.118.597 0 .23-.039.431-.118.6a.935.935 0 0 1-.327.393.852.852 0 0 1-.481.137.7.7 0 0 1-.337-.07.636.636 0 0 1-.195-.16c-.045-.06-.08-.11-.105-.15h-.028v1.153h-.335Zm.329-1.909c0 .165.024.31.073.436a.661.661 0 0 0 .211.294.55.55 0 0 0 .341.105.55.55 0 0 0 .351-.11.672.672 0 0 0 .213-.302c.048-.127.073-.268.073-.423 0-.153-.024-.292-.071-.415a.644.644 0 0 0-.212-.294.56.56 0 0 0-.354-.11.556.556 0 0 0-.343.105.627.627 0 0 0-.211.287 1.187 1.187 0 0 0-.071.427Zm2.443-1.818V26h-.335v-2.91h.335Zm1.529 2.954c-.21 0-.391-.046-.544-.139a.942.942 0 0 1-.351-.392 1.343 1.343 0 0 1-.122-.588c0-.223.041-.42.122-.59a.967.967 0 0 1 .344-.401.924.924 0 0 1 .517-.145c.114 0 .226.019.337.057.111.037.211.099.302.184a.884.884 0 0 1 .218.335c.054.14.081.311.081.515v.142h-1.682v-.29h1.341a.718.718 0 0 0-.074-.33.556.556 0 0 0-.523-.312.6.6 0 0 0-.346.1.65.65 0 0 0-.223.255.74.74 0 0 0-.079.338v.193c0 .165.029.305.086.42.057.113.137.2.24.26a.701.701 0 0 0 .356.087.728.728 0 0 0 .239-.037.511.511 0 0 0 .186-.113.526.526 0 0 0 .121-.19l.324.09a.734.734 0 0 1-.172.29.84.84 0 0 1-.299.193 1.104 1.104 0 0 1-.399.069Zm2.539.773v-3h.323v.347h.04a3.76 3.76 0 0 1 .102-.145.6.6 0 0 1 .191-.16.683.683 0 0 1 .338-.07c.184 0 .346.046.486.138a.92.92 0 0 1 .328.39c.078.169.118.368.118.597 0 .23-.04.431-.118.6a.935.935 0 0 1-.327.393.854.854 0 0 1-.481.137.697.697 0 0 1-.337-.07.636.636 0 0 1-.195-.16c-.045-.06-.08-.11-.105-.15h-.028v1.153h-.335Zm.329-1.909c0 .165.024.31.073.436a.653.653 0 0 0 .211.294.55.55 0 0 0 .341.105.55.55 0 0 0 .351-.11.672.672 0 0 0 .213-.302c.048-.127.072-.268.072-.423 0-.153-.023-.292-.071-.415a.642.642 0 0 0-.211-.294.56.56 0 0 0-.354-.11.561.561 0 0 0-.344.105.625.625 0 0 0-.21.287 1.187 1.187 0 0 0-.071.427Zm2.75 1.142a.883.883 0 0 1-.376-.078.643.643 0 0 1-.269-.229.647.647 0 0 1-.099-.363c0-.125.024-.227.074-.304a.522.522 0 0 1 .197-.185c.082-.044.173-.078.273-.1.1-.022.201-.04.302-.053.133-.017.24-.03.323-.039a.5.5 0 0 0 .182-.047c.038-.021.058-.06.058-.113v-.012a.444.444 0 0 0-.115-.326c-.076-.078-.191-.117-.345-.117a.605.605 0 0 0-.377.105.622.622 0 0 0-.192.225l-.318-.114a.764.764 0 0 1 .228-.31.843.843 0 0 1 .312-.156c.114-.03.225-.045.335-.045.07 0 .151.008.242.025.092.016.18.05.265.101a.59.59 0 0 1 .215.232.86.86 0 0 1 .085.415V26h-.335v-.296h-.017a.653.653 0 0 1-.325.29.82.82 0 0 1-.323.057Zm.051-.301a.66.66 0 0 0 .335-.078.537.537 0 0 0 .279-.462v-.307c-.014.018-.046.033-.094.047a1.55 1.55 0 0 1-.165.036 6.889 6.889 0 0 1-.321.042c-.087.012-.168.03-.244.056a.424.424 0 0 0-.182.112.288.288 0 0 0-.068.202.3.3 0 0 0 .129.264.581.581 0 0 0 .331.088Zm1.896-1.063V26h-.335v-2.182h.324v.341h.028c.051-.11.129-.2.233-.267a.726.726 0 0 1 .404-.102c.147 0 .277.03.387.09.111.06.197.151.259.273.061.122.092.275.092.46V26h-.335v-1.364c0-.171-.045-.305-.134-.4a.473.473 0 0 0-.366-.145.585.585 0 0 0-.287.07.497.497 0 0 0-.197.203.663.663 0 0 0-.073.323Zm2.92 1.358c-.211 0-.392-.046-.544-.139a.929.929 0 0 1-.351-.392 1.33 1.33 0 0 1-.122-.588c0-.223.04-.42.122-.59a.964.964 0 0 1 .343-.401.926.926 0 0 1 .517-.145c.114 0 .226.019.337.057a.835.835 0 0 1 .52.52c.054.139.081.31.081.514v.142h-1.682v-.29h1.341a.718.718 0 0 0-.074-.33.554.554 0 0 0-.523-.312.6.6 0 0 0-.346.1.65.65 0 0 0-.223.255.752.752 0 0 0-.078.338v.193c0 .165.028.305.085.42.058.113.138.2.24.26a.702.702 0 0 0 .357.087.722.722 0 0 0 .238-.037.511.511 0 0 0 .186-.113.513.513 0 0 0 .121-.19l.324.09a.711.711 0 0 1-.172.29.835.835 0 0 1-.298.193 1.112 1.112 0 0 1-.399.069Zm1.748-2.954V26h-.335v-2.91h.335Zm2.16 1.216-.302.085a.53.53 0 0 0-.083-.146.413.413 0 0 0-.148-.12.54.54 0 0 0-.24-.047.572.572 0 0 0-.334.093c-.088.06-.132.138-.132.231 0 .084.03.15.091.198.06.048.155.088.284.12l.324.08c.195.048.34.12.436.218a.507.507 0 0 1 .143.373.554.554 0 0 1-.108.335.713.713 0 0 1-.298.233 1.089 1.089 0 0 1-.446.085.978.978 0 0 1-.552-.144.639.639 0 0 1-.277-.424l.318-.08c.03.118.087.206.172.265a.575.575 0 0 0 .333.088.625.625 0 0 0 .373-.1c.092-.067.139-.147.139-.24a.254.254 0 0 0-.08-.191.505.505 0 0 0-.244-.117l-.364-.085c-.2-.047-.346-.12-.44-.22a.532.532 0 0 1-.139-.377.54.54 0 0 1 .103-.326.716.716 0 0 1 .286-.223c.121-.054.258-.081.412-.081.216 0 .385.047.508.142.124.095.213.22.265.375Zm1.788.239c0-.358.047-.688.14-.988.093-.3.227-.578.4-.83h.296a1.75 1.75 0 0 0-.192.346 4.068 4.068 0 0 0-.26.956 3.627 3.627 0 0 0 .028 1.201c.044.232.103.448.176.647.074.199.157.36.248.486h-.296a3.068 3.068 0 0 1-.4-.83 3.337 3.337 0 0 1-.14-.988Zm2.307 1.494c-.187 0-.354-.032-.501-.097a.857.857 0 0 1-.348-.268.719.719 0 0 1-.139-.402h.358c.007.093.04.174.096.243.057.067.132.119.223.156a.815.815 0 0 0 .306.055.796.796 0 0 0 .332-.065.536.536 0 0 0 .227-.182.455.455 0 0 0 .083-.27.507.507 0 0 0-.313-.476.903.903 0 0 0-.375-.07h-.233v-.312h.233c.116 0 .217-.02.304-.062a.474.474 0 0 0 .282-.443.488.488 0 0 0-.066-.258.446.446 0 0 0-.184-.17.602.602 0 0 0-.279-.061c-.1 0-.195.018-.284.055a.53.53 0 0 0-.216.158.412.412 0 0 0-.091.247h-.341a.696.696 0 0 1 .138-.4.868.868 0 0 1 .338-.27c.14-.065.294-.097.462-.097.18 0 .334.037.463.11a.748.748 0 0 1 .4.669.653.653 0 0 1-.477.66v.021c.184.03.327.109.431.235.103.125.154.28.154.464 0 .158-.043.3-.129.426a.88.88 0 0 1-.349.296 1.139 1.139 0 0 1-.505.108Zm2.286-1.494c0 .357-.047.687-.141.988-.092.3-.225.577-.399.83h-.295a1.8 1.8 0 0 0 .19-.347c.06-.136.112-.286.156-.449a4.123 4.123 0 0 0 .142-1.023c0-.225-.021-.454-.065-.686a3.876 3.876 0 0 0-.176-.646 2.031 2.031 0 0 0-.247-.486h.295c.174.253.307.53.399.831.094.3.141.63.141.988Z\",\n    fill: \"#fff\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M279.5 46.5h29v13h-29z\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 283,\n    y: 51,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 294,\n    y: 51,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M305.344 61.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M304.5 62.5h4v2h-4z\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#E1E1E1\",\n    fillOpacity: 0.25,\n    d: \"M157 153h76v47h-76z\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M180.5 163.5h29v13h-29z\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 184,\n    y: 168,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 195,\n    y: 168,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M194.344 176.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M193.5 177.5h4v2h-4z\"\n  })));\n};\nexport default SvgDockviewGrid3;","var _rect, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _path19, _rect10, _rect11, _rect12, _rect13, _rect14, _path20, _circle, _circle2, _circle3, _path21, _circle4, _circle5, _circle6, _path22, _rect15, _rect16, _path23, _circle7, _circle8, _circle9, _path24, _rect17, _path25, _g, _path26, _path27, _path28, _path29, _path30, _path31, _rect18, _rect19, _rect20, _rect21, _path32, _path33, _path34;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewGrid4 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 311.504,\n    height: 200,\n    rx: 5,\n    fill: \"#fff\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#A8A8A8\",\n    d: \"M0 11h156v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M188 11h124v91H188zM188 102h124v98H188zM0 24h187v176H0z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M188 102h124v1H188zM188 11h-1v189h1z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h187v14H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M0 11h35.962v14H0zM37.16 11h35.962v14H37.16z\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M74.32 11h35.962v14H74.32z\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M35.962 11h1.199v14h-1.199zM73.122 11h1.199v14h-1.199zM110.282 11h1.199v14h-1.199z\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M188 11h124v14H188z\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M188 11h30v14h-30z\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M219 11h30v14h-30z\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M218 11h1v14h-1zM249 11h1v14h-1z\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M188 103h124v14H188z\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M188 103h24v14h-24z\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M212 103h24v14h-24z\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M212 103h.503v14H212zM236 103h.503v14H236z\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M76 18a2 2 0 0 1 2-2h3a2 2 0 1 1 0 4h-3a2 2 0 0 1-2-2Z\",\n    fill: \"#fff\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 85,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 222,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 214,\n    y: 108,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 222,\n    y: 108,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 237,\n    y: 16,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 16,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 197,\n    y: 16,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 108,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39 18a2 2 0 0 1 2-2h11a2 2 0 1 1 0 4H41a2 2 0 0 1-2-2Z\",\n    fill: \"#777\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 2,\n    y: 16,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 16,\n    width: 18,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M173 11h14v14h-14z\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 176,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 176 18)\",\n    fill: \"#fff\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 184,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 184 18)\",\n    fill: \"#fff\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 180,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 180 18)\",\n    fill: \"#fff\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M298 11h14v14h-14z\"\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 301,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 301 18)\",\n    fill: \"#fff\"\n  })), _circle5 || (_circle5 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 309,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 309 18)\",\n    fill: \"#fff\"\n  })), _circle6 || (_circle6 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 305,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 305 18)\",\n    fill: \"#fff\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M111 11h14v14h-14z\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 117.333,\n    y: 14,\n    width: 1.333,\n    height: 8,\n    rx: 0.667,\n    fill: \"#fff\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 114,\n    y: 18.666,\n    width: 1.333,\n    height: 8,\n    rx: 0.667,\n    transform: \"rotate(-90 114 18.666)\",\n    fill: \"#fff\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M298 103h14v14h-14z\"\n  })), _circle7 || (_circle7 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 301,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 301 110)\",\n    fill: \"#fff\"\n  })), _circle8 || (_circle8 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 309,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 309 110)\",\n    fill: \"#fff\"\n  })), _circle9 || (_circle9 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 305,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 305 110)\",\n    fill: \"#fff\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M285 103h14v14h-14z\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 288.5,\n    y: 106.5,\n    width: 7,\n    height: 7,\n    rx: 1.5,\n    stroke: \"#fff\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#fff\",\n    d: \"M288 109h8v2h-8z\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.35\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M40 45h128.769v91H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M40 136h128.769v1H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M40 45h128.769v14H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M40 45h31.154v14H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M72.192 45h31.154v14H72.192z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M71.154 45h1.038v14h-1.038zM40 45h1v92h-1zM168 45h1v92h-1zM103.346 45h1.038v14h-1.038z\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 75.308,\n    y: 50,\n    width: 12.461,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 90.885,\n    y: 50,\n    width: 4.154,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 43.115,\n    y: 50,\n    width: 5.192,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 49.346,\n    y: 50,\n    width: 16.615,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M40 45h128.769v1H40z\"\n  }))), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M29 54h128.769v91H29z\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M29 145h128.769v1H29z\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M29 54h128.769v14H29z\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M29 54h31.154v14H29z\"\n  })), _path30 || (_path30 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M61.192 54h31.154v14H61.192z\"\n  })), _path31 || (_path31 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M60.154 54h1.038v14h-1.038zM29 54h1v92h-1zM157 54h1v92h-1zM92.346 54h1.038v14h-1.038z\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 64.308,\n    y: 59,\n    width: 12.461,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 79.885,\n    y: 59,\n    width: 4.154,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 32.115,\n    y: 59,\n    width: 5.192,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect21 || (_rect21 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 38.346,\n    y: 59,\n    width: 16.615,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _path32 || (_path32 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M29 54h128.769v1H29z\"\n  })), _path33 || (_path33 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M128.344 61.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path34 || (_path34 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M127.5 62.5h4v2h-4z\"\n  })));\n};\nexport default SvgDockviewGrid4;","var _path, _path2, _rect, _rect2, _rect3, _path3, _path4, _path5, _path6, _path7, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _rect10, _path8, _path9, _path10, _rect11, _rect12, _rect13, _rect14, _rect15, _rect16, _rect17, _rect18, _rect19, _rect20, _rect21, _rect22, _rect23;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewSplash2 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#D9D9D9\",\n    d: \"M0 11h312v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M0 11h166v189H0zM167 11h145v189H167z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M166 11h1v189h-1zM167 56h145v1H167zM167 112h145v1H167z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h166v10H0zM0 22h166v10H0zM0 94h166v10H0zM0 190h166v10H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M0 21h166v1H0z\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 14,\n    width: 21,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 34,\n    y: 14,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 25,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 19,\n    y: 25,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 97,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 29,\n    y: 97,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 193,\n    width: 14,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m5 29-3-3.392.538-.608L5 27.799l2.463-2.785.537.608L5 29ZM5 101l-3-3.392.538-.608L5 99.799l2.463-2.785.537.608L5 101ZM6 16l-3.392 3L2 18.462 4.799 16l-2.785-2.463.608-.537L6 16ZM6 195l-3.392 3-.608-.537L4.799 195l-2.785-2.462.608-.538L6 195Z\",\n    fill: \"#fff\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M212.674 111c.236 0 .394-.221.297-.416l-2.174-4.409c-.115-.233-.479-.233-.594 0l-2.174 4.409c-.097.195.061.416.297.416h.889a.327.327 0 0 0 .297-.175l.691-1.401c.115-.233.479-.233.594 0l.691 1.401a.327.327 0 0 0 .297.175h.889ZM208.326 114c-.236 0-.394.221-.297.416l2.174 4.409c.115.233.479.233.594 0l2.174-4.409c.097-.195-.061-.416-.297-.416h-.889a.327.327 0 0 0-.297.175l-.691 1.401c-.115.233-.479.233-.594 0l-.691-1.401a.327.327 0 0 0-.297-.175h-.889Z\",\n    fill: \"#fff\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    d: \"M210.5 116v-7\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 175,\n    y: 18,\n    width: 20,\n    height: 19,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 198,\n    y: 18,\n    width: 5,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 206,\n    y: 18,\n    width: 26,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 203,\n    y: 71,\n    width: 44,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 228,\n    y: 78,\n    width: 44,\n    height: 14,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 250,\n    y: 71,\n    width: 22,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 239,\n    y: 95,\n    width: 33,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 272,\n    y: 117,\n    width: 33,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 259,\n    y: 117,\n    width: 7,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 213,\n    y: 95,\n    width: 23,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect21 || (_rect21 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 203,\n    y: 95,\n    width: 8,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect22 || (_rect22 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 198,\n    y: 25,\n    width: 15,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect23 || (_rect23 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 215,\n    y: 25,\n    width: 18,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })));\n};\nexport default SvgDockviewSplash2;"],"names":["BrowserOnly","_ref","children","fallback","useIsBrowser","_jsx","_Fragment","TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","from","func","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","width","height","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","array","findIndex","t","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","contentSize","_contentSize","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","total","proportion","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","_onDidVisibilityChange","onDidVisibilityChange","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","wereAllChildrenHidden","areAllChildrenHidden","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","maximizedView","_maximizedNode","hasMaximizedView","maximizeView","getNode","exitMaximizedView","hideAllViewsBut","parent","exclude","_onDidMaxmizedNodeChange","showViewsInReverseOrder","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","_getViews","nodeCachedVisibleSize","path","n","l","onDidMaxmizedNodeChange","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","maximizeGroup","hasMaximizedGroup","exitMaxmizedGroup","exitMaximizedGroup","onDidMaxmizedGroupChange","addPopoutGroup","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","onDragOver","preventDefault","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","transform","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","DockviewDropTargets","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","Panel","show","display","hide","renderPanel","isActive","renderer","overlayRenderContainer","content","setReferenceContentContainer","focusTracker","openPanel","_width","_height","closePanel","defaultRenderer","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","model","setActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_location","groupPanel","_onDidLocationChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","disableResizing","_disableResizing","entry","currentElement","DocumentFragment","host","isInDocument","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","isMaximizedGroup","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","NOT_INITIALIZED_MESSAGE","DockviewGroupPanelApiImpl","_group","onDidLocationChange","moveTo","moveGroupOrPanel","maximize","isMaximized","exitMaximized","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","PopoutWindow","_onDidClose","onDidClose","_window","dimensions","screenX","screenY","innerWidth","innerHeight","open","url","features","entries","join","externalWindow","cleanUp","externalDocument","div","replaceChildren","styleSheetList","styleSheets","styleSheet","href","link","rel","head","cssTexts","cssRules","rule","cssText","err","createTextNode","addStyles","DockviewPopoutGroupPanel","popoutUrl","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DEFAULT_FLOATING_GROUP_POSITION","OverlayRenderContainer","allIds","referenceContainer","createFocusableElement","focusContainer","box2","visibilityChanged","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","_floatingGroups","_popoutGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","theme","toClassList","list","cls","startsWith","getTheme","popoutWindow","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","minimumHeightWithinViewport","querySelector","floatingGroupPanel","createGroupAtLocation","hasOrientationChanged","hasFloatingGroupOptionsChanged","floating","includePanel","doSetGroupAndPanelActive","collection","floats","popoutGroups","grid","floatingGroups","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","serializedPopoutGroups","serializedPopoutGroup","floatingGroup","hasActiveGroup","hasActivePanel","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","selectedGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","selectedFloatingGroup","selectedPopoutGroup","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","CodeSandboxButton","_jsxs","hideThemePicker","ThemePicker","alignItems","fontWeight","paddingRight","Spinner","Container","injectVanillaJS","sandboxId","ReactIcon","marginRight","src","useBaseUrl","JavascriptIcon","themes","setTheme","localStorage","getItem","setItem","dispatchEvent","StorageEvent","onChange","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","background","zIndex","justifyContent","react","margin","cursor","border","MultiFrameworkContainer","FeatureList","Svg","require","description","Feature","flexWrap","featureSvg","role","maxWidth","HomepageFeatures","idx","BrowserHeader","borderBottom","borderTopLeftRadius","borderTopRightRadius","default","onContextMenu","alert","Icon","icon","groupControlsComponents","panel_1","RightControls","setIcon","popoutIcon","setPopoutIcon","disposable2","onClick2","counter","LeftControls","PrefixHeaderControls","log","paneComponents","panes","Introduction","paddingLeft","DockviewDemo","DockviewDemo2","HomepageHeader2","siteConfig","useDocusaurusContext","clsx","heroBanner","tagline","buttons","Link","Home","Layout","_rect","_path","_path2","_path3","_path4","_path5","_path6","_path7","_path8","_path9","_path10","_path11","_path12","_path13","_path14","_path15","_path16","_path17","_rect2","_rect3","_rect4","_rect5","_rect6","_rect7","_rect8","_rect9","_rect10","_rect11","_rect12","_rect13","_rect14","_rect15","_rect16","_path18","_path19","_path20","_path21","_path22","_path23","_rect17","_rect18","_path24","_path25","_path26","_path27","_rect19","_rect20","_path28","_path29","_extends","bind","source","hasOwnProperty","apply","titleId","fill","xmlns","rx","fillOpacity","stroke","fillRule","clipRule","strokeDasharray","_circle","_circle2","_circle3","_circle4","_circle5","_circle6","_circle7","_circle8","_circle9","_g","_path30","_path31","_rect21","_path32","_path33","_path34","cx","cy","opacity","_rect22","_rect23"],"sourceRoot":""}