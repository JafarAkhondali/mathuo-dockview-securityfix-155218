{"version":3,"file":"assets/js/8812f712.311d7489.js","mappings":"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","sources":["webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./src/components/simpleSplitview2.tsx","webpack://dockview-docs/./versioned_docs/version-1.7.6/basics.mdx","webpack://dockview-docs/../../node_modules/@mdx-js/react/dist/esm.js"],"sourcesContent":["class TransferObject {\n    constructor() {\n        //\n    }\n}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private contentSize = 0;\n    private _proportions: number[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): number[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n\n                item.size = clamp(\n                    Math.round(this.proportions[i] * size),\n                    item.minimumSize,\n                    item.maximumSize\n                );\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this._proportions = this.viewItems.map(\n                (i) => i.size / this.contentSize\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this.contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any | undefined;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n            this._onDidChange.fire({});\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(...this.children.map((c) => c.minimumOrthogonalSize));\n    }\n\n    get maximumSize(): number {\n        return Math.min(...this.children.map((c) => c.maximumOrthogonalSize));\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n    setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = Event.any(\n            ...this.children.map((c) => c.onDidChange)\n        )((e) => {\n            /**\n             * indicate a change has occured to allows any re-rendering but don't bubble\n             * event because that was specific to this branch\n             */\n            this._onDidChange.fire({ size: e.orthogonalSize });\n        });\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    private _root: BranchNode | undefined;\n    public readonly element: HTMLElement;\n    private disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.target = e.target;\n                    this.callbacks.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n                    if (this.callbacks.onDragOver) {\n                        this.callbacks.onDragOver(e);\n                    }\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                if (this.target === e.target) {\n                    this.target = null;\n\n                    this.callbacks.onDragLeave(e);\n                }\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.target = null;\n                this.callbacks.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.callbacks.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.addDisposables(\n            this._onDrop,\n            new DragAndDropObserver(this.element, {\n                onDragEnter: () => undefined,\n                onDragOver: (e) => {\n                    if (this._acceptedTargetZonesSet.size === 0) {\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    const width = this.element.clientWidth;\n                    const height = this.element.clientHeight;\n\n                    if (width === 0 || height === 0) {\n                        return; // avoid div!0\n                    }\n\n                    const rect = (\n                        e.currentTarget as HTMLElement\n                    ).getBoundingClientRect();\n                    const x = e.clientX - rect.left;\n                    const y = e.clientY - rect.top;\n\n                    const quadrant = this.calculateQuadrant(\n                        this._acceptedTargetZonesSet,\n                        x,\n                        y,\n                        width,\n                        height\n                    );\n\n                    /**\n                     * If the event has already been used by another DropTarget instance\n                     * then don't show a second drop target, only one target should be\n                     * active at any one time\n                     */\n                    if (this.isAlreadyUsed(e) || quadrant === null) {\n                        // no drop target should be displayed\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    if (typeof this.options.canDisplayOverlay === 'boolean') {\n                        if (!this.options.canDisplayOverlay) {\n                            this.removeDropTarget();\n                            return;\n                        }\n                    } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    this.markAsUsed(e);\n\n                    if (!this.targetElement) {\n                        this.targetElement = document.createElement('div');\n                        this.targetElement.className = 'drop-target-dropzone';\n                        this.overlayElement = document.createElement('div');\n                        this.overlayElement.className = 'drop-target-selection';\n                        this._state = 'center';\n                        this.targetElement.appendChild(this.overlayElement);\n\n                        this.element.classList.add('drop-target');\n                        this.element.append(this.targetElement);\n                    }\n\n                    this.toggleClasses(quadrant, width, height);\n\n                    this.setState(quadrant);\n                },\n                onDragLeave: () => {\n                    this.removeDropTarget();\n                },\n                onDragEnd: () => {\n                    this.removeDropTarget();\n                },\n                onDrop: (e) => {\n                    e.preventDefault();\n\n                    const state = this._state;\n\n                    this.removeDropTarget();\n\n                    if (state) {\n                        // only stop the propagation of the event if we are dealing with it\n                        // which is only when the target has state\n                        e.stopPropagation();\n                        this._onDrop.fire({ position: state, nativeEvent: e });\n                    }\n                },\n            })\n        );\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nexport interface IContentContainer extends IDisposable {\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        // for hosted containers\n        // 1) register a drop target on the host\n        // 2) register window dragStart events to disable pointer events\n        // 3) register dragEnd events\n        // 4) register mouseMove events (if no buttons are present we take this as a dragEnd event)\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n        if (this.panel) {\n            if (this.panel.view?.content) {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n        this.panel = panel;\n\n        const disposable = new CompositeDisposable();\n\n        if (this.panel.view) {\n            const _onDidFocus = this.panel.view.content.onDidFocus;\n            const _onDidBlur = this.panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(this._element);\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this._element.appendChild(this.panel.view.content.element);\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel?.view?.content?.element) {\n            this._element.removeChild(this.panel.view.content.element);\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    params?: { [key: string]: any };\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.isFloating && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        !this.group.api.isFloating\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.isFloating && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Droptarget, Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _isFloating = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get isFloating(): boolean {\n        return this._isFloating;\n    }\n\n    set isFloating(value: boolean) {\n        this._isFloating = value;\n\n        this.dropTarget.setTargetZones(\n            value ? ['center'] : ['top', 'bottom', 'left', 'right', 'center']\n        );\n\n        toggleClass(this.container, 'dv-groupview-floating', value);\n\n        this.groupPanel.api._onDidFloatingStateChange.fire({\n            isFloating: this.isFloating,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer();\n\n        this.dropTarget = new Droptarget(this.contentContainer.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.locked === 'no-drop-target' ||\n                    (this.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (!data && event.shiftKey && !this.isFloating) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this._panels.length === 1 && data.groupId === this.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked || false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.dropTarget.dispose();\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(parentElement?: HTMLElement) {\n        super();\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (!document.body.contains(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize || width !== this.width || height !== this.height;\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any | undefined;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly isFloating: boolean;\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly isFloating: boolean;\n}\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidFloatingStateChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidFloatingStateChange.event;\n\n    get isFloating() {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n        return this._group.model.isFloating;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidFloatingStateChange);\n    }\n\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            undefined,\n            options.position ?? 'center'\n        );\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 100,\n                minimumWidth: 100,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\n/*\n * omit visibility modifiers since the visibility of a single group doesn't make sense\n * because it belongs to a groupview\n */\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    close(): void;\n    setTitle(title: string): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return !!this.group?.isActive;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: IDockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n\n    private _title: string | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        public readonly id: string,\n        accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel\n    ) {\n        super();\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params || {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: { new (id: string, component: string): T };\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components || {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly layout: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent || 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.layout,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.layout,\n            new DockviewApi(this.layout),\n            group,\n            view\n        );\n\n        panel.init({\n            title: title || panelId,\n            params: params || {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import { toHaveDescription } from '@testing-library/jest-dom/matchers';\nimport {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: {\n            height: number;\n            width: number;\n            left: number;\n            top: number;\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(\n        bounds: Partial<{\n            height: number;\n            width: number;\n            top: number;\n            left: number;\n        }> = {}\n    ): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): { top: number; left: number; height: number; width: number } {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport {\n    DockviewFloatingGroupPanel,\n    IDockviewFloatingGroupPanel,\n} from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\n\nconst DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: { height: number; width: number; left: number; top: number };\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly floatingGroups: IDockviewFloatingGroupPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    readonly floatingGroups: DockviewFloatingGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation || Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n        });\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n\n        this.addDisposables(\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId || undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.isFloating = true;\n\n        const overlayLeft =\n            typeof coord?.x === 'number' ? Math.max(coord.x, 0) : 100;\n        const overlayTop =\n            typeof coord?.y === 'number' ? Math.max(coord.y, 0) : 100;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.isFloating = false;\n                    remove(this.floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this.floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const hasFloatingGroupOptionsChanged =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (hasFloatingGroupOptionsChanged) {\n            for (const group of this.floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this.floatingGroups) {\n            for (const floating of this.floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this.floatingGroups.map(\n            (floatingGroup) => {\n                return {\n                    data: floatingGroup.group.toJSON() as GroupPanelViewState,\n                    position: floatingGroup.overlay.toJSON(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            for (const floatingGroup of this.floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this.floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n            } else if (referenceGroup.api.isFloating || target === 'center') {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => !x.api.isFloating).length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        this.doRemoveGroup(group, options);\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        const floatingGroup = this.floatingGroups.find(\n            (_) => _.group === group\n        );\n        if (floatingGroup) {\n            if (!options?.skipDispose) {\n                floatingGroup.group.dispose();\n                this._groups.delete(group.id);\n                // TODO: fire group removed event?\n            }\n            floatingGroup.dispose();\n\n            return floatingGroup.group;\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ||\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                const isFloating = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (!isFloating) {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ||\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                const floatingGroup = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (floatingGroup) {\n                    floatingGroup.dispose();\n                } else {\n                    this.gridview.removeView(\n                        getGridLocation(sourceGroup.element)\n                    );\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const isGroupAlreadyFocused = this._activeGroup === group;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (!isGroupAlreadyFocused && this._activeGroup?.activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent || this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view\n        );\n        panel.init({\n            title: options.title || options.id,\n            params: options?.params || {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { FrameworkFactory } from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: {\n            new (id: string, component: string): ITabRenderer;\n        };\n    };\n    components?: {\n        [componentName: string]: {\n            new (id: string, component: string): IContentRenderer;\n        };\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location || [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params || {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params || {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params || {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents || {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params || {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents || {},\n                            this.options.headerframeworkComponents || {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params || {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: any | React.ReactElement\n): element is React.ReactElement {\n    return element?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params || {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents || {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents || {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params || {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                orientation: props.orientation || Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params || {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation || Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import { SimpleSplitview } from './simpleSplitview';\nimport * as React from 'react';\n\nexport const SimpleSplitview2 = (props: { proportional?: boolean }) => {\n    const [value, setValue] = React.useState<number>(50);\n\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(Number(event.target.value));\n    };\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100px',\n                margin: '10px 0px',\n            }}\n        >\n            <div\n                style={{\n                    height: '25px',\n                    display: 'flex',\n                    alignItems: 'center',\n                }}\n            >\n                <input\n                    type={'range'}\n                    min={20}\n                    max={100}\n                    defaultValue={50}\n                    value={value}\n                    onChange={onChange}\n                />\n                <span style={{ padding: '0px 8px' }}>\n                    Slide to resize the splitview container\n                </span>\n            </div>\n            <div\n                style={{\n                    flexGrow: 1,\n                    display: 'grid',\n                    gridTemplateColumns: `${value}fr ${100 - value}fr`,\n                }}\n            >\n                <div\n                    style={{\n                        backgroundColor: 'rgb(30,30,30)',\n                        color: 'white',\n                        flexGrow: 1,\n                        border: '1px solid grey',\n                    }}\n                >\n                    <SimpleSplitview proportional={props.proportional} />\n                </div>\n                <div></div>\n            </div>\n        </div>\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tsidebar_position: 1,\n\tdescription: 'How to get started with Dockview'\n};\nexport const contentTitle = 'Basics';\nexport const metadata = {\n  \"unversionedId\": \"basics\",\n  \"id\": \"version-1.7.6/basics\",\n  \"title\": \"Basics\",\n  \"description\": \"How to get started with Dockview\",\n  \"source\": \"@site/versioned_docs/version-1.7.6/basics.mdx\",\n  \"sourceDirName\": \".\",\n  \"slug\": \"/basics\",\n  \"permalink\": \"/docs/1.7.6/basics\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.7.6/basics.mdx\",\n  \"tags\": [],\n  \"version\": \"1.7.6\",\n  \"sidebarPosition\": 1,\n  \"frontMatter\": {\n    \"sidebar_position\": 1,\n    \"description\": \"How to get started with Dockview\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Introduction\",\n    \"permalink\": \"/docs/1.7.6/\"\n  },\n  \"next\": {\n    \"title\": \"Theme\",\n    \"permalink\": \"/docs/1.7.6/theme\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleSplitview } from '@site/src/components/simpleSplitview';\nimport { SimpleSplitview2 } from '@site/src/components/simpleSplitview2';\nexport const toc = [{\n  value: 'Panels',\n  id: 'panels',\n  level: 2\n}, {\n  value: 'Adding a panel with parameters',\n  id: 'adding-a-panel-with-parameters',\n  level: 3\n}, {\n  value: 'API',\n  id: 'api',\n  level: 2\n}, {\n  value: 'Serialization',\n  id: 'serialization',\n  level: 3\n}, {\n  value: 'Auto resizing',\n  id: 'auto-resizing',\n  level: 2\n}, {\n  value: 'Events',\n  id: 'events',\n  level: 2\n}, {\n  value: 'Proportional layout',\n  id: 'proportional-layout',\n  level: 2\n}, {\n  value: 'Browser support',\n  id: 'browser-support',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basics\"\n    }}>{`Basics`}</h1>\n    <p>{`This section will take you through a number of concepts that can be applied to all dockview components.`}</p>\n    <h2 {...{\n      \"id\": \"panels\"\n    }}>{`Panels`}</h2>\n    <p>{`The below examples use `}<inlineCode parentName=\"p\">{`ReactSplitview`}</inlineCode>{` but the logic holds for `}<inlineCode parentName=\"p\">{`ReactPaneview`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ReactGridview`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ReactDockview`}</inlineCode>{` using their respective implementations and interfaces.\nAll components require you to provide an `}<inlineCode parentName=\"p\">{`onReady`}</inlineCode>{` prop which you can use to build and control your component.`}</p>\n    <h3 {...{\n      \"id\": \"adding-a-panel-with-parameters\"\n    }}>{`Adding a panel with parameters`}</h3>\n    <p>{`You can pass parameters to a panel through the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` object`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const onReady = (event: SplitviewReadyEvent) => {\n    event.api.addPanel({\n        id: 'panel_1',\n        component: 'myComponent',\n        params: {\n            title: 'My Title',\n        },\n    });\n};\n`}</code></pre>\n    <p>{`and you can access those properties through the `}<inlineCode parentName=\"p\">{`props.params`}</inlineCode>{` object. The TypeScript interface accepts an optional generic type `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` that corresponds to the params objects type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`There are two types of API you will interact with using `}<inlineCode parentName=\"p\">{`dockview`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`panel API`}</inlineCode>{` is accessible via `}<inlineCode parentName=\"li\">{`props.api`}</inlineCode>{` in user defined panels and via the `}<inlineCode parentName=\"li\">{`.api`}</inlineCode>{` variable found on panel instances. This API contains actions and variable related to the the individual panel.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`container API`}</inlineCode>{` is accessible via `}<inlineCode parentName=\"li\">{`event.api`}</inlineCode>{` in the `}<inlineCode parentName=\"li\">{`onReady`}</inlineCode>{` events and `}<inlineCode parentName=\"li\">{`props.containerApi`}</inlineCode>{` in user defined panels. This API contains actions and variable related to the component as a whole.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    React.useEffect(() => {\n        const disposable = props.api.onDidActiveChange((event) => {\n            console.log(\\`is panel active: \\${event.isActive}\\`);\n        });\n        return () => {\n            disposable.dispose(); // remember to dispose of any subscriptions\n        };\n    }, [props.api]);\n    const addAnotherPanel = React.useCallback(() => {\n        props.containerApi.addPanel({\n            id: 'another_id',\n            component: 'anotherComponent',\n        });\n    }, [props.containerApi]);\n    return (\n        <div>\n            <span>{\\`My first panel has the title: \\${props.params.title}\\`}</span>\n            <button onClick={addAnotherPanel}>Add Panel</button>\n        </div>\n    );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"serialization\"\n    }}>{`Serialization`}</h3>\n    <p>{`All components support `}<inlineCode parentName=\"p\">{`toJSON(): T`}</inlineCode>{` which returns a Typed object representation of the components state. This same Typed object can be used to deserialize a view using `}<inlineCode parentName=\"p\">{`fromJSON(object: T): void`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"auto-resizing\"\n    }}>{`Auto resizing`}</h2>\n    <p><inlineCode parentName=\"p\">{`SplitviewReact`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`GridviewReact`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` will all automatically resize to fill the size of their parent element.\nInternally this is achieved using a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"\n      }}>{`ResizeObserver`}</a>{` which some users may need to polyfill.\nYou can disable this by settings the `}<inlineCode parentName=\"p\">{`disableAutoResizing`}</inlineCode>{` prop to be `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <p>{`You can manually resize a component using the API method `}<inlineCode parentName=\"p\">{`layout(width: number, height: number): void`}</inlineCode>{`.\nAn advanced case may use this in conjunction with `}<inlineCode parentName=\"p\">{`disableAutoResizing=true`}</inlineCode>{` to allow a parent component to have ultimate control over the dimensions of the component.`}</p>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`Many API properties can be listened on using the `}<inlineCode parentName=\"p\">{`Event`}</inlineCode>{` pattern. For example `}<inlineCode parentName=\"p\">{`api.onDidFocusChange(() => {...})`}</inlineCode>{`.\nYou should dispose of any event listeners you create cleaning up any listeners you would have created.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`React.useEffect(() => {\n    const disposable = api.onDidFocusChange(() => {\n        // write some code\n    });\n    return () => {\n        disposable.dispose();\n    };\n}, []);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"proportional-layout\"\n    }}>{`Proportional layout`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`proportionalLayout`}</inlineCode>{` property indicates the expected behaviour of the component as it's container resizes, should all views resize equally or should just one view expand to fill the new space. `}<inlineCode parentName=\"p\">{`proportionalLayout`}</inlineCode>{` can be set as a property on `}<inlineCode parentName=\"p\">{`SplitviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`GridviewReact`}</inlineCode>{` components.\nAlthough not configurable on `}<inlineCode parentName=\"p\">{`DockviewReact`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`PaneviewReact`}</inlineCode>{` these both behave as if `}<inlineCode parentName=\"p\">{`proportionalLayout=true`}</inlineCode>{` was set for them.`}</p>\n    <SimpleSplitview2 proportional={false} mdxType=\"SimpleSplitview2\" />\n    <SimpleSplitview2 proportional={true} mdxType=\"SimpleSplitview2\" />\n    <h2 {...{\n      \"id\": \"browser-support\"\n    }}>{`Browser support`}</h2>\n    <p>{`dockview is intended to support all major browsers. Some users may require a polyfill for `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"\n      }}>{`ResizeObserver`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n","import React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/React.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/React.createElement(React.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/React.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return React.createElement.apply(null, createElementArgArray);\n  }\n\n  return React.createElement.apply(null, args);\n}\n\nexport { MDXContext, MDXProvider, createElement as mdx, useMDXComponents, withMDXComponents };\n"],"names":["TransferObject","constructor","PanelTransfer","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","children","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","from","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","contentSize","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","array","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","lowPriorityIndex","emptyDelta","sum","offset","left","top","VERTICAL","width","height","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","getNode","_getViews","nodeCachedVisibleSize","path","n","l","parent","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","preventDefault","onDragOver","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","getBoundingClientRect","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","transform","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","fallback","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","ContentContainer","_element","tabIndex","show","display","hide","openPanel","content","focusTracker","_width","_height","closePanel","DockviewDropTargets","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","accessor","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","locked","model","setActive","isActive","setContent","part","GroupDragHandler","shiftKey","isFloating","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","Panel","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","findIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_isFloating","dropTarget","groupPanel","_onDidFloatingStateChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","entry","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onDidVisibilityChange","onDidVisibilityChange","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","DockviewGroupPanelApiImpl","_group","onDidFloatingStateChange","moveTo","moveGroupOrPanel","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","setTitle","close","DockviewPanel","_title","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","floatingGroups","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","minimumHeightWithinViewport","querySelector","floatingGroupPanel","t","createGroupAtLocation","hasOrientationChanged","hasFloatingGroupOptionsChanged","floating","includePanel","collection","floats","floatingGroup","grid","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","err","hasActiveGroup","hasActivePanel","entries","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","isGroupAlreadyFocused","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","SimpleSplitview","proportional","SimpleSplitview2","setValue","flexDirection","margin","alignItems","defaultValue","onChange","gridTemplateColumns","border","frontMatter","sidebar_position","description","contentTitle","metadata","assets","toc","level","layoutProps","MDXLayout","MDXContent","_ref","mdx","_extends","mdxType","parentName","isMDXComponent","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","source","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","MDXContext","useMDXComponents","contextComponents","allComponents","MDXProvider","TYPE_PROP_NAME","DEFAULTS","inlineCode","wrapper","MDXCreateElement","propComponents","originalType","etc","concat","argsLength","createElementArgArray","newProps","hasOwnProperty"],"sourceRoot":""}