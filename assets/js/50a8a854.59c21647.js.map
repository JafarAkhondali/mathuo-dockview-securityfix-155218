{"version":3,"file":"assets/js/50a8a854.59c21647.js","mappings":"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","sources":["webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/popoutWindow.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPopoutGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/constants.ts","webpack://dockview-docs/../dockview-core/src/overlayRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./src/components/splitview/active.tsx","webpack://dockview-docs/./src/components/ui/reference/docRef.tsx","webpack://dockview-docs/./versioned_docs/version-1.9.1/components/splitview.mdx"],"sourcesContent":["class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n\n    export function from(func: () => void): IDisposable {\n        return {\n            dispose: () => {\n                func();\n            },\n        };\n    }\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function addStyles(document: Document, styleSheetList: StyleSheetList) {\n    const styleSheets = Array.from(styleSheetList);\n\n    for (const styleSheet of styleSheets) {\n        if (styleSheet.href) {\n            const link = document.createElement('link');\n            link.href = styleSheet.href;\n            link.type = styleSheet.type;\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n        }\n\n        let cssTexts: string[] = [];\n\n        try {\n            if (styleSheet.cssRules) {\n                cssTexts = Array.from(styleSheet.cssRules).map(\n                    (rule) => rule.cssText\n                );\n            }\n        } catch (err) {\n            // security errors (lack of permissions), ignore\n        }\n\n        for (const rule of cssTexts) {\n            const style = document.createElement('style');\n            style.appendChild(document.createTextNode(rule));\n            document.head.appendChild(style);\n        }\n    }\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n\n/**\n * Check whether an element is in the DOM (including the Shadow DOM)\n * @see https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\n */\nexport function isInDocument(element: Element): boolean {\n    let currentElement: Element | ParentNode = element;\n\n    while (currentElement?.parentNode) {\n        if (currentElement.parentNode === document) {\n            return true;\n        } else if (currentElement.parentNode instanceof DocumentFragment) {\n            // handle shadow DOMs\n            currentElement = (currentElement.parentNode as ShadowRoot).host;\n        } else {\n            currentElement = currentElement.parentNode;\n        }\n    }\n\n    return false;\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private _contentSize = 0;\n    private _proportions: (number | undefined)[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get contentSize(): number {\n        return this._contentSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): (number | undefined)[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            let total = 0;\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                } else {\n                    size -= item.size;\n                }\n            }\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(\n                        Math.round((proportion * size) / total),\n                        item.minimumSize,\n                        item.maximumSize\n                    );\n                }\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this._proportions = this.viewItems.map((i) =>\n                i.visible ? i.size / this._contentSize : undefined\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this._contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidVisibilityChange = new Emitter<boolean>();\n    readonly onDidVisibilityChange: Event<boolean> =\n        this._onDidVisibilityChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(\n                  ...this.children.map((c, index) =>\n                      this.splitview.isViewVisible(index)\n                          ? c.minimumOrthogonalSize\n                          : 0\n                  )\n              );\n    }\n\n    get maximumSize(): number {\n        return Math.min(\n            ...this.children.map((c, index) =>\n                this.splitview.isViewVisible(index)\n                    ? c.maximumOrthogonalSize\n                    : Number.POSITIVE_INFINITY\n            )\n        );\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this._onDidVisibilityChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n     setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        const wereAllChildrenHidden = this.splitview.contentSize === 0;\n        this.splitview.setViewVisible(index, visible);\n        const areAllChildrenHidden = this.splitview.contentSize === 0;\n\n        // If all children are hidden then the parent should hide the entire splitview\n        // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n        if (\n            (visible && wereAllChildrenHidden) ||\n            (!visible && areAllChildrenHidden)\n        ) {\n            this._onDidVisibilityChange.fire(visible);\n        }\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = new CompositeDisposable(\n            Event.any(...this.children.map((c) => c.onDidChange))((e) => {\n                /**\n                 * indicate a change has occured to allows any re-rendering but don't bubble\n                 * event because that was specific to this branch\n                 */\n                this._onDidChange.fire({ size: e.orthogonalSize });\n            }),\n            ...this.children.map((c, i) => {\n                if (c instanceof BranchNode) {\n                    return c.onDidVisibilityChange((visible) => {\n                        this.setChildVisible(i, visible);\n                    });\n                }\n                return Disposable.NONE;\n            })\n        );\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    readonly element: HTMLElement;\n\n    private _root: BranchNode | undefined;\n    private _maximizedNode: LeafNode | undefined = undefined;\n    private readonly disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidMaxmizedNodeChange = new Emitter<void>();\n    readonly onDidMaxmizedNodeChange = this._onDidMaxmizedNodeChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    maximizedView(): IGridView | undefined {\n        return this._maximizedNode?.view;\n    }\n\n    hasMaximizedView(): boolean {\n        return this._maximizedNode !== undefined;\n    }\n\n    maximizeView(view: IGridView): void {\n        const location = getGridLocation(view.element);\n        const [_, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            return;\n        }\n\n        if (this._maximizedNode === node) {\n            return;\n        }\n\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        function hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n            for (let i = 0; i < parent.children.length; i++) {\n                const child = parent.children[i];\n                if (child instanceof LeafNode) {\n                    if (child !== exclude) {\n                        parent.setChildVisible(i, false);\n                    }\n                } else {\n                    hideAllViewsBut(child, exclude);\n                }\n            }\n        }\n\n        hideAllViewsBut(this.root, node);\n        this._maximizedNode = node;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    exitMaximizedView(): void {\n        if (!this._maximizedNode) {\n            return;\n        }\n\n        function showViewsInReverseOrder(parent: BranchNode): void {\n            for (let index = parent.children.length - 1; index >= 0; index--) {\n                const child = parent.children[index];\n                if (child instanceof LeafNode) {\n                    parent.setChildVisible(index, true);\n                } else {\n                    showViewsInReverseOrder(child);\n                }\n            }\n        }\n\n        showViewsInReverseOrder(this.root);\n\n        this._maximizedNode = undefined;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    public serialize(): SerializedGridview<any> {\n        if (this.hasMaximizedView()) {\n            /**\n             * do not persist maximized view state but we must first exit any maximized views\n             * before serialization to ensure the correct dimensions are persisted\n             */\n            this.exitMaximizedView();\n        }\n\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this._onDidMaxmizedNodeChange.dispose();\n        this.root.dispose();\n        this._maximizedNode = undefined;\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize<T>(\n        json: SerializedGridview<T>,\n        deserializer: IViewDeserializer\n    ): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this._maximizedNode = undefined;\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\nimport { Box } from '../types';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    maximizeGroup(panel: IDockviewPanel): void {\n        this.component.maximizeGroup(panel.group);\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.component.hasMaximizedGroup();\n    }\n\n    exitMaxmizedGroup(): void {\n        this.component.exitMaximizedGroup();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.component.onDidMaxmizedGroupChange;\n    }\n\n    /**\n     * Add a popout group in a new Window\n     */\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        this.component.addPopoutGroup(item, options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport type MeasuredValue = { value: number; type: 'pixels' | 'percentage' };\n\nexport type DroptargetOverlayModel = {\n    size?: MeasuredValue;\n    activationSize?: MeasuredValue;\n};\n\nconst DEFAULT_ACTIVATION_SIZE: MeasuredValue = {\n    value: 20,\n    type: 'percentage',\n};\n\nconst DEFAULT_SIZE: MeasuredValue = {\n    value: 50,\n    type: 'percentage',\n};\n\nconst SMALL_WIDTH_BOUNDARY = 100;\nconst SMALL_HEIGHT_BOUNDARY = 100;\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: DroptargetOverlayModel;\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this._state = quadrant;\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    setOverlayModel(model: DroptargetOverlayModel): void {\n        this.options.overlayModel = model;\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance of DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < SMALL_WIDTH_BOUNDARY;\n        const isSmallY = height < SMALL_HEIGHT_BOUNDARY;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 1;\n\n        const sizeOptions = this.options.overlayModel?.size ?? DEFAULT_SIZE;\n\n        if (sizeOptions.type === 'percentage') {\n            size = clamp(sizeOptions.value, 0, 100) / 100;\n        } else {\n            if (rightClass || leftClass) {\n                size = clamp(0, sizeOptions.value, width) / width;\n            }\n            if (topClass || bottomClass) {\n                size = clamp(0, sizeOptions.value, height) / height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-small-vertical',\n            isSmallY\n        );\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-small-horizontal',\n            isSmallX\n        );\n        toggleClass(this.overlayElement, 'dv-drop-target-left', isLeft);\n        toggleClass(this.overlayElement, 'dv-drop-target-right', isRight);\n        toggleClass(this.overlayElement, 'dv-drop-target-top', isTop);\n        toggleClass(this.overlayElement, 'dv-drop-target-bottom', isBottom);\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-center',\n            quadrant === 'center'\n        );\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const activationSizeOptions =\n            this.options.overlayModel?.activationSize ??\n            DEFAULT_ACTIVATION_SIZE;\n\n        const isPercentage = activationSizeOptions.type === 'percentage';\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                activationSizeOptions.value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            activationSizeOptions.value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    renderer?: DockviewPanelRenderer;\n    params?: { [key: string]: any };\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { DockviewDropTargets } from '../../types';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel, options: { asActive: boolean }): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (\n                    !data &&\n                    event.shiftKey &&\n                    this.group.location !== 'floating'\n                ) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(\n        panel: IDockviewPanel,\n        options: { asActive: boolean } = { asActive: true }\n    ): void {\n        const doRender =\n            options.asActive ||\n            (this.panel && this.group.isPanelActive(this.panel));\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.overlayRenderContainer.detatch(panel);\n                if (this.panel) {\n                    if (doRender) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container = this.accessor.overlayRenderContainer.attach({\n                    panel,\n                    referenceContainer: this,\n                });\n                break;\n        }\n\n        if (doRender) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        this.renderPanel(panel);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.accessor.options.defaultRenderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.location === 'floating' && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        this.group.api.location !== 'floating'\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.location === 'floating' && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport type DockviewGroupLocation = 'grid' | 'floating' | 'popout';\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    // private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private _location: DockviewGroupLocation = 'grid';\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get location(): DockviewGroupLocation {\n        return this._location;\n    }\n\n    set location(value: DockviewGroupLocation) {\n        this._location = value;\n\n        toggleClass(this.container, 'dv-groupview-floating', false);\n        toggleClass(this.container, 'dv-groupview-popout', false);\n\n        switch (value) {\n            case 'grid':\n                this.contentContainer.dropTarget.setTargetZones([\n                    'top',\n                    'bottom',\n                    'left',\n                    'right',\n                    'center',\n                ]);\n                break;\n            case 'floating':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n                this.contentContainer.dropTarget.setTargetZones(\n                    value\n                        ? ['center']\n                        : ['top', 'bottom', 'left', 'right', 'center']\n                );\n\n                toggleClass(this.container, 'dv-groupview-floating', true);\n\n                break;\n            case 'popout':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n\n                toggleClass(this.container, 'dv-groupview-popout', true);\n\n                break;\n        }\n\n        this.groupPanel.api._onDidLocationChange.fire({\n            location: this.location,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel, { asActive: false });\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { isInDocument, watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement?: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!this._element.offsetParent) {\n                    /**\n                     * offsetParent === null is equivalent to display: none being set on the element or one\n                     * of it's parents. In the display: none case the size will become (0, 0) which we do\n                     * not want to propagate.\n                     *\n                     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n                     *\n                     * You could use checkVisibility() but at the time of writing it's not supported across\n                     * all Browsers\n                     *\n                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility\n                     */\n                    return;\n                }\n\n                if (!isInDocument(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n    maximizeGroup(panel: T): void;\n    isMaximizedGroup(panel: T): boolean;\n    exitMaximizedGroup(): void;\n    hasMaximizedGroup(): boolean;\n    readonly onDidMaxmizedGroupChange: Event<void>;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    maximizeGroup(panel: T): void {\n        this.gridview.maximizeView(panel);\n    }\n\n    isMaximizedGroup(panel: T): boolean {\n        return this.gridview.maximizedView() === panel;\n    }\n\n    exitMaximizedGroup(): void {\n        this.gridview.exitMaximizedView();\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.gridview.hasMaximizedView();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.gridview.onDidMaxmizedNodeChange;\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position, positionToDirection } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly location: DockviewGroupLocation;\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly location: DockviewGroupLocation;\n}\n\n// TODO find a better way to initialize and avoid needing null checks\nconst NOT_INITIALIZED_MESSAGE = 'DockviewGroupPanelApiImpl not initialized';\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidLocationChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidLocationChange.event;\n\n    get location(): DockviewGroupLocation {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        return this._group.model.location;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidLocationChange);\n    }\n\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        const group =\n            options.group ??\n            this.accessor.addGroup({\n                direction: positionToDirection(options.position ?? 'right'),\n            });\n\n        this.accessor.moveGroupOrPanel(\n            group,\n            this._group.id,\n            undefined,\n            options.group ? options.position ?? 'center' : 'center'\n        );\n    }\n\n    maximize(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.location !== 'grid') {\n            // only grid groups can be maximized\n            return;\n        }\n\n        this.accessor.maximizeGroup(this._group);\n    }\n\n    isMaximized(): boolean {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        return this.accessor.isMaximizedGroup(this._group);\n    }\n\n    exitMaximized(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.isMaximized()) {\n            this.accessor.exitMaximizedGroup();\n        }\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nconst MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH = 100;\nconst MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT = 100;\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT,\n                minimumWidth: MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { DockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        // omit properties that do not make sense here\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return this.group.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n\n    maximize(): void {\n        this.group.api.maximize();\n    }\n\n    isMaximized(): boolean {\n        return this.group.api.isMaximized();\n    }\n\n    exitMaximized(): void {\n        this.group.api.exitMaximized();\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { Box } from '../types';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: Box & {\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(bounds: Partial<Box> = {}): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): Box {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import { addStyles } from './dom';\nimport { Emitter, addDisposableWindowListener } from './events';\nimport { CompositeDisposable, IDisposable } from './lifecycle';\nimport { Box } from './types';\n\nexport type PopoutWindowOptions = {\n    url: string;\n} & Box;\n\nexport class PopoutWindow extends CompositeDisposable {\n    private readonly _onDidClose = new Emitter<void>();\n    readonly onDidClose = this._onDidClose.event;\n\n    private _window: { value: Window; disposable: IDisposable } | null = null;\n\n    constructor(\n        private readonly id: string,\n        private readonly className: string,\n        private readonly options: PopoutWindowOptions\n    ) {\n        super();\n\n        this.addDisposables(this._onDidClose, {\n            dispose: () => {\n                this.close();\n            },\n        });\n    }\n\n    dimensions(): Box | null {\n        if (!this._window) {\n            return null;\n        }\n\n        const left = this._window.value.screenX;\n        const top = this._window.value.screenY;\n        const width = this._window.value.innerWidth;\n        const height = this._window.value.innerHeight;\n\n        return { top, left, width, height };\n    }\n\n    close(): void {\n        if (this._window) {\n            this._window.disposable.dispose();\n            this._window.value.close();\n            this._window = null;\n        }\n    }\n\n    open(content: HTMLElement): void {\n        if (this._window) {\n            throw new Error('instance of popout window is already open');\n        }\n\n        const url = `${this.options.url}`;\n\n        const features = Object.entries({\n            top: this.options.top,\n            left: this.options.left,\n            width: this.options.width,\n            height: this.options.height,\n        })\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n        const externalWindow = window.open(url, this.id, features);\n\n        if (!externalWindow) {\n            return;\n        }\n\n        const disposable = new CompositeDisposable();\n\n        this._window = { value: externalWindow, disposable };\n\n        const cleanUp = () => {\n            this._onDidClose.fire();\n            this._window = null;\n        };\n\n        // prevent any default content from loading\n        // externalWindow.document.body.replaceWith(document.createElement('div'));\n\n        disposable.addDisposables(\n            addDisposableWindowListener(window, 'beforeunload', () => {\n                cleanUp();\n                this.close();\n            })\n        );\n\n        externalWindow.addEventListener('load', () => {\n            const externalDocument = externalWindow.document;\n            externalDocument.title = document.title;\n\n            const div = document.createElement('div');\n            div.classList.add('dv-popout-window');\n            div.style.position = 'absolute';\n            div.style.width = '100%';\n            div.style.height = '100%';\n            div.style.top = '0px';\n            div.style.left = '0px';\n            div.classList.add(this.className);\n            div.appendChild(content);\n\n            externalDocument.body.replaceChildren(div);\n            externalDocument.body.classList.add(this.className);\n\n            addStyles(externalDocument, window.document.styleSheets);\n\n            externalWindow.addEventListener('beforeunload', () => {\n                // TODO: indicate external window is closing\n                cleanUp();\n            });\n        });\n    }\n}\n","import { CompositeDisposable } from '../lifecycle';\nimport { PopoutWindow } from '../popoutWindow';\nimport { Box } from '../types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\n\nexport class DockviewPopoutGroupPanel extends CompositeDisposable {\n    readonly window: PopoutWindow;\n\n    constructor(\n        readonly id: string,\n        readonly group: DockviewGroupPanel,\n        private readonly options: {\n            className: string;\n            popoutUrl: string;\n            box: Box;\n        }\n    ) {\n        super();\n\n        this.window = new PopoutWindow(id, options.className ?? '', {\n            url: this.options.popoutUrl,\n            left: this.options.box.left,\n            top: this.options.box.top,\n            width: this.options.box.width,\n            height: this.options.box.height,\n        });\n\n        group.model.location = 'popout';\n\n        this.addDisposables(\n            this.window,\n            {\n                dispose: () => {\n                    group.model.location = 'grid';\n                },\n            },\n            this.window.onDidClose(() => {\n                this.dispose();\n            })\n        );\n\n        this.window.open(group.element);\n    }\n}\n","export const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100 };\n","import { DragAndDropObserver } from './dnd/dnd';\nimport { Droptarget } from './dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from './dom';\nimport { CompositeDisposable, Disposable, IDisposable } from './lifecycle';\nimport { IDockviewPanel } from './dockview/dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class OverlayRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        {\n            panel: IDockviewPanel;\n            disposable: IDisposable;\n            destroy: IDisposable;\n            element: HTMLElement;\n        }\n    > = {};\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            Disposable.from(() => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                    value.destroy.dispose();\n                }\n            })\n        );\n    }\n\n    detatch(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            const { disposable, destroy } = this.map[panel.api.id];\n            disposable.dispose();\n            destroy.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    attach(options: {\n        panel: IDockviewPanel;\n        referenceContainer: IRenderable;\n    }): HTMLElement {\n        const { panel, referenceContainer } = options;\n\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                panel,\n                disposable: Disposable.NONE,\n                destroy: Disposable.NONE,\n\n                element,\n            };\n        }\n\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls, possible performance bottleneck?\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.location === 'floating'\n            );\n        };\n\n        const visibilityChanged = () => {\n            if (panel.api.isVisible) {\n                resize();\n            }\n\n            focusContainer.style.display = panel.api.isVisible ? '' : 'none';\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             *\n             * the dnd observer does not need to be conditional on whether the panel is visible since\n             * non-visible panels are 'display: none' and in such case the dnd observer will not fire.\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n\n            panel.api.onDidVisibilityChange((event) => {\n                /**\n                 * Control the visibility of the content, however even when not visible (display: none)\n                 * the content is still maintained within the DOM hence DOM specific attributes\n                 * such as scroll position are maintained when next made visible.\n                 */\n                visibilityChanged();\n            }),\n            panel.api.onDidDimensionsChange(() => {\n                if (!panel.api.isVisible) {\n                    return;\n                }\n\n                resize();\n            })\n        );\n\n        this.map[panel.api.id].destroy = Disposable.from(() => {\n            focusContainer.removeChild(panel.view.content.element);\n            this.element.removeChild(focusContainer);\n        });\n\n        queueMicrotask(() => {\n            if (this.isDisposed) {\n                return;\n            }\n\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            visibilityChanged();\n        });\n\n        // dispose of logic asoccciated with previous reference-container\n        this.map[panel.api.id].disposable.dispose();\n        // and reset the disposable to the active reference-container\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport {\n    directionToPosition,\n    Droptarget,\n    DroptargetOverlayModel,\n    Position,\n} from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable, Disposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { Box } from '../types';\nimport { DockviewPopoutGroupPanel } from './dockviewPopoutGroupPanel';\nimport {\n    DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n    DEFAULT_FLOATING_GROUP_POSITION,\n} from '../constants';\nimport {\n    DockviewPanelRenderer,\n    OverlayRenderContainer,\n} from '../overlayRenderContainer';\n\nconst DEFAULT_ROOT_OVERLAY_MODEL: DroptargetOverlayModel = {\n    activationSize: { type: 'pixels', value: 10 },\n    size: { type: 'pixels', value: 20 },\n};\n\nfunction getTheme(element: HTMLElement): string | undefined {\n    function toClassList(element: HTMLElement) {\n        const list: string[] = [];\n\n        for (let i = 0; i < element.classList.length; i++) {\n            list.push(element.classList.item(i)!);\n        }\n\n        return list;\n    }\n\n    let theme: string | undefined = undefined;\n    let parent: HTMLElement | null = element;\n\n    while (parent !== null) {\n        theme = toClassList(parent).find((cls) =>\n            cls.startsWith('dockview-theme-')\n        );\n        if (typeof theme === 'string') {\n            break;\n        }\n        parent = parent.parentElement;\n    }\n\n    return theme;\n}\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: Box;\n}\n\nexport interface SerializedPopoutGroup {\n    data: GroupPanelViewState;\n    position: Box | null;\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n    popoutGroups?: SerializedPopoutGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n    | 'rootOverlayModel'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly overlayRenderContainer: OverlayRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _floatingGroups: DockviewFloatingGroupPanel[] = [];\n    private readonly _popoutGroups: DockviewPopoutGroupPanel[] = [];\n    private readonly _rootDropTarget: Droptarget;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-overlay-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.overlayRenderContainer = new OverlayRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.overlayRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Disposable.from(() => {\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._floatingGroups]) {\n                    group.dispose();\n                }\n\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._popoutGroups]) {\n                    group.dispose();\n                }\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        this._rootDropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel:\n                this.options.rootOverlayModel ?? DEFAULT_ROOT_OVERLAY_MODEL,\n        });\n\n        this.addDisposables(\n            this._rootDropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            this._rootDropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addPopoutGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        options?: {\n            skipRemoveGroup?: boolean;\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        let group: DockviewGroupPanel;\n        let box: Box | undefined = options?.position;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n\n            if (!box) {\n                box = this.element.getBoundingClientRect();\n            }\n        } else {\n            group = item;\n\n            if (!box) {\n                box = group.element.getBoundingClientRect();\n            }\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        const theme = getTheme(this.gridview.element);\n\n        const popoutWindow = new DockviewPopoutGroupPanel(\n            `${this.id}-${group.id}`, // globally unique within dockview\n            group,\n            {\n                className: theme ?? '',\n                popoutUrl: options?.popoutUrl ?? '/popout.html',\n                box: {\n                    left: window.screenX + box.left,\n                    top: window.screenY + box.top,\n                    width: box.width,\n                    height: box.height,\n                },\n            }\n        );\n\n        popoutWindow.addDisposables(\n            {\n                dispose: () => {\n                    remove(this._popoutGroups, popoutWindow);\n                    this.updateWatermark();\n                },\n            },\n            popoutWindow.window.onDidClose(() => {\n                this.doAddGroup(group, [0]);\n            })\n        );\n\n        this._popoutGroups.push(popoutWindow);\n        this.updateWatermark();\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.location = 'floating';\n\n        const overlayLeft =\n            typeof coord?.x === 'number'\n                ? Math.max(coord.x, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.left;\n        const overlayTop =\n            typeof coord?.y === 'number'\n                ? Math.max(coord.y, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.top;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.location = 'grid';\n                    remove(this._floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this._floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const changed_orientation =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const changed_floatingGroupBounds =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        const changed_rootOverlayOptions =\n            options.rootOverlayModel !== undefined &&\n            options.rootOverlayModel !== this.options.rootOverlayModel;\n\n        this._options = { ...this.options, ...options };\n\n        if (changed_orientation) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (changed_floatingGroupBounds) {\n            for (const group of this._floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        if (changed_rootOverlayOptions) {\n            this._rootDropTarget.setOverlayModel(options.rootOverlayModel!);\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this._floatingGroups) {\n            for (const floating of this._floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this._floatingGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.overlay.toJSON(),\n                };\n            }\n        );\n\n        const popoutGroups: SerializedPopoutGroup[] = this._popoutGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.window.dimensions(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        if (popoutGroups.length > 0) {\n            result.popoutGroups = popoutGroups;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            const serializedPopoutGroups = data.popoutGroups ?? [];\n\n            for (const serializedPopoutGroup of serializedPopoutGroups) {\n                const { data, position } = serializedPopoutGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addPopoutGroup(group, {\n                    skipRemoveGroup: true,\n                    position: position ?? undefined,\n                });\n            }\n\n            for (const floatingGroup of this._floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this._floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (\n                referenceGroup.api.location === 'floating' ||\n                target === 'center'\n            ) {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.overlayRenderContainer.detatch(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => x.api.location === 'grid').length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        if (group.api.location === 'floating') {\n            const floatingGroup = this._floatingGroups.find(\n                (_) => _.group === group\n            );\n\n            if (floatingGroup) {\n                if (!options?.skipDispose) {\n                    floatingGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                remove(this._floatingGroups, floatingGroup);\n                floatingGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return floatingGroup.group;\n            }\n\n            throw new Error('failed to find floating group');\n        }\n\n        if (group.api.location === 'popout') {\n            const selectedGroup = this._popoutGroups.find(\n                (_) => _.group === group\n            );\n\n            if (selectedGroup) {\n                if (!options?.skipDispose) {\n                    selectedGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                selectedGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return selectedGroup.group;\n            }\n\n            throw new Error('failed to find popout group');\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                if (sourceGroup.api.location === 'grid') {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                switch (sourceGroup.api.location) {\n                    case 'grid':\n                        this.gridview.removeView(\n                            getGridLocation(sourceGroup.element)\n                        );\n                        break;\n                    case 'floating': {\n                        const selectedFloatingGroup = this._floatingGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedFloatingGroup) {\n                            throw new Error('failed to find floating group');\n                        }\n                        selectedFloatingGroup.dispose();\n                        break;\n                    }\n                    case 'popout': {\n                        const selectedPopoutGroup = this._popoutGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedPopoutGroup) {\n                            throw new Error('failed to find popout group');\n                        }\n                        selectedPopoutGroup.dispose();\n                    }\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { DroptargetOverlayModel, Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    popoutUrl?: string;\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n    rootOverlayModel?: DroptargetOverlayModel;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n    DroptargetOverlayModel,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n    rootOverlayModel?: DroptargetOverlayModel;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n                rootOverlayModel: props.rootOverlayModel,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                rootOverlayModel: props.rootOverlayModel,\n            });\n        }, [props.rootOverlayModel]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    ISplitviewPanel,\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        const [active, setActive] = React.useState<boolean>(props.api.isActive);\n        const [visible, setVisible] = React.useState<boolean>(\n            props.api.isVisible\n        );\n        const [focused, setFocused] = React.useState<boolean>(\n            props.api.isFocused\n        );\n        const [dimensions, setDimensions] = React.useState<{\n            height: number;\n            width: number;\n        }>({\n            height: props.api.height,\n            width: props.api.width,\n        });\n\n        React.useEffect(() => {\n            const disposable1 = props.api.onDidActiveChange((event) =>\n                setActive(event.isActive)\n            );\n            const disposable2 = props.api.onDidVisibilityChange((event) =>\n                setVisible(event.isVisible)\n            );\n            const disposable3 = props.api.onDidFocusChange((event) =>\n                setFocused(event.isFocused)\n            );\n            const disposable4 = props.api.onDidDimensionsChange((event) => {\n                setDimensions({ height: event.height, width: event.width });\n            });\n\n            return () => {\n                disposable1.dispose();\n                disposable2.dispose();\n                disposable3.dispose();\n                disposable4.dispose();\n            };\n        }, []);\n\n        return (\n            <div\n                style={{\n                    padding: '20px',\n                    display: 'grid',\n                    gridTemplateColumns: '100px 100px',\n                    lineHeight: '20px',\n                    gridTemplateRows: 'repeat(6, 20px)',\n                }}\n            >\n                <span>{'Panel ID: '}</span>\n                <span>{props.api.id}</span>\n                <span>{'Height: '}</span>\n                <span>{`${dimensions.height}px`}</span>\n                <span>{'Width: '}</span>\n                <span>{`${dimensions.width}px`}</span>\n                <span>{'Focused: '}</span>\n                <span style={{ color: focused ? 'green' : 'red' }}>{`${\n                    focused ? 'True' : 'False'\n                }`}</span>\n\n                <span>{'Active: '}</span>\n                <span style={{ color: active ? 'green' : 'red' }}>{`${\n                    active ? 'True' : 'False'\n                }`}</span>\n\n                <span>{'Visible: '}</span>\n                <span style={{ color: visible ? 'green' : 'red' }}>{`${\n                    visible ? 'True' : 'False'\n                }`}</span>\n            </div>\n        );\n    },\n};\n\nexport const SplitviewExample1 = (props: { proportional?: boolean }) => {\n    const [panels, setPanels] = React.useState<ISplitviewPanel[]>([]);\n\n    const onReady = React.useCallback((event: SplitviewReadyEvent) => {\n        event.api.onDidAddView((panel) => setPanels(event.api.panels));\n        event.api.onDidRemoveView((panel) => setPanels(event.api.panels));\n\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    }, []);\n\n    return (\n        <>\n            <div\n                style={{\n                    height: '150px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                }}\n            >\n                <SplitviewReact\n                    components={components}\n                    proportionalLayout={props.proportional}\n                    onReady={onReady}\n                    orientation={Orientation.HORIZONTAL}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n            <div style={{ height: '20px', display: 'flex' }}>\n                {panels.map((panel) => {\n                    return (\n                        <div style={{ padding: '0px 20px' }}>\n                            <div>{panel.id}</div>\n                            <div>\n                                <button\n                                    onClick={() =>\n                                        panel.api.setVisible(\n                                            !panel.api.isVisible\n                                        )\n                                    }\n                                >\n                                    Toggle Visiblity\n                                </button>\n                                <button onClick={() => panel.api.setActive()}>\n                                    Set Active\n                                </button>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </>\n    );\n};\n","import * as React from 'react';\nimport CodeBlock from '@theme/CodeBlock';\nimport './docRef.scss';\n\nexport interface DocRefProps {\n    declaration: string;\n}\n\nimport docsJson from '../../../generated/api.output.json';\n\ntype DocsContent = { kind: string; text: string; tag?: string };\ntype DocsTag = { tag: string; content: DocsContent[] };\ntype DocsComment = {\n    summary?: DocsContent[];\n    blockTags?: DocsTag[];\n};\ntype DocsJson = {\n    [index: string]: Array<{\n        name: string;\n        code: string;\n        comment?: DocsComment;\n        kind: 'accessor' | 'property' | 'method';\n    }>;\n};\n\nexport const Text = (props: { content: DocsContent[] }) => {\n    return (\n        <div className=\"doc-text\">\n            {props.content.map((piece, i) => {\n                switch (piece.kind) {\n                    case 'text': {\n                        return <span key={i}>{piece.text}</span>;\n                    }\n                    case 'code':\n                        return (\n                            <code key={i}>\n                                {piece.text.substring(1, piece.text.length - 1)}\n                            </code>\n                        );\n                    default:\n                        throw new Error(`unhandled piece ${piece.kind}`);\n                }\n            })}\n        </div>\n    );\n};\n\nexport const Tags = (props: { tags: DocsTag[] }) => {\n    return (\n        <div>\n            {props.tags.map((tag, i) => {\n                return (\n                    <div key={i}>\n                        <div>{tag.tag}</div>\n                        <Text content={tag.content} />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport const Summary = (props: { summary: DocsComment }) => {\n    return (\n        <div>\n            <Text content={props.summary.summary ?? []} />\n            {/* <Tags tags={props.summary.blockTags ?? []} /> */}\n        </div>\n    );\n};\n\nexport const Markdown = (props: { children: string }) => {\n    return <span>{props.children}</span>;\n};\n\nexport const DocRef = (props: DocRefProps) => {\n    const docs = React.useMemo(\n        () => (docsJson as DocsJson)[props.declaration],\n        [props.declaration]\n    );\n\n    if (!docs) {\n        return null;\n    }\n\n    return (\n        <div>\n            <table className=\"doc-ref-table\">\n                <tbody>\n                    {docs.map((doc) => {\n                        return (\n                            <tr>\n                                <th\n                                    style={{\n                                        width: '30%',\n                                        display: 'flex',\n                                    }}\n                                >\n                                    <div\n                                        style={{\n                                            // width: '30%',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            alignItems: 'start',\n                                        }}\n                                    >\n                                        <h6\n                                            style={{\n                                                fontFamily: 'monospace',\n                                                fontSize: '1.2em',\n                                            }}\n                                        >\n                                            {doc.name}\n                                        </h6>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                alignItems: 'start',\n                                            }}\n                                        >\n                                            {/* <span\n                                                style={{\n                                                    fontSize: '0.75em',\n                                                    color: 'var(--ifm-color-content-secondary)',\n                                                }}\n                                            >\n                                                {'Type'}\n                                            </span>\n                                            <span\n                                                style={{\n                                                    color: 'var(--ifm-color-primary)',\n                                                }}\n                                            >\n                                                {doc.type}\n                                            </span> */}\n                                        </div>\n                                    </div>\n                                </th>\n                                <th\n                                // style={{ width: '70%' }}\n                                >\n                                    {/* <div>{'-'}</div> */}\n                                    <div>\n                                        <div>\n                                            {doc.comment && (\n                                                <Summary\n                                                    summary={doc.comment}\n                                                />\n                                            )}\n                                        </div>\n                                        <CodeBlock language=\"tsx\">\n                                            {doc.code}\n                                        </CodeBlock>\n                                    </div>\n                                </th>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","\n\nexport const frontMatter = {\n\tdescription: 'Splitview Documentation'\n};\nexport const contentTitle = 'Splitview';\nexport const metadata = {\n  \"id\": \"components/splitview\",\n  \"title\": \"Splitview\",\n  \"description\": \"Splitview Documentation\",\n  \"source\": \"@site/versioned_docs/version-1.9.1/components/splitview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/splitview\",\n  \"permalink\": \"/docs/components/splitview\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.9.1/components/splitview.mdx\",\n  \"tags\": [],\n  \"version\": \"1.9.1\",\n  \"frontMatter\": {\n    \"description\": \"Splitview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Paneview\",\n    \"permalink\": \"/docs/components/paneview\"\n  },\n  \"next\": {\n    \"title\": \"Contributing\",\n    \"permalink\": \"/docs/contributing\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {SimpleSplitview} from '@site/src/components/simpleSplitview';\nimport {SplitviewExample1} from '@site/src/components/splitview/active';\nimport Link from '@docusaurus/Link';\nimport {DocRef} from '@site/src/components/ui/reference/docRef';\nexport const toc = [{\n  \"value\": \"Introduction\",\n  \"id\": \"introduction\",\n  \"level\": 2\n}, {\n  \"value\": \"SplitviewReact Component\",\n  \"id\": \"splitviewreact-component\",\n  \"level\": 2\n}, {\n  \"value\": \"Splitview API\",\n  \"id\": \"splitview-api\",\n  \"level\": 2\n}, {\n  \"value\": \"Splitview Panel API\",\n  \"id\": \"splitview-panel-api\",\n  \"level\": 2\n}, {\n  \"value\": \"Advanced Features\",\n  \"id\": \"advanced-features\",\n  \"level\": 2\n}, {\n  \"value\": \"Visibility\",\n  \"id\": \"visibility\",\n  \"level\": 3\n}, {\n  \"value\": \"Active\",\n  \"id\": \"active\",\n  \"level\": 3\n}, {\n  \"value\": \"Contraints\",\n  \"id\": \"contraints\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"splitview\",\n      children: \"Splitview\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"introduction\",\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A Splitview is a collection of resizable horizontally or vertically stacked panels.\"\n    }), \"\\n\", _jsx(\"div\", {\n      style: {\n        height: '100px',\n        backgroundColor: 'rgb(30,30,30)',\n        color: 'white',\n        margin: '20px 0px'\n      },\n      children: _jsx(SimpleSplitview, {})\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Simple Splitview example\\\"\",\n        children: \"import {\\n    ISplitviewPanelProps,\\n    Orientation,\\n    SplitviewReact,\\n    SplitviewReadyEvent,\\n} from 'dockview';\\n\\nconst components = {\\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\\n    },\\n};\\n\\nexport const SimpleSplitview = () => {\\n    const onReady = (event: SplitviewReadyEvent) => {\\n        event.api.addPanel({\\n            id: 'panel_1',\\n            component: 'default',\\n            params: {\\n                title: 'Panel 1',\\n            },\\n        });\\n\\n        event.api.addPanel({\\n            id: 'panel_2',\\n            component: 'default',\\n            params: {\\n                title: 'Panel 2',\\n            },\\n        });\\n\\n        event.api.addPanel({\\n            id: 'panel_3',\\n            component: 'default',\\n            params: {\\n                title: 'Panel 3',\\n            },\\n        });\\n    };\\n\\n    return (\\n        <SplitviewReact\\n            components={components}\\n            onReady={onReady}\\n            orientation={Orientation.HORIZONTAL}\\n            className=\\\"dockview-theme-abyss\\\"\\n        />\\n    );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"splitviewreact-component\",\n      children: \"SplitviewReact Component\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can create a Splitview through the use of the \", _jsx(_components.code, {\n        children: \"ReactSplitview\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ReactSplitview } from 'dockview';\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"onReady\"\n      }), \" prop you can access to the component \", _jsx(_components.code, {\n        children: \"api\"\n      }), \" and add panels either through deserialization or the individual addition of panels.\"]\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"ISplitviewReactProps\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"splitview-api\",\n      children: \"Splitview API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Splitview API is exposed both at the \", _jsx(_components.code, {\n        children: \"onReady\"\n      }), \" event and on each panel through \", _jsx(_components.code, {\n        children: \"props.containerApi\"\n      }), \".\\nThrough this API you can control general features of the component and access all added panels.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Splitview API via Panel component\\\"\",\n        children: \"const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\\n    // props.containerApi...\\n\\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Splitview API via the onReady callback\\\"\",\n        children: \"const onReady = (event: SplitviewReadyEvent) => {\\n    // event.api...\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"SplitviewApi\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"splitview-panel-api\",\n      children: \"Splitview Panel API\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Splitview panel API is exposed on each panel containing actions and variables specific to that panel.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Splitview panel API via Panel component\\\"\",\n        children: \"const MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\\n    // props.api...\\n\\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"SplitviewPanelApi\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"advanced-features\",\n      children: \"Advanced Features\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Listed below are some functionalities avalaible through both the panel and component APIs. The live demo shows examples of these in real-time.\"\n    }), \"\\n\", _jsx(\"div\", {\n      style: {\n        height: '200px',\n        margin: '20px 0px'\n      },\n      children: _jsx(SplitviewExample1, {})\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"visibility\",\n      children: \"Visibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A panels visibility can be controlled and monitored through the following code.\\nA panel with visibility set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" will remain as a part of the components list of panels but will not be rendered.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const disposable = props.api.onDidVisibilityChange(({ isVisible }) => {\\n    //\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"api.setVisible(true);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"active\",\n      children: \"Active\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Only one panel in the \", _jsx(_components.code, {\n        children: \"splitview\"\n      }), \" can be the active panel at any one time.\\nSetting a panel as active will set all the others as inactive.\\nA focused panel is always the active panel but an active panel is not always focused.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const disposable = props.api.onDidActiveChange(({ isActive }) => {\\n    //\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"api.setActive();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"contraints\",\n      children: \"Contraints\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When adding a panel you can specify pixel size contraints\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"event.api.addPanel({\\n    id: 'panel_3',\\n    component: 'default',\\n    minimumSize: 100,\\n    maximumSize: 1000,\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These contraints can be updated throughout the lifecycle of the \", _jsx(_components.code, {\n        children: \"splitview\"\n      }), \" using the panel API\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"props.api.onDidConstraintsChange(({ maximumSize, minimumSize }) => {\\n    //\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"api.setConstraints({\\n    maximumSize: 200,\\n    minimumSize: 400,\\n});\\n\"\n      })\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n"],"names":["TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","children","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","from","func","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","width","height","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","array","findIndex","t","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","contentSize","_contentSize","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","total","proportion","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","_onDidVisibilityChange","onDidVisibilityChange","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","wereAllChildrenHidden","areAllChildrenHidden","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","maximizedView","_maximizedNode","hasMaximizedView","maximizeView","getNode","exitMaximizedView","hideAllViewsBut","parent","exclude","_onDidMaxmizedNodeChange","showViewsInReverseOrder","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","_getViews","nodeCachedVisibleSize","path","n","l","onDidMaxmizedNodeChange","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","maximizeGroup","hasMaximizedGroup","exitMaxmizedGroup","exitMaximizedGroup","onDidMaxmizedGroupChange","addPopoutGroup","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","onDragOver","preventDefault","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","DEFAULT_ACTIVATION_SIZE","DEFAULT_SIZE","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","stopPropagation","nativeEvent","setTargetZones","setOverlayModel","model","overlayModel","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","sizeOptions","_b","translate","transform","overlayType","activationSizeOptions","activationSize","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","DockviewDropTargets","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","Panel","show","display","hide","renderPanel","asActive","doRender","isPanelActive","content","renderer","overlayRenderContainer","detatch","attach","referenceContainer","focusTracker","openPanel","_width","_height","closePanel","defaultRenderer","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","setActive","isActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_location","groupPanel","_onDidLocationChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","updateActions","isGroupActive","_d","_c","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","disableResizing","_disableResizing","entry","offsetParent","currentElement","DocumentFragment","host","isInDocument","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","isMaximizedGroup","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","NOT_INITIALIZED_MESSAGE","DockviewGroupPanelApiImpl","_group","onDidLocationChange","moveTo","moveGroupOrPanel","maximize","isMaximized","exitMaximized","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","fallback","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","PopoutWindow","_onDidClose","onDidClose","_window","dimensions","screenX","screenY","innerWidth","innerHeight","open","url","features","entries","_ref","join","externalWindow","cleanUp","externalDocument","div","replaceChildren","styleSheetList","styleSheets","styleSheet","href","link","rel","head","cssTexts","cssRules","rule","cssText","err","createTextNode","addStyles","DockviewPopoutGroupPanel","popoutUrl","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DEFAULT_FLOATING_GROUP_POSITION","OverlayRenderContainer","destroy","createFocusableElement","focusContainer","box2","visibilityChanged","DEFAULT_ROOT_OVERLAY_MODEL","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","_floatingGroups","_popoutGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","_rootDropTarget","Edge","rootOverlayModel","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","theme","toClassList","list","cls","startsWith","getTheme","popoutWindow","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","_f","_e","minimumHeightWithinViewport","querySelector","floatingGroupPanel","createGroupAtLocation","changed_orientation","changed_floatingGroupBounds","changed_rootOverlayOptions","floating","includePanel","doSetGroupAndPanelActive","collection","floats","popoutGroups","grid","floatingGroups","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","serializedPopoutGroups","serializedPopoutGroup","floatingGroup","hasActiveGroup","hasActivePanel","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","selectedGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","selectedFloatingGroup","selectedPopoutGroup","GridviewComponent","_onDidLayoutfromJSON","hasOrientationChanged","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","_jsx","SimpleSplitview","proportional","active","focused","setFocused","setDimensions","disposable1","disposable2","disposable3","disposable4","_jsxs","gridTemplateColumns","gridTemplateRows","SplitviewExample1","setPanels","_Fragment","Text","piece","kind","text","substring","Summary","summary","DocRef","docs","docsJson","declaration","doc","flexDirection","alignItems","fontFamily","name","comment","CodeBlock","language","code","frontMatter","description","contentTitle","metadata","assets","toc","_createMdxContent","_components","h1","h2","h3","pre","margin","metastring","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}