{"version":3,"file":"assets/js/4edc808e.08631f7c.js","mappings":"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","sources":["webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./sandboxes/simple-dockview/src/app.tsx","webpack://dockview-docs/./src/components/simpleGridview.tsx","webpack://dockview-docs/./src/components/simplePaneview.tsx","webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./docs/index.mdx","webpack://dockview-docs/../../node_modules/@mdx-js/react/dist/esm.js"],"sourcesContent":["class TransferObject {\n    constructor() {\n        //\n    }\n}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    public static from(...args: IDisposable[]): CompositeDisposable {\n        return new CompositeDisposable(...args);\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\nexport enum LayoutPriority {\n    Low = 'low',\n    High = 'high',\n    Normal = 'normal',\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private contentSize = 0;\n    private _proportions: number[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): number[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        this.relayout([index]);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n\n                item.size = clamp(\n                    Math.round(this.proportions[i] * size),\n                    item.minimumSize,\n                    item.maximumSize\n                );\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this._proportions = this.viewItems.map(\n                (i) => i.size / this.contentSize\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this.contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any | undefined;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n            this._onDidChange.fire({});\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(...this.children.map((c) => c.minimumOrthogonalSize));\n    }\n\n    get maximumSize(): number {\n        return Math.min(...this.children.map((c) => c.maximumOrthogonalSize));\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n    setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = Event.any(\n            ...this.children.map((c) => c.onDidChange)\n        )((e) => {\n            /**\n             * indicate a change has occured to allows any re-rendering but don't bubble\n             * event because that was specific to this branch\n             */\n            this._onDidChange.fire({ size: e.orthogonalSize });\n        });\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    private _root: BranchNode | undefined;\n    public readonly element: HTMLElement;\n    private disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get length(): number {\n        return this.component.length;\n    }\n\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    addPanel(options: AddSplitviewComponentOptions): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    addPanel(options: AddPaneviewComponentOptions): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    addPanel(options: AddComponentOptions): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    get id(): string {\n        return this.component.id;\n    }\n\n    get width(): number {\n        return this.component.width;\n    }\n\n    get height(): number {\n        return this.component.height;\n    }\n\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    get size(): number {\n        return this.component.size;\n    }\n\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    focus(): void {\n        this.component.focus();\n    }\n\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    addPanel(options: AddPanelOptions): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    clear(): void {\n        this.component.clear();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.target = e.target;\n                    this.callbacks.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n                    if (this.callbacks.onDragOver) {\n                        this.callbacks.onDragOver(e);\n                    }\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                if (this.target === e.target) {\n                    this.target = null;\n\n                    this.callbacks.onDragLeave(e);\n                }\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.target = null;\n                this.callbacks.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.callbacks.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.addDisposables(\n            this._onDrop,\n            new DragAndDropObserver(this.element, {\n                onDragEnter: () => undefined,\n                onDragOver: (e) => {\n                    if (this._acceptedTargetZonesSet.size === 0) {\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    const width = this.element.clientWidth;\n                    const height = this.element.clientHeight;\n\n                    if (width === 0 || height === 0) {\n                        return; // avoid div!0\n                    }\n\n                    const rect = (\n                        e.currentTarget as HTMLElement\n                    ).getBoundingClientRect();\n                    const x = e.clientX - rect.left;\n                    const y = e.clientY - rect.top;\n\n                    const quadrant = this.calculateQuadrant(\n                        this._acceptedTargetZonesSet,\n                        x,\n                        y,\n                        width,\n                        height\n                    );\n\n                    /**\n                     * If the event has already been used by another DropTarget instance\n                     * then don't show a second drop target, only one target should be\n                     * active at any one time\n                     */\n                    if (this.isAlreadyUsed(e) || quadrant === null) {\n                        // no drop target should be displayed\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    if (typeof this.options.canDisplayOverlay === 'boolean') {\n                        if (!this.options.canDisplayOverlay) {\n                            this.removeDropTarget();\n                            return;\n                        }\n                    } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                        this.removeDropTarget();\n                        return;\n                    }\n\n                    this.markAsUsed(e);\n\n                    if (!this.targetElement) {\n                        this.targetElement = document.createElement('div');\n                        this.targetElement.className = 'drop-target-dropzone';\n                        this.overlayElement = document.createElement('div');\n                        this.overlayElement.className = 'drop-target-selection';\n                        this._state = 'center';\n                        this.targetElement.appendChild(this.overlayElement);\n\n                        this.element.classList.add('drop-target');\n                        this.element.append(this.targetElement);\n                    }\n\n                    this.toggleClasses(quadrant, width, height);\n\n                    this.setState(quadrant);\n                },\n                onDragLeave: () => {\n                    this.removeDropTarget();\n                },\n                onDragEnd: () => {\n                    this.removeDropTarget();\n                },\n                onDrop: (e) => {\n                    e.preventDefault();\n\n                    const state = this._state;\n\n                    this.removeDropTarget();\n\n                    if (state) {\n                        // only stop the propagation of the event if we are dealing with it\n                        // which is only when the target has state\n                        e.stopPropagation();\n                        this._onDrop.fire({ position: state, nativeEvent: e });\n                    }\n                },\n            })\n        );\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nexport interface IContentContainer extends IDisposable {\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        // for hosted containers\n        // 1) register a drop target on the host\n        // 2) register window dragStart events to disable pointer events\n        // 3) register dragEnd events\n        // 4) register mouseMove events (if no buttons are present we take this as a dragEnd event)\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n        if (this.panel) {\n            if (this.panel.view?.content) {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n        this.panel = panel;\n\n        const disposable = new CompositeDisposable();\n\n        if (this.panel.view) {\n            const _onDidFocus = this.panel.view.content.onDidFocus;\n            const _onDidBlur = this.panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(this._element);\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this._element.appendChild(this.panel.view.content.element);\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel?.view?.content?.element) {\n            this._element.removeChild(this.panel.view.content.element);\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    params?: { [key: string]: any };\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<void>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(dataTransfer?: DataTransfer | null): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event.dataTransfer);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    /**\n                     * Although this is not used by dockview many third party dnd libraries will check\n                     * dataTransfer.types to determine valid drag events.\n                     *\n                     * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                     * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                     * dnd logic. You can see the code at\n                     * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                     */\n                    event.dataTransfer.setData(\n                        'text/plain',\n                        '__dockview_internal_drag_event__'\n                    );\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\n\nexport interface ITab extends IDisposable {\n    readonly panelId: string;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content?: ITabRenderer;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panelId: string,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            new (class Handler extends DragHandler {\n                private readonly panelTransfer =\n                    LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n                getData(): IDisposable {\n                    this.panelTransfer.setData(\n                        [new PanelTransfer(accessor.id, group.id, panelId)],\n                        PanelTransfer.prototype\n                    );\n\n                    return {\n                        dispose: () => {\n                            this.panelTransfer.clearData(\n                                PanelTransfer.prototype\n                            );\n                        },\n                    };\n                }\n            })(this._element)\n        );\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            })\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panelId !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessorId: string,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.isFloating && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dataTransfer: DataTransfer | null): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessorId, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor.id, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    hidden: boolean;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panelId);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panelId === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(this._onDrop);\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        !this.group.api.isFloating\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panelId === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panelId;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panelId === panel.id)) {\n            return;\n        }\n        const tabToAdd = new Tab(panel.id, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tabToAdd.setContent(panel.view.tab);\n\n        const disposable = CompositeDisposable.from(\n            tabToAdd.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.isFloating && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tabToAdd.panelId);\n\n                    const { top, left } =\n                        tabToAdd.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tabToAdd.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tabToAdd),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tabToAdd, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Droptarget, Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    ITabsContainer,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: boolean;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: boolean;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked = false;\n    private _isFloating = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): boolean {\n        return this._locked;\n    }\n\n    set locked(value: boolean) {\n        this._locked = value;\n\n        toggleClass(this.container, 'locked-groupview', value);\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get isFloating(): boolean {\n        return this._isFloating;\n    }\n\n    set isFloating(value: boolean) {\n        this._isFloating = value;\n\n        this.dropTarget.setTargetZones(\n            value ? ['center'] : ['top', 'bottom', 'left', 'right', 'center']\n        );\n\n        toggleClass(this.container, 'dv-groupview-floating', value);\n\n        this.groupPanel.api._onDidFloatingStateChange.fire({\n            isFloating: this.isFloating,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer();\n\n        this.dropTarget = new Droptarget(this.contentContainer.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.locked && position === 'center') {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (!data && event.shiftKey && !this.isFloating) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this._panels.length === 1 && data.groupId === this.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = !!options.locked;\n\n        this.addDisposables(\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked) {\n            result.locked = true;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.dropTarget.dispose();\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(parentElement?: HTMLElement) {\n        super();\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    private readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize || width !== this.width || height !== this.height;\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Record<string, any>;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Record<string, any> | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Record<string, any> | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any | undefined;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly isFloating: boolean;\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly isFloating: boolean;\n}\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidFloatingStateChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidFloatingStateChange.event;\n\n    get isFloating() {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n        return this._group.model.isFloating;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidFloatingStateChange);\n    }\n\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            undefined,\n            options.position ?? 'center'\n        );\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): boolean {\n        return this._model.locked;\n    }\n\n    set locked(value: boolean) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 100,\n                minimumWidth: 100,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\n/*\n * omit visibility modifiers since the visibility of a single group doesn't make sense\n * because it belongs to a groupview\n */\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    close(): void;\n    setTitle(title: string): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return !!this.group?.isActive;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: IDockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Record<string, any> | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n\n    private _title: string | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        public readonly id: string,\n        accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel\n    ) {\n        super();\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params || {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: { new (id: string, component: string): T };\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components || {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly layout: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent || 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.layout,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.layout,\n            new DockviewApi(this.layout),\n            group,\n            view\n        );\n\n        panel.init({\n            title: title || panelId,\n            params: params || {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import { quasiDefaultPrevented, toggleClass } from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    constructor(\n        private readonly options: {\n            height: number;\n            width: number;\n            left: number;\n            top: number;\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth: number;\n            minimumInViewportHeight: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange);\n\n        this.setupOverlay();\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.renderWithinBoundaryConditions();\n    }\n\n    setBounds(\n        bounds: Partial<{\n            height: number;\n            width: number;\n            top: number;\n            left: number;\n        }>\n    ): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        this.renderWithinBoundaryConditions();\n    }\n\n    toJSON(): { top: number; left: number; height: number; width: number } {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    renderWithinBoundaryConditions(): void {\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(\n            0,\n            overlayRect.width - this.options.minimumInViewportWidth\n        );\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset = Math.max(\n            0,\n            overlayRect.height - this.options.minimumInViewportHeight\n        );\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            move.value = new CompositeDisposable(\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        overlayRect.width - this.options.minimumInViewportWidth\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        overlayRect.height -\n                            this.options.minimumInViewportHeight\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this._element.style.left = `${left}px`;\n                    this._element.style.top = `${top}px`;\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChange.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupOverlay(): void {\n        this._element.style.height = `${this.options.height}px`;\n        this._element.style.width = `${this.options.width}px`;\n        this._element.style.left = `${this.options.left}px`;\n        this._element.style.top = `${this.options.top}px`;\n\n        this._element.className = 'dv-resize-container';\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | null = null;\n                        let height: number | null = null;\n                        let left: number | null = null;\n                        let width: number | null = null;\n\n                        const minimumInViewportHeight =\n                            this.options.minimumInViewportHeight;\n                        const minimumInViewportWidth =\n                            this.options.minimumInViewportWidth;\n\n                        function moveTop(): void {\n                            top = clamp(\n                                y,\n                                -minimumInViewportHeight,\n                                Math.max(\n                                    0,\n                                    startPosition!.originalY +\n                                        startPosition!.originalHeight -\n                                        Overlay.MINIMUM_HEIGHT\n                                )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        }\n\n                        function moveBottom(): void {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                Overlay.MINIMUM_HEIGHT,\n                                Math.max(\n                                    0,\n                                    containerRect.height -\n                                        startPosition!.originalY +\n                                        startPosition!.originalHeight +\n                                        minimumInViewportHeight\n                                )\n                            );\n                        }\n\n                        function moveLeft(): void {\n                            left = clamp(\n                                x,\n                                -minimumInViewportWidth,\n                                Math.max(\n                                    0,\n                                    startPosition!.originalX +\n                                        startPosition!.originalWidth -\n                                        Overlay.MINIMUM_WIDTH\n                                )\n                            );\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        }\n\n                        function moveRight(): void {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n                            width = clamp(\n                                x - left,\n                                Overlay.MINIMUM_WIDTH,\n                                Math.max(\n                                    0,\n                                    containerRect.width -\n                                        startPosition!.originalX +\n                                        startPosition!.originalWidth +\n                                        minimumInViewportWidth\n                                )\n                            );\n                        }\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        if (height !== null) {\n                            this._element.style.height = `${height}px`;\n                        }\n                        if (top !== null) {\n                            this._element.style.top = `${top}px`;\n                        }\n                        if (left !== null) {\n                            this._element.style.left = `${left}px`;\n                        }\n                        if (width !== null) {\n                            this._element.style.width = `${width}px`;\n                        }\n                    }),\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChange.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass } from '../dom';\nimport {\n    DockviewFloatingGroupPanel,\n    IDockviewFloatingGroupPanel,\n} from './dockviewFloatingGroupPanel';\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: { height: number; width: number; left: number; top: number };\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'disableFloatingGroups'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly floatingGroups: IDockviewFloatingGroupPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel(options: AddPanelOptions): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    readonly floatingGroups: DockviewFloatingGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation || Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n        });\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n\n        this.addDisposables(\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId || undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.isFloating = true;\n\n        const overlayLeft =\n            typeof coord?.x === 'number' ? Math.max(coord.x, 0) : 100;\n        const overlayTop =\n            typeof coord?.y === 'number' ? Math.max(coord.y, 0) : 100;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth: 100,\n            minimumInViewportHeight: 100,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    group.model.isFloating = false;\n                    remove(this.floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this.floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this.floatingGroups) {\n            for (const floating of this.floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.renderWithinBoundaryConditions();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this.floatingGroups.map(\n            (floatingGroup) => {\n                return {\n                    data: floatingGroup.group.toJSON() as GroupPanelViewState,\n                    position: floatingGroup.overlay.toJSON(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        const createGroupFromSerializedState = (data: GroupPanelViewState) => {\n            const { id, locked, hideHeader, views, activeView } = data;\n\n            const group = this.createGroup({\n                id,\n                locked: !!locked,\n                hideHeader: !!hideHeader,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            for (const child of views) {\n                const panel = this._deserializer.fromJSON(panels[child], group);\n\n                const isActive =\n                    typeof activeView === 'string' && activeView === panel.id;\n\n                group.model.openPanel(panel, {\n                    skipSetPanelActive: !isActive,\n                    skipSetGroupActive: true,\n                });\n            }\n\n            if (!group.activePanel && group.panels.length > 0) {\n                group.model.openPanel(group.panels[group.panels.length - 1], {\n                    skipSetGroupActive: true,\n                });\n            }\n\n            return group;\n        };\n\n        this.gridview.deserialize(grid, {\n            fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                return createGroupFromSerializedState(node.data);\n            },\n        });\n\n        this.layout(width, height, true);\n\n        const serializedFloatingGroups = data.floatingGroups ?? [];\n\n        for (const serializedFloatingGroup of serializedFloatingGroups) {\n            const { data, position } = serializedFloatingGroup;\n            const group = createGroupFromSerializedState(data);\n\n            this.addFloatingGroup(\n                group,\n                {\n                    x: position.left,\n                    y: position.top,\n                    height: position.height,\n                    width: position.width,\n                },\n                { skipRemoveGroup: true, inDragMode: false }\n            );\n        }\n\n        for (const floatingGroup of this.floatingGroups) {\n            floatingGroup.overlay.renderWithinBoundaryConditions();\n        }\n\n        if (typeof activeGroup === 'string') {\n            const panel = this.getPanel(activeGroup);\n            if (panel) {\n                this.doSetGroupActive(panel);\n            }\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel(options: AddPanelOptions): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n            } else if (referenceGroup.api.isFloating || target === 'center') {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => !x.api.isFloating).length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        this.doRemoveGroup(group, options);\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        const floatingGroup = this.floatingGroups.find(\n            (_) => _.group === group\n        );\n\n        if (floatingGroup) {\n            if (!options?.skipDispose) {\n                floatingGroup.group.dispose();\n                this._groups.delete(group.id);\n            }\n            floatingGroup.dispose();\n\n            return floatingGroup.group;\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ||\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                const isFloating = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (!isFloating) {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ||\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                const floatingGroup = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (floatingGroup) {\n                    floatingGroup.dispose();\n                } else {\n                    this.gridview.removeView(\n                        getGridLocation(sourceGroup.element)\n                    );\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const isGroupAlreadyFocused = this._activeGroup === group;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (!isGroupAlreadyFocused && this._activeGroup?.activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent || this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view\n        );\n        panel.init({\n            title: options.title || options.id,\n            params: options?.params || {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n\n    public dispose(): void {\n        this._onDidActivePanelChange.dispose();\n        this._onDidAddPanel.dispose();\n        this._onDidRemovePanel.dispose();\n        this._onDidLayoutFromJSON.dispose();\n\n        super.dispose();\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { FrameworkFactory } from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: {\n            new (id: string, component: string): ITabRenderer;\n        };\n    };\n    components?: {\n        [componentName: string]: {\n            new (id: string, component: string): IContentRenderer;\n        };\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n}\n\nexport interface PanelOptions {\n    component: string;\n    tabComponent?: string;\n    params?: { [key: string]: any };\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions = Omit<\n    PanelOptions,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions extends BaseComponentOptions {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel(options: AddComponentOptions): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.gridview.deserialize(grid, {\n            fromJSON: (node) => {\n                const { data } = node;\n                const view = createComponent(\n                    data.id,\n                    data.component,\n                    this.options.components || {},\n                    this.options.frameworkComponents || {},\n                    this.options.frameworkComponentFactory\n                        ? {\n                              createComponent:\n                                  this.options.frameworkComponentFactory\n                                      .createComponent,\n                          }\n                        : undefined\n                );\n\n                queue.push(() =>\n                    view.init({\n                        params: data.params,\n                        minimumWidth: data.minimumWidth,\n                        maximumWidth: data.maximumWidth,\n                        minimumHeight: data.minimumHeight,\n                        maximumHeight: data.maximumHeight,\n                        priority: data.priority,\n                        snap: !!data.snap,\n                        accessor: this,\n                        isVisible: node.visible,\n                    })\n                );\n\n                this._onDidAddGroup.fire(view);\n\n                this.registerPanel(view);\n\n                return view;\n            },\n        });\n\n        this.layout(width, height, true);\n\n        queue.forEach((f) => f());\n\n        if (typeof activePanel === 'string') {\n            const panel = this.getPanel(activePanel);\n            if (panel) {\n                this.doSetGroupActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel(options: AddComponentOptions): IGridviewPanel {\n        let relativeLocation: number[] = options.location || [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params || {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions extends BaseComponentOptions {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel(options: AddSplitviewComponentOptions): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel(options: AddSplitviewComponentOptions): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params || {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params || {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: {\n        [key: string]: any;\n    };\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel(options: AddPaneviewComponentOptions): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel(options: AddPaneviewComponentOptions): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components || {},\n            this.options.frameworkComponents || {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents || {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params || {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components || {},\n                        this.options.frameworkComponents || {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents || {},\n                            this.options.headerframeworkComponents || {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params || {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Record<string, any> = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: any | React.ReactElement\n): element is React.ReactElement {\n    return element?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params || {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents || {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents || {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement>;\n\nexport const DockviewDefaultTab: React.FunctionComponent<IDockviewDefaultTabProps> =\n    ({ api, containerApi: _containerApi, params: _params, ...rest }) => {\n        const onClose = React.useCallback(\n            (event: React.MouseEvent<HTMLSpanElement>) => {\n                event.stopPropagation();\n                api.close();\n            },\n            [api]\n        );\n\n        const onClick = React.useCallback(\n            (event: React.MouseEvent<HTMLDivElement>) => {\n                api.setActive();\n\n                if (rest.onClick) {\n                    rest.onClick(event);\n                }\n            },\n            [api, rest.onClick]\n        );\n\n        const iconClassname = React.useMemo(() => {\n            const cn = ['dockview-react-tab-action'];\n            return cn.join(',');\n        }, []);\n\n        return (\n            <div {...rest} onClick={onClick} className=\"dockview-react-tab\">\n                <span className=\"dockview-react-tab-title\">{api.title}</span>\n                <div className={iconClassname} onClick={onClose}>\n                    <CloseButton />\n                </div>\n            </div>\n        );\n    };\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params || {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                orientation: props.orientation || Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params || {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation || Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default App;\n","import {\n    IGridviewPanelProps,\n    Orientation,\n    GridviewReact,\n    GridviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleGridview = () => {\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n    };\n\n    return (\n        <GridviewReact\n            components={components}\n            onReady={onReady}\n            proportionalLayout={false}\n            orientation={Orientation.VERTICAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const SimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tsidebar_position: 0,\n\tdescription: 'A zero dependency layout manager supporting ReactJS and Vanilla TypeScript'\n};\nexport const contentTitle = 'Introduction';\nexport const metadata = {\n  \"unversionedId\": \"index\",\n  \"id\": \"index\",\n  \"title\": \"Introduction\",\n  \"description\": \"A zero dependency layout manager supporting ReactJS and Vanilla TypeScript\",\n  \"source\": \"@site/docs/index.mdx\",\n  \"sourceDirName\": \".\",\n  \"slug\": \"/\",\n  \"permalink\": \"/docs/next/\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/index.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"sidebarPosition\": 0,\n  \"frontMatter\": {\n    \"sidebar_position\": 0,\n    \"description\": \"A zero dependency layout manager supporting ReactJS and Vanilla TypeScript\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"next\": {\n    \"title\": \"Theme\",\n    \"permalink\": \"/docs/next/theme\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { SimpleSplitview } from '@site/src/components/simpleSplitview';\nimport { SimpleGridview } from '@site/src/components/simpleGridview';\nimport { SimplePaneview } from '@site/src/components/simplePaneview';\nimport SimpleDockview from '@site/sandboxes/simple-dockview/src/app';\nimport Link from '@docusaurus/Link';\nexport const toc = [{\n  value: 'Quick start',\n  id: 'quick-start',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p><strong parentName=\"p\">{`dockview`}</strong>{` is a zero dependency layout manager that supports tab, grids and splitviews.`}</p>\n    <h2 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick start`}</h2>\n    <p><inlineCode parentName=\"p\">{`dockview`}</inlineCode>{` has a peer dependency on `}<inlineCode parentName=\"p\">{`react >= 16.8.0`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`react-dom >= 16.8.0`}</inlineCode>{`. To install `}<inlineCode parentName=\"p\">{`dockview`}</inlineCode>{` you can run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm install dockview\n`}</code></pre>\n    <p>{`You must also import the dockview stylesheet found under `}<a parentName=\"p\" {...{\n        \"href\": \"https://unpkg.com/browse/dockview@latest/dist/styles/dockview.css\"\n      }}><inlineCode parentName=\"a\">{`dockview/dict/styles/dockview.css`}</inlineCode></a>{`,\ndepending on your solution this might be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@import './node_modules/dockview/dist/styles/dockview.css';\n`}</code></pre>\n    <p>{`There are 4 components you may want to use:`}</p>\n    <Link to=\"./components/dockview\" mdxType=\"Link\">\n    <h2>Dockview</h2>\n    </Link>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleDockview mdxType=\"SimpleDockview\" />\n    </div>\n    <Link to=\"./components/splitview\" mdxType=\"Link\">\n    <h2>Splitview</h2>\n    </Link>\n    <div style={{\n      height: '100px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleSplitview mdxType=\"SimpleSplitview\" />\n    </div>\n    <Link to=\"./components/gridview\" mdxType=\"Link\">\n    <h2>Gridview</h2>\n    </Link>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimpleGridview mdxType=\"SimpleGridview\" />\n    </div>\n    <Link to=\"./components/paneview\" mdxType=\"Link\">\n    <h2>Paneview</h2>\n    </Link>\n    <div style={{\n      height: '300px',\n      backgroundColor: 'rgb(30,30,30)',\n      color: 'white',\n      margin: '20px 0px'\n    }}>\n    <SimplePaneview mdxType=\"SimplePaneview\" />\n    </div>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n","import React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/React.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/React.createElement(React.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/React.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return React.createElement.apply(null, createElementArgArray);\n  }\n\n  return React.createElement.apply(null, args);\n}\n\nexport { MDXContext, MDXProvider, createElement as mdx, useMDXComponents, withMDXComponents };\n"],"names":["TransferObject","constructor","PanelTransfer","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","static","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","getInstance","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","children","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","create","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","CompositeDisposable","isDisposed","_isDisposed","args","_len2","_key2","_disposables","addDisposables","_len3","_key3","arg","MutableDisposable","_disposable","disposable","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","from","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","contentSize","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","array","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","lowPriorityIndex","emptyDelta","sum","offset","left","top","VERTICAL","width","height","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","getNode","_getViews","nodeCachedVisibleSize","path","n","l","parent","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","activePanel","activeGroup","getGroupPanel","addGroup","moveToNext","moveToPrevious","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","preventDefault","onDragOver","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","getBoundingClientRect","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","transform","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","fallback","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","ContentContainer","_element","tabIndex","show","display","hide","openPanel","content","focusTracker","_width","_height","closePanel","DockviewDropTargets","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","dataTransfer","effectAllowed","Tab","accessor","_onChanged","onChanged","_onDropped","draggable","defaultPrevented","droptarget","locked","model","setActive","isActive","setContent","part","GroupDragHandler","accessorId","shiftKey","isFloating","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","Panel","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","tab","selectedIndex","findIndex","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","tabToAdd","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_isFloating","dropTarget","groupPanel","_onDidFloatingStateChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","watchElementResize","entry","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onDidVisibilityChange","onDidVisibilityChange","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","DockviewGroupPanelApiImpl","_group","onDidFloatingStateChange","moveTo","moveGroupOrPanel","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","setTitle","close","DockviewPanel","_title","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","setupOverlay","setupResize","renderWithinBoundaryConditions","setBounds","bounds","containerRect","overlayRect","xOffset","minimumInViewportWidth","yOffset","minimumInViewportHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onDidLayoutFromJSON","floatingGroups","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","overlayLeft","overlayTop","querySelector","floatingGroupPanel","t","createGroupAtLocation","hasOrientationChanged","floating","includePanel","collection","floats","floatingGroup","grid","isArray","createGroupFromSerializedState","serializedFloatingGroups","serializedFloatingGroup","hasActiveGroup","hasActivePanel","entries","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","isGroupAlreadyFocused","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","__rest","onClose","onClick","iconClassname","join","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","theme","SimpleGridview","myHeaderComponent","SimplePaneview","SimpleSplitview","proportional","frontMatter","sidebar_position","description","contentTitle","metadata","assets","toc","level","layoutProps","MDXLayout","MDXContent","_ref","mdx","_extends","mdxType","parentName","Link","margin","SimpleDockview","isMDXComponent","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","source","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","MDXContext","useMDXComponents","contextComponents","allComponents","MDXProvider","TYPE_PROP_NAME","DEFAULTS","inlineCode","wrapper","MDXCreateElement","propComponents","originalType","etc","concat","argsLength","createElementArgArray","newProps","hasOwnProperty"],"sourceRoot":""}