{"version":3,"file":"assets/js/e224ad6b.f36043af.js","mappings":"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","sources":["webpack://dockview-docs/../../node_modules/@docusaurus/core/lib/client/exports/BrowserOnly.js","webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/greadyRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./sandboxes/editor-gridview/src/app.tsx","webpack://dockview-docs/./sandboxes/simple-gridview/src/app.tsx","webpack://dockview-docs/./src/components/gridview/events.tsx","webpack://dockview-docs/./src/components/ui/console/console.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./src/components/ui/reference/docRef.tsx","webpack://dockview-docs/./docs/components/gridview.mdx"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { isValidElement } from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n// Similar comp to the one described here:\n// https://www.joshwcomeau.com/react/the-perils-of-rehydration/#abstractions\nexport default function BrowserOnly({ children, fallback, }) {\n    const isBrowser = useIsBrowser();\n    if (isBrowser) {\n        if (typeof children !== 'function' &&\n            process.env.NODE_ENV === 'development') {\n            throw new Error(`Docusaurus error: The children of <BrowserOnly> must be a \"render function\", e.g. <BrowserOnly>{() => <span>{window.location.href}</span>}</BrowserOnly>.\nCurrent type: ${isValidElement(children) ? 'React element' : typeof children}`);\n        }\n        return <>{children?.()}</>;\n    }\n    return fallback ?? null;\n}\n","class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private contentSize = 0;\n    private _proportions: number[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): number[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n\n                item.size = clamp(\n                    Math.round(this.proportions[i] * size),\n                    item.minimumSize,\n                    item.maximumSize\n                );\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this._proportions = this.viewItems.map(\n                (i) => i.size / this.contentSize\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this.contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n            this._onDidChange.fire({});\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(...this.children.map((c) => c.minimumOrthogonalSize));\n    }\n\n    get maximumSize(): number {\n        return Math.min(...this.children.map((c) => c.maximumOrthogonalSize));\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n    setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = Event.any(\n            ...this.children.map((c) => c.onDidChange)\n        )((e) => {\n            /**\n             * indicate a change has occured to allows any re-rendering but don't bubble\n             * event because that was specific to this branch\n             */\n            this._onDidChange.fire({ size: e.orthogonalSize });\n        });\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    private _root: BranchNode | undefined;\n    public readonly element: HTMLElement;\n    private disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this.setState(quadrant);\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    renderer?: DockviewPanelRenderer;\n    params?: { [key: string]: any };\n}\n","import {\n    CompositeDisposable,\n    Disposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DragAndDropObserver } from '../../../dnd/dnd';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { DockviewDropTargets } from '../../types';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        // for hosted containers\n        // 1) register a drop target on the host\n        // 2) register window dragStart events to disable pointer events\n        // 3) register dragEnd events\n        // 4) register mouseMove events (if no buttons are present we take this as a dragEnd event)\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (!data && event.shiftKey && !this.group.isFloating) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(panel: IDockviewPanel): void {\n        const isActive = panel === this.group.activePanel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.greadyRenderContainer.remove(panel);\n                if (isActive) {\n                    if (this.panel) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container =\n                    this.accessor.greadyRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n        }\n\n        if (isActive) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        const renderer = panel.api.renderer;\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (renderer) {\n            case 'always':\n                container =\n                    this.accessor.greadyRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n            case 'onlyWhenVisibile':\n                this._element.appendChild(this.panel.view.content.element);\n                container = this._element;\n                break;\n        }\n\n        const _onDidFocus = this.panel.view.content.onDidFocus;\n        const _onDidBlur = this.panel.view.content.onDidBlur;\n\n        const disposable = new CompositeDisposable();\n        const focusTracker = trackFocus(container);\n\n        disposable.addDisposables(\n            focusTracker,\n            focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n            focusTracker.onDidBlur(() => this._onDidBlur.fire())\n        );\n\n        if (_onDidFocus) {\n            disposable.addDisposables(\n                _onDidFocus(() => this._onDidFocus.fire())\n            );\n        }\n        if (_onDidBlur) {\n            disposable.addDisposables(_onDidBlur(() => this._onDidBlur.fire()));\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.accessor.options.defaultRenderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.isFloating && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        !this.group.api.isFloating\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.isFloating && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Droptarget, Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    // private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _isFloating = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get isFloating(): boolean {\n        return this._isFloating;\n    }\n\n    set isFloating(value: boolean) {\n        this._isFloating = value;\n\n        this.contentContainer.dropTarget.setTargetZones(\n            value ? ['center'] : ['top', 'bottom', 'left', 'right', 'center']\n        );\n\n        toggleClass(this.container, 'dv-groupview-floating', value);\n\n        this.groupPanel.api._onDidFloatingStateChange.fire({\n            isFloating: this.isFloating,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel);\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        // this.dropTarget.dispose();\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement?: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!document.body.contains(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly isFloating: boolean;\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly isFloating: boolean;\n}\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidFloatingStateChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidFloatingStateChange.event;\n\n    get isFloating() {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n        return this._group.model.isFloating;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidFloatingStateChange);\n    }\n\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            undefined,\n            options.position ?? 'center'\n        );\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 100,\n                minimumWidth: 100,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { DockviewPanel, IDockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../dockview/components/greadyRenderContainer';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\n/*\n * omit visibility modifiers since the visibility of a single group doesn't make sense\n * because it belongs to a groupview\n */\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return !!this.group?.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: {\n            height: number;\n            width: number;\n            left: number;\n            top: number;\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(\n        bounds: Partial<{\n            height: number;\n            width: number;\n            top: number;\n            left: number;\n        }> = {}\n    ): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): { top: number; left: number; height: number; width: number } {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import { DragAndDropObserver } from '../../dnd/dnd';\nimport { Droptarget } from '../../dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from '../../dom';\nimport { CompositeDisposable, Disposable, IDisposable } from '../../lifecycle';\nimport { IDockviewPanel } from '../dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class GreadyRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        { disposable: IDisposable; element: HTMLElement }\n    > = {};\n\n    get allIds(): string[] {\n        return Object.keys(this.map);\n    }\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables({\n            dispose: () => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                }\n            },\n        });\n    }\n\n    remove(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            this.map[panel.api.id].disposable.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    setReferenceContentContainer(\n        panel: IDockviewPanel,\n        referenceContainer: IRenderable\n    ): HTMLElement {\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                disposable: Disposable.NONE,\n                element,\n            };\n        }\n\n        this.map[panel.api.id]?.disposable.dispose();\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.isFloating\n            );\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n            panel.api.onDidVisibilityChange((event) => {\n                focusContainer.style.display = event.isVisible ? '' : 'none';\n            }),\n            panel.api.onDidDimensionsChange((event) => {\n                resize();\n            }),\n            {\n                dispose: () => {\n                    focusContainer.removeChild(panel.view.content.element);\n                    this.element.removeChild(focusContainer);\n                },\n            }\n        );\n\n        queueMicrotask(() => {\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            resize();\n        });\n\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport {\n    DockviewFloatingGroupPanel,\n    IDockviewFloatingGroupPanel,\n} from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport {\n    GreadyRenderContainer,\n    DockviewPanelRenderer,\n} from './components/greadyRenderContainer';\n\nconst DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: { height: number; width: number; left: number; top: number };\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly floatingGroups: IDockviewFloatingGroupPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly greadyRenderContainer: GreadyRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    readonly floatingGroups: DockviewFloatingGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-gready-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.greadyRenderContainer = new GreadyRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.greadyRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.isFloating = true;\n\n        const overlayLeft =\n            typeof coord?.x === 'number' ? Math.max(coord.x, 0) : 100;\n        const overlayTop =\n            typeof coord?.y === 'number' ? Math.max(coord.y, 0) : 100;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.isFloating = false;\n                    remove(this.floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this.floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const hasFloatingGroupOptionsChanged =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (hasFloatingGroupOptionsChanged) {\n            for (const group of this.floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this.floatingGroups) {\n            for (const floating of this.floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this.floatingGroups.map(\n            (floatingGroup) => {\n                return {\n                    data: floatingGroup.group.toJSON() as GroupPanelViewState,\n                    position: floatingGroup.overlay.toJSON(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            for (const floatingGroup of this.floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this.floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (referenceGroup.api.isFloating || target === 'center') {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.greadyRenderContainer.remove(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => !x.api.isFloating).length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        const floatingGroup = this.floatingGroups.find(\n            (_) => _.group === group\n        );\n        if (floatingGroup) {\n            if (!options?.skipDispose) {\n                floatingGroup.group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            floatingGroup.dispose();\n\n            if (!options?.skipActive && this._activeGroup === group) {\n                const groups = Array.from(this._groups.values());\n\n                this.doSetGroupActive(\n                    groups.length > 0 ? groups[0].value : undefined\n                );\n            }\n\n            return floatingGroup.group;\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                const isFloating = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (!isFloating) {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                const floatingGroup = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (floatingGroup) {\n                    floatingGroup.dispose();\n                } else {\n                    this.gridview.removeView(\n                        getGridLocation(sourceGroup.element)\n                    );\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.renderer}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    GridviewApi,\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    LayoutPriority,\n    Orientation,\n    SerializedGridviewComponent,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n    header: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#3C3C3C', height: '100%' }}></div>\n        );\n    },\n    footer: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#007ACC', height: '100%' }}></div>\n        );\n    },\n    sidebar: (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#333333', height: '100%' }}></div>\n        );\n    },\n    'left-expander': (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#252526', height: '100%' }}></div>\n        );\n    },\n    'right-expander': (props: IGridviewPanelProps) => {\n        return (\n            <div style={{ backgroundColor: '#252526', height: '100%' }}></div>\n        );\n    },\n    main: (props: IGridviewPanelProps) => {\n        return (\n            <div\n                style={{\n                    backgroundColor: '#1E1E1E',\n                    height: '100%',\n                    color: 'white',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                    fontSize: '0.8em',\n                    padding: '10px',\n                }}\n            >\n                <div>{'This entire mockup is built using a gridview.'}</div>\n\n                <div>{`Press 'Ctrl+B' to toggle the left sidebar and 'Ctrl+Alt+B' to toggle the right sidebar or manually resize them.`}</div>\n            </div>\n        );\n    },\n};\n\nconst serializedGridview: SerializedGridviewComponent = {\n    grid: {\n        root: {\n            type: 'branch',\n            data: [\n                {\n                    type: 'leaf',\n                    data: {\n                        id: 'header-id',\n                        component: 'header',\n                        minimumHeight: 30,\n                        maximumHeight: 30,\n                    },\n                },\n                {\n                    type: 'branch',\n                    data: [\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'sidebar-id',\n                                component: 'sidebar',\n                                minimumWidth: 30,\n                                maximumWidth: 30,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'left-expander-id',\n                                component: 'left-expander',\n                                minimumWidth: 100,\n                                snap: true,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            size: 100,\n                            data: {\n                                id: 'main-id',\n                                component: 'main',\n                                minimumWidth: 100,\n                                minimumHeight: 100,\n                                /**\n                                 * it's important to give the main content a high layout priority as we want\n                                 * the main layout to have priority when allocating new space\n                                 */\n                                priority: LayoutPriority.High,\n                            },\n                        },\n                        {\n                            type: 'leaf',\n                            data: {\n                                id: 'right-expander-id',\n                                component: 'right-expander',\n                                snap: true,\n                                minimumWidth: 100,\n                            },\n                        },\n                    ],\n                },\n                {\n                    type: 'leaf',\n                    data: {\n                        id: 'footer-id',\n                        component: 'footer',\n                        minimumHeight: 30,\n                        maximumHeight: 30,\n                    },\n                },\n            ],\n        },\n        width: 1000,\n        height: 1000,\n        orientation: Orientation.VERTICAL,\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<GridviewApi>();\n\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.fromJSON(serializedGridview);\n\n        setApi(event.api);\n    };\n\n    const onKeyDown = (event: React.KeyboardEvent) => {\n        if (!api) {\n            return;\n        }\n\n        console.log(event);\n\n        const leftExpander = api.getPanel('left-expander-id');\n        const rightExpander = api.getPanel('right-expander-id');\n\n        if (!leftExpander || !rightExpander) {\n            return;\n        }\n\n        switch (event.key) {\n            case 'b':\n                if (event.ctrlKey) {\n                    if (event.altKey) {\n                        // toggle right\n                        rightExpander.api.setVisible(\n                            !rightExpander.api.isVisible\n                        );\n                        if (rightExpander.api.width === 0) {\n                            rightExpander.api.setSize({ width: 150 });\n                        }\n                    } else {\n                        // toggle left\n                        leftExpander.api.setVisible(\n                            !leftExpander.api.isVisible\n                        );\n                        if (leftExpander.api.width === 0) {\n                            leftExpander.api.setSize({ width: 150 });\n                        }\n                    }\n                }\n        }\n    };\n\n    return (\n        <div\n            tabIndex={-1}\n            className=\"simple-gridview-example\"\n            onKeyDown={onKeyDown}\n            style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n            <div style={{ flexGrow: 1 }}>\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    hideBorders={true}\n                    orientation={Orientation.VERTICAL}\n                    className={props.theme || 'dockview-theme-abyss'}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import {\n    GridviewApi,\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    LayoutPriority,\n    Orientation,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<GridviewApi>();\n\n    const onReady = (event: GridviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            priority: LayoutPriority.High,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n\n            position: { referencePanel: 'panel_2', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        setApi(event.api);\n    };\n\n    return (\n        <div\n            style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n            <div>\n                <button\n                    onClick={() => {\n                        if (!api) {\n                            return;\n                        }\n\n                        const panel = api.getPanel('panel_3');\n\n                        if (!panel) {\n                            return;\n                        }\n\n                        // panel.api.setVisible(!panel.api.isVisible);\n\n                        if (panel.height === 0) {\n                            panel.api.setSize({ height: 200 });\n                        } else {\n                            panel.api.setSize({ height: 0 });\n                        }\n                    }}\n                >\n                    Resize\n                </button>\n            </div>\n            <div style={{ flexGrow: 1 }}>\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    // proportionalLayout={false}\n                    orientation={Orientation.VERTICAL}\n                    className={props.theme || 'dockview-theme-abyss'}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import {\n    IGridviewPanelProps,\n    Orientation,\n    GridviewReact,\n    GridviewReadyEvent,\n    GridviewApi,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from '../ui/console/console';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const EventsGridview = () => {\n    const [lines, setLines] = React.useState<Line[]>([]);\n    const [checked, setChecked] = React.useState<boolean>(false);\n\n    const [api, setApi] = React.useState<GridviewApi | undefined>();\n\n    React.useEffect(() => {\n        if (!api) {\n            return () => {\n                //noop\n            };\n        }\n\n        const disposables = [\n            api.onDidAddPanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddPanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemovePanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemovePanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActivePanelChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActivePanelChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidLayoutChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutChange` },\n                ]);\n            }),\n            api.onDidLayoutFromJSON((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutFromJSON` },\n                ]);\n            }),\n        ];\n\n        return () => {\n            disposables.forEach((disposable) => disposable.dispose());\n        };\n    }, [api]);\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        setLines((lines) => [\n            ...lines,\n            {\n                timestamp: new Date(),\n                text: `Rebuilding view fromJSON:${checked}`,\n                css: { color: 'yellow', backgroundColor: 'grey' },\n            },\n        ]);\n\n        if (checked) {\n            api.fromJSON({\n                grid: {\n                    root: {\n                        type: 'branch',\n                        data: [\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_3',\n                                            component: 'default',\n                                            params: { title: 'Panel 3' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                    {\n                                        type: 'branch',\n                                        data: [\n                                            {\n                                                type: 'leaf',\n                                                data: {\n                                                    id: 'panel_5',\n                                                    component: 'default',\n                                                    params: {\n                                                        title: 'Panel 5',\n                                                    },\n                                                    snap: false,\n                                                },\n                                                size: 50,\n                                            },\n                                            {\n                                                type: 'branch',\n                                                data: [\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_6',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 6',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 131,\n                                                    },\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_8',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 8',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 131,\n                                                    },\n                                                    {\n                                                        type: 'leaf',\n                                                        data: {\n                                                            id: 'panel_7',\n                                                            component:\n                                                                'default',\n                                                            params: {\n                                                                title: 'Panel 7',\n                                                            },\n                                                            minimumWidth: 10,\n                                                            snap: false,\n                                                        },\n                                                        size: 132,\n                                                    },\n                                                ],\n                                                size: 50,\n                                            },\n                                        ],\n                                        size: 394,\n                                    },\n                                ],\n                                size: 100,\n                            },\n                            {\n                                type: 'leaf',\n                                data: {\n                                    id: 'panel_2',\n                                    component: 'default',\n                                    params: { title: 'Panel 2' },\n                                    snap: false,\n                                },\n                                size: 100,\n                            },\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_1',\n                                            component: 'default',\n                                            params: { title: 'Panel 1' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            id: 'panel_4',\n                                            component: 'default',\n                                            params: { title: 'Panel 4' },\n                                            snap: false,\n                                        },\n                                        size: 394,\n                                    },\n                                ],\n                                size: 100,\n                            },\n                        ],\n                        size: 788,\n                    },\n                    width: 788,\n                    height: 300,\n                    orientation: Orientation.VERTICAL,\n                },\n                activePanel: 'panel_8',\n            });\n            return;\n        }\n\n        api.clear();\n        api.orientation = Orientation.VERTICAL;\n\n        api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n    }, [api, checked]);\n\n    const onReady = (event: GridviewReadyEvent) => {\n        setApi(event.api);\n    };\n\n    return (\n        <>\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    onChange={(e) => setChecked(e.target.checked)}\n                />\n                <span>{'fromJSON'}</span>\n            </label>\n            <div\n                style={{\n                    height: '300px',\n                    backgroundColor: 'rgb(30,30,30)',\n                    color: 'white',\n                    margin: '20px 0px',\n                }}\n            >\n                <GridviewReact\n                    components={components}\n                    onReady={onReady}\n                    proportionalLayout={false}\n                    orientation={Orientation.VERTICAL}\n                    className=\"dockview-theme-abyss\"\n                />\n            </div>\n\n            <Console lines={lines} />\n        </>\n    );\n};\n","import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: {\n    id: string;\n    hideThemePicker?: boolean;\n}) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            {!props.hideThemePicker && <ThemePicker />}\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton\n                    id={sandboxId}\n                    hideThemePicker={props.hideThemePicker}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","import * as React from 'react';\nimport CodeBlock from '@theme/CodeBlock';\nimport './docRef.scss';\n\nexport interface DocRefProps {\n    declaration: string;\n}\n\nimport docsJson from '../../../generated/api.output.json';\n\ntype DocsContent = { kind: string; text: string; tag?: string };\ntype DocsTag = { tag: string; content: DocsContent[] };\ntype DocsComment = {\n    summary?: DocsContent[];\n    blockTags?: DocsTag[];\n};\ntype DocsJson = {\n    [index: string]: Array<{\n        name: string;\n        signature: string;\n        comment?: DocsComment;\n        type: string;\n    }>;\n};\n\nexport const Text = (props: { content: DocsContent[] }) => {\n    return (\n        <div className=\"doc-text\">\n            {props.content.map((piece, i) => {\n                switch (piece.kind) {\n                    case 'text': {\n                        return <span key={i}>{piece.text}</span>;\n                    }\n                    case 'code':\n                        return (\n                            <code key={i}>\n                                {piece.text.substring(1, piece.text.length - 1)}\n                            </code>\n                        );\n                    default:\n                        throw new Error(`unhandled piece ${piece.kind}`);\n                }\n            })}\n        </div>\n    );\n};\n\nexport const Tags = (props: { tags: DocsTag[] }) => {\n    return (\n        <div>\n            {props.tags.map((tag, i) => {\n                return (\n                    <div key={i}>\n                        <div>{tag.tag}</div>\n                        <Text content={tag.content} />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport const Summary = (props: { summary: DocsComment }) => {\n    return (\n        <div>\n            <Text content={props.summary.summary ?? []} />\n            {/* <Tags tags={props.summary.blockTags ?? []} /> */}\n        </div>\n    );\n};\n\nexport const Markdown = (props: { children: string }) => {\n    return <span>{props.children}</span>;\n};\n\nexport const DocRef = (props: DocRefProps) => {\n    const docs = React.useMemo(\n        () => (docsJson as DocsJson)[props.declaration],\n        [props.declaration]\n    );\n\n    if (!docs) {\n        return null;\n    }\n\n    return (\n        <div>\n            <table className=\"doc-ref-table\">\n                <tbody>\n                    {docs.map((doc) => {\n                        return (\n                            <tr>\n                                <th\n                                    style={{\n                                        width: '30%',\n                                        display: 'flex',\n                                    }}\n                                >\n                                    <div\n                                        style={{\n                                            // width: '30%',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            alignItems: 'start',\n                                        }}\n                                    >\n                                        <h6\n                                            style={{\n                                                fontFamily: 'monospace',\n                                                fontSize: '1.2em',\n                                            }}\n                                        >\n                                            {doc.name}\n                                        </h6>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                alignItems: 'start',\n                                            }}\n                                        >\n                                            {/* <span\n                                                style={{\n                                                    fontSize: '0.75em',\n                                                    color: 'var(--ifm-color-content-secondary)',\n                                                }}\n                                            >\n                                                {'Type'}\n                                            </span>\n                                            <span\n                                                style={{\n                                                    color: 'var(--ifm-color-primary)',\n                                                }}\n                                            >\n                                                {doc.type}\n                                            </span> */}\n                                        </div>\n                                    </div>\n                                </th>\n                                <th\n                                // style={{ width: '70%' }}\n                                >\n                                    {/* <div>{'-'}</div> */}\n                                    <div>\n                                        <div>\n                                            {doc.comment && (\n                                                <Summary\n                                                    summary={doc.comment}\n                                                />\n                                            )}\n                                        </div>\n                                        <CodeBlock language=\"tsx\">\n                                            {doc.signature}\n                                        </CodeBlock>\n                                    </div>\n                                </th>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {\n\tdescription: 'Gridview Documentation'\n};\nexport const contentTitle = 'Gridview';\nexport const metadata = {\n  \"unversionedId\": \"components/gridview\",\n  \"id\": \"components/gridview\",\n  \"title\": \"Gridview\",\n  \"description\": \"Gridview Documentation\",\n  \"source\": \"@site/docs/components/gridview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/gridview\",\n  \"permalink\": \"/docs/next/components/gridview\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/gridview.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {\n    \"description\": \"Gridview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Dockview\",\n    \"permalink\": \"/docs/next/components/dockview\"\n  },\n  \"next\": {\n    \"title\": \"Paneview\",\n    \"permalink\": \"/docs/next/components/paneview\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { MultiFrameworkContainer } from '@site/src/components/ui/container';\nimport SimpleGridview from '@site/sandboxes/simple-gridview/src/app';\nimport EditorGridview from '@site/sandboxes/editor-gridview/src/app';\n// import SimpleGridview from '@site/sandboxes/simple-gridview/src/app';\nimport { EventsGridview } from '@site/src/components/gridview/events';\n// import IDEExample from '@site/sandboxes/ide-example/src/app';\nimport Link from '@docusaurus/Link';\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\nexport const toc = [{\n  value: 'Introduction',\n  id: 'introduction',\n  level: 2\n}, {\n  value: 'GridviewReact Component',\n  id: 'gridviewreact-component',\n  level: 2\n}, {\n  value: 'Gridview API',\n  id: 'gridview-api',\n  level: 2\n}, {\n  value: 'Gridview Panel API',\n  id: 'gridview-panel-api',\n  level: 2\n}, {\n  value: 'Resizing',\n  id: 'resizing',\n  level: 2\n}, {\n  value: 'Panel Resizing',\n  id: 'panel-resizing',\n  level: 3\n}, {\n  value: 'Panels',\n  id: 'panels',\n  level: 2\n}, {\n  value: 'Add Panel',\n  id: 'add-panel',\n  level: 3\n}, {\n  value: 'Theme',\n  id: 'theme',\n  level: 2\n}, {\n  value: 'Events',\n  id: 'events',\n  level: 2\n}, {\n  value: 'Complex Example',\n  id: 'complex-example',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"gridview\"\n    }}>{`Gridview`}</h1>\n    <p>{`Gridview is a collection of nested splitviews and is the foundation for the `}<a parentName=\"p\" {...{\n        \"href\": \"./dockview\"\n      }}>{`Dockview`}</a>{` component.\nGridview serves a purpose when you want only the nested splitviews with no tabs and no headers.`}</p>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <MultiFrameworkContainer height={600} sandboxId=\"simple-gridview\" react={SimpleGridview} mdxType=\"MultiFrameworkContainer\" />\n    <h2 {...{\n      \"id\": \"gridviewreact-component\"\n    }}>{`GridviewReact Component`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { ReactGridview } from 'dockview';\n`}</code></pre>\n    <DocRef declaration=\"IGridviewReactProps\" mdxType=\"DocRef\" />\n    <h2 {...{\n      \"id\": \"gridview-api\"\n    }}>{`Gridview API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const onReady = (event: GridviewReadyEvent) => {\n    // event.api...\n};\n`}</code></pre>\n    <DocRef declaration=\"GridviewApi\" mdxType=\"DocRef\" />\n    <h2 {...{\n      \"id\": \"gridview-panel-api\"\n    }}>{`Gridview Panel API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{\\`My first panel has the title: \\${props.params.title}\\`}</div>;\n};\n`}</code></pre>\n    <DocRef declaration=\"GridviewPanelApi\" mdxType=\"DocRef\" />\n    <h2 {...{\n      \"id\": \"resizing\"\n    }}>{`Resizing`}</h2>\n    <h3 {...{\n      \"id\": \"panel-resizing\"\n    }}>{`Panel Resizing`}</h3>\n    <p>{`You can set the size of a panel using `}<inlineCode parentName=\"p\">{`props.api.setSize(...)`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// it's mandatory to provide either a height or a width, providing both is optional\nprops.api.setSize({\n    height: 100,\n    width: 200,\n});\n`}</code></pre>\n    <p>{`You can update any constraints on the panel. All parameters are optional.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`props.api.setConstraints({\n    minimumHeight: 100,\n    maximumHeight: 1000\n    minimumWidth: 100,\n    maximumWidth: 1000\n});\n`}</code></pre>\n    <p>{`You can hide a panel by setting it's visibility to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`. Hidden panels retain their size\nat the point of being hidden, if made visible again they will try to resize to the remembered size.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`props.api.setVisible(false);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"panels\"\n    }}>{`Panels`}</h2>\n    <h3 {...{\n      \"id\": \"add-panel\"\n    }}>{`Add Panel`}</h3>\n    <p>{`Using the gridview API you can access the `}<inlineCode parentName=\"p\">{`addPanel`}</inlineCode>{` method which returns an instance of the created panel.\nThe minimum method signature is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n});\n`}</code></pre>\n    <p>{`where `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` is the unique id of the panel and `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{` is the implenentation which\nwill be used to render the panel. You will have registered this using the `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` prop of the `}<inlineCode parentName=\"p\">{`GridviewReactComponent`}</inlineCode>{` component.`}</p>\n    <p>{`You can pass bounding constraints to limit the size of the panel.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    minimumHeight: 100,\n    maximumHeight: 1000,\n    minimumWidth: 100,\n    maximumWidth: 1000,\n});\n`}</code></pre>\n    <p>{`You can pass a `}<inlineCode parentName=\"p\">{`snap`}</inlineCode>{` parameter which will hide the panel when an attempt is made to move it beyond a minimum width or height if one exists.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    minimumHeight: 100,\n    snap: true,\n});\n`}</code></pre>\n    <p>{`You can pass a `}<inlineCode parentName=\"p\">{`priority`}</inlineCode>{` parameter which will keep the panel a certain priority when being resized. This is useful when you know you want this\npanel to always take the first available or last available space. The default is `}<inlineCode parentName=\"p\">{`LayoutPriority.Normal`}</inlineCode>{` which defers space allocations to the libraries discression.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    minimumHeight: 100,\n    priority: LayoutPriority.High,\n});\n`}</code></pre>\n    <p>{`You can pass properties to the panel using the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` key.\nYou can update these properties through the panels `}<inlineCode parentName=\"p\">{`api`}</inlineCode>{` object and its `}<inlineCode parentName=\"p\">{`updateParameters`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    params: {\n        myCustomKey: 'my_custom_value',\n    },\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`panel.api.updateParameters({\n    myCustomKey: 'my_custom_value',\n    myOtherCustomKey: 'my_other_custom_key',\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note `}<inlineCode parentName=\"p\">{`updateParameters`}</inlineCode>{` does not accept partial parameter updates, you should call it with the entire set of parameters\nyou want the panel to receive.`}</p>\n    </blockquote>\n    <p>{`Finally `}<inlineCode parentName=\"p\">{`addPanel`}</inlineCode>{` accepts a `}<inlineCode parentName=\"p\">{`position`}</inlineCode>{` object which tells dockview where to place the panel.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This object accepts a `}<inlineCode parentName=\"li\">{`referencePanel`}</inlineCode>{` which can be the associated id as a string\nor the panel object reference.`}</li>\n      <li parentName=\"ul\">{`This object accepts a `}<inlineCode parentName=\"li\">{`direction`}</inlineCode>{` property which dictates where,\nrelative to the provided reference the new panel will be placed.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If a `}<inlineCode parentName=\"p\">{`referencePanel`}</inlineCode>{` is not passed then the `}<inlineCode parentName=\"p\">{`direction`}</inlineCode>{` will be treated as absolute.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If no `}<inlineCode parentName=\"p\">{`direction`}</inlineCode>{` is provided the library will place the new panel in a pre-determined position.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const panel = api.addPanel({\n    id: 'panel_1',\n    component: 'default',\n});\n\nconst panel2 = api.addPanel({\n    id: 'panel_2',\n    component: 'default',\n    position: {\n        referencePanel: panel1,\n        direction: 'right',\n    },\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note `}<inlineCode parentName=\"p\">{`updateParameters`}</inlineCode>{` does not accept partial parameter updates, you should call it with the entire set of parameters\nyou want the panel to receive.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"theme\"\n    }}>{`Theme`}</h2>\n    <p>{`As well as importing the `}<inlineCode parentName=\"p\">{`dockview`}</inlineCode>{` stylesheet you must provide a class-based theme somewhere in your application. For example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// Providing a theme directly through the DockviewReact component props\n<GridviewReact className=\"dockview-theme-dark\" />\n\n// Providing a theme somewhere in the DOM tree\n<div className=\"dockview-theme-dark\">\n  <div>\n    {/**...  */}\n    <GridviewReact  />\n  </div>\n</div>\n`}</code></pre>\n    <p>{`You can find more details on theming `}<Link to=\"../theme\" mdxType=\"Link\">{`here`}</Link>{`.`}</p>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p><inlineCode parentName=\"p\">{`GridviewReact`}</inlineCode>{` exposes a number of events that the developer can listen to and below is a simple example with a log panel showing those events that occur.`}</p>\n    <EventsGridview mdxType=\"EventsGridview\" />\n    <h2 {...{\n      \"id\": \"complex-example\"\n    }}>{`Complex Example`}</h2>\n    <MultiFrameworkContainer height={600} sandboxId=\"editor-gridview\" react={EditorGridview} hideThemePicker={true} mdxType=\"MultiFrameworkContainer\" />\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["BrowserOnly","_ref","children","fallback","useIsBrowser","React","TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","width","height","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","from","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","contentSize","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","array","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","getNode","_getViews","nodeCachedVisibleSize","path","n","l","parent","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","onDragOver","preventDefault","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","transform","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","DockviewDropTargets","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","isFloating","Panel","show","display","hide","renderPanel","isActive","renderer","greadyRenderContainer","content","setReferenceContentContainer","focusTracker","openPanel","_width","_height","closePanel","defaultRenderer","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","model","setActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","findIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_isFloating","groupPanel","_onDidFloatingStateChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","disableResizing","_disableResizing","entry","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onDidVisibilityChange","onDidVisibilityChange","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","DockviewGroupPanelApiImpl","_group","onDidFloatingStateChange","moveTo","moveGroupOrPanel","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","GreadyRenderContainer","allIds","referenceContainer","createFocusableElement","focusContainer","box2","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","floatingGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","minimumHeightWithinViewport","querySelector","floatingGroupPanel","t","createGroupAtLocation","hasOrientationChanged","hasFloatingGroupOptionsChanged","floating","includePanel","doSetGroupAndPanelActive","collection","floats","floatingGroup","grid","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","err","hasActiveGroup","hasActivePanel","entries","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","footer","sidebar","main","justifyContent","flexDirection","setApi","onKeyDown","log","leftExpander","rightExpander","ctrlKey","altKey","theme","EventsGridview","lines","setLines","checked","setChecked","timestamp","text","css","onChange","margin","Console","scrollTop","scrollHeight","line","pad","getHours","getMinutes","getSeconds","getMilliseconds","formatTime","CodeSandboxButton","url","hideThemePicker","ThemePicker","alignItems","href","fontWeight","paddingRight","Spinner","Container","injectVanillaJS","sandboxId","ReactIcon","marginRight","src","useBaseUrl","JavascriptIcon","themes","setTheme","localStorage","getItem","setItem","dispatchEvent","StorageEvent","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","background","zIndex","react","cursor","border","MultiFrameworkContainer","Text","piece","kind","substring","Summary","summary","DocRef","docs","docsJson","declaration","doc","fontFamily","name","comment","CodeBlock","language","signature","frontMatter","description","contentTitle","metadata","assets","toc","level","layoutProps","MDXLayout","MDXContent","mdx","_extends","mdxType","parentName","SimpleGridview","Link","EditorGridview","isMDXComponent"],"sourceRoot":""}