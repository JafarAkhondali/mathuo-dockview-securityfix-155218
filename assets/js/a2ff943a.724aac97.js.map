{"version":3,"file":"assets/js/a2ff943a.724aac97.js","mappings":"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,GACR,CACD,MAAS,aACT,GAAM,aACN,MAAS,GACR,CACD,MAAS,WACT,GAAM,WACN,MAAS,GACR,CACD,MAAS,iBACT,GAAM,iBACN,MAAS,GACR,CACD,MAAS,qBACT,GAAM,qBACN,MAAS,GACR,CACD,MAAS,YACT,GAAM,YACN,MAAS,GACR,CACD,MAAS,gBACT,GAAM,gBACN,MAAS,GACR,CACD,MAAS,sBACT,GAAM,sBACN,MAAS,GACR,CACD,MAAS,sBACT,GAAM,sBACN,MAAS,GACR,CACD,MAAS,2BACT,GAAM,2BACN,MAAS,GACR,CACD,MAAS,4BACT,GAAM,4BACN,MAAS,GACR,CACD,MAAS,kBACT,GAAM,kBACN,MAAS,GACR,CACD,MAAS,gBACT,GAAM,gBACN,MAAS,GACR,CACD,MAAS,mBACT,GAAM,mBACN,MAAS,GACR,CACD,MAAS,SACT,GAAM,SACN,MAAS,GACR,CACD,MAAS,YACT,GAAM,YACN,MAAS,GACR,CACD,MAAS,eACT,GAAM,eACN,MAAS,GACR,CACD,MAAS,aACT,GAAM,aACN,MAAS,GACR,CACD,MAAS,eACT,GAAM,eACN,MAAS,GACR,CACD,MAAS,kBACT,GAAM,kBACN,MAAS,GACR,CACD,MAAS,cACT,GAAM,cACN,MAAS,GACR,CACD,MAAS,UACT,GAAM,UACN,MAAS,GACR,CACD,MAAS,qBACT,GAAM,qBACN,MAAS,GACR,CACD,MAAS,oBACT,GAAM,oBACN,MAAS,GACR,CACD,MAAS,mBACT,GAAM,mBACN,MAAS,GACR,CACD,MAAS,iBACT,GAAM,iBACN,MAAS,GACR,CACD,MAAS,kBACT,GAAM,kBACN,MAAS,GACR,CACD,MAAS,aACT,GAAM,aACN,MAAS,GACR,CACD,MAAS,SACT,GAAM,SACN,MAAS,GACR,CACD,MAAS,eACT,GAAM,eACN,MAAS,GACR,CACD,MAAS,uBACT,GAAM,uBACN,MAAS,GACR,CACD,MAAS,cACT,GAAM,cACN,MAAS,GACR,CACD,MAAS,UACT,GAAM,UACN,MAAS,GACR,CACD,MAAS,SACT,GAAM,SACN,MAAS,GACR,CACD,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","sources":["webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/constants.ts","webpack://dockview-docs/../dockview-core/src/overlayRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/popoutWindow.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./sandboxes/constraints-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/customheader-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/dnd-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/events-dockview/src/console.tsx","webpack://dockview-docs/./sandboxes/events-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/externaldnd-dockview/src/treeview.tsx","webpack://dockview-docs/./sandboxes/externaldnd-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/floatinggroup-dockview/src/utils.tsx","webpack://dockview-docs/./sandboxes/floatinggroup-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/fullwidthtab-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/headeractions-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/iframe-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/javascript/fullwidthtab-dockview/src/app.ts","webpack://dockview-docs/./sandboxes/javascript/simple-dockview/src/app.ts","webpack://dockview-docs/./sandboxes/javascript/tabheight-dockview/src/app.ts","webpack://dockview-docs/./sandboxes/keyboard-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/layout-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/lockedgroup-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/maximizegroup-dockview/src/utils.tsx","webpack://dockview-docs/./sandboxes/maximizegroup-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/nativeapp-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/nested-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/popoutgroup-dockview/src/utils.tsx","webpack://dockview-docs/./sandboxes/popoutgroup-dockview/src/popover.tsx","webpack://dockview-docs/./sandboxes/popoutgroup-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/rendering-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/rendermode-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/resize-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/resizecontainer-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/scrollbars-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/simple-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/tabheight-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/updatetitle-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/watermark-dockview/src/app.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./src/components/ui/reference/docRef.tsx","webpack://dockview-docs/./versioned_docs/version-1.9.2/components/dockview.mdx"],"sourcesContent":["class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nexport class DockviewEvent {\n    private _defaultPrevented = false;\n\n    get defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n\n    preventDefault(): void {\n        this._defaultPrevented = true;\n    }\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n\n    export function from(func: () => void): IDisposable {\n        return {\n            dispose: () => {\n                func();\n            },\n        };\n    }\n}\n\nexport class CompositeDisposable {\n    private _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        if (this._isDisposed) {\n            return;\n        }\n\n        this._isDisposed = true;\n        this._disposables.forEach((arg) => arg.dispose());\n        this._disposables = [];\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function addStyles(document: Document, styleSheetList: StyleSheetList) {\n    const styleSheets = Array.from(styleSheetList);\n\n    for (const styleSheet of styleSheets) {\n        if (styleSheet.href) {\n            const link = document.createElement('link');\n            link.href = styleSheet.href;\n            link.type = styleSheet.type;\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n        }\n\n        let cssTexts: string[] = [];\n\n        try {\n            if (styleSheet.cssRules) {\n                cssTexts = Array.from(styleSheet.cssRules).map(\n                    (rule) => rule.cssText\n                );\n            }\n        } catch (err) {\n            // security errors (lack of permissions), ignore\n        }\n\n        for (const rule of cssTexts) {\n            const style = document.createElement('style');\n            style.appendChild(document.createTextNode(rule));\n            document.head.appendChild(style);\n        }\n    }\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n\n/**\n * Check whether an element is in the DOM (including the Shadow DOM)\n * @see https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\n */\nexport function isInDocument(element: Element): boolean {\n    let currentElement: Element | ParentNode = element;\n\n    while (currentElement?.parentNode) {\n        if (currentElement.parentNode === document) {\n            return true;\n        } else if (currentElement.parentNode instanceof DocumentFragment) {\n            // handle shadow DOMs\n            currentElement = (currentElement.parentNode as ShadowRoot).host;\n        } else {\n            currentElement = currentElement.parentNode;\n        }\n    }\n\n    return false;\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private _contentSize = 0;\n    private _proportions: (number | undefined)[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get contentSize(): number {\n        return this._contentSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): (number | undefined)[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            let total = 0;\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                } else {\n                    size -= item.size;\n                }\n            }\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(\n                        Math.round((proportion * size) / total),\n                        item.minimumSize,\n                        item.maximumSize\n                    );\n                }\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this._proportions = this.viewItems.map((i) =>\n                i.visible ? i.size / this._contentSize : undefined\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this._contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidVisibilityChange = new Emitter<boolean>();\n    readonly onDidVisibilityChange: Event<boolean> =\n        this._onDidVisibilityChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(\n                  ...this.children.map((c, index) =>\n                      this.splitview.isViewVisible(index)\n                          ? c.minimumOrthogonalSize\n                          : 0\n                  )\n              );\n    }\n\n    get maximumSize(): number {\n        return Math.min(\n            ...this.children.map((c, index) =>\n                this.splitview.isViewVisible(index)\n                    ? c.maximumOrthogonalSize\n                    : Number.POSITIVE_INFINITY\n            )\n        );\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this._onDidVisibilityChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n     setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        const wereAllChildrenHidden = this.splitview.contentSize === 0;\n        this.splitview.setViewVisible(index, visible);\n        const areAllChildrenHidden = this.splitview.contentSize === 0;\n\n        // If all children are hidden then the parent should hide the entire splitview\n        // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n        if (\n            (visible && wereAllChildrenHidden) ||\n            (!visible && areAllChildrenHidden)\n        ) {\n            this._onDidVisibilityChange.fire(visible);\n        }\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = new CompositeDisposable(\n            Event.any(...this.children.map((c) => c.onDidChange))((e) => {\n                /**\n                 * indicate a change has occured to allows any re-rendering but don't bubble\n                 * event because that was specific to this branch\n                 */\n                this._onDidChange.fire({ size: e.orthogonalSize });\n            }),\n            ...this.children.map((c, i) => {\n                if (c instanceof BranchNode) {\n                    return c.onDidVisibilityChange((visible) => {\n                        this.setChildVisible(i, visible);\n                    });\n                }\n                return Disposable.NONE;\n            })\n        );\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    readonly element: HTMLElement;\n\n    private _root: BranchNode | undefined;\n    private _maximizedNode:\n        | { leaf: LeafNode; hiddenOnMaximize: LeafNode[] }\n        | undefined = undefined;\n    private readonly disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidMaxmizedNodeChange = new Emitter<void>();\n    readonly onDidMaxmizedNodeChange = this._onDidMaxmizedNodeChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    maximizedView(): IGridView | undefined {\n        return this._maximizedNode?.leaf.view;\n    }\n\n    hasMaximizedView(): boolean {\n        return this._maximizedNode !== undefined;\n    }\n\n    maximizeView(view: IGridView): void {\n        const location = getGridLocation(view.element);\n        const [_, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            return;\n        }\n\n        if (this._maximizedNode?.leaf === node) {\n            return;\n        }\n\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const hiddenOnMaximize: LeafNode[] = [];\n\n        function hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n            for (let i = 0; i < parent.children.length; i++) {\n                const child = parent.children[i];\n                if (child instanceof LeafNode) {\n                    if (child !== exclude) {\n                        if (parent.isChildVisible(i)) {\n                            parent.setChildVisible(i, false);\n                        } else {\n                            hiddenOnMaximize.push(child);\n                        }\n                    }\n                } else {\n                    hideAllViewsBut(child, exclude);\n                }\n            }\n        }\n\n        hideAllViewsBut(this.root, node);\n        this._maximizedNode = { leaf: node, hiddenOnMaximize };\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    exitMaximizedView(): void {\n        if (!this._maximizedNode) {\n            return;\n        }\n\n        const hiddenOnMaximize = this._maximizedNode.hiddenOnMaximize;\n\n        function showViewsInReverseOrder(parent: BranchNode): void {\n            for (let index = parent.children.length - 1; index >= 0; index--) {\n                const child = parent.children[index];\n                if (child instanceof LeafNode) {\n                    if (!hiddenOnMaximize.includes(child)) {\n                        parent.setChildVisible(index, true);\n                    }\n                } else {\n                    showViewsInReverseOrder(child);\n                }\n            }\n        }\n\n        showViewsInReverseOrder(this.root);\n\n        this._maximizedNode = undefined;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    public serialize(): SerializedGridview<any> {\n        if (this.hasMaximizedView()) {\n            /**\n             * do not persist maximized view state\n             * firstly exit any maximized views to ensure the correct dimensions are persisted\n             */\n            this.exitMaximizedView();\n        }\n\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this._onDidMaxmizedNodeChange.dispose();\n        this.root.dispose();\n        this._maximizedNode = undefined;\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize<T>(\n        json: SerializedGridview<T>,\n        deserializer: IViewDeserializer\n    ): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this._maximizedNode = undefined;\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\nimport { Box } from '../types';\nimport {\n    DockviewDidDropEvent,\n    DockviewWillDropEvent,\n    WillShowOverlayLocationEvent,\n} from '../dockview/dockviewGroupPanelModel';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDidDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs but before dockview handles it giving the user an opportunity to intecept and\n     * prevent the event from occuring using the standard `preventDefault()` syntax.\n     *\n     * Preventing certain events may causes unexpected behaviours, use carefully.\n     */\n    get onWillDrop(): Event<DockviewWillDropEvent> {\n        return this.component.onWillDrop;\n    }\n\n    /**\n     *\n     */\n    get onWillShowOverlay(): Event<WillShowOverlayLocationEvent> {\n        return this.component.onWillShowOverlay;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    maximizeGroup(panel: IDockviewPanel): void {\n        this.component.maximizeGroup(panel.group);\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.component.hasMaximizedGroup();\n    }\n\n    exitMaxmizedGroup(): void {\n        this.component.exitMaximizedGroup();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.component.onDidMaxmizedGroupChange;\n    }\n\n    /**\n     * Add a popout group in a new Window\n     */\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n            onDidOpen?: (event: { id: string; window: Window }) => void;\n            onWillClose?: (event: { id: string; window: Window }) => void;\n        }\n    ): Promise<void> {\n        return this.component.addPopoutGroup(item, options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { DockviewEvent, Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport class WillShowOverlayEvent\n    extends DockviewEvent\n    implements DroptargetEvent\n{\n    get nativeEvent(): DragEvent {\n        return this.options.nativeEvent;\n    }\n\n    get position(): Position {\n        return this.options.position;\n    }\n\n    constructor(\n        private readonly options: {\n            nativeEvent: DragEvent;\n            position: Position;\n        }\n    ) {\n        super();\n    }\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport type MeasuredValue = { value: number; type: 'pixels' | 'percentage' };\n\nexport type DroptargetOverlayModel = {\n    size?: MeasuredValue;\n    activationSize?: MeasuredValue;\n};\n\nconst DEFAULT_ACTIVATION_SIZE: MeasuredValue = {\n    value: 20,\n    type: 'percentage',\n};\n\nconst DEFAULT_SIZE: MeasuredValue = {\n    value: 50,\n    type: 'percentage',\n};\n\nconst SMALL_WIDTH_BOUNDARY = 100;\nconst SMALL_HEIGHT_BOUNDARY = 100;\n\nexport interface DroptargetOptions {\n    canDisplayOverlay: CanDisplayOverlay;\n    acceptedTargetZones: Position[];\n    overlayModel?: DroptargetOverlayModel;\n}\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onWillShowOverlay = new Emitter<WillShowOverlayEvent>();\n    readonly onWillShowOverlay: Event<WillShowOverlayEvent> =\n        this._onWillShowOverlay.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: DroptargetOptions\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const willShowOverlayEvent = new WillShowOverlayEvent({\n                    nativeEvent: e,\n                    position: quadrant,\n                });\n\n                /**\n                 * Provide an opportunity to prevent the overlay appearing and in turn\n                 * any dnd behaviours\n                 */\n                this._onWillShowOverlay.fire(willShowOverlayEvent);\n\n                if (willShowOverlayEvent.defaultPrevented) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this._state = quadrant;\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this._onWillShowOverlay, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    setOverlayModel(model: DroptargetOverlayModel): void {\n        this.options.overlayModel = model;\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance of DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < SMALL_WIDTH_BOUNDARY;\n        const isSmallY = height < SMALL_HEIGHT_BOUNDARY;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 1;\n\n        const sizeOptions = this.options.overlayModel?.size ?? DEFAULT_SIZE;\n\n        if (sizeOptions.type === 'percentage') {\n            size = clamp(sizeOptions.value, 0, 100) / 100;\n        } else {\n            if (rightClass || leftClass) {\n                size = clamp(0, sizeOptions.value, width) / width;\n            }\n            if (topClass || bottomClass) {\n                size = clamp(0, sizeOptions.value, height) / height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-small-vertical',\n            isSmallY\n        );\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-small-horizontal',\n            isSmallX\n        );\n        toggleClass(this.overlayElement, 'dv-drop-target-left', isLeft);\n        toggleClass(this.overlayElement, 'dv-drop-target-right', isRight);\n        toggleClass(this.overlayElement, 'dv-drop-target-top', isTop);\n        toggleClass(this.overlayElement, 'dv-drop-target-bottom', isBottom);\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-center',\n            quadrant === 'center'\n        );\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const activationSizeOptions =\n            this.options.overlayModel?.activationSize ??\n            DEFAULT_ACTIVATION_SIZE;\n\n        const isPercentage = activationSizeOptions.type === 'percentage';\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                activationSizeOptions.value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            activationSizeOptions.value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel, options: { asActive: boolean }): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (\n                    !data &&\n                    event.shiftKey &&\n                    this.group.location.type !== 'floating'\n                ) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(event, position, 'panel');\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(\n        panel: IDockviewPanel,\n        options: { asActive: boolean } = { asActive: true }\n    ): void {\n        const doRender =\n            options.asActive ||\n            (this.panel && this.group.isPanelActive(this.panel));\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.overlayRenderContainer.detatch(panel);\n                if (this.panel) {\n                    if (doRender) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container = this.accessor.overlayRenderContainer.attach({\n                    panel,\n                    referenceContainer: this,\n                });\n                break;\n        }\n\n        if (doRender) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        this.renderPanel(panel);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.panel.api.renderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n        }\n        this.panel = undefined;\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport {\n    DroptargetEvent,\n    Droptarget,\n    Position,\n    WillShowOverlayEvent,\n} from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport class Tab extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly dropTarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    readonly onWillShowOverlay: Event<WillShowOverlayEvent>;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.dropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    'tab'\n                );\n            },\n        });\n\n        this.onWillShowOverlay = this.dropTarget.onWillShowOverlay;\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.dropTarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.dropTarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.location.type === 'floating' && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport {\n    Droptarget,\n    DroptargetEvent,\n    WillShowOverlayEvent,\n} from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly dropTraget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    readonly onWillShowOverlay: Event<WillShowOverlayEvent>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.dropTraget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(event, position, 'panel');\n            },\n        });\n\n        this.onWillShowOverlay = this.dropTraget.onWillShowOverlay;\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.dropTraget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.dropTraget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { Tab } from '../tab/tab';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { WillShowOverlayEvent } from '../../../dnd/droptarget';\nimport { DockviewGroupDropLocation } from '../../dockviewGroupPanelModel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    readonly onDrop: Event<TabDropIndexEvent>;\n    readonly onTabDragStart: Event<TabDragEvent>;\n    readonly onGroupDragStart: Event<GroupDragEvent>;\n    readonly onWillShowOverlay: Event<{\n        event: WillShowOverlayEvent;\n        kind: DockviewGroupDropLocation;\n    }>;\n    hidden: boolean;\n    delete(id: string): void;\n    indexOf(id: string): number;\n    setActive(isGroupActive: boolean): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    isActive(tab: Tab): boolean;\n    closePanel(panel: IDockviewPanel): void;\n    openPanel(panel: IDockviewPanel, index?: number): void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<Tab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onWillShowOverlay = new Emitter<{\n        event: WillShowOverlayEvent;\n        kind: DockviewGroupDropLocation;\n    }>();\n    readonly onWillShowOverlay: Event<{\n        event: WillShowOverlayEvent;\n        kind: DockviewGroupDropLocation;\n    }> = this._onWillShowOverlay.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: Tab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this._onWillShowOverlay,\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            this.voidContainer.onWillShowOverlay((event) => {\n                this._onWillShowOverlay.fire({ event, kind: 'header_space' });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        this.group.api.location.type !== 'floating'\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<Tab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.location.type === 'floating' &&\n                    this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            }),\n            tab.onWillShowOverlay((event) => {\n                this._onWillShowOverlay.fire({ event, kind: 'tab' });\n            })\n        );\n\n        const value: IValueDisposable<Tab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Position, WillShowOverlayEvent } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport {\n    addDisposableListener,\n    DockviewEvent,\n    Emitter,\n    Event,\n} from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface DockviewGroupChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport class DockviewDidDropEvent extends DockviewEvent {\n    get nativeEvent(): DragEvent {\n        return this.options.nativeEvent;\n    }\n\n    get position(): Position {\n        return this.options.position;\n    }\n\n    get panel(): IDockviewPanel | undefined {\n        return this.options.panel;\n    }\n\n    get group(): DockviewGroupPanel | undefined {\n        return this.options.group;\n    }\n\n    get api(): DockviewApi {\n        return this.options.api;\n    }\n\n    constructor(\n        private readonly options: {\n            readonly nativeEvent: DragEvent;\n            readonly position: Position;\n            readonly panel?: IDockviewPanel;\n            getData(): PanelTransfer | undefined;\n            group?: DockviewGroupPanel;\n            api: DockviewApi;\n        }\n    ) {\n        super();\n    }\n\n    getData(): PanelTransfer | undefined {\n        return this.options.getData();\n    }\n}\n\nexport class DockviewWillDropEvent extends DockviewDidDropEvent {\n    private readonly _kind: DockviewGroupDropLocation;\n\n    get kind(): DockviewGroupDropLocation {\n        return this._kind;\n    }\n\n    constructor(options: {\n        readonly nativeEvent: DragEvent;\n        readonly position: Position;\n        readonly panel?: IDockviewPanel;\n        getData(): PanelTransfer | undefined;\n        kind: DockviewGroupDropLocation;\n        group?: DockviewGroupPanel;\n        api: DockviewApi;\n    }) {\n        super(options);\n\n        this._kind = options.kind;\n    }\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport type DockviewGroupDropLocation = 'tab' | 'header_space' | 'content';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<DockviewDidDropEvent>;\n    readonly onWillDrop: Event<DockviewWillDropEvent>;\n    readonly onDidAddPanel: Event<DockviewGroupChangeEvent>;\n    readonly onDidRemovePanel: Event<DockviewGroupChangeEvent>;\n    readonly onDidActivePanelChange: Event<DockviewGroupChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport type DockviewGroupLocation =\n    | { type: 'grid' }\n    | { type: 'floating' }\n    | { type: 'popout'; getWindow: () => Window };\n\nexport interface WillShowOverlayLocationEvent {\n    event: WillShowOverlayEvent;\n    kind: DockviewGroupDropLocation;\n}\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private _location: DockviewGroupLocation = { type: 'grid' };\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDidDropEvent>();\n    readonly onDidDrop: Event<DockviewDidDropEvent> = this._onDidDrop.event;\n\n    private readonly _onWillDrop = new Emitter<DockviewWillDropEvent>();\n    readonly onWillDrop: Event<DockviewWillDropEvent> = this._onWillDrop.event;\n\n    private readonly _onWillShowOverlay =\n        new Emitter<WillShowOverlayLocationEvent>();\n    readonly onWillShowOverlay: Event<WillShowOverlayLocationEvent> =\n        this._onWillShowOverlay.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<DockviewGroupChangeEvent>();\n    readonly onDidAddPanel: Event<DockviewGroupChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel =\n        new Emitter<DockviewGroupChangeEvent>();\n    readonly onDidRemovePanel: Event<DockviewGroupChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<DockviewGroupChangeEvent>();\n    readonly onDidActivePanelChange: Event<DockviewGroupChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _api: DockviewApi;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get location(): DockviewGroupLocation {\n        return this._location;\n    }\n\n    set location(value: DockviewGroupLocation) {\n        this._location = value;\n\n        toggleClass(this.container, 'dv-groupview-floating', false);\n        toggleClass(this.container, 'dv-groupview-popout', false);\n\n        switch (value.type) {\n            case 'grid':\n                this.contentContainer.dropTarget.setTargetZones([\n                    'top',\n                    'bottom',\n                    'left',\n                    'right',\n                    'center',\n                ]);\n                break;\n            case 'floating':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n                this.contentContainer.dropTarget.setTargetZones(\n                    value\n                        ? ['center']\n                        : ['top', 'bottom', 'left', 'right', 'center']\n                );\n\n                toggleClass(this.container, 'dv-groupview-floating', true);\n\n                break;\n            case 'popout':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n\n                toggleClass(this.container, 'dv-groupview-popout', true);\n\n                break;\n        }\n\n        this.groupPanel.api._onDidLocationChange.fire({\n            location: this.location,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this._api = new DockviewApi(this.accessor);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this._onWillShowOverlay,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(\n                    'header',\n                    event.event,\n                    'center',\n                    event.index\n                );\n            }),\n\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(\n                    'content',\n                    event.nativeEvent,\n                    event.position\n                );\n            }),\n            this.tabsContainer.onWillShowOverlay((event) => {\n                this._onWillShowOverlay.fire(event);\n            }),\n            this.contentContainer.dropTarget.onWillShowOverlay((event) => {\n                this._onWillShowOverlay.fire({ event, kind: 'content' });\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onWillDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel, { asActive: false });\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            this.contentContainer.renderPanel(panel, { asActive: true });\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: this._api,\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        type: 'header' | 'content',\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        function getKind(): DockviewGroupDropLocation {\n            switch (type) {\n                case 'header':\n                    return typeof index === 'number' ? 'tab' : 'header_space';\n                case 'content':\n                    return 'content';\n            }\n        }\n\n        const panel =\n            typeof index === 'number' ? this.panels[index] : undefined;\n\n        const willDropEvent = new DockviewWillDropEvent({\n            nativeEvent: event,\n            position,\n            panel,\n            getData: () => getPanelData(),\n            kind: getKind(),\n            group: this.groupPanel,\n            api: this._api,\n        });\n\n        this._onWillDrop.fire(willDropEvent);\n\n        if (willDropEvent.defaultPrevented) {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire(\n                new DockviewDidDropEvent({\n                    nativeEvent: event,\n                    position,\n                    panel,\n                    getData: () => getPanelData(),\n                    group: this.groupPanel,\n                    api: this._api,\n                })\n            );\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n        this.watermark = undefined;\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { isInDocument, watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        this._element = parentElement;\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!this._element.offsetParent) {\n                    /**\n                     * offsetParent === null is equivalent to display: none being set on the element or one\n                     * of it's parents. In the display: none case the size will become (0, 0) which we do\n                     * not want to propagate.\n                     *\n                     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n                     *\n                     * You could use checkVisibility() but at the time of writing it's not supported across\n                     * all Browsers\n                     *\n                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility\n                     */\n                    return;\n                }\n\n                if (!isInDocument(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { Disposable, IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n    maximizeGroup(panel: T): void;\n    isMaximizedGroup(panel: T): boolean;\n    exitMaximizedGroup(): void;\n    hasMaximizedGroup(): boolean;\n    readonly onDidMaxmizedGroupChange: Event<void>;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(document.createElement('div'), options.disableAutoResizing);\n\n        options.parentElement.appendChild(this.element);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            Disposable.from(() => {\n                this.element.parentElement?.removeChild(this.element);\n            }),\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    maximizeGroup(panel: T): void {\n        this.gridview.maximizeView(panel);\n    }\n\n    isMaximizedGroup(panel: T): boolean {\n        return this.gridview.maximizedView() === panel;\n    }\n\n    exitMaximizedGroup(): void {\n        this.gridview.exitMaximizedView();\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.gridview.hasMaximizedView();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.gridview.onDidMaxmizedNodeChange;\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface HiddenEvent {\n    readonly isHidden: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    readonly onDidHiddenChange: Event<HiddenEvent>;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * Whether the panel is hidden\n     */\n    readonly isHidden: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _isHidden = false;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n\n    readonly _onDidHiddenChange = new Emitter<HiddenEvent>();\n    readonly onDidHiddenChange: Event<HiddenEvent> =\n        this._onDidHiddenChange.event;\n\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n\n    get isFocused(): boolean {\n        return this._isFocused;\n    }\n\n    get isActive(): boolean {\n        return this._isActive;\n    }\n\n    get isVisible(): boolean {\n        return this._isVisible;\n    }\n\n    get isHidden(): boolean {\n        return this._isHidden;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidHiddenChange((event) => {\n                this._isHidden = event.isHidden;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onDidHiddenChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setHidden(isHidden: boolean): void {\n        this._onDidHiddenChange.fire({ isHidden });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\nimport { BaseGrid, IGridPanelView } from './baseComponentGridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: BaseGrid<IGridPanelView>;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onDidHiddenChange((event) => {\n                const { isHidden } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n\n                accessor.setVisible(this, !isHidden);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n\n                accessor.doSetGroupActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position, positionToDirection } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly location: DockviewGroupLocation;\n    /**\n     * If you require the Window object\n     */\n    getWindow(): Window;\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly location: DockviewGroupLocation;\n}\n\n// TODO find a better way to initialize and avoid needing null checks\nconst NOT_INITIALIZED_MESSAGE = 'DockviewGroupPanelApiImpl not initialized';\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidLocationChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidLocationChange.event;\n\n    get location(): DockviewGroupLocation {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        return this._group.model.location;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidLocationChange);\n    }\n\n    getWindow(): Window {\n        return this.location.type === 'popout'\n            ? this.location.getWindow()\n            : window;\n    }\n\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        const group =\n            options.group ??\n            this.accessor.addGroup({\n                direction: positionToDirection(options.position ?? 'right'),\n            });\n\n        this.accessor.moveGroupOrPanel(\n            group,\n            this._group.id,\n            undefined,\n            options.group ? options.position ?? 'center' : 'center'\n        );\n    }\n\n    maximize(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.location.type !== 'grid') {\n            // only grid groups can be maximized\n            return;\n        }\n\n        this.accessor.maximizeGroup(this._group);\n    }\n\n    isMaximized(): boolean {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        return this.accessor.isMaximizedGroup(this._group);\n    }\n\n    exitMaximized(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.isMaximized()) {\n            this.accessor.exitMaximizedGroup();\n        }\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nconst MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH = 100;\nconst MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT = 100;\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT,\n                minimumWidth: MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { DockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\nimport { DockviewGroupPanelFloatingChangeEvent } from './dockviewGroupPanelApi';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        // omit properties that do not make sense here\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    readonly location: DockviewGroupLocation;\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n    /**\n     * If you require the Window object\n     */\n    getWindow(): Window;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly _onDidLocationChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidLocationChange.event;\n\n    private readonly groupEventsDisposable = new MutableDisposable();\n\n    get location(): DockviewGroupLocation {\n        return this.group.api.location;\n    }\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return this.group.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.groupEventsDisposable.value = new CompositeDisposable(\n                this.group.api.onDidLocationChange((event) => {\n                    this._onDidLocationChange.fire(event);\n                }),\n                this.group.api.onDidActiveChange(() => {\n                    this._onDidActiveGroupChange.fire();\n                })\n            );\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n\n            this._onDidLocationChange.fire({\n                location: this.group.api.location,\n            });\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.groupEventsDisposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange,\n            this._onDidLocationChange\n        );\n    }\n\n    getWindow(): Window {\n        return this.group.api.getWindow();\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n\n    maximize(): void {\n        this.group.api.maximize();\n    }\n\n    isMaximized(): boolean {\n        return this.group.api.isMaximized();\n    }\n\n    exitMaximized(): void {\n        this.group.api.exitMaximized();\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { Box } from '../types';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: Box & {\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(bounds: Partial<Box> = {}): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): Box {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","export const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100 };\n","import { DragAndDropObserver } from './dnd/dnd';\nimport { Droptarget } from './dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from './dom';\nimport { CompositeDisposable, Disposable, IDisposable } from './lifecycle';\nimport { IDockviewPanel } from './dockview/dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class OverlayRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        {\n            panel: IDockviewPanel;\n            disposable: IDisposable;\n            destroy: IDisposable;\n            element: HTMLElement;\n        }\n    > = {};\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            Disposable.from(() => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                    value.destroy.dispose();\n                }\n            })\n        );\n    }\n\n    detatch(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            const { disposable, destroy } = this.map[panel.api.id];\n            disposable.dispose();\n            destroy.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    attach(options: {\n        panel: IDockviewPanel;\n        referenceContainer: IRenderable;\n    }): HTMLElement {\n        const { panel, referenceContainer } = options;\n\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                panel,\n                disposable: Disposable.NONE,\n                destroy: Disposable.NONE,\n\n                element,\n            };\n        }\n\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls, possible performance bottleneck?\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.location.type === 'floating'\n            );\n        };\n\n        const visibilityChanged = () => {\n            if (panel.api.isVisible) {\n                resize();\n            }\n\n            focusContainer.style.display = panel.api.isVisible ? '' : 'none';\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             *\n             * the dnd observer does not need to be conditional on whether the panel is visible since\n             * non-visible panels are 'display: none' and in such case the dnd observer will not fire.\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n\n            panel.api.onDidVisibilityChange((event) => {\n                /**\n                 * Control the visibility of the content, however even when not visible (display: none)\n                 * the content is still maintained within the DOM hence DOM specific attributes\n                 * such as scroll position are maintained when next made visible.\n                 */\n                visibilityChanged();\n            }),\n            panel.api.onDidDimensionsChange(() => {\n                if (!panel.api.isVisible) {\n                    return;\n                }\n\n                resize();\n            })\n        );\n\n        this.map[panel.api.id].destroy = Disposable.from(() => {\n            focusContainer.removeChild(panel.view.content.element);\n            this.element.removeChild(focusContainer);\n        });\n\n        queueMicrotask(() => {\n            if (this.isDisposed) {\n                return;\n            }\n\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            visibilityChanged();\n        });\n\n        // dispose of logic asoccciated with previous reference-container\n        this.map[panel.api.id].disposable.dispose();\n        // and reset the disposable to the active reference-container\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import { addStyles } from './dom';\nimport { Emitter, addDisposableWindowListener } from './events';\nimport { CompositeDisposable, IDisposable } from './lifecycle';\nimport { Box } from './types';\n\nexport type PopoutWindowOptions = {\n    url: string;\n    onDidOpen?: (event: { id: string; window: Window }) => void;\n    onWillClose?: (event: { id: string; window: Window }) => void;\n} & Box;\n\nexport class PopoutWindow extends CompositeDisposable {\n    private readonly _onWillClose = new Emitter<void>();\n    readonly onWillClose = this._onWillClose.event;\n\n    private readonly _onDidClose = new Emitter<void>();\n    readonly onDidClose = this._onDidClose.event;\n\n    private _window: { value: Window; disposable: IDisposable } | null = null;\n\n    get window(): Window | null {\n        return this._window?.value ?? null;\n    }\n\n    constructor(\n        private readonly target: string,\n        private readonly className: string,\n        private readonly options: PopoutWindowOptions\n    ) {\n        super();\n\n        this.addDisposables(this._onWillClose, this._onDidClose, {\n            dispose: () => {\n                this.close();\n            },\n        });\n    }\n\n    dimensions(): Box | null {\n        if (!this._window) {\n            return null;\n        }\n\n        const left = this._window.value.screenX;\n        const top = this._window.value.screenY;\n        const width = this._window.value.innerWidth;\n        const height = this._window.value.innerHeight;\n\n        return { top, left, width, height };\n    }\n\n    close(): void {\n        if (this._window) {\n            this._onWillClose.fire();\n\n            this.options.onWillClose?.({\n                id: this.target,\n                window: this._window.value,\n            });\n\n            this._window.disposable.dispose();\n            this._window.value.close();\n            this._window = null;\n\n            this._onDidClose.fire();\n        }\n    }\n\n    async open(): Promise<HTMLElement | null> {\n        if (this._window) {\n            throw new Error('instance of popout window is already open');\n        }\n\n        const url = `${this.options.url}`;\n\n        const features = Object.entries({\n            top: this.options.top,\n            left: this.options.left,\n            width: this.options.width,\n            height: this.options.height,\n        })\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n\n        /**\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n         */\n        const externalWindow = window.open(url, this.target, features);\n\n        if (!externalWindow) {\n            /**\n             * Popup blocked\n             */\n            return null;\n        }\n\n        const disposable = new CompositeDisposable();\n\n        this._window = { value: externalWindow, disposable };\n\n        disposable.addDisposables(\n            addDisposableWindowListener(window, 'beforeunload', () => {\n                /**\n                 * before the main window closes we should close this popup too\n                 * to be good citizens\n                 *\n                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n                 */\n                this.close();\n            })\n        );\n\n        const container = this.createPopoutWindowContainer();\n\n        if (this.className) {\n            container.classList.add(this.className);\n        }\n\n        this.options.onDidOpen?.({\n            id: this.target,\n            window: externalWindow,\n        });\n\n        return new Promise<HTMLElement | null>((resolve) => {\n            externalWindow.addEventListener('unload', (e) => {\n                // if page fails to load before unloading\n                // this.close();\n            });\n\n            externalWindow.addEventListener('load', () => {\n                /**\n                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event\n                 */\n\n                const externalDocument = externalWindow.document;\n                externalDocument.title = document.title;\n\n                externalDocument.body.appendChild(container);\n\n                addStyles(externalDocument, window.document.styleSheets);\n\n                /**\n                 * beforeunload must be registered after load for reasons I could not determine\n                 * otherwise the beforeunload event will not fire when the window is closed\n                 */\n                addDisposableWindowListener(\n                    externalWindow,\n                    'beforeunload',\n                    () => {\n                        /**\n                         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n                         */\n                        this.close();\n                    }\n                );\n\n                resolve(container);\n            });\n        });\n    }\n\n    private createPopoutWindowContainer(): HTMLElement {\n        const el = document.createElement('div');\n        el.classList.add('dv-popout-window');\n        el.id = 'dv-popout-window';\n        el.style.position = 'absolute';\n        el.style.width = '100%';\n        el.style.height = '100%';\n        el.style.top = '0px';\n        el.style.left = '0px';\n\n        return el;\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport {\n    directionToPosition,\n    Droptarget,\n    DroptargetOverlayModel,\n    Position,\n} from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable, Disposable, IDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport { IWatermarkRenderer, GroupviewPanelState } from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    DockviewDidDropEvent,\n    DockviewWillDropEvent,\n    WillShowOverlayLocationEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { Box } from '../types';\nimport {\n    DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n    DEFAULT_FLOATING_GROUP_POSITION,\n} from '../constants';\nimport {\n    DockviewPanelRenderer,\n    OverlayRenderContainer,\n} from '../overlayRenderContainer';\nimport { PopoutWindow } from '../popoutWindow';\n\nconst DEFAULT_ROOT_OVERLAY_MODEL: DroptargetOverlayModel = {\n    activationSize: { type: 'pixels', value: 10 },\n    size: { type: 'pixels', value: 20 },\n};\n\nfunction getDockviewTheme(element: HTMLElement): string | undefined {\n    function toClassList(element: HTMLElement) {\n        const list: string[] = [];\n\n        for (let i = 0; i < element.classList.length; i++) {\n            list.push(element.classList.item(i)!);\n        }\n\n        return list;\n    }\n\n    let theme: string | undefined = undefined;\n    let parent: HTMLElement | null = element;\n\n    while (parent !== null) {\n        theme = toClassList(parent).find((cls) =>\n            cls.startsWith('dockview-theme-')\n        );\n        if (typeof theme === 'string') {\n            break;\n        }\n        parent = parent.parentElement;\n    }\n\n    return theme;\n}\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: Box;\n}\n\nexport interface SerializedPopoutGroup {\n    data: GroupPanelViewState;\n    position: Box | null;\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n    popoutGroups?: SerializedPopoutGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n    | 'rootOverlayModel'\n    | 'disableDnd'\n>;\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly onDidDrop: Event<DockviewDidDropEvent>;\n    readonly onWillDrop: Event<DockviewWillDropEvent>;\n    readonly onWillShowOverlay: Event<WillShowOverlayLocationEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n            onDidOpen?: (event: { id: string; window: Window }) => void;\n            onWillClose?: (event: { id: string; window: Window }) => void;\n        }\n    ): Promise<void>;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly overlayRenderContainer: OverlayRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDidDropEvent>();\n    readonly onDidDrop: Event<DockviewDidDropEvent> = this._onDidDrop.event;\n\n    private readonly _onWillDrop = new Emitter<DockviewWillDropEvent>();\n    readonly onWillDrop: Event<DockviewWillDropEvent> = this._onWillDrop.event;\n\n    private readonly _onWillShowOverlay =\n        new Emitter<WillShowOverlayLocationEvent>();\n    readonly onWillShowOverlay: Event<WillShowOverlayLocationEvent> =\n        this._onWillShowOverlay.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _floatingGroups: DockviewFloatingGroupPanel[] = [];\n    private readonly _popoutGroups: {\n        window: PopoutWindow;\n        popoutGroup: DockviewGroupPanel;\n        referenceGroup: DockviewGroupPanel;\n        disposable: IDisposable;\n    }[] = [];\n    private readonly _rootDropTarget: Droptarget;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-overlay-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.overlayRenderContainer = new OverlayRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.overlayRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onWillShowOverlay,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            this._onWillDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Disposable.from(() => {\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._floatingGroups]) {\n                    group.dispose();\n                }\n\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._popoutGroups]) {\n                    group.disposable.dispose();\n                }\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        this._rootDropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: 'edge',\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel:\n                this.options.rootOverlayModel ?? DEFAULT_ROOT_OVERLAY_MODEL,\n        });\n\n        this.addDisposables(\n            this._rootDropTarget.onDrop((event) => {\n                const willDropEvent = new DockviewWillDropEvent({\n                    nativeEvent: event.nativeEvent,\n                    position: event.position,\n                    panel: undefined,\n                    api: this._api,\n                    group: undefined,\n                    getData: getPanelData,\n                    kind: 'content',\n                });\n\n                this._onWillDrop.fire(willDropEvent);\n\n                if (willDropEvent.defaultPrevented) {\n                    return;\n                }\n\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire(\n                        new DockviewDidDropEvent({\n                            nativeEvent: event.nativeEvent,\n                            position: event.position,\n                            panel: undefined,\n                            api: this._api,\n                            group: undefined,\n                            getData: getPanelData,\n                        })\n                    );\n                }\n            }),\n            this._rootDropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addPopoutGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        options?: {\n            skipRemoveGroup?: boolean;\n            position?: Box;\n            popoutUrl?: string;\n            onDidOpen?: (event: { id: string; window: Window }) => void;\n            onWillClose?: (event: { id: string; window: Window }) => void;\n        }\n    ): Promise<void> {\n        if (item instanceof DockviewPanel && item.group.size === 1) {\n            return this.addPopoutGroup(item.group);\n        }\n\n        const theme = getDockviewTheme(this.gridview.element);\n        const element = this.element;\n\n        function moveGroupWithoutDestroying(options: {\n            from: DockviewGroupPanel;\n            to: DockviewGroupPanel;\n        }) {\n            const panels = [...options.from.panels].map((panel) =>\n                options.from.model.removePanel(panel)\n            );\n\n            panels.forEach((panel) => {\n                options.to.model.openPanel(panel);\n            });\n        }\n\n        function getBox(): Box {\n            if (options?.position) {\n                return options.position;\n            }\n\n            if (item instanceof DockviewGroupPanel) {\n                return item.element.getBoundingClientRect();\n            }\n\n            if (item.group) {\n                return item.group.element.getBoundingClientRect();\n            }\n            return element.getBoundingClientRect();\n        }\n\n        const box: Box = getBox();\n\n        const groupId = this.getNextGroupId(); //item.id;\n\n        item.api.setHidden(true);\n\n        const _window = new PopoutWindow(\n            `${this.id}-${groupId}`, // unique id\n            theme ?? '',\n            {\n                url: options?.popoutUrl ?? '/popout.html',\n                left: window.screenX + box.left,\n                top: window.screenY + box.top,\n                width: box.width,\n                height: box.height,\n                onDidOpen: options?.onDidOpen,\n                onWillClose: options?.onWillClose,\n            }\n        );\n\n        const popoutWindowDisposable = new CompositeDisposable(\n            _window,\n            _window.onDidClose(() => {\n                popoutWindowDisposable.dispose();\n            })\n        );\n\n        return _window\n            .open()\n            .then((popoutContainer) => {\n                if (_window.isDisposed) {\n                    return;\n                }\n\n                if (popoutContainer === null) {\n                    popoutWindowDisposable.dispose();\n                    return;\n                }\n\n                const referenceGroup =\n                    item instanceof DockviewPanel ? item.group : item;\n\n                const group = this.createGroup({ id: groupId });\n\n                if (item instanceof DockviewPanel) {\n                    const panel = referenceGroup.model.removePanel(item);\n                    group.model.openPanel(panel);\n                } else {\n                    moveGroupWithoutDestroying({\n                        from: referenceGroup,\n                        to: group,\n                    });\n                    referenceGroup.api.setHidden(false);\n                }\n\n                popoutContainer.appendChild(group.element);\n\n                group.model.location = {\n                    type: 'popout',\n                    getWindow: () => _window.window!,\n                };\n\n                const value = {\n                    window: _window,\n                    popoutGroup: group,\n                    referenceGroup,\n                    disposable: popoutWindowDisposable,\n                };\n\n                popoutWindowDisposable.addDisposables(\n                    Disposable.from(() => {\n                        if (this.getPanel(referenceGroup.id)) {\n                            moveGroupWithoutDestroying({\n                                from: group,\n                                to: referenceGroup,\n                            });\n\n                            if (referenceGroup.api.isHidden) {\n                                referenceGroup.api.setHidden(false);\n                            }\n\n                            this.doRemoveGroup(group);\n                        } else {\n                            const removedGroup = this.doRemoveGroup(group, {\n                                skipDispose: true,\n                                skipActive: true,\n                            });\n                            removedGroup.model.location = { type: 'grid' };\n                            this.doAddGroup(removedGroup, [0]);\n                        }\n                    })\n                );\n\n                this._popoutGroups.push(value);\n                this.updateWatermark();\n            })\n            .catch((err) => {\n                console.error(err);\n            });\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.location = { type: 'floating' };\n\n        const overlayLeft =\n            typeof coord?.x === 'number'\n                ? Math.max(coord.x, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.left;\n        const overlayTop =\n            typeof coord?.y === 'number'\n                ? Math.max(coord.y, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.top;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.location = { type: 'grid' };\n                    remove(this._floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this._floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const changed_orientation =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const changed_floatingGroupBounds =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        const changed_rootOverlayOptions =\n            options.rootOverlayModel !== undefined &&\n            options.rootOverlayModel !== this.options.rootOverlayModel;\n\n        this._options = { ...this.options, ...options };\n\n        if (changed_orientation) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (changed_floatingGroupBounds) {\n            for (const group of this._floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        if (changed_rootOverlayOptions) {\n            this._rootDropTarget.setOverlayModel(options.rootOverlayModel!);\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this._floatingGroups) {\n            for (const floating of this._floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this._floatingGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.overlay.toJSON(),\n                };\n            }\n        );\n\n        const popoutGroups: SerializedPopoutGroup[] = this._popoutGroups.map(\n            (group) => {\n                return {\n                    data: group.popoutGroup.toJSON() as GroupPanelViewState,\n                    position: group.window.dimensions(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        if (popoutGroups.length > 0) {\n            result.popoutGroups = popoutGroups;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            const serializedPopoutGroups = data.popoutGroups ?? [];\n\n            for (const serializedPopoutGroup of serializedPopoutGroups) {\n                const { data, position } = serializedPopoutGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addPopoutGroup(group, {\n                    skipRemoveGroup: true,\n                    position: position ?? undefined,\n                });\n            }\n\n            for (const floatingGroup of this._floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this._floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (\n                referenceGroup.api.location.type === 'floating' ||\n                target === 'center'\n            ) {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.overlayRenderContainer.detatch(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (\n            this.groups.filter(\n                (x) => x.api.location.type === 'grid' && !x.api.isHidden\n            ).length === 0\n        ) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup(options);\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        if (group.api.location.type === 'floating') {\n            const floatingGroup = this._floatingGroups.find(\n                (_) => _.group === group\n            );\n\n            if (floatingGroup) {\n                if (!options?.skipDispose) {\n                    floatingGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                remove(this._floatingGroups, floatingGroup);\n                floatingGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return floatingGroup.group;\n            }\n\n            throw new Error('failed to find floating group');\n        }\n\n        if (group.api.location.type === 'popout') {\n            const selectedGroup = this._popoutGroups.find(\n                (_) => _.popoutGroup === group\n            );\n\n            if (selectedGroup) {\n                if (!options?.skipDispose) {\n                    this.doRemoveGroup(selectedGroup.referenceGroup);\n\n                    selectedGroup.popoutGroup.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                selectedGroup.disposable.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                this.updateWatermark();\n                return selectedGroup.popoutGroup;\n            }\n\n            throw new Error('failed to find popout group');\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                if (sourceGroup.api.location.type === 'grid') {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                switch (sourceGroup.api.location.type) {\n                    case 'grid':\n                        this.gridview.removeView(\n                            getGridLocation(sourceGroup.element)\n                        );\n                        break;\n                    case 'floating': {\n                        const selectedFloatingGroup = this._floatingGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedFloatingGroup) {\n                            throw new Error('failed to find floating group');\n                        }\n                        selectedFloatingGroup.dispose();\n                        break;\n                    }\n                    case 'popout': {\n                        const selectedPopoutGroup = this._popoutGroups.find(\n                            (x) => x.popoutGroup === sourceGroup\n                        );\n                        if (!selectedPopoutGroup) {\n                            throw new Error('failed to find popout group');\n                        }\n                        selectedPopoutGroup.disposable.dispose();\n                    }\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    private getNextGroupId(): string {\n        let id = this.nextGroupId.next();\n        while (this._groups.has(id)) {\n            id = this.nextGroupId.next();\n        }\n\n        return id;\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: this });\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire(event);\n                }),\n                view.model.onWillDrop((event) => {\n                    this._onWillDrop.fire(event);\n                }),\n                view.model.onWillShowOverlay((event) => {\n                    if (this.options.disableDnd) {\n                        event.event.preventDefault();\n                        return;\n                    }\n\n                    this._onWillShowOverlay.fire(event);\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup, not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { DroptargetOverlayModel, Position } from '../dnd/droptarget';\nimport { GroupOptions } from './dockviewGroupPanelModel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    popoutUrl?: string;\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n    rootOverlayModel?: DroptargetOverlayModel;\n    disableDnd?: boolean;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions = (\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition\n) &\n    GroupOptions;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onDidHiddenChange((event) => {\n                const { isHidden } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, !isHidden);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewWillDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n    DroptargetOverlayModel,\n    DockviewDidDropEvent,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDidDropEvent) => void;\n    onWillDrop?: (event: DockviewWillDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n    rootOverlayModel?: DroptargetOverlayModel;\n    disableDnd?: boolean;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n                rootOverlayModel: props.rootOverlayModel,\n                disableDnd: props.disableDnd,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableDnd: props.disableDnd,\n            });\n        }, [props.disableDnd]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onWillDrop((event) => {\n                if (props.onWillDrop) {\n                    props.onWillDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onWillDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                rootOverlayModel: props.rootOverlayModel,\n            });\n        }, [props.rootOverlayModel]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n    GridviewComponent,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                // TODO: fix casting hack\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters)\n                        .accessor as GridviewComponent\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    DockviewApi,\n    DockviewReact,\n    DockviewReadyEvent,\n    GridConstraintChangeEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps) => {\n        const [contraints, setContraints] =\n            React.useState<GridConstraintChangeEvent | null>(null);\n\n        React.useEffect(() => {\n            props.api.group.api.onDidConstraintsChange((event) => {\n                setContraints(event);\n            });\n        }, []);\n\n        const onClick = () => {\n            props.api.group.api.setConstraints({\n                maximumWidth: 300,\n                maximumHeight: 300,\n            });\n        };\n\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                    color: 'white',\n                }}\n            >\n                <button onClick={onClick}>Set</button>\n                {contraints && (\n                    <div style={{ fontSize: '13px' }}>\n                        {typeof contraints.maximumHeight === 'number' && (\n                            <div\n                                style={{\n                                    border: '1px solid grey',\n                                    margin: '2px',\n                                    padding: '1px',\n                                }}\n                            >\n                                <span\n                                    style={{ color: 'grey' }}\n                                >{`Maximum Height: `}</span>\n                                <span>{`${contraints.maximumHeight}px`}</span>\n                            </div>\n                        )}\n                        {typeof contraints.minimumHeight === 'number' && (\n                            <div\n                                style={{\n                                    border: '1px solid grey',\n                                    margin: '2px',\n                                    padding: '1px',\n                                }}\n                            >\n                                <span\n                                    style={{ color: 'grey' }}\n                                >{`Minimum Height: `}</span>\n                                <span>{`${contraints.minimumHeight}px`}</span>\n                            </div>\n                        )}\n                        {typeof contraints.maximumWidth === 'number' && (\n                            <div\n                                style={{\n                                    border: '1px solid grey',\n                                    margin: '2px',\n                                    padding: '1px',\n                                }}\n                            >\n                                <span\n                                    style={{ color: 'grey' }}\n                                >{`Maximum Width: `}</span>\n                                <span>{`${contraints.maximumWidth}px`}</span>\n                            </div>\n                        )}\n                        {typeof contraints.minimumWidth === 'number' && (\n                            <div\n                                style={{\n                                    border: '1px solid grey',\n                                    margin: '2px',\n                                    padding: '1px',\n                                }}\n                            >\n                                <span\n                                    style={{ color: 'grey' }}\n                                >{`Minimum Width: `}</span>\n                                <span>{`${contraints.minimumWidth}px`}</span>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    },\n};\n\nconst App = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<DockviewApi>();\n\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        const panel2 = event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            position: {\n                referencePanel: panel1,\n                direction: 'right',\n            },\n        });\n\n        const panel3 = event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            position: {\n                referencePanel: panel2,\n                direction: 'right',\n            },\n        });\n\n        const panel4 = event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            position: {\n                direction: 'below',\n            },\n        });\n    };\n\n    return (\n        <DockviewReact\n            onReady={onReady}\n            components={components}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nexport default App;\n","import {\n    DockviewDefaultTab,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelHeaderProps,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\ninterface CustomProps {\n    valueA: string;\n}\n\nconst components = {\n    default: (props: IDockviewPanelProps<CustomProps>) => {\n        return <div style={{ padding: '20px' }}>{props.api.title}</div>;\n    },\n};\n\nconst headerComponents = {\n    default: (props: IDockviewPanelHeaderProps<CustomProps>) => {\n        const onContextMenu = (event: React.MouseEvent) => {\n            event.preventDefault();\n            alert(\n                `This custom header was parsed the params ${JSON.stringify(\n                    props.params\n                )}`\n            );\n        };\n        return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n    },\n};\n\nconst CustomHeadersDockview = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n            params: {\n                valueA: 'test value',\n            },\n        });\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n            params: {\n                valueA: 'test value',\n            },\n        });\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n            params: {\n                valueA: 'test value',\n            },\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n            params: {\n                valueA: 'test value',\n            },\n        });\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            title: 'Panel 5',\n            position: { referencePanel: 'panel_4', direction: 'within' },\n            params: {\n                valueA: 'test value',\n            },\n        });\n        const panel6 = event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            title: 'Panel 6',\n            position: { referencePanel: 'panel_4', direction: 'below' },\n            params: {\n                valueA: 'test value',\n            },\n        });\n        panel6.group.locked = true;\n        panel6.group.header.hidden = true;\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            title: 'Panel 7',\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            params: {\n                valueA: 'test value',\n            },\n        });\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n\n            title: 'Panel 8',\n            position: { referencePanel: 'panel_7', direction: 'within' },\n            params: {\n                valueA: 'test value',\n            },\n        });\n\n        event.api.addGroup();\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            defaultTabComponent={headerComponents.default}\n            onReady={onReady}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nexport default CustomHeadersDockview;\n","import {\n    DockviewApi,\n    DockviewDndOverlayEvent,\n    DockviewDropEvent,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    positionToDirection,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px' }}>\n                <div>{props.params.title}</div>\n            </div>\n        );\n    },\n};\n\nconst DraggableElement = () => (\n    <span\n        tabIndex={-1}\n        onDragStart={(event) => {\n            if (event.dataTransfer) {\n                event.dataTransfer.effectAllowed = 'move';\n\n                event.dataTransfer.setData('text/plain', 'nothing');\n            }\n        }}\n        style={{\n            backgroundColor: 'orange',\n            padding: '0px 8px',\n            borderRadius: '4px',\n            width: '100px',\n            cursor: 'pointer',\n        }}\n        draggable={true}\n    >\n        Drag me into the dock\n    </span>\n);\n\nconst DndDockview = (props: { renderVisibleOnly: boolean; theme?: string }) => {\n    const [api, setApi] = React.useState<DockviewApi>();\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panelDragDisposable = api.onWillDragPanel((event) => {\n            const dataTransfer = event.nativeEvent.dataTransfer;\n\n            if (dataTransfer) {\n                dataTransfer.setData(\n                    'text/plain',\n                    'Some custom panel data transfer data'\n                );\n                dataTransfer.setData(\n                    'text/json',\n                    '{text: \"Some custom panel data transfer data\"}'\n                );\n            }\n        });\n\n        const groupDragDisposable = api.onWillDragGroup((event) => {\n            const dataTransfer = event.nativeEvent.dataTransfer;\n\n            if (dataTransfer) {\n                dataTransfer.setData(\n                    'text/plain',\n                    'Some custom group data transfer data'\n                );\n                dataTransfer.setData(\n                    'text/json',\n                    '{text: \"Some custom group data transfer data\"}'\n                );\n            }\n        });\n\n        return () => {\n            panelDragDisposable.dispose();\n            groupDragDisposable.dispose();\n        };\n    }, [api]);\n\n    const onReady = (event: DockviewReadyEvent) => {\n        setApi(event.api);\n    };\n\n    const onDidDrop = (event: DockviewDropEvent) => {\n        event.api.addPanel({\n            id: 'test',\n            component: 'default',\n            position: {\n                direction: positionToDirection(event.position),\n                referenceGroup: event.group || undefined,\n            },\n        });\n    };\n\n    const showDndOverlay = (event: DockviewDndOverlayEvent) => {\n        return true;\n    };\n\n    const onDrop = (event: React.DragEvent) => {\n        const dataTransfer = event.dataTransfer;\n\n        let text = 'The following dataTransfer data was found:\\n';\n\n        for (let i = 0; i < dataTransfer.items.length; i++) {\n            const item = dataTransfer.items[i];\n            const value = dataTransfer.getData(item.type);\n            text += `type=${item.type},data=${value}\\n`;\n        }\n\n        alert(text);\n    };\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n            }}\n        >\n            <div style={{ margin: '2px 0px' }}>\n                <DraggableElement />\n                <div\n                    style={{\n                        padding: '0px 4px',\n                        backgroundColor: 'black',\n                        borderRadius: '2px',\n                        color: 'white',\n                    }}\n                    onDrop={onDrop}\n                >\n                    Drop a tab or group here to inspect the attached metadata\n                </div>\n            </div>\n            <DockviewReact\n                components={components}\n                onReady={onReady}\n                className={`${props.theme || 'dockview-theme-abyss'}`}\n                onDidDrop={onDidDrop}\n                showDndOverlay={showDndOverlay}\n                rootOverlayModel={{\n                    size: { value: 100, type: 'pixels' },\n                    activationSize: { value: 5, type: 'percentage' },\n                }}\n            />\n        </div>\n    );\n};\n\nexport default DndDockview;\n","import * as React from 'react';\nimport './console.scss';\n\nconst formatTime = (now: Date) => {\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}.${now.getMilliseconds()}`;\n};\n\nexport interface Line {\n    timestamp: Date;\n    text: string;\n    css?: React.CSSProperties;\n}\n\nexport interface IConsoleProps {\n    lines: Line[];\n}\n\nexport const Console = (props: IConsoleProps) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useLayoutEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        ref.current.scrollTop = Math.max(\n            0,\n            ref.current.scrollHeight - ref.current.clientHeight\n        );\n    }, [props.lines]);\n\n    return (\n        <div ref={ref} className=\"console-container\">\n            {props.lines.map((line, i) => {\n                return (\n                    <div key={i} className=\"console-line\">\n                        <span className=\"console-line-timestamp\">\n                            {formatTime(line.timestamp)}\n                        </span>\n                        <span className=\"console-line-text\" style={line.css}>\n                            {line.text}\n                        </span>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import {\n    Orientation,\n    DockviewReact,\n    DockviewReadyEvent,\n    DockviewApi,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport { Console, Line } from './console';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nconst EventsDockview = (props: { theme?: string }) => {\n    const [lines, setLines] = React.useState<Line[]>([]);\n    const [checked, setChecked] = React.useState<boolean>(false);\n\n    const [api, setApi] = React.useState<DockviewApi | undefined>();\n\n    React.useEffect(() => {\n        if (!api) {\n            return () => {\n                //noop\n            };\n        }\n\n        const disposables = [\n            api.onDidAddPanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddPanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemovePanel((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemovePanel: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActivePanelChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActivePanelChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidAddGroup((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidAddGroup: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidRemoveGroup((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidRemoveGroup: ${panel.id}`,\n                    },\n                ]);\n            }),\n            api.onDidActiveGroupChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    {\n                        timestamp: new Date(),\n                        text: `onDidActiveGroupChange: ${panel?.id}`,\n                    },\n                ]);\n            }),\n            api.onDidLayoutChange((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutChange` },\n                ]);\n            }),\n            api.onDidLayoutFromJSON((panel) => {\n                setLines((lines) => [\n                    ...lines,\n                    { timestamp: new Date(), text: `onDidLayoutFromJSON` },\n                ]);\n            }),\n        ];\n\n        return () => {\n            disposables.forEach((disposable) => disposable.dispose());\n        };\n    }, [api]);\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        setLines((lines) => [\n            ...lines,\n            {\n                timestamp: new Date(),\n                text: `Rebuilding view fromJSON:${checked}`,\n                css: { color: 'yellow', backgroundColor: 'grey' },\n            },\n        ]);\n\n        if (checked) {\n            api.fromJSON({\n                grid: {\n                    root: {\n                        type: 'branch',\n                        data: [\n                            {\n                                type: 'leaf',\n                                data: {\n                                    views: ['panel_1', 'panel_2', 'panel_3'],\n                                    activeView: 'panel_3',\n                                    id: '77',\n                                },\n                                size: 262,\n                            },\n                            {\n                                type: 'branch',\n                                data: [\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_5'],\n                                            activeView: 'panel_5',\n                                            id: '79',\n                                        },\n                                        size: 100,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_6', 'panel_8'],\n                                            activeView: 'panel_8',\n                                            id: '80',\n                                        },\n                                        size: 100,\n                                    },\n                                    {\n                                        type: 'leaf',\n                                        data: {\n                                            views: ['panel_7'],\n                                            activeView: 'panel_7',\n                                            id: '81',\n                                        },\n                                        size: 100,\n                                    },\n                                ],\n                                size: 262,\n                            },\n                            {\n                                type: 'leaf',\n                                data: {\n                                    views: ['panel_4'],\n                                    activeView: 'panel_4',\n                                    id: '78',\n                                },\n                                size: 263.75,\n                            },\n                        ],\n                        size: 300,\n                    },\n                    width: 787.75,\n                    height: 300,\n                    orientation: Orientation.HORIZONTAL,\n                },\n                panels: {\n                    panel_1: {\n                        id: 'panel_1',\n                        contentComponent: 'default',\n                        params: { title: 'Panel 1' },\n                        title: 'panel_1',\n                    },\n                    panel_2: {\n                        id: 'panel_2',\n                        contentComponent: 'default',\n                        params: { title: 'Panel 2' },\n                        title: 'panel_2',\n                    },\n                    panel_3: {\n                        id: 'panel_3',\n                        contentComponent: 'default',\n                        params: { title: 'Panel 3' },\n                        title: 'panel_3',\n                    },\n                    panel_4: {\n                        id: 'panel_4',\n                        contentComponent: 'default',\n                        params: { title: 'Panel 4' },\n                        title: 'panel_4',\n                    },\n                    panel_5: {\n                        id: 'panel_5',\n                        contentComponent: 'default',\n                        params: { title: 'Panel 5' },\n                        title: 'panel_5',\n                    },\n                    panel_6: {\n                        id: 'panel_6',\n                        contentComponent: 'default',\n                        params: { title: 'Panel 6' },\n                        title: 'panel_6',\n                    },\n                    panel_8: {\n                        id: 'panel_8',\n                        contentComponent: 'default',\n                        params: { title: 'Panel 8' },\n                        title: 'panel_8',\n                    },\n                    panel_7: {\n                        id: 'panel_7',\n                        contentComponent: 'default',\n                        params: { title: 'Panel 7' },\n                        title: 'panel_7',\n                    },\n                },\n                activeGroup: '80',\n            });\n            return;\n        }\n\n        api.clear();\n\n        api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'below' },\n        });\n\n        api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'within' },\n        });\n    }, [api, checked]);\n\n    const onReady = (event: DockviewReadyEvent) => {\n        setApi(event.api);\n    };\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n            }}\n        >\n            <div>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={checked}\n                        onChange={(e) => setChecked(e.target.checked)}\n                    />\n                    <span>{'fromJSON'}</span>\n                </label>\n                <button onClick={() => setLines([])}>Clear logs</button>\n            </div>\n            <div style={{ flexGrow: 1 }}>\n                <DockviewReact\n                    components={components}\n                    onReady={onReady}\n                    className={`${props.theme || 'dockview-theme-abyss'}`}\n                />\n            </div>\n            <div style={{ height: '200px', paddingTop: '5px' }}>\n                <Console lines={lines} />\n            </div>\n        </div>\n    );\n};\n\nexport default EventsDockview;\n","import { useState } from 'react';\nimport { Tree } from '@minoru/react-dnd-treeview';\nimport * as React from 'react';\n\nconst SampleData = [\n    {\n        id: 1,\n        parent: 0,\n        droppable: true,\n        text: 'Folder 1',\n    },\n    {\n        id: 2,\n        parent: 1,\n        droppable: false,\n        text: 'File 1-1',\n    },\n    {\n        id: 3,\n        parent: 1,\n        droppable: false,\n        text: 'File 1-2',\n    },\n    {\n        id: 4,\n        parent: 0,\n        droppable: true,\n        text: 'Folder 2',\n    },\n    {\n        id: 5,\n        parent: 4,\n        droppable: true,\n        text: 'Folder 2-1',\n    },\n    {\n        id: 6,\n        parent: 5,\n        droppable: false,\n        text: 'File 2-1-1',\n    },\n    {\n        id: 7,\n        parent: 0,\n        droppable: false,\n        text: 'File 3',\n    },\n];\n\nconst TreeComponent = () => {\n    const [treeData, setTreeData] = useState(SampleData);\n    const handleDrop = (newTreeData: any) => {\n        setTreeData(newTreeData);\n    };\n    return (\n        <Tree\n            tree={treeData}\n            rootId={0}\n            onDrop={handleDrop}\n            onDragEnd={(event) => console.log('onDragEnd', event)}\n            render={(node, { depth, isOpen, onToggle }) => (\n                <div style={{ marginLeft: depth * 10 }}>\n                    {node.droppable && (\n                        <span onClick={onToggle}>{isOpen ? '[-]' : '[+]'}</span>\n                    )}\n                    {node.text}\n                </div>\n            )}\n        />\n    );\n};\n\nexport default TreeComponent;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport TreeComponent from './treeview';\nimport { getBackendOptions, MultiBackend } from '@minoru/react-dnd-treeview';\nimport { DndProvider } from 'react-dnd';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n    treeview: () => {\n        return (\n            <div style={{ color: 'white' }}>\n                <TreeComponent />\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'treeview',\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DndProvider backend={MultiBackend} options={getBackendOptions()}>\n            <DockviewReact\n                components={components}\n                onReady={onReady}\n                className={`${props.theme || 'dockview-theme-abyss'}`}\n            />\n        </DndProvider>\n    );\n};\n\nexport default App;\n","import * as React from 'react';\n\nexport const Icon = (props: {\n    icon: string;\n    title?: string;\n    onClick?: (event: React.MouseEvent) => void;\n}) => {\n    return (\n        <div\n            title={props.title}\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: '30px',\n                height: '100%',\n\n                fontSize: '18px',\n            }}\n            onClick={props.onClick}\n        >\n            <span\n                style={{ fontSize: 'inherit', cursor: 'pointer' }}\n                className=\"material-symbols-outlined\"\n            >\n                {props.icon}\n            </span>\n        </div>\n    );\n};\n","import {\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewHeaderActionsProps,\n    IDockviewPanelProps,\n    SerializedDockview,\n} from 'dockview';\nimport * as React from 'react';\nimport { Icon } from './utils';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst counter = (() => {\n    let i = 0;\n\n    return {\n        next: () => ++i,\n    };\n})();\n\nfunction loadDefaultLayout(api: DockviewApi) {\n    api.addPanel({\n        id: 'panel_1',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_2',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_3',\n        component: 'default',\n    });\n\n    const panel4 = api.addPanel({\n        id: 'panel_4',\n        component: 'default',\n        floating: true,\n    });\n\n    api.addPanel({\n        id: 'panel_5',\n        component: 'default',\n        floating: false,\n        position: { referencePanel: panel4 },\n    });\n\n    api.addPanel({\n        id: 'panel_6',\n        component: 'default',\n    });\n}\n\nlet panelCount = 0;\n\nfunction addPanel(api: DockviewApi) {\n    api.addPanel({\n        id: (++panelCount).toString(),\n        title: `Tab ${panelCount}`,\n        component: 'default',\n    });\n}\n\nfunction addFloatingPanel2(api: DockviewApi) {\n    api.addPanel({\n        id: (++panelCount).toString(),\n        title: `Tab ${panelCount}`,\n        component: 'default',\n        floating: { width: 250, height: 150, x: 50, y: 50 },\n    });\n}\n\nfunction safeParse<T>(value: any): T | null {\n    try {\n        return JSON.parse(value) as T;\n    } catch (err) {\n        return null;\n    }\n}\n\nconst useLocalStorage = <T,>(\n    key: string\n): [T | null, (setter: T | null) => void] => {\n    const [state, setState] = React.useState<T | null>(\n        safeParse(localStorage.getItem(key))\n    );\n\n    React.useEffect(() => {\n        const _state = localStorage.getItem('key');\n        try {\n            if (_state !== null) {\n                setState(JSON.parse(_state));\n            }\n        } catch (err) {\n            //\n        }\n    }, [key]);\n\n    return [\n        state,\n        (_state: T | null) => {\n            if (_state === null) {\n                localStorage.removeItem(key);\n            } else {\n                localStorage.setItem(key, JSON.stringify(_state));\n                setState(_state);\n            }\n        },\n    ];\n};\n\nexport const DockviewPersistence = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<DockviewApi>();\n    const [layout, setLayout] =\n        useLocalStorage<SerializedDockview>('floating.layout');\n\n    const [disableFloatingGroups, setDisableFloatingGroups] =\n        React.useState<boolean>(false);\n\n    const load = (api: DockviewApi) => {\n        api.clear();\n        if (layout) {\n            try {\n                api.fromJSON(layout);\n            } catch (err) {\n                console.error(err);\n                api.clear();\n                loadDefaultLayout(api);\n            }\n        } else {\n            loadDefaultLayout(api);\n        }\n    };\n\n    const onReady = (event: DockviewReadyEvent) => {\n        load(event.api);\n        setApi(event.api);\n    };\n\n    const [options, setOptions] = React.useState<\n        'boundedWithinViewport' | undefined\n    >(undefined);\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n            }}\n        >\n            <div style={{ height: '25px' }}>\n                <button\n                    onClick={() => {\n                        if (api) {\n                            setLayout(api.toJSON());\n                        }\n                    }}\n                >\n                    Save\n                </button>\n                <button\n                    onClick={() => {\n                        if (api) {\n                            load(api);\n                        }\n                    }}\n                >\n                    Load\n                </button>\n                <button\n                    onClick={() => {\n                        api!.clear();\n                        setLayout(null);\n                    }}\n                >\n                    Clear\n                </button>\n                <button\n                    onClick={() => {\n                        addFloatingPanel2(api!);\n                    }}\n                >\n                    Add Floating Group\n                </button>\n                <button\n                    onClick={() => {\n                        setOptions(\n                            options === undefined\n                                ? 'boundedWithinViewport'\n                                : undefined\n                        );\n                    }}\n                >\n                    {`Bounds: ${options ? 'Within' : 'Overflow'}`}\n                </button>\n                <button\n                    onClick={() => {\n                        setDisableFloatingGroups((x) => !x);\n                    }}\n                >\n                    {`${\n                        disableFloatingGroups ? 'Enable' : 'Disable'\n                    } floating groups`}\n                </button>\n            </div>\n            <div\n                style={{\n                    flexGrow: 1,\n                }}\n            >\n                <DockviewReact\n                    onReady={onReady}\n                    components={components}\n                    watermarkComponent={Watermark}\n                    leftHeaderActionsComponent={LeftComponent}\n                    rightHeaderActionsComponent={RightComponent}\n                    disableFloatingGroups={disableFloatingGroups}\n                    floatingGroupBounds={options}\n                    className={`${props.theme || 'dockview-theme-abyss'}`}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst LeftComponent = (props: IDockviewHeaderActionsProps) => {\n    const onClick = () => {\n        addPanel(props.containerApi);\n    };\n    return (\n        <div style={{ height: '100%', color: 'white', padding: '0px 4px' }}>\n            <Icon onClick={onClick} icon={'add'} />\n        </div>\n    );\n};\n\nconst RightComponent = (props: IDockviewHeaderActionsProps) => {\n    const [floating, setFloating] = React.useState<boolean>(\n        props.api.location.type === 'floating'\n    );\n\n    React.useEffect(() => {\n        const disposable = props.group.api.onDidLocationChange(\n            (event) => {\n                setFloating(event.location.type === 'floating');\n            }\n        );\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [props.group.api]);\n\n    const onClick = () => {\n        if (floating) {\n            const group = props.containerApi.addGroup();\n            props.group.api.moveTo({ group });\n        } else {\n            props.containerApi.addFloatingGroup(props.group);\n        }\n    };\n\n    return (\n        <div style={{ height: '100%', color: 'white', padding: '0px 4px' }}>\n            <Icon\n                onClick={onClick}\n                icon={floating ? 'jump_to_element' : 'back_to_tab'}\n            />\n        </div>\n    );\n};\n\nexport default DockviewPersistence;\n\nconst Watermark = () => {\n    return <div style={{ color: 'white', padding: '8px' }}>watermark</div>;\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    IDockviewPanelHeaderProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string; x?: number }>) => {\n        return (\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    color: 'white',\n                    height: '100%',\n                }}\n            >\n                <span>{`${props.params.title}`}</span>\n                {props.params.x && <span>{`  ${props.params.x}`}</span>}\n            </div>\n        );\n    },\n};\n\nconst tabComponents = {\n    default: (props: IDockviewPanelHeaderProps<{ title: string }>) => {\n        return (\n            <div className=\"my-custom-tab\">\n                <span>{props.params.title}</span>\n                <span style={{ flexGrow: 1 }} />\n\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    minimize\n                </span>\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    maximize\n                </span>\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    close\n                </span>\n            </div>\n        );\n    },\n};\n\nconst DockviewNative = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 1',\n            },\n        });\n        panel1.group.locked = true;\n\n        const panel2 = event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 2',\n            },\n            position: {\n                direction: 'right',\n            },\n        });\n        panel2.group.locked = true;\n\n        const panel3 = event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 3',\n            },\n            position: {\n                direction: 'below',\n            },\n        });\n        panel3.group.locked = true;\n    };\n\n    return (\n        <DockviewReact\n            onReady={onReady}\n            components={components}\n            tabComponents={tabComponents}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n            singleTabMode=\"fullwidth\"\n        />\n    );\n};\n\nexport default DockviewNative;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewHeaderActionsProps,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string; x?: number }>) => {\n        return (\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    color: 'white',\n                    height: '100%',\n                }}\n            >\n                <span>{`${props.params.title}`}</span>\n                {props.params.x && <span>{`  ${props.params.x}`}</span>}\n            </div>\n        );\n    },\n};\n\nconst RightHeaderActions = (props: IDockviewHeaderActionsProps) => {\n    const isGroupActive = props.isGroupActive;\n\n    return (\n        <div className=\"dockview-groupcontrol-demo\">\n            <span\n                className=\"dockview-groupcontrol-demo-group-active\"\n                style={{\n                    background: isGroupActive ? 'green' : 'red',\n                }}\n            >\n                {isGroupActive ? 'Group Active' : 'Group Inactive'}\n            </span>\n        </div>\n    );\n};\n\nconst LeftHeaderActions = (props: IDockviewHeaderActionsProps) => {\n    const activePanel = props.activePanel;\n\n    return (\n        <div className=\"dockview-groupcontrol-demo\">\n            <span className=\"dockview-groupcontrol-demo-active-panel\">{`activePanel: ${\n                activePanel?.id || 'null'\n            }`}</span>\n        </div>\n    );\n};\n\nconst DockviewGroupControl = (props: { theme: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 1',\n            },\n        });\n\n        const panel2 = event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 2',\n            },\n            position: {\n                direction: 'right',\n            },\n        });\n\n        const panel3 = event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 3',\n            },\n            position: {\n                direction: 'below',\n            },\n        });\n    };\n\n    return (\n        <DockviewReact\n            onReady={onReady}\n            components={components}\n            leftHeaderActionsComponent={LeftHeaderActions}\n            rightHeaderActionsComponent={RightHeaderActions}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nexport default DockviewGroupControl;\n","import { DockviewReact, DockviewReadyEvent } from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    iframeComponent: () => {\n        return (\n            <iframe\n                style={{\n                    width: '100%',\n                    height: '100%',\n                }}\n                src=\"https://dockview.dev\"\n            />\n        );\n    },\n    basicComponent: () => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {'This panel is just a usual component '}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'iframeComponent',\n            renderer: 'always',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'iframeComponent',\n            renderer: 'always',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'basicComponent',\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nexport default App;\n","import {\n    IGroupPanelInitParameters,\n    IContentRenderer,\n    PanelUpdateEvent,\n    Parameters,\n    ITabRenderer,\n    DockviewComponent,\n} from 'dockview-core';\nimport './app.scss';\n\nclass DefaultPanel implements IContentRenderer {\n    private _element: HTMLElement;\n    private _titleElement: HTMLElement;\n    private _paramsElement: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        this._element = document.createElement('div');\n        this._element.style.display = 'flex';\n        this._element.style.justifyContent = 'center';\n        this._element.style.alignItems = 'center';\n        this._element.style.color = 'white';\n        this._element.style.height = '100%';\n\n        this._titleElement = document.createElement('span');\n        this._paramsElement = document.createElement('span');\n\n        this._element.appendChild(this._titleElement);\n    }\n\n    init(params: IGroupPanelInitParameters): void {\n        this.render(params.params);\n    }\n\n    update(event: PanelUpdateEvent<Parameters>): void {\n        this.render(event.params);\n    }\n\n    private render(params: Record<string, any>) {\n        this._titleElement.textContent = params.title;\n\n        if (params.x) {\n            if (!this._paramsElement.parentElement) {\n                this._element.appendChild(this._paramsElement);\n            }\n            this._paramsElement.textContent = params.x;\n        } else {\n            this._paramsElement.parentElement?.removeChild(this._paramsElement);\n        }\n    }\n}\n\nclass DefaultTab implements ITabRenderer {\n    private _element: HTMLElement;\n    private _title: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        this._element = document.createElement('div');\n        this._element.className = 'my-custom-tab';\n\n        this._title = document.createElement('span');\n\n        const spacer = document.createElement('span');\n        spacer.style.flexGrow = '1';\n\n        const btn1 = document.createElement('span');\n        btn1.className = 'my-custom-tab-icon material-symbols-outlined';\n        btn1.textContent = 'minimize';\n\n        const btn2 = document.createElement('span');\n        btn2.className = 'my-custom-tab-icon material-symbols-outlined';\n        btn2.textContent = 'maximize';\n\n        const btn3 = document.createElement('span');\n        btn3.className = 'my-custom-tab-icon material-symbols-outlined';\n        btn3.textContent = 'close';\n\n        this._element.appendChild(this._title);\n        this._element.appendChild(spacer);\n        this._element.appendChild(btn1);\n        this._element.appendChild(btn2);\n        this._element.appendChild(btn3);\n    }\n\n    init(params: IGroupPanelInitParameters): void {\n        this.render(params.params);\n    }\n\n    update(event: PanelUpdateEvent<Parameters>): void {\n        this.render(event.params);\n    }\n\n    private render(params: Record<string, any>) {\n        this._title = params.title;\n    }\n}\n\nexport function attach(parent: HTMLElement): {\n    dispose: () => void;\n} {\n    const element = document.createElement('div');\n    element.className = 'dockview-theme-abyss';\n    element.style.height = '100%';\n    element.style.width = '100%';\n\n    const dockview = new DockviewComponent({\n        components: {\n            default: DefaultPanel,\n        },\n        tabComponents: {\n            default: DefaultTab,\n        },\n        singleTabMode: 'fullwidth',\n        parentElement: element,\n    });\n\n    parent.appendChild(element);\n\n    const { clientWidth, clientHeight } = parent;\n    dockview.layout(clientWidth, clientHeight);\n\n    const panel1 = dockview.addPanel({\n        id: 'panel_1',\n        component: 'default',\n        tabComponent: 'default',\n        params: {\n            title: 'Window 1',\n        },\n    });\n    panel1.group.locked = true;\n\n    const panel2 = dockview.addPanel({\n        id: 'panel_2',\n        component: 'default',\n        tabComponent: 'default',\n        params: {\n            title: 'Window 2',\n        },\n        position: {\n            direction: 'right',\n        },\n    });\n    panel2.group.locked = true;\n\n    const panel3 = dockview.addPanel({\n        id: 'panel_3',\n        component: 'default',\n        tabComponent: 'default',\n        params: {\n            title: 'Window 3',\n        },\n        position: {\n            direction: 'below',\n        },\n    });\n    panel3.group.locked = true;\n\n    return {\n        dispose: () => {\n            dockview.dispose();\n            element.remove();\n        },\n    };\n}\n","import {\n    DockviewComponent,\n    IContentRenderer,\n    IGroupPanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from 'dockview-core';\n\nclass DefaultPanel implements IContentRenderer {\n    private _element: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        this._element = document.createElement('div');\n        this._element.style.padding = '20px';\n        this._element.style.color = 'white';\n    }\n\n    init(params: IGroupPanelInitParameters): void {\n        this._element.textContent = params.params.title;\n    }\n\n    update(event: PanelUpdateEvent<Parameters>): void {\n        this._element.textContent = event.params.title;\n    }\n}\n\nexport function attach(parent: HTMLElement): {\n    dispose: () => void;\n} {\n    const element = document.createElement('div');\n    element.className = 'dockview-theme-abyss';\n    element.style.height = '100%';\n    element.style.width = '100%';\n\n    const dockview = new DockviewComponent({\n        components: {\n            default: DefaultPanel,\n        },\n        parentElement: element,\n    });\n\n    parent.appendChild(element);\n\n    const { clientWidth, clientHeight } = parent;\n    dockview.layout(clientWidth, clientHeight);\n\n    const panel = dockview.addPanel({\n        id: 'panel_1',\n        component: 'default',\n        params: {\n            title: 'Panel 1',\n        },\n    });\n\n    panel.group.locked = true;\n    panel.group.header.hidden = true;\n\n    dockview.addPanel({\n        id: 'panel_2',\n        component: 'default',\n        params: {\n            title: 'Panel 2',\n        },\n    });\n\n    dockview.addPanel({\n        id: 'panel_3',\n        component: 'default',\n        params: {\n            title: 'Panel 3',\n        },\n    });\n\n    dockview.addPanel({\n        id: 'panel_4',\n        component: 'default',\n        params: {\n            title: 'Panel 4',\n        },\n        position: { referencePanel: 'panel_1', direction: 'right' },\n    });\n\n    const panel5 = dockview.addPanel({\n        id: 'panel_5',\n        component: 'default',\n        params: {\n            title: 'Panel 5',\n        },\n        position: { referencePanel: 'panel_3', direction: 'right' },\n    });\n\n    dockview.addPanel({\n        id: 'panel_6',\n        component: 'default',\n        params: {\n            title: 'Panel 6',\n        },\n        position: { referencePanel: 'panel_5', direction: 'below' },\n    });\n\n    dockview.addPanel({\n        id: 'panel_7',\n        component: 'default',\n        params: {\n            title: 'Panel 7',\n        },\n        position: { referencePanel: 'panel_6', direction: 'right' },\n    });\n\n    return {\n        dispose: () => {\n            dockview.dispose();\n            element.remove();\n        },\n    };\n}\n","import {\n    DockviewComponent,\n    IContentRenderer,\n    IGroupPanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from 'dockview-core';\nimport './app.scss';\n\nclass DefaultPanel implements IContentRenderer {\n    private _element: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        this._element = document.createElement('div');\n        this._element.style.padding = '20px';\n        this._element.style.color = 'white';\n    }\n\n    init(params: IGroupPanelInitParameters): void {\n        this._element.textContent = params.params.title;\n    }\n\n    update(event: PanelUpdateEvent<Parameters>): void {\n        this._element.textContent = event.params.title;\n    }\n}\n\nexport function attach(parent: HTMLElement): {\n    dispose: () => void;\n} {\n    const element = document.createElement('div');\n    element.className = 'dockview-theme-abyss  skinny-tabs';\n    element.style.height = '100%';\n    element.style.width = '100%';\n\n    const dockview = new DockviewComponent({\n        components: {\n            default: DefaultPanel,\n        },\n        parentElement: element,\n    });\n\n    parent.appendChild(element);\n\n    const { clientWidth, clientHeight } = parent;\n    dockview.layout(clientWidth, clientHeight);\n\n    dockview.addPanel({\n        id: 'panel_1',\n        component: 'default',\n        params: {\n            title: 'Panel 1',\n        },\n    });\n\n    dockview.addPanel({\n        id: 'panel_2',\n        component: 'default',\n        params: {\n            title: 'Panel 2',\n        },\n    });\n\n    dockview.addPanel({\n        id: 'panel_3',\n        component: 'default',\n        params: {\n            title: 'Panel 3',\n        },\n        position: { referencePanel: 'panel_1', direction: 'right' },\n    });\n\n    dockview.addPanel({\n        id: 'panel_4',\n        component: 'default',\n        params: {\n            title: 'Panel 4',\n        },\n        position: { referencePanel: 'panel_3', direction: 'right' },\n    });\n\n    dockview.addPanel({\n        id: 'panel_5',\n        component: 'default',\n        params: {\n            title: 'Panel 5',\n        },\n        position: { referencePanel: 'panel_4', direction: 'below' },\n    });\n\n    dockview.addPanel({\n        id: 'panel_6',\n        component: 'default',\n        params: {\n            title: 'Panel 6',\n        },\n        position: { referencePanel: 'panel_5', direction: 'right' },\n    });\n\n    return {\n        dispose: () => {\n            dockview.dispose();\n            element.remove();\n        },\n    };\n}\n","import {\n    DockviewApi,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport './app.scss';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        const [active, setActive] = React.useState<boolean>(props.api.isActive);\n        const ref = React.useRef<HTMLInputElement>(null);\n\n        React.useEffect(() => {\n            const disposable = props.api.onDidActiveChange((event) => {\n                setActive(props.api.isActive);\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.api]);\n\n        return (\n            <div\n                className=\"keyboard-example-panel\"\n                style={{ padding: '20px', color: 'white' }}\n            >\n                <div style={{ padding: '10px 0px' }}>\n                    <span>{props.api.title}</span>\n                </div>\n                <div className=\"keyboard-example-description\">\n                    {'Use '}\n                    <span className=\"keyboard-example-shortcut\">\n                        {'Ctrl+ArrowLeft'}\n                    </span>\n                    {' and '}\n                    <span className=\"keyboard-example-shortcut \">\n                        {'Ctrl+ArrowRight'}\n                    </span>\n                    {' to nativgate between tabs.'}\n                </div>\n\n                <div>\n                    <span>{'isPanelActive: '}</span>\n                    <span>{active ? 'true' : 'false'}</span>\n                </div>\n            </div>\n        );\n    },\n};\n\nconst DockviewDemo = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<DockviewApi>();\n\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n        });\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            title: 'Panel 5',\n            position: { referencePanel: 'panel_4', direction: 'within' },\n        });\n\n        event.api.getPanel('panel_1')!.api.setActive();\n\n        setApi(event.api);\n    };\n\n    const onKeyDown = (event: React.KeyboardEvent) => {\n        if (!api) {\n            return;\n        }\n\n        if (event.ctrlKey && event.code === 'ArrowLeft') {\n            // move backwards\n            api.moveToPrevious({ includePanel: true });\n        }\n\n        if (event.ctrlKey && event.code === 'ArrowRight') {\n            // move backwards\n            api.moveToNext({ includePanel: true });\n        }\n    };\n\n    return (\n        <div style={{ height: '100%' }} onKeyDown={onKeyDown}>\n            <DockviewReact\n                components={components}\n                onReady={onReady}\n                className={props.theme || 'dockview-theme-abyss'}\n            />\n        </div>\n    );\n};\n\nexport default DockviewDemo;\n","import {\n    DockviewApi,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst counter = (() => {\n    let i = 0;\n\n    return {\n        next: () => ++i,\n    };\n})();\n\nfunction loadDefaultLayout(api: DockviewApi) {\n    api.addPanel({\n        id: 'panel_1',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_2',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_3',\n        component: 'default',\n    });\n}\n\nexport const DockviewPersistence = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<DockviewApi>();\n\n    const clearLayout = () => {\n        localStorage.removeItem('dockview_persistence_layout');\n        if (api) {\n            api.clear();\n            loadDefaultLayout(api);\n        }\n    };\n\n    const onReady = (event: DockviewReadyEvent) => {\n        const layoutString = localStorage.getItem(\n            'dockview_persistence_layout'\n        );\n\n        let success = false;\n\n        if (layoutString) {\n            try {\n                const layout = JSON.parse(layoutString);\n                event.api.fromJSON(layout);\n                success = true;\n            } catch (err) {\n                console.error(err);\n            }\n        }\n\n        if (!success) {\n            loadDefaultLayout(event.api);\n        }\n\n        setApi(event.api);\n    };\n\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n\n        api.onDidLayoutChange(() => {\n            const layout = api.toJSON();\n\n            localStorage.setItem(\n                'dockview_persistence_layout',\n                JSON.stringify(layout)\n            );\n        });\n    }, [api]);\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n            }}\n        >\n            <div style={{ height: '25px' }}>\n                <button onClick={clearLayout}>Reset Layout</button>\n            </div>\n            <div\n                style={{\n                    flexGrow: 1,\n                    overflow: 'hidden',\n                }}\n            >\n                <DockviewReact\n                    onReady={onReady}\n                    components={components}\n                    watermarkComponent={Watermark}\n                    className={`${props.theme || 'dockview-theme-abyss'}`}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default DockviewPersistence;\n\nconst Watermark = () => {\n    return <div style={{ color: 'white', padding: '8px' }}>watermark</div>;\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'locked1',\n            component: 'default',\n            params: {\n                title: 'Locked',\n            },\n        });\n\n        panel1.group.locked = true;\n        panel1.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'Drag me',\n            component: 'default',\n            params: {\n                title: '',\n            },\n            position: { referencePanel: 'locked1', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'Drag me too',\n            component: 'default',\n            params: {\n                title: '',\n            },\n            position: { referencePanel: 'Drag me', direction: 'right' },\n        });\n\n        const panel3 = event.api.addPanel({\n            id: 'locked2',\n            component: 'default',\n            params: {\n                title: 'Locked with no drop target',\n            },\n            position: { referencePanel: 'Drag me too', direction: 'right' },\n        });\n\n        panel3.group.locked = 'no-drop-target';\n        panel3.group.header.hidden = true;\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default App;\n","import * as React from 'react';\n\nexport const Icon = (props: {\n    icon: string;\n    title?: string;\n    onClick?: (event: React.MouseEvent) => void;\n}) => {\n    return (\n        <div\n            title={props.title}\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: '30px',\n                height: '100%',\n\n                fontSize: '18px',\n            }}\n            onClick={props.onClick}\n        >\n            <span\n                style={{ fontSize: 'inherit', cursor: 'pointer' }}\n                className=\"material-symbols-outlined\"\n            >\n                {props.icon}\n            </span>\n        </div>\n    );\n};\n","import {\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewHeaderActionsProps,\n    IDockviewPanelProps,\n    SerializedDockview,\n} from 'dockview';\nimport * as React from 'react';\nimport { Icon } from './utils';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst counter = (() => {\n    let i = 0;\n\n    return {\n        next: () => ++i,\n    };\n})();\n\nfunction loadDefaultLayout(api: DockviewApi) {\n    api.addPanel({\n        id: 'panel_1',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_2',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_3',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_4',\n        component: 'default',\n    });\n\n    api.addPanel({\n        id: 'panel_5',\n        component: 'default',\n        position: { direction: 'right' },\n    });\n\n    api.addPanel({\n        id: 'panel_6',\n        component: 'default',\n    });\n}\n\nlet panelCount = 0;\n\nfunction safeParse<T>(value: any): T | null {\n    try {\n        return JSON.parse(value) as T;\n    } catch (err) {\n        return null;\n    }\n}\n\nconst useLocalStorage = <T,>(\n    key: string\n): [T | null, (setter: T | null) => void] => {\n    const [state, setState] = React.useState<T | null>(\n        safeParse(localStorage.getItem(key))\n    );\n\n    React.useEffect(() => {\n        const _state = localStorage.getItem('key');\n        try {\n            if (_state !== null) {\n                setState(JSON.parse(_state));\n            }\n        } catch (err) {\n            //\n        }\n    }, [key]);\n\n    return [\n        state,\n        (_state: T | null) => {\n            if (_state === null) {\n                localStorage.removeItem(key);\n            } else {\n                localStorage.setItem(key, JSON.stringify(_state));\n                setState(_state);\n            }\n        },\n    ];\n};\n\nexport const App = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<DockviewApi>();\n    const [layout, setLayout] =\n        useLocalStorage<SerializedDockview>('floating.layout');\n\n    const [disableFloatingGroups, setDisableFloatingGroups] =\n        React.useState<boolean>(false);\n\n    const load = (api: DockviewApi) => {\n        api.clear();\n        if (layout) {\n            try {\n                api.fromJSON(layout);\n            } catch (err) {\n                console.error(err);\n                api.clear();\n                loadDefaultLayout(api);\n            }\n        } else {\n            loadDefaultLayout(api);\n        }\n    };\n\n    const onReady = (event: DockviewReadyEvent) => {\n        load(event.api);\n        setApi(event.api);\n    };\n\n    const [options, setOptions] = React.useState<\n        'boundedWithinViewport' | undefined\n    >(undefined);\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n            }}\n        >\n            <div style={{ height: '25px' }}>\n                <button\n                    onClick={() => {\n                        if (api) {\n                            setLayout(api.toJSON());\n                        }\n                    }}\n                >\n                    Save\n                </button>\n                <button\n                    onClick={() => {\n                        if (api) {\n                            load(api);\n                        }\n                    }}\n                >\n                    Load\n                </button>\n                <button\n                    onClick={() => {\n                        api!.clear();\n                        setLayout(null);\n                    }}\n                >\n                    Clear\n                </button>\n            </div>\n            <div\n                style={{\n                    flexGrow: 1,\n                }}\n            >\n                <DockviewReact\n                    onReady={onReady}\n                    components={components}\n                    watermarkComponent={Watermark}\n                    leftHeaderActionsComponent={LeftComponent}\n                    rightHeaderActionsComponent={RightComponent}\n                    disableFloatingGroups={disableFloatingGroups}\n                    floatingGroupBounds={options}\n                    className={`${props.theme || 'dockview-theme-abyss'}`}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst LeftComponent = (props: IDockviewHeaderActionsProps) => {\n    const onClick = () => {\n        props.containerApi.addPanel({\n            id: (++panelCount).toString(),\n            title: `Tab ${panelCount}`,\n            component: 'default',\n            position: { referenceGroup: props.group },\n        });\n    };\n    return (\n        <div style={{ height: '100%', color: 'white', padding: '0px 4px' }}>\n            <Icon onClick={onClick} icon={'add'} />\n        </div>\n    );\n};\n\nconst RightComponent = (props: IDockviewHeaderActionsProps) => {\n    const [maximized, setMaximized] = React.useState<boolean>(\n        props.api.isMaximized()\n    );\n\n    React.useEffect(() => {\n        const disposable = props.containerApi.onDidMaxmizedGroupChange(() => {\n            setMaximized(props.api.isMaximized());\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [props.containerApi]);\n\n    const onClick = () => {\n        if (maximized) {\n            props.api.exitMaximized();\n        } else {\n            props.api.maximize();\n        }\n    };\n\n    return (\n        <div style={{ height: '100%', color: 'white', padding: '0px 4px' }}>\n            <Icon\n                onClick={onClick}\n                icon={maximized ? 'jump_to_element' : 'back_to_tab'}\n            />\n        </div>\n    );\n};\n\nexport default App;\n\nconst Watermark = () => {\n    return <div style={{ color: 'white', padding: '8px' }}>watermark</div>;\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    IDockviewPanelHeaderProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string; x?: number }>) => {\n        return (\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    color: 'white',\n                    height: '100%',\n                }}\n            >\n                <span>{`${props.params.title}`}</span>\n                {props.params.x && <span>{`  ${props.params.x}`}</span>}\n            </div>\n        );\n    },\n    isolatedApp: (\n        props: IDockviewPanelProps<{ title: string; x?: number }>\n    ) => {\n        const onReady = (event: DockviewReadyEvent) => {\n            const panel1 = event.api.addPanel({\n                id: 'panel_1',\n                component: 'default',\n                params: {\n                    title: 'Tab 1',\n                },\n            });\n            const panel2 = event.api.addPanel({\n                id: 'panel_2',\n                component: 'default',\n                params: {\n                    title: 'Tab 2',\n                },\n            });\n            const panel3 = event.api.addPanel({\n                id: 'panel_3',\n                component: 'default',\n                params: {\n                    title: 'Tab 3',\n                },\n            });\n        };\n        return (\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                tabComponents={tabComponents}\n                className=\"dockview-theme-abyss\"\n            />\n        );\n    },\n};\n\nconst tabComponents = {\n    default: (props: IDockviewPanelHeaderProps<{ title: string }>) => {\n        return (\n            <div className=\"my-custom-tab\">\n                <span>{props.params.title}</span>\n                <span style={{ flexGrow: 1 }} />\n\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    minimize\n                </span>\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    maximize\n                </span>\n                <span className=\"my-custom-tab-icon material-symbols-outlined\">\n                    close\n                </span>\n            </div>\n        );\n    },\n};\n\nconst DockviewNative2 = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'isolatedApp',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 1',\n            },\n        });\n        panel1.group.locked = true;\n\n        const panel2 = event.api.addPanel({\n            id: 'panel_2',\n            component: 'isolatedApp',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 2',\n            },\n            position: {\n                direction: 'right',\n            },\n        });\n        panel2.group.locked = true;\n\n        const panel3 = event.api.addPanel({\n            id: 'panel_3',\n            component: 'isolatedApp',\n            tabComponent: 'default',\n            params: {\n                title: 'Window 3',\n            },\n            position: {\n                direction: 'below',\n            },\n        });\n        panel3.group.locked = true;\n    };\n\n    return (\n        <div\n            style={{\n                height: '500px',\n                display: 'flex',\n                flexDirection: 'column',\n            }}\n        >\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                tabComponents={tabComponents}\n                className={`${props.theme || 'dockview-theme-abyss'}`}\n                singleTabMode=\"fullwidth\"\n            />\n        </div>\n    );\n};\n\nexport default DockviewNative2;\n","import {\n    DockviewDndOverlayEvent,\n    DockviewDropEvent,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst InnerDockview = () => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n        });\n    };\n\n    return (\n        <DockviewReact\n            onReady={onReady}\n            components={components}\n            className=\"nested-dockview\"\n        />\n    );\n};\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n    innerDockview: InnerDockview,\n};\n\nconst NestedDockview = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'innerDockview',\n            position: { referencePanel: 'panel_2', direction: 'right' },\n        });\n    };\n\n    const showDndOverlay = (event: DockviewDndOverlayEvent) => {\n        // console.log(event.getData());\n\n        return false;\n    };\n\n    const onDidDrop = (event: DockviewDropEvent) => {\n        // event.getData();\n    };\n\n    return (\n        <DockviewReact\n            onReady={onReady}\n            components={components}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n            showDndOverlay={showDndOverlay}\n            onDidDrop={onDidDrop}\n        />\n    );\n};\n\nexport default NestedDockview;\n","import * as React from 'react';\n\nexport const Icon = (props: {\n    icon: string;\n    title?: string;\n    onClick?: (event: React.MouseEvent) => void;\n}) => {\n    return (\n        <div\n            title={props.title}\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: '30px',\n                height: '100%',\n\n                fontSize: '18px',\n            }}\n            onClick={props.onClick}\n        >\n            <span\n                style={{ fontSize: 'inherit', cursor: 'pointer' }}\n                className=\"material-symbols-outlined\"\n            >\n                {props.icon}\n            </span>\n        </div>\n    );\n};\n","import { useLayer, Arrow } from 'react-laag';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport * as React from 'react';\nimport { DockviewPanelApi } from 'dockview';\n\nexport function PopoverMenu(props: { window: Window }) {\n    const [isOpen, setOpen] = React.useState(false);\n\n    // helper function to close the menu\n    function close() {\n        setOpen(false);\n    }\n\n    const { renderLayer, triggerProps, layerProps, arrowProps } = useLayer({\n        isOpen,\n        onOutsideClick: close, // close the menu when the user clicks outside\n        onDisappear: close, // close the menu when the menu gets scrolled out of sight\n        overflowContainer: false, // keep the menu positioned inside the container\n        auto: true, // automatically find the best placement\n        placement: 'top-end', // we prefer to place the menu \"top-end\"\n        triggerOffset: 12, // keep some distance to the trigger\n        containerOffset: 16, // give the menu some room to breath relative to the container\n        arrowOffset: 16, // let the arrow have some room to breath also,\n        environment: props.window,\n        container: props.window\n            ? () => {\n                  const el = props.window.document.body;\n                  Object.setPrototypeOf(el, HTMLElement.prototype);\n                  return el;\n              }\n            : undefined,\n    });\n\n    // Again, we're using framer-motion for the transition effect\n    return (\n        <>\n            <button {...triggerProps} onClick={() => setOpen(!isOpen)}>\n                {isOpen ? 'Hide' : 'Show'}\n            </button>\n            {renderLayer(\n                <AnimatePresence>\n                    {isOpen && (\n                        <motion.ul {...layerProps}>\n                            <li>Item 1</li>\n                            <li>Item 2</li>\n                            <li>Item 3</li>\n                            <li>Item 4</li>\n                            <Arrow {...arrowProps} />\n                        </motion.ul>\n                    )}\n                </AnimatePresence>\n            )}\n        </>\n    );\n}\n","import {\n    DockviewApi,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewHeaderActionsProps,\n    IDockviewPanelProps,\n    SerializedDockview,\n    DockviewPanelApi,\n} from 'dockview';\nimport * as React from 'react';\nimport { Icon } from './utils';\nimport { PopoverMenu } from './popover';\n\nfunction usePanelWindowObject(api: DockviewPanelApi): Window {\n    const [document, setDocument] = React.useState<Window>(api.getWindow());\n\n    React.useEffect(() => {\n        const disposable = api.onDidLocationChange((event) => {\n            setDocument(api.getWindow());\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [api]);\n\n    return document;\n}\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        const _window = usePanelWindowObject(props.api);\n\n        const [reset, setReset] = React.useState<boolean>(false);\n\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                <button\n                    onClick={() => {\n                        console.log(_window);\n                        setReset(true);\n                        setTimeout(() => {\n                            setReset(false);\n                        }, 2000);\n                    }}\n                >\n                    Print\n                </button>\n                {!reset && <PopoverMenu window={_window} />}\n                {props.api.title}\n            </div>\n        );\n    },\n};\n\nfunction loadDefaultLayout(api: DockviewApi) {\n    api.addPanel({\n        id: 'panel_1',\n        component: 'default',\n    });\n\n    // api.addPanel({\n    //     id: 'panel_2',\n    //     component: 'default',\n    // });\n\n    // api.addPanel({\n    //     id: 'panel_3',\n    //     component: 'default',\n    // });\n\n    // api.addPanel({\n    //     id: 'panel_4',\n    //     component: 'default',\n    // });\n\n    // api.addPanel({\n    //     id: 'panel_5',\n    //     component: 'default',\n    //     position: { direction: 'right' },\n    // });\n\n    // api.addPanel({\n    //     id: 'panel_6',\n    //     component: 'default',\n    // });\n}\n\nlet panelCount = 0;\n\nfunction safeParse<T>(value: any): T | null {\n    try {\n        return JSON.parse(value) as T;\n    } catch (err) {\n        return null;\n    }\n}\n\nconst useLocalStorage = <T,>(\n    key: string\n): [T | null, (setter: T | null) => void] => {\n    const [state, setState] = React.useState<T | null>(\n        safeParse(localStorage.getItem(key))\n    );\n\n    React.useEffect(() => {\n        const _state = localStorage.getItem('key');\n        try {\n            if (_state !== null) {\n                setState(JSON.parse(_state));\n            }\n        } catch (err) {\n            //\n        }\n    }, [key]);\n\n    return [\n        state,\n        (_state: T | null) => {\n            if (_state === null) {\n                localStorage.removeItem(key);\n            } else {\n                localStorage.setItem(key, JSON.stringify(_state));\n                setState(_state);\n            }\n        },\n    ];\n};\n\nexport const App = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<DockviewApi>();\n    const [layout, setLayout] =\n        useLocalStorage<SerializedDockview>('floating.layout');\n\n    const [disableFloatingGroups, setDisableFloatingGroups] =\n        React.useState<boolean>(false);\n\n    const load = (api: DockviewApi) => {\n        api.clear();\n        if (layout) {\n            try {\n                api.fromJSON(layout);\n            } catch (err) {\n                console.error(err);\n                api.clear();\n                loadDefaultLayout(api);\n            }\n        } else {\n            loadDefaultLayout(api);\n        }\n    };\n\n    const onReady = (event: DockviewReadyEvent) => {\n        load(event.api);\n        setApi(event.api);\n    };\n\n    const [options, setOptions] = React.useState<\n        'boundedWithinViewport' | undefined\n    >(undefined);\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n            }}\n        >\n            <div style={{ height: '25px' }}>\n                <button\n                    onClick={() => {\n                        if (api) {\n                            setLayout(api.toJSON());\n                        }\n                    }}\n                >\n                    Save\n                </button>\n                <button\n                    onClick={() => {\n                        if (api) {\n                            load(api);\n                        }\n                    }}\n                >\n                    Load\n                </button>\n                <button\n                    onClick={() => {\n                        api!.clear();\n                        setLayout(null);\n                    }}\n                >\n                    Clear\n                </button>\n            </div>\n            <div\n                style={{\n                    flexGrow: 1,\n                }}\n            >\n                <DockviewReact\n                    onReady={onReady}\n                    components={components}\n                    watermarkComponent={Watermark}\n                    leftHeaderActionsComponent={LeftComponent}\n                    rightHeaderActionsComponent={RightComponent}\n                    disableFloatingGroups={disableFloatingGroups}\n                    floatingGroupBounds={options}\n                    className={`${props.theme || 'dockview-theme-abyss'}`}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst LeftComponent = (props: IDockviewHeaderActionsProps) => {\n    const onClick = () => {\n        props.containerApi.addPanel({\n            id: (++panelCount).toString(),\n            title: `Tab ${panelCount}`,\n            component: 'default',\n            position: { referenceGroup: props.group },\n        });\n    };\n    return (\n        <div style={{ height: '100%', color: 'white', padding: '0px 4px' }}>\n            <Icon onClick={onClick} icon={'add'} />\n        </div>\n    );\n};\n\nconst RightComponent = (props: IDockviewHeaderActionsProps) => {\n    const [popout, setPopout] = React.useState<boolean>(\n        props.api.location.type === 'popout'\n    );\n\n    React.useEffect(() => {\n        const disposable = props.group.api.onDidLocationChange((event) => [\n            setPopout(event.location.type === 'popout'),\n        ]);\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [props.group.api]);\n\n    const onClick = () => {\n        if (popout) {\n            const group = props.containerApi.addGroup();\n            props.group.api.moveTo({ group });\n        } else {\n            const window = props.containerApi.addPopoutGroup(props.group, {\n                popoutUrl: '/popout/index.html',\n            });\n        }\n    };\n\n    return (\n        <div style={{ height: '100%', color: 'white', padding: '0px 4px' }}>\n            <Icon\n                onClick={onClick}\n                icon={popout ? 'jump_to_element' : 'back_to_tab'}\n            />\n        </div>\n    );\n};\n\nexport default App;\n\nconst Watermark = () => {\n    return <div style={{ color: 'white', padding: '8px' }}>watermark</div>;\n};\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nimport { atom, useRecoilState, useRecoilValue } from 'recoil';\n\nconst renderVisibleComponentsOnlyAtom = atom<boolean>({\n    key: 'renderVisibleComponentsOnlyAtom',\n    default: false,\n});\n\nfunction RenderWhenVisible(\n    component: React.FunctionComponent<IDockviewPanelProps>\n) {\n    const HigherOrderComponent = (props: IDockviewPanelProps) => {\n        const [visible, setVisible] = React.useState<boolean>(\n            props.api.isVisible\n        );\n\n        const render = useRecoilValue(renderVisibleComponentsOnlyAtom);\n\n        React.useEffect(() => {\n            const disposable = props.api.onDidVisibilityChange((event) =>\n                setVisible(event.isVisible)\n            );\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.api]);\n\n        if (!visible && render) {\n            return null;\n        }\n\n        return React.createElement(component, props);\n    };\n    return HigherOrderComponent;\n}\n\nconst formatLine = (line: string) => {\n    const now = new Date();\n\n    const pad = (x: number) => (x < 10 ? `0${x}` : `${x}`);\n\n    const time = `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n        now.getSeconds()\n    )}`;\n\n    return `[${time}] ${line}`;\n};\n\nconst components = {\n    default: RenderWhenVisible(\n        (props: IDockviewPanelProps<{ title: string }>) => {\n            const [lines, setLines] = React.useState<string[]>([\n                formatLine('Component created'),\n            ]);\n\n            React.useEffect(() => {\n                setLines((lines) => [\n                    ...lines,\n                    formatLine('Running task for 5 seconds'),\n                ]);\n                const timeout = setTimeout(() => {\n                    setLines((lines) => [\n                        ...lines,\n                        formatLine('Task completed'),\n                    ]);\n                }, 5000);\n\n                return () => {\n                    clearTimeout(timeout);\n                };\n            }, []);\n\n            return (\n                <div style={{ padding: '20px' }}>\n                    <div>{props.params.title}</div>\n                    {lines.map((line, i) => (\n                        <div key={i}>{line}</div>\n                    ))}\n                </div>\n            );\n        }\n    ),\n};\n\nconst Checkbox = () => {\n    const [render, setRender] = useRecoilState(renderVisibleComponentsOnlyAtom);\n\n    return (\n        <label>\n            Render only when visible\n            <input\n                type=\"checkbox\"\n                checked={render}\n                onChange={(e) => setRender(e.target.checked)}\n            />\n        </label>\n    );\n};\n\nconst RenderingDockview = (props: { theme?: string }) => {\n    const [render, setRender] = useRecoilState(renderVisibleComponentsOnlyAtom);\n\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n    };\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n            }}\n        >\n            <Checkbox />\n            <div style={{ flexGrow: 1, color: 'white' }}>\n                <DockviewReact\n                    components={components}\n                    onReady={onReady}\n                    className={`${props.theme || 'dockview-theme-abyss'}`}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default RenderingDockview;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    DockviewPanelApi,\n    DockviewPanelRenderer,\n    DockviewApi,\n    SerializedDockview,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst useRenderer = (\n    api: DockviewPanelApi\n): [DockviewPanelRenderer, (value: DockviewPanelRenderer) => void] => {\n    const [mode, setMode] = React.useState<DockviewPanelRenderer>(api.renderer);\n\n    React.useEffect(() => {\n        const disposable = api.onDidRendererChange((event) => {\n            setMode(event.renderer);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const _setMode = React.useCallback(\n        (mode: DockviewPanelRenderer) => {\n            api.setRenderer(mode);\n        },\n        [api]\n    );\n\n    return [mode, _setMode];\n};\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        const [mode, setMode] = useRenderer(props.api);\n\n        return (\n            <div style={{ height: '100%', overflow: 'auto', color: 'white' }}>\n                <div\n                    style={{\n                        height: '1000px',\n                        padding: '20px',\n                        overflow: 'auto',\n                    }}\n                >\n                    <div>{props.api.title}</div>\n                    <input />\n                    <div>\n                        {mode}\n                        <button\n                            onClick={() => {\n                                setMode(\n                                    mode === 'onlyWhenVisibile'\n                                        ? 'always'\n                                        : 'onlyWhenVisibile'\n                                );\n                            }}\n                        >\n                            Toggle render mode\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    },\n};\n\nconst DockviewDemo = (props: { theme?: string }) => {\n    const [value, setValue] = React.useState<string>('100');\n    const [api, setApi] = React.useState<DockviewApi | null>(null);\n\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n            position: { referencePanel: 'panel_1', direction: 'within' },\n        });\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: 'panel_3', direction: 'below' },\n        });\n\n        setApi(event.api);\n    };\n\n    const onSave = () => {\n        if (!api) {\n            return;\n        }\n\n        localStorage.setItem(\n            'dv_rendermode_state',\n            JSON.stringify({ size: value, state: api.toJSON() })\n        );\n    };\n\n    const onLoad = () => {\n        if (!api) {\n            return;\n        }\n\n        const state = localStorage.getItem('dv_rendermode_state');\n        if (typeof state !== 'string') {\n            return;\n        }\n\n        const json = JSON.parse(state) as {\n            size: string;\n            state: SerializedDockview;\n        };\n        setValue(json.size);\n        api.fromJSON(json.state);\n    };\n\n    return (\n        <div\n            style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n            <div>\n                <button onClick={onSave}>Save</button>\n                <button onClick={onLoad}>Load</button>\n                <input\n                    onChange={(event) => setValue(event.target.value)}\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={value}\n                />\n            </div>\n            <div style={{ height: `${value}%`, width: `${value}%` }}>\n                <DockviewReact\n                    components={components}\n                    onReady={onReady}\n                    className={props.theme || 'dockview-theme-abyss'}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default DockviewDemo;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './resize.scss';\n\nconst Default = (props: IDockviewPanelProps) => {\n    const [width, setWidth] = React.useState<number>(100);\n    const [height, setHeight] = React.useState<number>(100);\n\n    return (\n        <div className=\"resize-panel\">\n            <div style={{ height: '25px' }}>{props.api.title}</div>\n            <div className=\"resize-control\">\n                <span>Width:</span>\n                <input\n                    value={width}\n                    onChange={(e) => setWidth(Number(e.target.value))}\n                    type=\"number\"\n                    min={50}\n                    step={1}\n                />\n                <button\n                    style={{ width: '100px' }}\n                    onClick={() => {\n                        props.api.group.api.setSize({\n                            width,\n                        });\n                    }}\n                >\n                    Resize Group\n                </button>\n                <button\n                    style={{ width: '100px' }}\n                    onClick={() => {\n                        props.api.setSize({\n                            width,\n                        });\n                    }}\n                >\n                    Resize panel\n                </button>\n            </div>\n            <div className=\"resize-control\">\n                <span>Height:</span>\n                <input\n                    value={height}\n                    onChange={(e) => setHeight(Number(e.target.value))}\n                    type=\"number\"\n                    min={50}\n                    step={1}\n                />\n                <button\n                    style={{ width: '100px' }}\n                    onClick={() => {\n                        props.api.group.api.setSize({\n                            height,\n                        });\n                    }}\n                >\n                    Resize Group\n                </button>\n                <button\n                    style={{ width: '100px' }}\n                    onClick={() => {\n                        props.api.setSize({\n                            height,\n                        });\n                    }}\n                >\n                    Resize Panel\n                </button>\n            </div>\n        </div>\n    );\n};\n\nconst components = {\n    default: Default,\n};\n\nconst ResizeDockview = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            position: {\n                direction: 'right',\n                referencePanel: 'panel_1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            position: {\n                direction: 'below',\n                referencePanel: 'panel_1',\n            },\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n        });\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n        });\n    };\n\n    return (\n        <DockviewReact\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n            onReady={onReady}\n            components={components}\n        />\n    );\n};\n\nexport default ResizeDockview;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nconst Container = (props: any) => {\n    const [value, setValue] = React.useState<string>('50');\n\n    return (\n        <div\n            style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n            <input\n                onChange={(event) => setValue(event.target.value)}\n                type=\"range\"\n                min=\"1\"\n                max=\"100\"\n                value={value}\n            />\n            <div style={{ height: `${value}%`, width: `${value}%` }}>\n                <App {...props} />\n            </div>\n        </div>\n    );\n};\n\nexport default Container;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport './app.scss';\n\nconst TEXT =\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\nconst components = {\n    fixedHeightContainer: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ height: '100%', color: 'white' }}>\n                {[TEXT, '\\n\\n'].join('').repeat(20)}\n            </div>\n        );\n    },\n    overflowContainer: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ height: '2000px', overflow: 'auto', color: 'white' }}>\n                {[TEXT, '\\n\\n'].join('').repeat(20)}\n            </div>\n        );\n    },\n    userDefinedOverflowContainer: (\n        props: IDockviewPanelProps<{ title: string }>\n    ) => {\n        return (\n            <div style={{ height: '100%', color: 'white' }}>\n                <div\n                    style={{\n                        height: '100%',\n                        color: 'white',\n                        overflow: 'auto',\n                    }}\n                >\n                    {[TEXT, '\\n\\n'].join('').repeat(20)}\n                </div>\n            </div>\n        );\n    },\n};\n\nconst DockviewComponent = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'fixedHeightContainer',\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'overflowContainer',\n            title: 'Panel 2',\n            position: { direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'userDefinedOverflowContainer',\n            title: 'Panel 3',\n            position: { direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default DockviewComponent;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        panel.group.locked = true;\n        panel.group.header.hidden = true;\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        // panel5.group!.model.header.hidden = true;\n        // panel5.group!.model.locked = true;\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default App;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\nimport './app.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_4', direction: 'below' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'right' },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={`${props.theme || 'dockview-theme-abyss'} skinny-tabs`}\n        />\n    );\n};\n\nexport default App;\n","import {\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ myValue: string }>) => {\n        const [title, setTitle] = React.useState<string>(props.api.title);\n\n        const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            setTitle(event.target.value);\n        };\n\n        const onClick = () => {\n            props.api.setTitle(title);\n        };\n\n        return (\n            <div style={{ padding: '20px', color: 'white' }}>\n                <div>\n                    <span style={{ color: 'grey' }}>{'props.api.title='}</span>\n                    <span>{`${props.api.title}`}</span>\n                </div>\n                <input value={title} onChange={onChange} />\n                <button onClick={onClick}>Change</button>\n                {JSON.stringify(Object.keys(props.params))}\n            </div>\n        );\n    },\n};\n\nexport const App: React.FC = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n\n        const panel2 = event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n            position: { referencePanel: panel },\n        });\n\n        const panel3 = event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n\n            position: { referencePanel: panel, direction: 'right' },\n        });\n\n        const panel4 = event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: panel3 },\n        });\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            onReady={onReady}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nexport default App;\n","import {\n    DockviewApi,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelProps,\n    IWatermarkPanelProps,\n    Orientation,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst counter = (() => {\n    let i = 0;\n\n    return {\n        next: () => ++i,\n    };\n})();\n\nconst Watermark = (props: IWatermarkPanelProps) => {\n    const isGroup = props.containerApi.groups.length > 0;\n\n    const addPanel = () => {\n        props.containerApi.addPanel({\n            id: counter.next().toString(),\n            component: 'default',\n        });\n    };\n\n    return (\n        <div\n            style={{\n                height: '100%',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                color: 'white',\n            }}\n        >\n            <div\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                }}\n            >\n                <span>\n                    This is a custom watermark. You can put whatever React\n                    component you want here\n                </span>\n                <span>\n                    <button onClick={addPanel}>Add New Panel</button>\n                </span>\n                {isGroup && (\n                    <span>\n                        <button\n                            onClick={() => {\n                                props.close();\n                            }}\n                        >\n                            Close Group\n                        </button>\n                    </span>\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst DockviewWatermark = (props: { theme?: string }) => {\n    const [api, setApi] = React.useState<DockviewApi>();\n\n    const onReady = (event: DockviewReadyEvent) => {\n        // event.api.addPanel({\n        //     id: 'panel_1',\n        //     component: 'default',\n        // });\n\n        event.api.fromJSON({\n            grid: {\n                orientation: Orientation.HORIZONTAL,\n                root: { type: 'branch', data: [] },\n                height: 100,\n                width: 100,\n            },\n            panels: {},\n        });\n\n        setApi(event.api);\n    };\n\n    const onClick = () => {\n        if (!api) {\n            return;\n        }\n\n        api.addGroup();\n    };\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%',\n            }}\n        >\n            <div>\n                <button onClick={onClick}>Add Empty Group</button>\n            </div>\n            <DockviewReact\n                onReady={onReady}\n                components={components}\n                watermarkComponent={Watermark}\n                className={`${props.theme || 'dockview-theme-abyss'}`}\n            />\n        </div>\n    );\n};\n\nexport default DockviewWatermark;\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: {\n    id: string;\n    hideThemePicker?: boolean;\n}) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            {!props.hideThemePicker && <ThemePicker />}\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    rel='noopener'\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton\n                    id={sandboxId}\n                    hideThemePicker={props.hideThemePicker}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","import * as React from 'react';\nimport CodeBlock from '@theme/CodeBlock';\nimport './docRef.scss';\n\nexport interface DocRefProps {\n    declaration: string;\n}\n\nimport docsJson from '../../../generated/api.output.json';\n\ntype DocsContent = { kind: string; text: string; tag?: string };\ntype DocsTag = { tag: string; content: DocsContent[] };\ntype DocsComment = {\n    summary?: DocsContent[];\n    blockTags?: DocsTag[];\n};\ntype DocsJson = {\n    [index: string]: Array<{\n        name: string;\n        code: string;\n        comment?: DocsComment;\n        kind: 'accessor' | 'property' | 'method';\n    }>;\n};\n\nexport const Text = (props: { content: DocsContent[] }) => {\n    return (\n        <div className=\"doc-text\">\n            {props.content.map((piece, i) => {\n                switch (piece.kind) {\n                    case 'text': {\n                        return <span key={i}>{piece.text}</span>;\n                    }\n                    case 'code':\n                        return (\n                            <code key={i}>\n                                {piece.text.substring(1, piece.text.length - 1)}\n                            </code>\n                        );\n                    default:\n                        throw new Error(`unhandled piece ${piece.kind}`);\n                }\n            })}\n        </div>\n    );\n};\n\nexport const Tags = (props: { tags: DocsTag[] }) => {\n    return (\n        <div>\n            {props.tags.map((tag, i) => {\n                return (\n                    <div key={i}>\n                        <div>{tag.tag}</div>\n                        <Text content={tag.content} />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport const Summary = (props: { summary: DocsComment }) => {\n    return (\n        <div>\n            <Text content={props.summary.summary ?? []} />\n            {/* <Tags tags={props.summary.blockTags ?? []} /> */}\n        </div>\n    );\n};\n\nexport const Markdown = (props: { children: string }) => {\n    return <span>{props.children}</span>;\n};\n\nexport const DocRef = (props: DocRefProps) => {\n    const docs = React.useMemo(\n        () => (docsJson as DocsJson)[props.declaration],\n        [props.declaration]\n    );\n\n    if (!docs) {\n        return null;\n    }\n\n    return (\n        <div>\n            <table className=\"doc-ref-table\">\n                <tbody>\n                    {docs.map((doc) => {\n                        return (\n                            <tr>\n                                <th\n                                    style={{\n                                        width: '30%',\n                                        display: 'flex',\n                                    }}\n                                >\n                                    <div\n                                        style={{\n                                            // width: '30%',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            alignItems: 'start',\n                                        }}\n                                    >\n                                        <h6\n                                            style={{\n                                                fontFamily: 'monospace',\n                                                fontSize: '1.2em',\n                                            }}\n                                        >\n                                            {doc.name}\n                                        </h6>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                alignItems: 'start',\n                                            }}\n                                        >\n                                            {/* <span\n                                                style={{\n                                                    fontSize: '0.75em',\n                                                    color: 'var(--ifm-color-content-secondary)',\n                                                }}\n                                            >\n                                                {'Type'}\n                                            </span>\n                                            <span\n                                                style={{\n                                                    color: 'var(--ifm-color-primary)',\n                                                }}\n                                            >\n                                                {doc.type}\n                                            </span> */}\n                                        </div>\n                                    </div>\n                                </th>\n                                <th\n                                // style={{ width: '70%' }}\n                                >\n                                    {/* <div>{'-'}</div> */}\n                                    <div>\n                                        <div>\n                                            {doc.comment && (\n                                                <Summary\n                                                    summary={doc.comment}\n                                                />\n                                            )}\n                                        </div>\n                                        <CodeBlock language=\"tsx\">\n                                            {doc.code}\n                                        </CodeBlock>\n                                    </div>\n                                </th>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","\n\nexport const frontMatter = {\n\tdescription: 'Dockview Documentation'\n};\nexport const contentTitle = 'Dockview';\nexport const metadata = {\n  \"id\": \"components/dockview\",\n  \"title\": \"Dockview\",\n  \"description\": \"Dockview Documentation\",\n  \"source\": \"@site/versioned_docs/version-1.9.2/components/dockview.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/dockview\",\n  \"permalink\": \"/docs/components/dockview\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.9.2/components/dockview.mdx\",\n  \"tags\": [],\n  \"version\": \"1.9.2\",\n  \"frontMatter\": {\n    \"description\": \"Dockview Documentation\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Components\",\n    \"permalink\": \"/docs/category/components\"\n  },\n  \"next\": {\n    \"title\": \"Gridview\",\n    \"permalink\": \"/docs/components/gridview\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {MultiFrameworkContainer} from '@site/src/components/ui/container';\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport DockviewPersistence from '@site/sandboxes/layout-dockview/src/app';\nimport SimpleDockview from '@site/sandboxes/simple-dockview/src/app';\nimport ResizeDockview from '@site/sandboxes/resize-dockview/src/app';\nimport DockviewWatermark from '@site/sandboxes/watermark-dockview/src/app';\nimport DockviewConstraints from '@site/sandboxes/constraints-dockview/src/app';\nimport DndDockview from '@site/sandboxes/dnd-dockview/src/app';\nimport NestedDockview from '@site/sandboxes/nested-dockview/src/app';\nimport EventsDockview from '@site/sandboxes/events-dockview/src/app';\nimport DockviewGroupControl from '@site/sandboxes/headeractions-dockview/src/app';\nimport CustomHeadersDockview from '@site/sandboxes/customheader-dockview/src/app';\nimport DockviewNative from '@site/sandboxes/fullwidthtab-dockview/src/app';\nimport DockviewNative2 from '@site/sandboxes/nativeapp-dockview/src/app';\nimport DockviewSetTitle from '@site/sandboxes/updatetitle-dockview/src/app';\nimport RenderingDockview from '@site/sandboxes/rendering-dockview/src/app';\nimport DockviewExternalDnd from '@site/sandboxes/externaldnd-dockview/src/app';\nimport DockviewResizeContainer from '@site/sandboxes/resizecontainer-dockview/src/app';\nimport DockviewTabheight from '@site/sandboxes/tabheight-dockview/src/app';\nimport DockviewWithIFrames from '@site/sandboxes/iframe-dockview/src/app';\nimport DockviewFloating from '@site/sandboxes/floatinggroup-dockview/src/app';\nimport DockviewLockedGroup from '@site/sandboxes/lockedgroup-dockview/src/app';\nimport DockviewKeyboard from '@site/sandboxes/keyboard-dockview/src/app';\nimport DockviewPopoutGroup from '@site/sandboxes/popoutgroup-dockview/src/app';\nimport DockviewMaximizeGroup from '@site/sandboxes/maximizegroup-dockview/src/app';\nimport DockviewRenderMode from '@site/sandboxes/rendermode-dockview/src/app';\nimport DockviewScrollbars from '@site/sandboxes/scrollbars-dockview/src/app';\nimport {DocRef} from '@site/src/components/ui/reference/docRef';\nimport {attach as attachDockviewVanilla} from '@site/sandboxes/javascript/vanilla-dockview/src/app';\nimport {attach as attachSimpleDockview} from '@site/sandboxes/javascript/simple-dockview/src/app';\nimport {attach as attachTabHeightDockview} from '@site/sandboxes/javascript/tabheight-dockview/src/app';\nimport {attach as attachNativeDockview} from '@site/sandboxes/javascript/fullwidthtab-dockview/src/app';\nexport const toc = [{\n  \"value\": \"Introduction\",\n  \"id\": \"introduction\",\n  \"level\": 2\n}, {\n  \"value\": \"DockviewReact Component\",\n  \"id\": \"dockviewreact-component\",\n  \"level\": 2\n}, {\n  \"value\": \"Dockview API\",\n  \"id\": \"dockview-api\",\n  \"level\": 2\n}, {\n  \"value\": \"Dockview Panel API\",\n  \"id\": \"dockview-panel-api\",\n  \"level\": 2\n}, {\n  \"value\": \"Theme\",\n  \"id\": \"theme\",\n  \"level\": 2\n}, {\n  \"value\": \"Layout Persistence\",\n  \"id\": \"layout-persistence\",\n  \"level\": 2\n}, {\n  \"value\": \"Scrollbars\",\n  \"id\": \"scrollbars\",\n  \"level\": 2\n}, {\n  \"value\": \"Resizing\",\n  \"id\": \"resizing\",\n  \"level\": 2\n}, {\n  \"value\": \"Panel Resizing\",\n  \"id\": \"panel-resizing\",\n  \"level\": 3\n}, {\n  \"value\": \"Container Resizing\",\n  \"id\": \"container-resizing\",\n  \"level\": 3\n}, {\n  \"value\": \"Watermark\",\n  \"id\": \"watermark\",\n  \"level\": 2\n}, {\n  \"value\": \"Drag And Drop\",\n  \"id\": \"drag-and-drop\",\n  \"level\": 2\n}, {\n  \"value\": \"Built-in behaviours\",\n  \"id\": \"built-in-behaviours\",\n  \"level\": 3\n}, {\n  \"value\": \"Extended behaviours\",\n  \"id\": \"extended-behaviours\",\n  \"level\": 3\n}, {\n  \"value\": \"Intercepting Drag Events\",\n  \"id\": \"intercepting-drag-events\",\n  \"level\": 3\n}, {\n  \"value\": \"Third Party Dnd Libraries\",\n  \"id\": \"third-party-dnd-libraries\",\n  \"level\": 3\n}, {\n  \"value\": \"Floating Groups\",\n  \"id\": \"floating-groups\",\n  \"level\": 2\n}, {\n  \"value\": \"Popout Groups\",\n  \"id\": \"popout-groups\",\n  \"level\": 2\n}, {\n  \"value\": \"Maximized Groups\",\n  \"id\": \"maximized-groups\",\n  \"level\": 2\n}, {\n  \"value\": \"Panels\",\n  \"id\": \"panels\",\n  \"level\": 2\n}, {\n  \"value\": \"Add Panel\",\n  \"id\": \"add-panel\",\n  \"level\": 3\n}, {\n  \"value\": \"Update Panel\",\n  \"id\": \"update-panel\",\n  \"level\": 3\n}, {\n  \"value\": \"Move panel\",\n  \"id\": \"move-panel\",\n  \"level\": 3\n}, {\n  \"value\": \"Remove panel\",\n  \"id\": \"remove-panel\",\n  \"level\": 3\n}, {\n  \"value\": \"Panel Rendering\",\n  \"id\": \"panel-rendering\",\n  \"level\": 3\n}, {\n  \"value\": \"Render Mode\",\n  \"id\": \"render-mode\",\n  \"level\": 4\n}, {\n  \"value\": \"Headers\",\n  \"id\": \"headers\",\n  \"level\": 2\n}, {\n  \"value\": \"Custom Tab Headers\",\n  \"id\": \"custom-tab-headers\",\n  \"level\": 3\n}, {\n  \"value\": \"Default Tab Title\",\n  \"id\": \"default-tab-title\",\n  \"level\": 3\n}, {\n  \"value\": \"Custom Tab Title\",\n  \"id\": \"custom-tab-title\",\n  \"level\": 3\n}, {\n  \"value\": \"Hidden Headers\",\n  \"id\": \"hidden-headers\",\n  \"level\": 3\n}, {\n  \"value\": \"Full width tabs\",\n  \"id\": \"full-width-tabs\",\n  \"level\": 3\n}, {\n  \"value\": \"Tab Height\",\n  \"id\": \"tab-height\",\n  \"level\": 3\n}, {\n  \"value\": \"Groups\",\n  \"id\": \"groups\",\n  \"level\": 2\n}, {\n  \"value\": \"Locked group\",\n  \"id\": \"locked-group\",\n  \"level\": 3\n}, {\n  \"value\": \"Group Controls Panel\",\n  \"id\": \"group-controls-panel\",\n  \"level\": 3\n}, {\n  \"value\": \"Constraints\",\n  \"id\": \"constraints\",\n  \"level\": 3\n}, {\n  \"value\": \"iFrames\",\n  \"id\": \"iframes\",\n  \"level\": 2\n}, {\n  \"value\": \"Events\",\n  \"id\": \"events\",\n  \"level\": 2\n}, {\n  \"value\": \"Keyboard Navigation\",\n  \"id\": \"keyboard-navigation\",\n  \"level\": 2\n}, {\n  \"value\": \"Nested Dockviews\",\n  \"id\": \"nested-dockviews\",\n  \"level\": 3\n}, {\n  \"value\": \"Window-like mananger with tabs\",\n  \"id\": \"window-like-mananger-with-tabs\",\n  \"level\": 3\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"dockview\",\n      children: \"Dockview\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"introduction\",\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Dockview is an abstraction built on top of \", _jsx(_components.a, {\n        href: \"./gridview\",\n        children: \"Gridviews\"\n      }), \" where each view is a container of many tabbed panels.\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"simple-dockview\",\n      react: SimpleDockview,\n      typescript: attachSimpleDockview\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"You can access the panels associated group through the \", _jsx(_components.code, {\n          children: \"panel.group\"\n        }), \" variable.\\nThe group will always be defined and will change if a panel is moved into another group.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"dockviewreact-component\",\n      children: \"DockviewReact Component\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can create a Dockview through the use of the \", _jsx(_components.code, {\n        children: \"DockviewReact\"\n      }), \" component.\"]\n    }), \"\\n\", _jsxs(\"p\", {\n      style: {\n        fontSize: '1.3em'\n      },\n      children: [_jsx(\"span\", {\n        children: 'All of these are React props available through the '\n      }), _jsx(\"code\", {\n        children: \"DockviewReact\"\n      }), _jsx(\"span\", {\n        children: ' component.'\n      })]\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"IDockviewReactProps\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"dockview-api\",\n      children: \"Dockview API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Dockview API is exposed both at the \", _jsx(_components.code, {\n        children: \"onReady\"\n      }), \" event and on each panel through \", _jsx(_components.code, {\n        children: \"props.containerApi\"\n      }), \".\\nThrough this API you can control general features of the component and access all added panels.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Dockview API via Panel component\\\"\",\n        children: \"const MyComponent = (props: IDockviewPanelProps<{ title: string }>) => {\\n    // props.containerApi...\\n\\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Dockview API via the onReady callback\\\"\",\n        children: \"const onReady = (event: DockviewReadyEvent) => {\\n    // event.api...\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(\"p\", {\n      style: {\n        fontSize: '1.3em'\n      },\n      children: [_jsx(\"span\", {\n        children: 'All of these methods are available through the '\n      }), _jsx(\"code\", {\n        children: \"api\"\n      }), _jsx(\"span\", {\n        children: ' property of '\n      }), _jsx(\"code\", {\n        children: \"DockviewComponent\"\n      }), _jsx(\"span\", {\n        children: ' and the '\n      }), _jsx(\"code\", {\n        children: \"containerApi\"\n      }), _jsx(\"span\", {\n        children: ' property of '\n      }), _jsx(\"code\", {\n        children: \"IDockviewPanel\"\n      }), _jsx(\"span\", {\n        children: \".\"\n      })]\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"DockviewApi\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"dockview-panel-api\",\n      children: \"Dockview Panel API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const MyComponent = (props: IDockviewPanelProps<{ title: string }>) => {\\n    // props.api...\\n\\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(\"p\", {\n      style: {\n        fontSize: '1.3em'\n      },\n      children: [_jsx(\"span\", {\n        children: 'All of these are methods are available through the '\n      }), _jsx(\"code\", {\n        children: \"api\"\n      }), _jsx(\"span\", {\n        children: ' property of '\n      }), _jsx(\"code\", {\n        children: \"IDockviewPanel\"\n      }), _jsx(\"span\", {\n        children: \".\"\n      })]\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"DockviewPanelApi\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"theme\",\n      children: \"Theme\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As well as importing the \", _jsx(_components.code, {\n        children: \"dockview\"\n      }), \" stylesheet you must provide a class-based theme somewhere in your application. For example.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// Providing a theme directly through the DockviewReact component props\\n<DockviewReact className=\\\"dockview-theme-dark\\\" />\\n\\n// Providing a theme somewhere in the DOM tree\\n<div className=\\\"dockview-theme-dark\\\">\\n  <div>\\n    {/**...  */}\\n    <DockviewReact  />\\n  </div>\\n</div>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find more details on theming \", _jsx(Link, {\n        to: \"../theme\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"layout-persistence\",\n      children: \"Layout Persistence\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Layouts are loaded and saved via to \", _jsx(_components.code, {\n        children: \"fromJSON\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"toJSON\"\n      }), \" methods on the Dockview api.\\nThe api also exposes an event \", _jsx(_components.code, {\n        children: \"onDidLayoutChange\"\n      }), \" you can listen on to determine when the layout has changed.\\nBelow are some snippets showing how you might load from and save to localStorage.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Saving the layout state to localStorage\\\"\",\n        children: \"React.useEffect(() => {\\n    if (!api) {\\n        return;\\n    }\\n\\n    const disposable = api.onDidLayoutChange(() => {\\n        const layout = api.toJSON();\\n\\n        localStorage.setItem(\\n            'dockview_persistence_layout',\\n            JSON.stringify(layout)\\n        );\\n    });\\n\\n    return () => {\\n        disposable.dispose();\\n    };\\n}, [api]);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Loading a layout from localStorage\\\"\",\n        children: \"const onReady = (event: DockviewReadyEvent) => {\\n    const layoutString = localStorage.getItem('dockview_persistence_layout');\\n\\n    let success = false;\\n\\n    if (layoutString) {\\n        try {\\n            const layout = JSON.parse(layoutString);\\n            event.api.fromJSON(layout);\\n            success = true;\\n        } catch (err) {\\n            //\\n        }\\n    }\\n\\n    if (!success) {\\n        // do something if there is no layout or there was a loading error\\n    }\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example using the above code loading from and saving to localStorage.\\nIf you refresh the page you should notice your layout is loaded as you left it.\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"layout-dockview\",\n      react: DockviewPersistence\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"scrollbars\",\n      children: \"Scrollbars\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Scrollbars will appear if the contents of your view has a fixed height. If you are using a relative height such\\nas \", _jsx(_components.em, {\n        children: \"100%\"\n      }), \" you will need to define an inner container with the appropiate \", _jsx(_components.code, {\n        children: \"overflow\"\n      }), \" value to allow scrollbars to appear.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following container three views:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Panel 1\"\n        }), \": Sets \", _jsx(_components.code, {\n          children: \"height: 100%\"\n        }), \" and no scrollbar appears even, the content is clipped.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Panel 2\"\n        }), \": Sets \", _jsx(_components.code, {\n          children: \"height: 2000px\"\n        }), \" and a scrollbar does appear since a fixed height has been used.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Panel 3\"\n        }), \": Sets \", _jsx(_components.code, {\n          children: \"height: 100%\"\n        }), \" and defines an inner component with \", _jsx(_components.code, {\n          children: \"overflow: auto\"\n        }), \" to enable the scrollbars.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"scrollbars-dockview\",\n      react: DockviewScrollbars\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"resizing\",\n      children: \"Resizing\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"panel-resizing\",\n      children: \"Panel Resizing\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each Dockview contains of a number of groups and each group has a number of panels.\\nLogically a user may want to resize a panel, but this translates to resizing the group which contains that panel.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can set the size of a panel using \", _jsx(_components.code, {\n        children: \"props.api.setSize(...)\"\n      }), \".\\nYou can also set the size of the group associated with the panel using \", _jsx(_components.code, {\n        children: \"props.api.group.api.setSize(...)\"\n      }), \" although this isn't recommended\\ndue to the clunky syntax.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// it's mandatory to provide either a height or a width, providing both is optional\\nprops.api.setSize({\\n    height: 100,\\n    width: 200,\\n});\\n\\n// you could also resize the panels group, although not recommended it achieved the same result\\nprops.api.group.api.setSize({\\n    height: 100,\\n    width: 200,\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can see an example invoking both approaches below.\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"resize-dockview\",\n      react: ResizeDockview\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"container-resizing\",\n      children: \"Container Resizing\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The component will automatically resize to it's container.\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"resizecontainer-dockview\",\n      react: DockviewResizeContainer\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"watermark\",\n      children: \"Watermark\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When the dockview is empty you may want to display some fallback content, this is refered to as the \", _jsx(_components.code, {\n        children: \"watermark\"\n      }), \".\\nBy default there the watermark has no content but you can provide as a prop to \", _jsx(_components.code, {\n        children: \"DockviewReact\"\n      }), \" a \", _jsx(_components.code, {\n        children: \"watermarkComponent\"\n      }), \"\\nwhich will be rendered when there are no panels or groups.\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"watermark-dockview\",\n      react: DockviewWatermark\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"drag-and-drop\",\n      children: \"Drag And Drop\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can override the conditions of the far edge overlays through the \", _jsx(_components.code, {\n        children: \"rootOverlayModel\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<DockviewReact\\n  {...props}\\n   rootOverlayModel={{\\n    size: { value: 100, type: 'pixels' },\\n    activationSize: { value: 5, type: 'percentage' },\\n  }}\\n  />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"built-in-behaviours\",\n      children: \"Built-in behaviours\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dockview supports a wide variety of built-in Drag and Drop possibilities.\\nBelow are some examples of the operations you can perform.\"\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        width: '60%'\n      },\n      src: useBaseUrl('/img/add_to_tab.svg')\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Drag a tab onto another tab to place it inbetween existing tabs.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        width: '60%'\n      },\n      src: useBaseUrl('/img/add_to_empty_space.svg')\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Drag a tab to the right of the last tab to place it after the existing tabs.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        width: '60%'\n      },\n      src: useBaseUrl('/img/add_to_group.svg')\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Drag a group onto an existing group to merge the two groups.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [_jsx(\"img\", {\n        style: {\n          width: '40%'\n        },\n        src: useBaseUrl('/img/drop_positions.svg')\n      }), _jsx(\"img\", {\n        style: {\n          width: '40%'\n        },\n        src: useBaseUrl('/img/magnet_drop_positions.svg')\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Drag into the left/right/top/bottom target zone of a panel to create a new group in the selected direction.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Drag into the center of a panel to add to that group.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Drag to the edge of the dockview component to create a new group on the selected edge.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"extended-behaviours\",\n      children: \"Extended behaviours\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For interaction with the Drag events directly the component exposes some method to help determine whether external drag events should be interacted with or not.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"/**\\n * called when an ondrop event which does not originate from the dockview libray and\\n * passes the showDndOverlay condition occurs\\n **/\\nconst onDidDrop = (event: DockviewDropEvent) => {\\n    const { group } = event;\\n\\n    event.api.addPanel({\\n        id: 'test',\\n        component: 'default',\\n        position: {\\n            referencePanel: group.activePanel.id,\\n            direction: 'within',\\n        },\\n    });\\n};\\n\\n/**\\n * called for drag over events which do not originate from the dockview library\\n * allowing the developer to decide where the overlay should be shown for a\\n * particular drag event\\n **/\\nconst showDndOverlay = (event: DockviewDndOverlayEvent) => {\\n    return true;\\n};\\n\\nreturn (\\n    <DockviewReact\\n        components={components}\\n        onReady={onReady}\\n        className=\\\"dockview-theme-abyss\\\"\\n        onDidDrop={onDidDrop}\\n        showDndOverlay={showDndOverlay}\\n    />\\n);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"intercepting-drag-events\",\n      children: \"Intercepting Drag Events\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can intercept drag events to attach your own metadata using the \", _jsx(_components.code, {\n        children: \"onWillDragPanel\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onWillDragGroup\"\n      }), \" api methods.\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"dnd-dockview\",\n      react: DndDockview\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"third-party-dnd-libraries\",\n      children: \"Third Party Dnd Libraries\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This shows a simple example of a third-party library used inside a panel that relies on drag\\nand drop functionalities. This examples serves to show that \", _jsx(_components.code, {\n        children: \"dockview\"\n      }), \" doesn't interfer with\\nany drag and drop logic for other controls.\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"externaldnd-dockview\",\n      react: DockviewExternalDnd\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"floating-groups\",\n      children: \"Floating Groups\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dockview has built-in support for floating groups. Each floating container can contain a single group with many panels\\nand you can have as many floating containers as needed. You cannot dock multiple groups together in the same floating container.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Floating groups can be interacted with whilst holding the \", _jsx(_components.code, {\n        children: \"shift\"\n      }), \" key activating the \", _jsx(_components.code, {\n        children: \"event.shiftKey\"\n      }), \" boolean property on \", _jsx(_components.code, {\n        children: \"KeyboardEvent\"\n      }), \" events.\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Float an existing tab by holding \", _jsx(_components.code, {\n          children: \"shift\"\n        }), \" whilst interacting with the tab\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        width: '60%'\n      },\n      src: useBaseUrl('/img/float_add.svg')\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Move a floating tab by holding \", _jsx(_components.code, {\n          children: \"shift\"\n        }), \" whilst moving the cursor or dragging the empty\\nheader space\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        width: '60%'\n      },\n      src: useBaseUrl('/img/float_move.svg')\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Move an entire floating group by holding \", _jsx(_components.code, {\n          children: \"shift\"\n        }), \" whilst dragging the empty header space\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      style: {\n        width: '60%'\n      },\n      src: useBaseUrl('/img/float_group.svg')\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Floating groups can be programatically added through the dockview \", _jsx(_components.code, {\n        children: \"api\"\n      }), \" method \", _jsx(_components.code, {\n        children: \"api.addFloatingGroup(...)\"\n      }), \" and you can check whether\\na group is floating via the \", _jsx(_components.code, {\n        children: \"group.api.location\"\n      }), \" property. See examples for full code.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can control the bounding box of floating groups through the optional \", _jsx(_components.code, {\n        children: \"floatingGroupBounds\"\n      }), \" options:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"boundedWithinViewport\"\n        }), \" will force the entire floating group to be bounded within the docks viewport.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"{minimumHeightWithinViewport?: number, minimumWidthWithinViewport?: number}\"\n        }), \" sets the respective dimension minimums that must appears within the docks viewport\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If no options are provided the defaults of \", _jsx(_components.code, {\n          children: \"100px\"\n        }), \" minimum height and width within the viewport are set.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"floatinggroup-dockview\",\n      react: DockviewFloating\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"popout-groups\",\n      children: \"Popout Groups\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dockview has built-in support for opening groups in new Windows.\\nEach popout window can contain a single group with many panels and you can have as many popout\\nwindows as needed. You cannot dock multiple groups together in the same window.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Popout windows require your website to have a blank \", _jsx(_components.code, {\n        children: \".html\"\n      }), \" page that can be used, by default this is set to \", _jsx(_components.code, {\n        children: \"/popout.html\"\n      }), \" but\\ncan be configured to match requirements.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Open new popout group from the component api\\\"\",\n        children: \"api.addPopoutGroup(\\n  group,\\n  // the second arguments (options) is optional\\n  {\\n    popoutUrl:\\\"/popout.html\\\",\\n    box: { left: 0, top: 0, height: 200, width: 300 }\\n  });\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"If you do not provide \", _jsx(_components.code, {\n          children: \"options.popoutUrl\"\n        }), \" a default of \", _jsx(_components.code, {\n          children: \"/popout.html\"\n        }), \" is used and if \", _jsx(_components.code, {\n          children: \"options.box\"\n        }), \" is not provided\\nthe view will be places according to it's currently position.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"From within a panel you may say\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"props.containerApi.addPopoutGroup(props.api.group);\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To programatically move the popout group back into the main grid you can use the \", _jsx(_components.code, {\n        children: \"moveTo\"\n      }), \" method in many ways, one of the following would suffice\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// option 1: add absolutely to the right-side of the grid\\nprops.group.api.moveTo({ position: 'right' });\\n\\n// option 2: create a new group and move the contents of the popout group to it\\nconst group = props.containerApi.addGroup();\\nprops.group.api.moveTo({ group });\\n\"\n      })\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"popoutgroup-dockview\",\n      react: DockviewPopoutGroup\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"maximized-groups\",\n      children: \"Maximized Groups\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To maximize a group from the component \", _jsx(_components.code, {\n        children: \"api\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// maximize a specified group\\napi.maxmimizeGroup(group);\\n\\n// check whether a specific group is maximized\\nconst result: boolean = api.isMaximizedGroup(group);\\n\\n// if there is any maximized group exit the maximized state\\nexitMaximizedGroup();\\n\\n// is there a maximized group\\nconst result: boolean = hasMaximizedGroup();\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following methods are available on both the panel and group \", _jsx(_components.code, {\n        children: \"api\"\n      }), \" objects:\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"api.<method>\"\n        }), \" is equivalent to \", _jsx(_components.code, {\n          children: \"api.group.api.<method>\"\n        }), \" for all of these methods. The methods exist on the panel \", _jsx(_components.code, {\n          children: \"api\"\n        }), \" object for convenience.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// maximize the group\\napi.maximize();\\n\\n// is this group maximized (if another group is maximized this method will still return false)\\nconst result: boolean = api.isMaxmized();\\n\\n// exit only if this group is maximzied (if another group is maxmized this has no affect)\\napi.exitMaximized();\\n\"\n      })\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"maximizegroup-dockview\",\n      react: DockviewMaximizeGroup\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"panels\",\n      children: \"Panels\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"add-panel\",\n      children: \"Add Panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the dockview API you can access the \", _jsx(_components.code, {\n        children: \"addPanel\"\n      }), \" method which returns an instance of the created panel.\\nThe minimum method signature is:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"where \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" is the unique id of the panel and \", _jsx(_components.code, {\n        children: \"component\"\n      }), \" is the implenentation which\\nwill be used to render the panel. You will have registered this using the \", _jsx(_components.code, {\n        children: \"components\"\n      }), \" prop of the \", _jsx(_components.code, {\n        children: \"DockviewReactComponent\"\n      }), \" component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can optionally provide a \", _jsx(_components.code, {\n        children: \"tabComponent\"\n      }), \" parameters to the \", _jsx(_components.code, {\n        children: \"addPanel\"\n      }), \" method which will render the tab using a custom renderer.\\nYou will have registered this using the \", _jsx(_components.code, {\n        children: \"tabComponents\"\n      }), \" prop of the \", _jsx(_components.code, {\n        children: \"DockviewReactComponent\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    tabComponent: 'my_tab_component',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass properties to the panel using the \", _jsx(_components.code, {\n        children: \"params\"\n      }), \" key.\\nYou can update these properties through the panels \", _jsx(_components.code, {\n        children: \"api\"\n      }), \" object and its \", _jsx(_components.code, {\n        children: \"updateParameters\"\n      }), \" method.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'my_unique_panel_id',\\n    component: 'my_component',\\n    params: {\\n        myCustomKey: 'my_custom_value',\\n    },\\n});\\n\\npanel.api.updateParameters({\\n    myCustomKey: 'my_custom_value',\\n    myOtherCustomKey: 'my_other_custom_key',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Note \", _jsx(_components.code, {\n          children: \"updateParameters\"\n        }), \" does not accept partial parameter updates, you should call it with the entire set of parameters\\nyou want the panel to receive.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Finally \", _jsx(_components.code, {\n        children: \"addPanel\"\n      }), \" accepts a \", _jsx(_components.code, {\n        children: \"position\"\n      }), \" object which tells dockview where to place the panel.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"This object optionally accepts either a \", _jsx(_components.code, {\n          children: \"referencePanel\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"referenceGroup\"\n        }), \" which can be the associated id as a string\\nor the panel/group object reference.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"This object accepts a \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" property which dictates where,\\nrelative to the provided reference the new panel will be placed.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"If neither a \", _jsx(_components.code, {\n          children: \"referencePanel\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"referenceGroup\"\n        }), \" is provided then the \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" will be treated as absolute.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"If no \", _jsx(_components.code, {\n          children: \"direction\"\n        }), \" is provided the library will place the new panel in a pre-determined position.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'panel_1',\\n    component: 'default',\\n});\\n\\nconst panel2 = api.addPanel({\\n    id: 'panel_2',\\n    component: 'default',\\n    position: {\\n        referencePanel: panel1,\\n        direction: 'right',\\n    },\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add a floating panel you should include the \", _jsx(_components.code, {\n        children: \"floating\"\n      }), \" variable which can be either a \", _jsx(_components.code, {\n        children: \"boolean\"\n      }), \" or an object defining it's bounds.\\nThese bounds are relative to the dockview component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel1 = api.addPanel({\\n    id: 'panel_2',\\n    component: 'default',\\n    floating: true,\\n});\\n\\nconst panel2 = api.addPanel({\\n    id: 'panel_2',\\n    component: 'default',\\n    floating: { x: 10, y: 10, width: 300, height: 300 },\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"update-panel\",\n      children: \"Update Panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can programatically update the \", _jsx(_components.code, {\n        children: \"params\"\n      }), \" passed through to the panel through the panal api using \", _jsx(_components.code, {\n        children: \"api.updateParameters\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.addPanel({\\n    id: 'panel_1',\\n    component: 'default',\\n    params: {\\n        keyA: 'valueA',\\n    },\\n});\\n\\n// ...\\n\\npanel.api.updateParameters({\\n    keyB: 'valueB',\\n});\\n\\n// ...\\n\\npanel.api.updateParameters({\\n    keyA: 'anotherValueA',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To delete a parameter you should pass a value of \", _jsx(_components.code, {\n        children: \"undefined\"\n      }), \" for the key.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"panel.api.updateParameters({\\n    keyA: undefined, // this will delete 'keyA'.\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"move-panel\",\n      children: \"Move panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can programatically move a panel using the panel \", _jsx(_components.code, {\n        children: \"api\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"panel.api.moveTo({ group, position, index });\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An equivalent method for moving groups is avaliable on the group \", _jsx(_components.code, {\n        children: \"api\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const group = panel.api.group;\\ngroup.api.moveTo({ group, position });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"remove-panel\",\n      children: \"Remove panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can programatically remove a panel using the panel \", _jsx(_components.code, {\n        children: \"api\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"panel.api.close();\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Given a reference to the panel you can also use the component \", _jsx(_components.code, {\n        children: \"api\"\n      }), \" to remove it.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const panel = api.getPanel('myPanel');\\napi.removePanel(panel);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"panel-rendering\",\n      children: \"Panel Rendering\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"render-mode\",\n      children: \"Render Mode\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Dockview has two rendering modes \", _jsx(_components.code, {\n        children: \"onlyWhenVisible\"\n      }), \" (default) and \", _jsx(_components.code, {\n        children: \"always\"\n      }), \". A rendering mode can be defined through the \", _jsx(_components.code, {\n        children: \"renderer\"\n      }), \" prop to \", _jsx(_components.code, {\n        children: \"DockviewReact\"\n      }), \" or at an individual panel level when added where\\nthe panel declaration takes precedence if both are defined. Rendering modes defined at the panel level are persisted, those defined at the \", _jsx(_components.code, {\n        children: \"DockviewReact\"\n      }), \" level are not persisted.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"onlyWhenVisible\"\n        }), \" mode is the default mode. In this mode when a panel is no longer visible through either it's visiblity being hidden or it not being the active panel within a group the panels HTMLElement is removed\\nfrom the DOM and any DOM state such as scrollbar positions will be lost. If you are using any ResizeObservers to measure size this will result both zero height and width as the HTMLElement no longer belongs to the DOM.\\nThis design allows for maximum performance at some cost.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"always\"\n        }), \" mode. In this mode when panels become hidden the HTMLElement is not destroyed so all DOM state such as scrollbar positions will be maintained. This is implemented by rendering each panel as an absolutely positioned\\nHTMLElement and hidden the HTMLElement with \", _jsx(_components.code, {\n          children: \"display: none\"\n        }), \" when it should be hidden.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 500,\n      sandboxId: \"rendermode-dockview\",\n      react: DockviewRenderMode\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default \", _jsx(_components.code, {\n        children: \"DockviewReact\"\n      }), \" only adds to the DOM those panels that are visible,\\nif a panel is not the active tab and not shown the contents of the hidden panel will be removed from the DOM.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a panel is in \", _jsx(_components.code, {\n        children: \"onlyWhenVisible\"\n      }), \" render mode this only affects the contents within the DOM. The lifecycle of that panel instance is still maintained.\\nThe React Components associated with each panel are only created once and will always exist for as long as the panel exists, hidden or not.\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"e.g. This means that any hooks in those components will run whether the panel is visible or not which may lead to excessive background work depending\\non the panels implementation.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can listen to the visiblity state of the panel and write additional logic to optimize your application if required, although this is an advanced case.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you wanted to unmount the React Components when the panel is not visible you could create a Higher-Order-Component that listens to the panels\\nvisiblity state and only renders the panel when visible.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Only rendering the React Component when the panel is visible, otherwise rendering a null React Component\\\"\",\n        children: \"import { IDockviewPanelProps } from 'dockview';\\nimport * as React from 'react';\\n\\nfunction RenderWhenVisible(\\n    component: React.FunctionComponent<IDockviewPanelProps>\\n) {\\n    const HigherOrderComponent = (props: IDockviewPanelProps) => {\\n        const [visible, setVisible] = React.useState<boolean>(\\n            props.api.isVisible\\n        );\\n\\n        React.useEffect(() => {\\n            const disposable = props.api.onDidVisibilityChange((event) =>\\n                setVisible(event.isVisible)\\n            );\\n\\n            return () => {\\n                disposable.dispose();\\n            };\\n        }, [props.api]);\\n\\n        if (!visible) {\\n            return null;\\n        }\\n\\n        return React.createElement(component, props);\\n    };\\n    return HigherOrderComponent;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const components = { default: RenderWhenVisible(MyComponent) };\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Toggling the checkbox you can see that when you only render those panels which are visible the underling React component is destroyed when it becomes hidden and re-created when it becomes visible.\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"rendering-dockview\",\n      react: RenderingDockview\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"headers\",\n      children: \"Headers\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"custom-tab-headers\",\n      children: \"Custom Tab Headers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can provide custom renderers for your tab headers for maximum customization.\\nA default implementation of \", _jsx(_components.code, {\n        children: \"DockviewDefaultTab\"\n      }), \" is provided should you only wish to attach minor\\nchanges and events that do not alter the default behaviour, for example to add a custom context menu event\\nhandler or to hide the close button.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"DockviewDefaultTab\"\n      }), \" component accepts a \", _jsx(_components.code, {\n        children: \"hideClose\"\n      }), \" prop if you wish only to hide the close button.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Attaching a custom context menu event handlers to a custom header\\\"\",\n        children: \"import { IDockviewPanelHeaderProps, DockviewDefaultTab } from 'dockview';\\n\\nconst MyCustomheader = (props: IDockviewPanelHeaderProps) => {\\n    const onContextMenu = (event: React.MouseEvent) => {\\n        event.preventDefault();\\n        alert('context menu');\\n    };\\n    return <DockviewDefaultTab onContextMenu={onContextMenu} hideClose={true} {...props} />;\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You are also free to define a custom renderer entirely from scratch and not make use of the \", _jsx(_components.code, {\n        children: \"DockviewDefaultTab\"\n      }), \" component.\\nTo use a custom renderer you can must register a collection of tab components.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const tabComponents = {\\n    myCustomHeader: MyCustomHeader,\\n};\\n\\nreturn <DockviewReact tabComponents={tabComponents}  ... />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"api.addPanel({\\n    id: 'panel_1',\\n    component: 'default',\\n    tabComponent: 'myCustomHeader', // <-- your registered renderers\\n    title: 'Panel 1',\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also override the default tab renderer which will be used when no \", _jsx(_components.code, {\n        children: \"tabComponent\"\n      }), \" is provided to the \", _jsx(_components.code, {\n        children: \"addPanel\"\n      }), \" function.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<DockviewReact defaultTabComponent={MyCustomHeader}  ... />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As a simple example the below attaches a custom event handler for the context menu on all tabs as a default tab renderer\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The below example uses a custom tab renderer to reigster a popover when the user right clicked on a tab.\\nThis still makes use of the \", _jsx(_components.code, {\n        children: \"DockviewDefaultTab\"\n      }), \" since it's only a minor change.\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"customheader-dockview\",\n      react: CustomHeadersDockview\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"default-tab-title\",\n      children: \"Default Tab Title\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you are using the default tab renderer you can set the title of a tab when creating it\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"api.addPanel({\\n    id: 'panel_1',\\n    component: 'my_component',\\n    title: 'my_custom_title', // <-- special param for title\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can update the title through the panel api which can be accessed via \", _jsx(_components.code, {\n        children: \"props.api\"\n      }), \" if you are inside the panel\\ncomponent or via \", _jsx(_components.code, {\n        children: \"api.getPanel('panel1').api\"\n      }), \" if you are accessing from outside of the panel component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"api.setTitle('my_new_custom_title');\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Note this only works when using the default tab implementation.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"updatetitle-dockview\",\n      react: DockviewSetTitle\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"custom-tab-title\",\n      children: \"Custom Tab Title\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you are using a custom tab implementation you should pass variables through as a parameter and render them\\nthrough your tab components implementation.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Add a panel with custom parameters\\\"\",\n        children: \"api.addPanel({\\n    id: 'panel_2',\\n    component: 'my_component',\\n    tabComponent: 'my_tab',\\n    params: {\\n        myTitle: 'Window 2', // <-- passing a variable to use as a title\\n    },\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Accessing custom parameters from a custom tab renderer\\\"\",\n        children: \"const tabComponents = {\\n    default: (props: IDockviewPanelHeaderProps<{ myTitle: string }>) => {\\n        const title = props.params.myTitle; // <-- accessing my custom varaible\\n        return <div>{/** tab implementation as chosen by developer */}</div>;\\n    },\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"hidden-headers\",\n      children: \"Hidden Headers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may wish to hide the header section of a group. This can achieved through the \", _jsx(_components.code, {\n        children: \"hidden\"\n      }), \" variable on \", _jsx(_components.code, {\n        children: \"panel.group.header\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"panel.group.header.hidden = true;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"full-width-tabs\",\n      children: \"Full width tabs\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"DockviewReactComponent\"\n      }), \" accepts the prop \", _jsx(_components.code, {\n        children: \"singleTabMode\"\n      }), \". If set \", _jsx(_components.code, {\n        children: \"singleTabMode=fullwidth\"\n      }), \" then when there is only one tab in a group this tab will expand\\nto the entire width of the group. For example:\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"This can be conmbined with \", _jsx(Link, {\n          to: \"./dockview/#locked-group\",\n          children: \"Locked Groups\"\n        }), \" to create an application that feels more like a Window Manager\\nrather than a collection of groups and tabs.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<DockviewReactComponent singleTabMode=\\\"fullwidth\\\" {...otherProps} />\\n\"\n      })\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"fullwidthtab-dockview\",\n      react: DockviewNative,\n      typescript: attachNativeDockview\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"tab-height\",\n      children: \"Tab Height\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tab height can be controlled through CSS.\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"tabheight-dockview\",\n      react: DockviewTabheight,\n      typescript: attachTabHeightDockview\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"groups\",\n      children: \"Groups\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"locked-group\",\n      children: \"Locked group\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Locking a group will disable all drop events for this group ensuring no additional panels can be added to the group through drop events.\\nYou can still add groups to a locked panel programatically using the API though.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"panel.group.locked = true;\\n\\n// Or\\n\\npanel.group.locked = 'no-drop-target';\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" to keep drop zones top, right, bottom, left for the group. Use \", _jsx(_components.code, {\n        children: \"no-drop-target\"\n      }), \" to disable all drop zones. For you to get a\\nbetter understanding of what this means, try and drag the panels in the example below to the locked groups.\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"lockedgroup-dockview\",\n      react: DockviewLockedGroup\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"group-controls-panel\",\n      children: \"Group Controls Panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"DockviewReact\"\n      }), \" accepts \", _jsx(_components.code, {\n        children: \"leftHeaderActionsComponent\"\n      }), \", \", _jsx(_components.code, {\n        children: \"rightHeaderActionsComponent\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"prefixHeaderActionsComponent\"\n      }), \" which expect a React component with props \", _jsx(_components.code, {\n        children: \"IDockviewHeaderActionsProps\"\n      }), \".\\nThese controls are rendered to left and right side of the space to the right of the tabs in the header bar as well as before the first tab in the case of the prefix header prop.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const Component: React.FunctionComponent<IDockviewHeaderActionsProps> = () => {\\n    return <div>{'...'}</div>;\\n};\\n\\nreturn <DockviewReact {...props} leftHeaderActionsComponent={Component} rightHeaderActionsComponent={...} />;\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As a simple example the below uses the \", _jsx(_components.code, {\n        children: \"groupControlComponent\"\n      }), \" to render a small control that indicates whether the group\\nis active and which panel is active in that group.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const RightHeaderActionsComponent = (props: IDockviewHeaderActionsProps) => {\\n    const isGroupActive = props.isGroupActive;\\n    const activePanel = props.activePanel;\\n\\n    return (\\n        <div className=\\\"dockview-groupcontrol-demo\\\">\\n            <span\\n                className=\\\"dockview-groupcontrol-demo-group-active\\\"\\n                style={{\\n                    background: isGroupActive ? 'green' : 'red',\\n                }}\\n            >\\n                {isGroupActive ? 'Group Active' : 'Group Inactive'}\\n            </span>\\n            <span className=\\\"dockview-groupcontrol-demo-active-panel\\\">{`activePanel: ${\\n                activePanel?.id || 'null'\\n            }`}</span>\\n        </div>\\n    );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"groupcontrol-dockview\",\n      react: DockviewGroupControl\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"constraints\",\n      children: \"Constraints\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You may wish to specify a minimum or maximum height or width for a group which can be done through the group api.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"api.group.api.setConstraints(...)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Constraints are currently only supported for groups and not individual panels.\\nIf you specific a constraint on a group and move a panel within that group to another group it will no\\nlonger be subject to those constraints since those constraints were on the group and not on the individual panel.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 500,\n      sandboxId: \"constraints-dockview\",\n      react: DockviewConstraints\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"iframes\",\n      children: \"iFrames\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"iFrames required special attention because of a particular behaviour in how iFrames render:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Re-parenting an iFrame will reload the contents of the iFrame or the rephrase this, moving an iFrame within the DOM will cause a reload of its contents.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find many examples of discussions on this. Two reputable forums for example are linked \", _jsx(_components.a, {\n        href: \"https://bugzilla.mozilla.org/show_bug.cgi?id=254144\",\n        children: \"here\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://github.com/whatwg/html/issues/5484\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To ensure iFrames work as expected you should render them in panels with \", _jsx(_components.code, {\n        children: \"renderer: 'always'\"\n      }), \" to ensure they are never removed from the DOM, alternatively set the defaultRenderer to \", _jsx(_components.code, {\n        children: \"always\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"See the \", _jsx(_components.strong, {\n          children: \"Panel Rendering\"\n        }), \" section for more information of render modes.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        metastring: \"title=\\\"Example of a panel using an alternative renderer\\\"\",\n        children: \"api.addPanel({\\n  id: 'my_panel_id',\\n  component: 'my_component',\\n  renderer: 'always',\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"iframe-dockview\",\n      height: 600,\n      react: DockviewWithIFrames\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"events\",\n      children: \"Events\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A simple example showing events fired by `dockviewz that can be interacted with.\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"events-dockview\",\n      react: EventsDockview\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"keyboard-navigation\",\n      children: \"Keyboard Navigation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Keyboard shortcuts\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 600,\n      sandboxId: \"keyboard-dockview\",\n      react: DockviewKeyboard\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"nested-dockviews\",\n      children: \"Nested Dockviews\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can safely create multiple dockview instances within one page and nest dockviews within other dockviews.\\nIf you wish to interact with the drop event from one dockview instance in another dockview instance you can implement the \", _jsx(_components.code, {\n        children: \"showDndOverlay\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onDidDrop\"\n      }), \" props on \", _jsx(_components.code, {\n        children: \"DockviewReact\"\n      }), \".\"]\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"nested-dockview\",\n      react: NestedDockview\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"window-like-mananger-with-tabs\",\n      children: \"Window-like mananger with tabs\"\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      sandboxId: \"nativeapp-dockview\",\n      react: DockviewNative2\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n"],"names":["TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","children","Array","_key","listener","disposables","map","child","dispose","forEach","d","DockviewEvent","_defaultPrevented","defaultPrevented","preventDefault","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","from","func","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","width","height","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","array","findIndex","t","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","contentSize","_contentSize","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","total","proportion","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","_onDidVisibilityChange","onDidVisibilityChange","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","wereAllChildrenHidden","areAllChildrenHidden","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","maximizedView","_maximizedNode","leaf","hasMaximizedView","maximizeView","getNode","exitMaximizedView","hiddenOnMaximize","hideAllViewsBut","parent","exclude","_onDidMaxmizedNodeChange","showViewsInReverseOrder","includes","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","_getViews","nodeCachedVisibleSize","path","n","l","onDidMaxmizedNodeChange","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDrop","onWillShowOverlay","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","maximizeGroup","hasMaximizedGroup","exitMaxmizedGroup","exitMaximizedGroup","onDidMaxmizedGroupChange","addPopoutGroup","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","onDragOver","onDragLeave","onDragEnd","onDrop","WillShowOverlayEvent","nativeEvent","directionToPosition","positionToDirection","DEFAULT_ACTIVATION_SIZE","DEFAULT_SIZE","Droptarget","_state","_onDrop","_onWillShowOverlay","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","y","quadrant","calculateQuadrant","isAlreadyUsed","willShowOverlayEvent","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","stopPropagation","setTargetZones","setOverlayModel","model","overlayModel","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","sizeOptions","_b","translate","transform","overlayType","activationSizeOptions","activationSize","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","show","display","hide","renderPanel","asActive","doRender","isPanelActive","content","renderer","overlayRenderContainer","detatch","attach","referenceContainer","focusTracker","openPanel","_width","_height","closePanel","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","setActive","isActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","dropTraget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","kind","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewDidDropEvent","DockviewWillDropEvent","_kind","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_location","groupPanel","_onDidLocationChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onWillDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","_api","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","updateActions","isGroupActive","_d","_c","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","willDropEvent","getKind","itemId","Resizable","disableResizing","_disableResizing","entry","offsetParent","currentElement","DocumentFragment","host","isInDocument","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","isMaximizedGroup","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","isHidden","_isHidden","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onDidHiddenChange","onDidHiddenChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","setHidden","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","NOT_INITIALIZED_MESSAGE","DockviewGroupPanelApiImpl","_group","onDidLocationChange","getWindow","moveTo","moveGroupOrPanel","maximize","isMaximized","exitMaximized","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","groupEventsDisposable","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","fallback","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DEFAULT_FLOATING_GROUP_POSITION","OverlayRenderContainer","destroy","createFocusableElement","focusContainer","box2","visibilityChanged","PopoutWindow","_window","_onWillClose","onWillClose","_onDidClose","onDidClose","dimensions","screenX","screenY","innerWidth","innerHeight","open","url","features","entries","_ref","join","externalWindow","createPopoutWindowContainer","onDidOpen","Promise","resolve","externalDocument","styleSheetList","styleSheets","styleSheet","href","link","rel","head","cssTexts","cssRules","rule","cssText","err","createTextNode","addStyles","DEFAULT_ROOT_OVERLAY_MODEL","DockviewComponent","flatMap","_options","defaultRenderer","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","_floatingGroups","_popoutGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","_rootDropTarget","rootOverlayModel","orthogonalize","theme","toClassList","list","cls","startsWith","getDockviewTheme","moveGroupWithoutDestroying","getNextGroupId","popoutUrl","popoutWindowDisposable","then","popoutContainer","referenceGroup","createGroup","popoutGroup","removedGroup","catch","error","removeEmptyGroup","skipRemoveGroup","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","_f","_e","minimumHeightWithinViewport","querySelector","floatingGroupPanel","createGroupAtLocation","changed_orientation","changed_floatingGroupBounds","changed_rootOverlayOptions","floating","includePanel","doSetGroupAndPanelActive","collection","floats","popoutGroups","grid","floatingGroups","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","serializedPopoutGroups","serializedPopoutGroup","floatingGroup","hasActiveGroup","hasActivePanel","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","selectedGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","selectedFloatingGroup","selectedPopoutGroup","GridviewComponent","_onDidLayoutfromJSON","hasOrientationChanged","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","contraints","setContraints","_jsxs","background","_jsx","border","margin","setApi","panel1","panel2","onContextMenu","alert","JSON","stringify","valueA","panel6","DraggableElement","cursor","panelDragDisposable","groupDragDisposable","flexDirection","text","formatTime","pad","getHours","getMinutes","getSeconds","getMilliseconds","Console","scrollTop","scrollHeight","lines","line","timestamp","css","setLines","checked","setChecked","panel_1","panel_2","panel_3","panel_4","panel_5","panel_6","panel_8","panel_7","onChange","paddingTop","SampleData","droppable","TreeComponent","treeData","setTreeData","useState","Tree","tree","rootId","newTreeData","log","depth","isOpen","onToggle","marginLeft","treeview","DndProvider","backend","MultiBackend","getBackendOptions","Icon","justifyContent","alignItems","icon","loadDefaultLayout","panel4","panelCount","useLocalStorage","setState","parse","safeParse","localStorage","getItem","removeItem","setItem","LeftComponent","RightComponent","setFloating","setLayout","setDisableFloatingGroups","load","setOptions","addFloatingPanel2","RightHeaderActions","LeftHeaderActions","iframeComponent","src","basicComponent","DefaultPanel","_titleElement","_paramsElement","spacer","btn1","btn2","btn3","active","onKeyDown","ctrlKey","code","clearLayout","layoutString","success","panel3","maximized","setMaximized","isolatedApp","innerDockview","InnerDockview","PopoverMenu","setOpen","renderLayer","triggerProps","layerProps","arrowProps","useLayer","onOutsideClick","onDisappear","overflowContainer","auto","placement","triggerOffset","containerOffset","arrowOffset","environment","setPrototypeOf","_Fragment","AnimatePresence","motion","ul","Arrow","setDocument","usePanelWindowObject","reset","setReset","popout","setPopout","renderVisibleComponentsOnlyAtom","atom","formatLine","timeout","useRecoilValue","Checkbox","setRender","useRecoilState","mode","setMode","_setMode","useRenderer","setValue","onSave","onLoad","setWidth","setHeight","step","App","TEXT","fixedHeightContainer","repeat","userDefinedOverflowContainer","counter","isGroup","CodeSandboxButton","hideThemePicker","ThemePicker","fontWeight","paddingRight","Spinner","ReactIcon","marginRight","useBaseUrl","JavascriptIcon","themes","setTheme","dispatchEvent","StorageEvent","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","sandboxId","zIndex","react","MultiFrameworkContainer","BrowserOnly","Text","piece","substring","Summary","summary","DocRef","docs","docsJson","declaration","doc","fontFamily","name","comment","CodeBlock","language","frontMatter","description","contentTitle","metadata","assets","toc","_createMdxContent","_components","a","blockquote","em","h1","h2","h3","h4","li","pre","strong","metastring","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}