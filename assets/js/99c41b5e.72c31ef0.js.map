{"version":3,"file":"assets/js/99c41b5e.72c31ef0.js","mappings":"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","sources":["webpack://dockview-docs/../../node_modules/@docusaurus/core/lib/client/exports/BrowserOnly.js","webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/constants.ts","webpack://dockview-docs/../dockview-core/src/overlayRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/popoutWindow.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./sandboxes/demo-dockview/src/app.tsx","webpack://dockview-docs/./src/components/simpleGridview.tsx","webpack://dockview-docs/./src/components/simplePaneview.tsx","webpack://dockview-docs/./src/components/simpleSplitview.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./versioned_docs/version-1.9.2/index.mdx","webpack://dockview-docs/../../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { isValidElement } from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n// Similar comp to the one described here:\n// https://www.joshwcomeau.com/react/the-perils-of-rehydration/#abstractions\nexport default function BrowserOnly({ children, fallback, }) {\n    const isBrowser = useIsBrowser();\n    if (isBrowser) {\n        if (typeof children !== 'function' &&\n            process.env.NODE_ENV === 'development') {\n            throw new Error(`Docusaurus error: The children of <BrowserOnly> must be a \"render function\", e.g. <BrowserOnly>{() => <span>{window.location.href}</span>}</BrowserOnly>.\nCurrent type: ${isValidElement(children) ? 'React element' : typeof children}`);\n        }\n        return <>{children?.()}</>;\n    }\n    return fallback ?? null;\n}\n","class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nexport class DockviewEvent {\n    private _defaultPrevented = false;\n\n    get defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n\n    preventDefault(): void {\n        this._defaultPrevented = true;\n    }\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n\n    export function from(func: () => void): IDisposable {\n        return {\n            dispose: () => {\n                func();\n            },\n        };\n    }\n}\n\nexport class CompositeDisposable {\n    private _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        if (this._isDisposed) {\n            return;\n        }\n\n        this._isDisposed = true;\n        this._disposables.forEach((arg) => arg.dispose());\n        this._disposables = [];\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function addStyles(document: Document, styleSheetList: StyleSheetList) {\n    const styleSheets = Array.from(styleSheetList);\n\n    for (const styleSheet of styleSheets) {\n        if (styleSheet.href) {\n            const link = document.createElement('link');\n            link.href = styleSheet.href;\n            link.type = styleSheet.type;\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n        }\n\n        let cssTexts: string[] = [];\n\n        try {\n            if (styleSheet.cssRules) {\n                cssTexts = Array.from(styleSheet.cssRules).map(\n                    (rule) => rule.cssText\n                );\n            }\n        } catch (err) {\n            // security errors (lack of permissions), ignore\n        }\n\n        for (const rule of cssTexts) {\n            const style = document.createElement('style');\n            style.appendChild(document.createTextNode(rule));\n            document.head.appendChild(style);\n        }\n    }\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n\n/**\n * Check whether an element is in the DOM (including the Shadow DOM)\n * @see https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\n */\nexport function isInDocument(element: Element): boolean {\n    let currentElement: Element | ParentNode = element;\n\n    while (currentElement?.parentNode) {\n        if (currentElement.parentNode === document) {\n            return true;\n        } else if (currentElement.parentNode instanceof DocumentFragment) {\n            // handle shadow DOMs\n            currentElement = (currentElement.parentNode as ShadowRoot).host;\n        } else {\n            currentElement = currentElement.parentNode;\n        }\n    }\n\n    return false;\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private _contentSize = 0;\n    private _proportions: (number | undefined)[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get contentSize(): number {\n        return this._contentSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): (number | undefined)[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            let total = 0;\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                } else {\n                    size -= item.size;\n                }\n            }\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(\n                        Math.round((proportion * size) / total),\n                        item.minimumSize,\n                        item.maximumSize\n                    );\n                }\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this._proportions = this.viewItems.map((i) =>\n                i.visible ? i.size / this._contentSize : undefined\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this._contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidVisibilityChange = new Emitter<boolean>();\n    readonly onDidVisibilityChange: Event<boolean> =\n        this._onDidVisibilityChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(\n                  ...this.children.map((c, index) =>\n                      this.splitview.isViewVisible(index)\n                          ? c.minimumOrthogonalSize\n                          : 0\n                  )\n              );\n    }\n\n    get maximumSize(): number {\n        return Math.min(\n            ...this.children.map((c, index) =>\n                this.splitview.isViewVisible(index)\n                    ? c.maximumOrthogonalSize\n                    : Number.POSITIVE_INFINITY\n            )\n        );\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this._onDidVisibilityChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n     setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        const wereAllChildrenHidden = this.splitview.contentSize === 0;\n        this.splitview.setViewVisible(index, visible);\n        const areAllChildrenHidden = this.splitview.contentSize === 0;\n\n        // If all children are hidden then the parent should hide the entire splitview\n        // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n        if (\n            (visible && wereAllChildrenHidden) ||\n            (!visible && areAllChildrenHidden)\n        ) {\n            this._onDidVisibilityChange.fire(visible);\n        }\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = new CompositeDisposable(\n            Event.any(...this.children.map((c) => c.onDidChange))((e) => {\n                /**\n                 * indicate a change has occured to allows any re-rendering but don't bubble\n                 * event because that was specific to this branch\n                 */\n                this._onDidChange.fire({ size: e.orthogonalSize });\n            }),\n            ...this.children.map((c, i) => {\n                if (c instanceof BranchNode) {\n                    return c.onDidVisibilityChange((visible) => {\n                        this.setChildVisible(i, visible);\n                    });\n                }\n                return Disposable.NONE;\n            })\n        );\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    readonly element: HTMLElement;\n\n    private _root: BranchNode | undefined;\n    private _maximizedNode:\n        | { leaf: LeafNode; hiddenOnMaximize: LeafNode[] }\n        | undefined = undefined;\n    private readonly disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidMaxmizedNodeChange = new Emitter<void>();\n    readonly onDidMaxmizedNodeChange = this._onDidMaxmizedNodeChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    maximizedView(): IGridView | undefined {\n        return this._maximizedNode?.leaf.view;\n    }\n\n    hasMaximizedView(): boolean {\n        return this._maximizedNode !== undefined;\n    }\n\n    maximizeView(view: IGridView): void {\n        const location = getGridLocation(view.element);\n        const [_, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            return;\n        }\n\n        if (this._maximizedNode?.leaf === node) {\n            return;\n        }\n\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const hiddenOnMaximize: LeafNode[] = [];\n\n        function hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n            for (let i = 0; i < parent.children.length; i++) {\n                const child = parent.children[i];\n                if (child instanceof LeafNode) {\n                    if (child !== exclude) {\n                        if (parent.isChildVisible(i)) {\n                            parent.setChildVisible(i, false);\n                        } else {\n                            hiddenOnMaximize.push(child);\n                        }\n                    }\n                } else {\n                    hideAllViewsBut(child, exclude);\n                }\n            }\n        }\n\n        hideAllViewsBut(this.root, node);\n        this._maximizedNode = { leaf: node, hiddenOnMaximize };\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    exitMaximizedView(): void {\n        if (!this._maximizedNode) {\n            return;\n        }\n\n        const hiddenOnMaximize = this._maximizedNode.hiddenOnMaximize;\n\n        function showViewsInReverseOrder(parent: BranchNode): void {\n            for (let index = parent.children.length - 1; index >= 0; index--) {\n                const child = parent.children[index];\n                if (child instanceof LeafNode) {\n                    if (!hiddenOnMaximize.includes(child)) {\n                        parent.setChildVisible(index, true);\n                    }\n                } else {\n                    showViewsInReverseOrder(child);\n                }\n            }\n        }\n\n        showViewsInReverseOrder(this.root);\n\n        this._maximizedNode = undefined;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    public serialize(): SerializedGridview<any> {\n        if (this.hasMaximizedView()) {\n            /**\n             * do not persist maximized view state\n             * firstly exit any maximized views to ensure the correct dimensions are persisted\n             */\n            this.exitMaximizedView();\n        }\n\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this._onDidMaxmizedNodeChange.dispose();\n        this.root.dispose();\n        this._maximizedNode = undefined;\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize<T>(\n        json: SerializedGridview<T>,\n        deserializer: IViewDeserializer\n    ): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this._maximizedNode = undefined;\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\nimport { Box } from '../types';\nimport {\n    DockviewDidDropEvent,\n    DockviewWillDropEvent,\n    WillShowOverlayLocationEvent,\n} from '../dockview/dockviewGroupPanelModel';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDidDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs but before dockview handles it giving the user an opportunity to intecept and\n     * prevent the event from occuring using the standard `preventDefault()` syntax.\n     *\n     * Preventing certain events may causes unexpected behaviours, use carefully.\n     */\n    get onWillDrop(): Event<DockviewWillDropEvent> {\n        return this.component.onWillDrop;\n    }\n\n    /**\n     *\n     */\n    get onWillShowOverlay(): Event<WillShowOverlayLocationEvent> {\n        return this.component.onWillShowOverlay;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    maximizeGroup(panel: IDockviewPanel): void {\n        this.component.maximizeGroup(panel.group);\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.component.hasMaximizedGroup();\n    }\n\n    exitMaxmizedGroup(): void {\n        this.component.exitMaximizedGroup();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.component.onDidMaxmizedGroupChange;\n    }\n\n    /**\n     * Add a popout group in a new Window\n     */\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n            onDidOpen?: (event: { id: string; window: Window }) => void;\n            onWillClose?: (event: { id: string; window: Window }) => void;\n        }\n    ): Promise<void> {\n        return this.component.addPopoutGroup(item, options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { DockviewEvent, Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport class WillShowOverlayEvent\n    extends DockviewEvent\n    implements DroptargetEvent\n{\n    get nativeEvent(): DragEvent {\n        return this.options.nativeEvent;\n    }\n\n    get position(): Position {\n        return this.options.position;\n    }\n\n    constructor(\n        private readonly options: {\n            nativeEvent: DragEvent;\n            position: Position;\n        }\n    ) {\n        super();\n    }\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport type MeasuredValue = { value: number; type: 'pixels' | 'percentage' };\n\nexport type DroptargetOverlayModel = {\n    size?: MeasuredValue;\n    activationSize?: MeasuredValue;\n};\n\nconst DEFAULT_ACTIVATION_SIZE: MeasuredValue = {\n    value: 20,\n    type: 'percentage',\n};\n\nconst DEFAULT_SIZE: MeasuredValue = {\n    value: 50,\n    type: 'percentage',\n};\n\nconst SMALL_WIDTH_BOUNDARY = 100;\nconst SMALL_HEIGHT_BOUNDARY = 100;\n\nexport interface DroptargetOptions {\n    canDisplayOverlay: CanDisplayOverlay;\n    acceptedTargetZones: Position[];\n    overlayModel?: DroptargetOverlayModel;\n}\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onWillShowOverlay = new Emitter<WillShowOverlayEvent>();\n    readonly onWillShowOverlay: Event<WillShowOverlayEvent> =\n        this._onWillShowOverlay.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: DroptargetOptions\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const willShowOverlayEvent = new WillShowOverlayEvent({\n                    nativeEvent: e,\n                    position: quadrant,\n                });\n\n                /**\n                 * Provide an opportunity to prevent the overlay appearing and in turn\n                 * any dnd behaviours\n                 */\n                this._onWillShowOverlay.fire(willShowOverlayEvent);\n\n                if (willShowOverlayEvent.defaultPrevented) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this._state = quadrant;\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this._onWillShowOverlay, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    setOverlayModel(model: DroptargetOverlayModel): void {\n        this.options.overlayModel = model;\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance of DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < SMALL_WIDTH_BOUNDARY;\n        const isSmallY = height < SMALL_HEIGHT_BOUNDARY;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 1;\n\n        const sizeOptions = this.options.overlayModel?.size ?? DEFAULT_SIZE;\n\n        if (sizeOptions.type === 'percentage') {\n            size = clamp(sizeOptions.value, 0, 100) / 100;\n        } else {\n            if (rightClass || leftClass) {\n                size = clamp(0, sizeOptions.value, width) / width;\n            }\n            if (topClass || bottomClass) {\n                size = clamp(0, sizeOptions.value, height) / height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-small-vertical',\n            isSmallY\n        );\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-small-horizontal',\n            isSmallX\n        );\n        toggleClass(this.overlayElement, 'dv-drop-target-left', isLeft);\n        toggleClass(this.overlayElement, 'dv-drop-target-right', isRight);\n        toggleClass(this.overlayElement, 'dv-drop-target-top', isTop);\n        toggleClass(this.overlayElement, 'dv-drop-target-bottom', isBottom);\n        toggleClass(\n            this.overlayElement,\n            'dv-drop-target-center',\n            quadrant === 'center'\n        );\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const activationSizeOptions =\n            this.options.overlayModel?.activationSize ??\n            DEFAULT_ACTIVATION_SIZE;\n\n        const isPercentage = activationSizeOptions.type === 'percentage';\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                activationSizeOptions.value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            activationSizeOptions.value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel, options: { asActive: boolean }): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (\n                    !data &&\n                    event.shiftKey &&\n                    this.group.location.type !== 'floating'\n                ) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(event, position, 'panel');\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(\n        panel: IDockviewPanel,\n        options: { asActive: boolean } = { asActive: true }\n    ): void {\n        const doRender =\n            options.asActive ||\n            (this.panel && this.group.isPanelActive(this.panel));\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.overlayRenderContainer.detatch(panel);\n                if (this.panel) {\n                    if (doRender) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container = this.accessor.overlayRenderContainer.attach({\n                    panel,\n                    referenceContainer: this,\n                });\n                break;\n        }\n\n        if (doRender) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        this.renderPanel(panel);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.panel.api.renderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n        }\n        this.panel = undefined;\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport {\n    DroptargetEvent,\n    Droptarget,\n    Position,\n    WillShowOverlayEvent,\n} from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport class Tab extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly dropTarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    readonly onWillShowOverlay: Event<WillShowOverlayEvent>;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.dropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    'tab'\n                );\n            },\n        });\n\n        this.onWillShowOverlay = this.dropTarget.onWillShowOverlay;\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.dropTarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.dropTarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.location.type === 'floating' && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport {\n    Droptarget,\n    DroptargetEvent,\n    WillShowOverlayEvent,\n} from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly dropTraget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    readonly onWillShowOverlay: Event<WillShowOverlayEvent>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.dropTraget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(event, position, 'panel');\n            },\n        });\n\n        this.onWillShowOverlay = this.dropTraget.onWillShowOverlay;\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.dropTraget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.dropTraget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { Tab } from '../tab/tab';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { WillShowOverlayEvent } from '../../../dnd/droptarget';\nimport { DockviewGroupDropLocation } from '../../dockviewGroupPanelModel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    readonly onDrop: Event<TabDropIndexEvent>;\n    readonly onTabDragStart: Event<TabDragEvent>;\n    readonly onGroupDragStart: Event<GroupDragEvent>;\n    readonly onWillShowOverlay: Event<{\n        event: WillShowOverlayEvent;\n        kind: DockviewGroupDropLocation;\n    }>;\n    hidden: boolean;\n    delete(id: string): void;\n    indexOf(id: string): number;\n    setActive(isGroupActive: boolean): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    isActive(tab: Tab): boolean;\n    closePanel(panel: IDockviewPanel): void;\n    openPanel(panel: IDockviewPanel, index?: number): void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<Tab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onWillShowOverlay = new Emitter<{\n        event: WillShowOverlayEvent;\n        kind: DockviewGroupDropLocation;\n    }>();\n    readonly onWillShowOverlay: Event<{\n        event: WillShowOverlayEvent;\n        kind: DockviewGroupDropLocation;\n    }> = this._onWillShowOverlay.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: Tab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this._onWillShowOverlay,\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            this.voidContainer.onWillShowOverlay((event) => {\n                this._onWillShowOverlay.fire({ event, kind: 'header_space' });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        this.group.api.location.type !== 'floating'\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<Tab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.location.type === 'floating' &&\n                    this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            }),\n            tab.onWillShowOverlay((event) => {\n                this._onWillShowOverlay.fire({ event, kind: 'tab' });\n            })\n        );\n\n        const value: IValueDisposable<Tab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Position, WillShowOverlayEvent } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport {\n    addDisposableListener,\n    DockviewEvent,\n    Emitter,\n    Event,\n} from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface DockviewGroupChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport class DockviewDidDropEvent extends DockviewEvent {\n    get nativeEvent(): DragEvent {\n        return this.options.nativeEvent;\n    }\n\n    get position(): Position {\n        return this.options.position;\n    }\n\n    get panel(): IDockviewPanel | undefined {\n        return this.options.panel;\n    }\n\n    get group(): DockviewGroupPanel | undefined {\n        return this.options.group;\n    }\n\n    get api(): DockviewApi {\n        return this.options.api;\n    }\n\n    constructor(\n        private readonly options: {\n            readonly nativeEvent: DragEvent;\n            readonly position: Position;\n            readonly panel?: IDockviewPanel;\n            getData(): PanelTransfer | undefined;\n            group?: DockviewGroupPanel;\n            api: DockviewApi;\n        }\n    ) {\n        super();\n    }\n\n    getData(): PanelTransfer | undefined {\n        return this.options.getData();\n    }\n}\n\nexport class DockviewWillDropEvent extends DockviewDidDropEvent {\n    private readonly _kind: DockviewGroupDropLocation;\n\n    get kind(): DockviewGroupDropLocation {\n        return this._kind;\n    }\n\n    constructor(options: {\n        readonly nativeEvent: DragEvent;\n        readonly position: Position;\n        readonly panel?: IDockviewPanel;\n        getData(): PanelTransfer | undefined;\n        kind: DockviewGroupDropLocation;\n        group?: DockviewGroupPanel;\n        api: DockviewApi;\n    }) {\n        super(options);\n\n        this._kind = options.kind;\n    }\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport type DockviewGroupDropLocation = 'tab' | 'header_space' | 'content';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<DockviewDidDropEvent>;\n    readonly onWillDrop: Event<DockviewWillDropEvent>;\n    readonly onDidAddPanel: Event<DockviewGroupChangeEvent>;\n    readonly onDidRemovePanel: Event<DockviewGroupChangeEvent>;\n    readonly onDidActivePanelChange: Event<DockviewGroupChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport type DockviewGroupLocation =\n    | { type: 'grid' }\n    | { type: 'floating' }\n    | { type: 'popout'; getWindow: () => Window };\n\nexport interface WillShowOverlayLocationEvent {\n    event: WillShowOverlayEvent;\n    kind: DockviewGroupDropLocation;\n}\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private _location: DockviewGroupLocation = { type: 'grid' };\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDidDropEvent>();\n    readonly onDidDrop: Event<DockviewDidDropEvent> = this._onDidDrop.event;\n\n    private readonly _onWillDrop = new Emitter<DockviewWillDropEvent>();\n    readonly onWillDrop: Event<DockviewWillDropEvent> = this._onWillDrop.event;\n\n    private readonly _onWillShowOverlay =\n        new Emitter<WillShowOverlayLocationEvent>();\n    readonly onWillShowOverlay: Event<WillShowOverlayLocationEvent> =\n        this._onWillShowOverlay.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<DockviewGroupChangeEvent>();\n    readonly onDidAddPanel: Event<DockviewGroupChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel =\n        new Emitter<DockviewGroupChangeEvent>();\n    readonly onDidRemovePanel: Event<DockviewGroupChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<DockviewGroupChangeEvent>();\n    readonly onDidActivePanelChange: Event<DockviewGroupChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _api: DockviewApi;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get location(): DockviewGroupLocation {\n        return this._location;\n    }\n\n    set location(value: DockviewGroupLocation) {\n        this._location = value;\n\n        toggleClass(this.container, 'dv-groupview-floating', false);\n        toggleClass(this.container, 'dv-groupview-popout', false);\n\n        switch (value.type) {\n            case 'grid':\n                this.contentContainer.dropTarget.setTargetZones([\n                    'top',\n                    'bottom',\n                    'left',\n                    'right',\n                    'center',\n                ]);\n                break;\n            case 'floating':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n                this.contentContainer.dropTarget.setTargetZones(\n                    value\n                        ? ['center']\n                        : ['top', 'bottom', 'left', 'right', 'center']\n                );\n\n                toggleClass(this.container, 'dv-groupview-floating', true);\n\n                break;\n            case 'popout':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n\n                toggleClass(this.container, 'dv-groupview-popout', true);\n\n                break;\n        }\n\n        this.groupPanel.api._onDidLocationChange.fire({\n            location: this.location,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this._api = new DockviewApi(this.accessor);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this._onWillShowOverlay,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(\n                    'header',\n                    event.event,\n                    'center',\n                    event.index\n                );\n            }),\n\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(\n                    'content',\n                    event.nativeEvent,\n                    event.position\n                );\n            }),\n            this.tabsContainer.onWillShowOverlay((event) => {\n                this._onWillShowOverlay.fire(event);\n            }),\n            this.contentContainer.dropTarget.onWillShowOverlay((event) => {\n                this._onWillShowOverlay.fire({ event, kind: 'content' });\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onWillDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: this._api,\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel, { asActive: false });\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            this.contentContainer.renderPanel(panel, { asActive: true });\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: this._api,\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        type: 'header' | 'content',\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        function getKind(): DockviewGroupDropLocation {\n            switch (type) {\n                case 'header':\n                    return typeof index === 'number' ? 'tab' : 'header_space';\n                case 'content':\n                    return 'content';\n            }\n        }\n\n        const panel =\n            typeof index === 'number' ? this.panels[index] : undefined;\n\n        const willDropEvent = new DockviewWillDropEvent({\n            nativeEvent: event,\n            position,\n            panel,\n            getData: () => getPanelData(),\n            kind: getKind(),\n            group: this.groupPanel,\n            api: this._api,\n        });\n\n        this._onWillDrop.fire(willDropEvent);\n\n        if (willDropEvent.defaultPrevented) {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire(\n                new DockviewDidDropEvent({\n                    nativeEvent: event,\n                    position,\n                    panel,\n                    getData: () => getPanelData(),\n                    group: this.groupPanel,\n                    api: this._api,\n                })\n            );\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n        this.watermark = undefined;\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { isInDocument, watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        this._element = parentElement;\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!this._element.offsetParent) {\n                    /**\n                     * offsetParent === null is equivalent to display: none being set on the element or one\n                     * of it's parents. In the display: none case the size will become (0, 0) which we do\n                     * not want to propagate.\n                     *\n                     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n                     *\n                     * You could use checkVisibility() but at the time of writing it's not supported across\n                     * all Browsers\n                     *\n                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/checkVisibility\n                     */\n                    return;\n                }\n\n                if (!isInDocument(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { Disposable, IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n    maximizeGroup(panel: T): void;\n    isMaximizedGroup(panel: T): boolean;\n    exitMaximizedGroup(): void;\n    hasMaximizedGroup(): boolean;\n    readonly onDidMaxmizedGroupChange: Event<void>;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(document.createElement('div'), options.disableAutoResizing);\n\n        options.parentElement.appendChild(this.element);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            Disposable.from(() => {\n                this.element.parentElement?.removeChild(this.element);\n            }),\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    maximizeGroup(panel: T): void {\n        this.gridview.maximizeView(panel);\n    }\n\n    isMaximizedGroup(panel: T): boolean {\n        return this.gridview.maximizedView() === panel;\n    }\n\n    exitMaximizedGroup(): void {\n        this.gridview.exitMaximizedView();\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.gridview.hasMaximizedView();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.gridview.onDidMaxmizedNodeChange;\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface HiddenEvent {\n    readonly isHidden: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    readonly onDidHiddenChange: Event<HiddenEvent>;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * Whether the panel is hidden\n     */\n    readonly isHidden: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _isHidden = false;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n\n    readonly _onDidHiddenChange = new Emitter<HiddenEvent>();\n    readonly onDidHiddenChange: Event<HiddenEvent> =\n        this._onDidHiddenChange.event;\n\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n\n    get isFocused(): boolean {\n        return this._isFocused;\n    }\n\n    get isActive(): boolean {\n        return this._isActive;\n    }\n\n    get isVisible(): boolean {\n        return this._isVisible;\n    }\n\n    get isHidden(): boolean {\n        return this._isHidden;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidHiddenChange((event) => {\n                this._isHidden = event.isHidden;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onDidHiddenChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setHidden(isHidden: boolean): void {\n        this._onDidHiddenChange.fire({ isHidden });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\nimport { BaseGrid, IGridPanelView } from './baseComponentGridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: BaseGrid<IGridPanelView>;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onDidHiddenChange((event) => {\n                const { isHidden } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n\n                accessor.setVisible(this, !isHidden);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n\n                accessor.doSetGroupActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position, positionToDirection } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly location: DockviewGroupLocation;\n    /**\n     * If you require the Window object\n     */\n    getWindow(): Window;\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly location: DockviewGroupLocation;\n}\n\n// TODO find a better way to initialize and avoid needing null checks\nconst NOT_INITIALIZED_MESSAGE = 'DockviewGroupPanelApiImpl not initialized';\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidLocationChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidLocationChange.event;\n\n    get location(): DockviewGroupLocation {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        return this._group.model.location;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidLocationChange);\n    }\n\n    getWindow(): Window {\n        return this.location.type === 'popout'\n            ? this.location.getWindow()\n            : window;\n    }\n\n    moveTo(options: { group?: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        const group =\n            options.group ??\n            this.accessor.addGroup({\n                direction: positionToDirection(options.position ?? 'right'),\n            });\n\n        this.accessor.moveGroupOrPanel(\n            group,\n            this._group.id,\n            undefined,\n            options.group ? options.position ?? 'center' : 'center'\n        );\n    }\n\n    maximize(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.location.type !== 'grid') {\n            // only grid groups can be maximized\n            return;\n        }\n\n        this.accessor.maximizeGroup(this._group);\n    }\n\n    isMaximized(): boolean {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        return this.accessor.isMaximizedGroup(this._group);\n    }\n\n    exitMaximized(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.isMaximized()) {\n            this.accessor.exitMaximizedGroup();\n        }\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nconst MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH = 100;\nconst MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT = 100;\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT,\n                minimumWidth: MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { DockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\nimport { DockviewGroupPanelFloatingChangeEvent } from './dockviewGroupPanelApi';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        // omit properties that do not make sense here\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    readonly location: DockviewGroupLocation;\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n    /**\n     * If you require the Window object\n     */\n    getWindow(): Window;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly _onDidLocationChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidLocationChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidLocationChange.event;\n\n    private readonly groupEventsDisposable = new MutableDisposable();\n\n    get location(): DockviewGroupLocation {\n        return this.group.api.location;\n    }\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return this.group.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.groupEventsDisposable.value = new CompositeDisposable(\n                this.group.api.onDidLocationChange((event) => {\n                    this._onDidLocationChange.fire(event);\n                }),\n                this.group.api.onDidActiveChange(() => {\n                    this._onDidActiveGroupChange.fire();\n                })\n            );\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n\n            this._onDidLocationChange.fire({\n                location: this.group.api.location,\n            });\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.groupEventsDisposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange,\n            this._onDidLocationChange\n        );\n    }\n\n    getWindow(): Window {\n        return this.group.api.getWindow();\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n\n    maximize(): void {\n        this.group.api.maximize();\n    }\n\n    isMaximized(): boolean {\n        return this.group.api.isMaximized();\n    }\n\n    exitMaximized(): void {\n        this.group.api.exitMaximized();\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { Box } from '../types';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: Box & {\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(bounds: Partial<Box> = {}): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): Box {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","export const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100 };\n","import { DragAndDropObserver } from './dnd/dnd';\nimport { Droptarget } from './dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from './dom';\nimport { CompositeDisposable, Disposable, IDisposable } from './lifecycle';\nimport { IDockviewPanel } from './dockview/dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class OverlayRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        {\n            panel: IDockviewPanel;\n            disposable: IDisposable;\n            destroy: IDisposable;\n            element: HTMLElement;\n        }\n    > = {};\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            Disposable.from(() => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                    value.destroy.dispose();\n                }\n            })\n        );\n    }\n\n    detatch(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            const { disposable, destroy } = this.map[panel.api.id];\n            disposable.dispose();\n            destroy.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    attach(options: {\n        panel: IDockviewPanel;\n        referenceContainer: IRenderable;\n    }): HTMLElement {\n        const { panel, referenceContainer } = options;\n\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                panel,\n                disposable: Disposable.NONE,\n                destroy: Disposable.NONE,\n\n                element,\n            };\n        }\n\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls, possible performance bottleneck?\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.location.type === 'floating'\n            );\n        };\n\n        const visibilityChanged = () => {\n            if (panel.api.isVisible) {\n                resize();\n            }\n\n            focusContainer.style.display = panel.api.isVisible ? '' : 'none';\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             *\n             * the dnd observer does not need to be conditional on whether the panel is visible since\n             * non-visible panels are 'display: none' and in such case the dnd observer will not fire.\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n\n            panel.api.onDidVisibilityChange((event) => {\n                /**\n                 * Control the visibility of the content, however even when not visible (display: none)\n                 * the content is still maintained within the DOM hence DOM specific attributes\n                 * such as scroll position are maintained when next made visible.\n                 */\n                visibilityChanged();\n            }),\n            panel.api.onDidDimensionsChange(() => {\n                if (!panel.api.isVisible) {\n                    return;\n                }\n\n                resize();\n            })\n        );\n\n        this.map[panel.api.id].destroy = Disposable.from(() => {\n            focusContainer.removeChild(panel.view.content.element);\n            this.element.removeChild(focusContainer);\n        });\n\n        queueMicrotask(() => {\n            if (this.isDisposed) {\n                return;\n            }\n\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            visibilityChanged();\n        });\n\n        // dispose of logic asoccciated with previous reference-container\n        this.map[panel.api.id].disposable.dispose();\n        // and reset the disposable to the active reference-container\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import { addStyles } from './dom';\nimport { Emitter, addDisposableWindowListener } from './events';\nimport { CompositeDisposable, IDisposable } from './lifecycle';\nimport { Box } from './types';\n\nexport type PopoutWindowOptions = {\n    url: string;\n    onDidOpen?: (event: { id: string; window: Window }) => void;\n    onWillClose?: (event: { id: string; window: Window }) => void;\n} & Box;\n\nexport class PopoutWindow extends CompositeDisposable {\n    private readonly _onWillClose = new Emitter<void>();\n    readonly onWillClose = this._onWillClose.event;\n\n    private readonly _onDidClose = new Emitter<void>();\n    readonly onDidClose = this._onDidClose.event;\n\n    private _window: { value: Window; disposable: IDisposable } | null = null;\n\n    get window(): Window | null {\n        return this._window?.value ?? null;\n    }\n\n    constructor(\n        private readonly target: string,\n        private readonly className: string,\n        private readonly options: PopoutWindowOptions\n    ) {\n        super();\n\n        this.addDisposables(this._onWillClose, this._onDidClose, {\n            dispose: () => {\n                this.close();\n            },\n        });\n    }\n\n    dimensions(): Box | null {\n        if (!this._window) {\n            return null;\n        }\n\n        const left = this._window.value.screenX;\n        const top = this._window.value.screenY;\n        const width = this._window.value.innerWidth;\n        const height = this._window.value.innerHeight;\n\n        return { top, left, width, height };\n    }\n\n    close(): void {\n        if (this._window) {\n            this._onWillClose.fire();\n\n            this.options.onWillClose?.({\n                id: this.target,\n                window: this._window.value,\n            });\n\n            this._window.disposable.dispose();\n            this._window.value.close();\n            this._window = null;\n\n            this._onDidClose.fire();\n        }\n    }\n\n    async open(): Promise<HTMLElement | null> {\n        if (this._window) {\n            throw new Error('instance of popout window is already open');\n        }\n\n        const url = `${this.options.url}`;\n\n        const features = Object.entries({\n            top: this.options.top,\n            left: this.options.left,\n            width: this.options.width,\n            height: this.options.height,\n        })\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n\n        /**\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n         */\n        const externalWindow = window.open(url, this.target, features);\n\n        if (!externalWindow) {\n            /**\n             * Popup blocked\n             */\n            return null;\n        }\n\n        const disposable = new CompositeDisposable();\n\n        this._window = { value: externalWindow, disposable };\n\n        disposable.addDisposables(\n            addDisposableWindowListener(window, 'beforeunload', () => {\n                /**\n                 * before the main window closes we should close this popup too\n                 * to be good citizens\n                 *\n                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n                 */\n                this.close();\n            })\n        );\n\n        const container = this.createPopoutWindowContainer();\n\n        if (this.className) {\n            container.classList.add(this.className);\n        }\n\n        this.options.onDidOpen?.({\n            id: this.target,\n            window: externalWindow,\n        });\n\n        return new Promise<HTMLElement | null>((resolve) => {\n            externalWindow.addEventListener('unload', (e) => {\n                // if page fails to load before unloading\n                // this.close();\n            });\n\n            externalWindow.addEventListener('load', () => {\n                /**\n                 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event\n                 */\n\n                const externalDocument = externalWindow.document;\n                externalDocument.title = document.title;\n\n                externalDocument.body.appendChild(container);\n\n                addStyles(externalDocument, window.document.styleSheets);\n\n                /**\n                 * beforeunload must be registered after load for reasons I could not determine\n                 * otherwise the beforeunload event will not fire when the window is closed\n                 */\n                addDisposableWindowListener(\n                    externalWindow,\n                    'beforeunload',\n                    () => {\n                        /**\n                         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n                         */\n                        this.close();\n                    }\n                );\n\n                resolve(container);\n            });\n        });\n    }\n\n    private createPopoutWindowContainer(): HTMLElement {\n        const el = document.createElement('div');\n        el.classList.add('dv-popout-window');\n        el.id = 'dv-popout-window';\n        el.style.position = 'absolute';\n        el.style.width = '100%';\n        el.style.height = '100%';\n        el.style.top = '0px';\n        el.style.left = '0px';\n\n        return el;\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport {\n    directionToPosition,\n    Droptarget,\n    DroptargetOverlayModel,\n    Position,\n} from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable, Disposable, IDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport { IWatermarkRenderer, GroupviewPanelState } from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    DockviewDidDropEvent,\n    DockviewWillDropEvent,\n    WillShowOverlayLocationEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { Box } from '../types';\nimport {\n    DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n    DEFAULT_FLOATING_GROUP_POSITION,\n} from '../constants';\nimport {\n    DockviewPanelRenderer,\n    OverlayRenderContainer,\n} from '../overlayRenderContainer';\nimport { PopoutWindow } from '../popoutWindow';\n\nconst DEFAULT_ROOT_OVERLAY_MODEL: DroptargetOverlayModel = {\n    activationSize: { type: 'pixels', value: 10 },\n    size: { type: 'pixels', value: 20 },\n};\n\nfunction getDockviewTheme(element: HTMLElement): string | undefined {\n    function toClassList(element: HTMLElement) {\n        const list: string[] = [];\n\n        for (let i = 0; i < element.classList.length; i++) {\n            list.push(element.classList.item(i)!);\n        }\n\n        return list;\n    }\n\n    let theme: string | undefined = undefined;\n    let parent: HTMLElement | null = element;\n\n    while (parent !== null) {\n        theme = toClassList(parent).find((cls) =>\n            cls.startsWith('dockview-theme-')\n        );\n        if (typeof theme === 'string') {\n            break;\n        }\n        parent = parent.parentElement;\n    }\n\n    return theme;\n}\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: Box;\n}\n\nexport interface SerializedPopoutGroup {\n    data: GroupPanelViewState;\n    position: Box | null;\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n    popoutGroups?: SerializedPopoutGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n    | 'rootOverlayModel'\n    | 'disableDnd'\n>;\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly onDidDrop: Event<DockviewDidDropEvent>;\n    readonly onWillDrop: Event<DockviewWillDropEvent>;\n    readonly onWillShowOverlay: Event<WillShowOverlayLocationEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n            onDidOpen?: (event: { id: string; window: Window }) => void;\n            onWillClose?: (event: { id: string; window: Window }) => void;\n        }\n    ): Promise<void>;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly overlayRenderContainer: OverlayRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDidDropEvent>();\n    readonly onDidDrop: Event<DockviewDidDropEvent> = this._onDidDrop.event;\n\n    private readonly _onWillDrop = new Emitter<DockviewWillDropEvent>();\n    readonly onWillDrop: Event<DockviewWillDropEvent> = this._onWillDrop.event;\n\n    private readonly _onWillShowOverlay =\n        new Emitter<WillShowOverlayLocationEvent>();\n    readonly onWillShowOverlay: Event<WillShowOverlayLocationEvent> =\n        this._onWillShowOverlay.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _floatingGroups: DockviewFloatingGroupPanel[] = [];\n    private readonly _popoutGroups: {\n        window: PopoutWindow;\n        popoutGroup: DockviewGroupPanel;\n        referenceGroup: DockviewGroupPanel;\n        disposable: IDisposable;\n    }[] = [];\n    private readonly _rootDropTarget: Droptarget;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-overlay-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.overlayRenderContainer = new OverlayRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.overlayRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onWillShowOverlay,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            this._onWillDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Disposable.from(() => {\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._floatingGroups]) {\n                    group.dispose();\n                }\n\n                // iterate over a copy of the array since .dispose() mutates the original array\n                for (const group of [...this._popoutGroups]) {\n                    group.disposable.dispose();\n                }\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        this._rootDropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: 'edge',\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel:\n                this.options.rootOverlayModel ?? DEFAULT_ROOT_OVERLAY_MODEL,\n        });\n\n        this.addDisposables(\n            this._rootDropTarget.onDrop((event) => {\n                const willDropEvent = new DockviewWillDropEvent({\n                    nativeEvent: event.nativeEvent,\n                    position: event.position,\n                    panel: undefined,\n                    api: this._api,\n                    group: undefined,\n                    getData: getPanelData,\n                    kind: 'content',\n                });\n\n                this._onWillDrop.fire(willDropEvent);\n\n                if (willDropEvent.defaultPrevented) {\n                    return;\n                }\n\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire(\n                        new DockviewDidDropEvent({\n                            nativeEvent: event.nativeEvent,\n                            position: event.position,\n                            panel: undefined,\n                            api: this._api,\n                            group: undefined,\n                            getData: getPanelData,\n                        })\n                    );\n                }\n            }),\n            this._rootDropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addPopoutGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        options?: {\n            skipRemoveGroup?: boolean;\n            position?: Box;\n            popoutUrl?: string;\n            onDidOpen?: (event: { id: string; window: Window }) => void;\n            onWillClose?: (event: { id: string; window: Window }) => void;\n        }\n    ): Promise<void> {\n        if (item instanceof DockviewPanel && item.group.size === 1) {\n            return this.addPopoutGroup(item.group);\n        }\n\n        const theme = getDockviewTheme(this.gridview.element);\n        const element = this.element;\n\n        function moveGroupWithoutDestroying(options: {\n            from: DockviewGroupPanel;\n            to: DockviewGroupPanel;\n        }) {\n            const panels = [...options.from.panels].map((panel) =>\n                options.from.model.removePanel(panel)\n            );\n\n            panels.forEach((panel) => {\n                options.to.model.openPanel(panel);\n            });\n        }\n\n        function getBox(): Box {\n            if (options?.position) {\n                return options.position;\n            }\n\n            if (item instanceof DockviewGroupPanel) {\n                return item.element.getBoundingClientRect();\n            }\n\n            if (item.group) {\n                return item.group.element.getBoundingClientRect();\n            }\n            return element.getBoundingClientRect();\n        }\n\n        const box: Box = getBox();\n\n        const groupId = this.getNextGroupId(); //item.id;\n\n        item.api.setHidden(true);\n\n        const _window = new PopoutWindow(\n            `${this.id}-${groupId}`, // unique id\n            theme ?? '',\n            {\n                url: options?.popoutUrl ?? '/popout.html',\n                left: window.screenX + box.left,\n                top: window.screenY + box.top,\n                width: box.width,\n                height: box.height,\n                onDidOpen: options?.onDidOpen,\n                onWillClose: options?.onWillClose,\n            }\n        );\n\n        const popoutWindowDisposable = new CompositeDisposable(\n            _window,\n            _window.onDidClose(() => {\n                popoutWindowDisposable.dispose();\n            })\n        );\n\n        return _window\n            .open()\n            .then((popoutContainer) => {\n                if (_window.isDisposed) {\n                    return;\n                }\n\n                if (popoutContainer === null) {\n                    popoutWindowDisposable.dispose();\n                    return;\n                }\n\n                const referenceGroup =\n                    item instanceof DockviewPanel ? item.group : item;\n\n                const group = this.createGroup({ id: groupId });\n\n                if (item instanceof DockviewPanel) {\n                    const panel = referenceGroup.model.removePanel(item);\n                    group.model.openPanel(panel);\n                } else {\n                    moveGroupWithoutDestroying({\n                        from: referenceGroup,\n                        to: group,\n                    });\n                    referenceGroup.api.setHidden(false);\n                }\n\n                popoutContainer.appendChild(group.element);\n\n                group.model.location = {\n                    type: 'popout',\n                    getWindow: () => _window.window!,\n                };\n\n                const value = {\n                    window: _window,\n                    popoutGroup: group,\n                    referenceGroup,\n                    disposable: popoutWindowDisposable,\n                };\n\n                popoutWindowDisposable.addDisposables(\n                    Disposable.from(() => {\n                        if (this.getPanel(referenceGroup.id)) {\n                            moveGroupWithoutDestroying({\n                                from: group,\n                                to: referenceGroup,\n                            });\n\n                            if (referenceGroup.api.isHidden) {\n                                referenceGroup.api.setHidden(false);\n                            }\n\n                            this.doRemoveGroup(group);\n                        } else {\n                            const removedGroup = this.doRemoveGroup(group, {\n                                skipDispose: true,\n                                skipActive: true,\n                            });\n                            removedGroup.model.location = { type: 'grid' };\n                            this.doAddGroup(removedGroup, [0]);\n                        }\n                    })\n                );\n\n                this._popoutGroups.push(value);\n                this.updateWatermark();\n            })\n            .catch((err) => {\n                console.error(err);\n            });\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.location = { type: 'floating' };\n\n        const overlayLeft =\n            typeof coord?.x === 'number'\n                ? Math.max(coord.x, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.left;\n        const overlayTop =\n            typeof coord?.y === 'number'\n                ? Math.max(coord.y, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.top;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.location = { type: 'grid' };\n                    remove(this._floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this._floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const changed_orientation =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const changed_floatingGroupBounds =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        const changed_rootOverlayOptions =\n            options.rootOverlayModel !== undefined &&\n            options.rootOverlayModel !== this.options.rootOverlayModel;\n\n        this._options = { ...this.options, ...options };\n\n        if (changed_orientation) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (changed_floatingGroupBounds) {\n            for (const group of this._floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        if (changed_rootOverlayOptions) {\n            this._rootDropTarget.setOverlayModel(options.rootOverlayModel!);\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this._floatingGroups) {\n            for (const floating of this._floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this._floatingGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.overlay.toJSON(),\n                };\n            }\n        );\n\n        const popoutGroups: SerializedPopoutGroup[] = this._popoutGroups.map(\n            (group) => {\n                return {\n                    data: group.popoutGroup.toJSON() as GroupPanelViewState,\n                    position: group.window.dimensions(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        if (popoutGroups.length > 0) {\n            result.popoutGroups = popoutGroups;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            const serializedPopoutGroups = data.popoutGroups ?? [];\n\n            for (const serializedPopoutGroup of serializedPopoutGroups) {\n                const { data, position } = serializedPopoutGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addPopoutGroup(group, {\n                    skipRemoveGroup: true,\n                    position: position ?? undefined,\n                });\n            }\n\n            for (const floatingGroup of this._floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this._floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (\n                referenceGroup.api.location.type === 'floating' ||\n                target === 'center'\n            ) {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.overlayRenderContainer.detatch(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (\n            this.groups.filter(\n                (x) => x.api.location.type === 'grid' && !x.api.isHidden\n            ).length === 0\n        ) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup(options);\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        if (group.api.location.type === 'floating') {\n            const floatingGroup = this._floatingGroups.find(\n                (_) => _.group === group\n            );\n\n            if (floatingGroup) {\n                if (!options?.skipDispose) {\n                    floatingGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                remove(this._floatingGroups, floatingGroup);\n                floatingGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return floatingGroup.group;\n            }\n\n            throw new Error('failed to find floating group');\n        }\n\n        if (group.api.location.type === 'popout') {\n            const selectedGroup = this._popoutGroups.find(\n                (_) => _.popoutGroup === group\n            );\n\n            if (selectedGroup) {\n                if (!options?.skipDispose) {\n                    this.doRemoveGroup(selectedGroup.referenceGroup);\n\n                    selectedGroup.popoutGroup.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                selectedGroup.disposable.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                this.updateWatermark();\n                return selectedGroup.popoutGroup;\n            }\n\n            throw new Error('failed to find popout group');\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                if (sourceGroup.api.location.type === 'grid') {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                switch (sourceGroup.api.location.type) {\n                    case 'grid':\n                        this.gridview.removeView(\n                            getGridLocation(sourceGroup.element)\n                        );\n                        break;\n                    case 'floating': {\n                        const selectedFloatingGroup = this._floatingGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedFloatingGroup) {\n                            throw new Error('failed to find floating group');\n                        }\n                        selectedFloatingGroup.dispose();\n                        break;\n                    }\n                    case 'popout': {\n                        const selectedPopoutGroup = this._popoutGroups.find(\n                            (x) => x.popoutGroup === sourceGroup\n                        );\n                        if (!selectedPopoutGroup) {\n                            throw new Error('failed to find popout group');\n                        }\n                        selectedPopoutGroup.disposable.dispose();\n                    }\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    private getNextGroupId(): string {\n        let id = this.nextGroupId.next();\n        while (this._groups.has(id)) {\n            id = this.nextGroupId.next();\n        }\n\n        return id;\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: this });\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire(event);\n                }),\n                view.model.onWillDrop((event) => {\n                    this._onWillDrop.fire(event);\n                }),\n                view.model.onWillShowOverlay((event) => {\n                    if (this.options.disableDnd) {\n                        event.event.preventDefault();\n                        return;\n                    }\n\n                    this._onWillShowOverlay.fire(event);\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup, not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { DroptargetOverlayModel, Position } from '../dnd/droptarget';\nimport { GroupOptions } from './dockviewGroupPanelModel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from '../overlayRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    popoutUrl?: string;\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n    rootOverlayModel?: DroptargetOverlayModel;\n    disableDnd?: boolean;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions = (\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition\n) &\n    GroupOptions;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onDidHiddenChange((event) => {\n                const { isHidden } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, !isHidden);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewWillDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n    DroptargetOverlayModel,\n    DockviewDidDropEvent,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDidDropEvent) => void;\n    onWillDrop?: (event: DockviewWillDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n    rootOverlayModel?: DroptargetOverlayModel;\n    disableDnd?: boolean;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n                rootOverlayModel: props.rootOverlayModel,\n                disableDnd: props.disableDnd,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableDnd: props.disableDnd,\n            });\n        }, [props.disableDnd]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onWillDrop((event) => {\n                if (props.onWillDrop) {\n                    props.onWillDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onWillDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                rootOverlayModel: props.rootOverlayModel,\n            });\n        }, [props.rootOverlayModel]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n    GridviewComponent,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                // TODO: fix casting hack\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters)\n                        .accessor as GridviewComponent\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import {\n    DockviewDefaultTab,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelHeaderProps,\n    IDockviewPanelProps,\n    IDockviewHeaderActionsProps,\n} from 'dockview';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { v4 } from 'uuid';\nimport './app.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    overflow: 'auto',\n                    color: 'white',\n                    position: 'relative',\n                }}\n            >\n                <span\n                    style={{\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%,-50%)',\n                        pointerEvents: 'none',\n                        fontSize: '42px',\n                        opacity: 0.5,\n                    }}\n                >\n                    {props.api.title}\n                </span>\n            </div>\n        );\n    },\n};\n\nconst headerComponents = {\n    default: (props: IDockviewPanelHeaderProps) => {\n        const onContextMenu = (event: React.MouseEvent) => {\n            event.preventDefault();\n            alert('context menu');\n        };\n        return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n    },\n};\n\nconst Icon = (props: {\n    icon: string;\n    title?: string;\n    onClick?: (event: React.MouseEvent) => void;\n}) => {\n    return (\n        <div title={props.title} className=\"action\" onClick={props.onClick}>\n            <span\n                style={{ fontSize: 'inherit' }}\n                className=\"material-symbols-outlined\"\n            >\n                {props.icon}\n            </span>\n        </div>\n    );\n};\n\nconst groupControlsComponents: Record<string, React.FC> = {\n    panel_1: () => {\n        return <Icon icon=\"file_download\" />;\n    },\n};\n\nconst RightControls = (props: IDockviewHeaderActionsProps) => {\n    const Component = React.useMemo(() => {\n        if (!props.isGroupActive || !props.activePanel) {\n            return null;\n        }\n\n        return groupControlsComponents[props.activePanel.id];\n    }, [props.isGroupActive, props.activePanel]);\n\n    const [isMaximized, setIsMaximized] = React.useState<boolean>(\n        props.containerApi.hasMaximizedGroup()\n    );\n\n    const [isPopout, setIsPopout] = React.useState<boolean>(\n        props.api.location.type === 'popout'\n    );\n\n    React.useEffect(() => {\n        const disposable = props.containerApi.onDidMaxmizedGroupChange(() => {\n            setIsMaximized(props.containerApi.hasMaximizedGroup());\n        });\n\n        const disposable2 = props.api.onDidLocationChange(() => {\n            setIsPopout(props.api.location.type === 'popout');\n        });\n\n        return () => {\n            disposable.dispose();\n            disposable2.dispose();\n        };\n    }, [props.containerApi]);\n\n    const onClick = () => {\n        if (props.containerApi.hasMaximizedGroup()) {\n            props.containerApi.exitMaxmizedGroup();\n        } else {\n            props.activePanel?.api.maximize();\n        }\n    };\n\n    const onClick2 = () => {\n        if (props.api.location !== 'popout') {\n            props.containerApi.addPopoutGroup(props.group);\n        } else {\n            props.api.moveTo({ position: 'right' });\n        }\n    };\n\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            {props.isGroupActive && <Icon icon=\"star\" />}\n            {Component && <Component />}\n            <Icon\n                title={isPopout ? 'Close Window' : 'Open In New Window'}\n                icon={isPopout ? 'close_fullscreen' : 'open_in_new'}\n                onClick={onClick2}\n            />\n            {!isPopout && (\n                <Icon\n                    title={isMaximized ? 'Minimize View' : 'Maximize View'}\n                    icon={isMaximized ? 'collapse_content' : 'expand_content'}\n                    onClick={onClick}\n                />\n            )}\n        </div>\n    );\n};\n\nlet counter = 0;\n\nconst LeftControls = (props: IDockviewHeaderActionsProps) => {\n    const onClick = () => {\n        props.containerApi.addPanel({\n            id: `id_${Date.now().toString()}`,\n            component: 'default',\n            title: `Tab ${counter++}`,\n            position: {\n                referenceGroup: props.group,\n            },\n        });\n    };\n\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            <Icon onClick={onClick} icon=\"add\" />\n        </div>\n    );\n};\n\nconst PrefixHeaderControls = (props: IDockviewHeaderActionsProps) => {\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            <Icon icon=\"Menu\" />\n        </div>\n    );\n};\n\nconst DockviewDemo = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        const panel1 = event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n            position: { referencePanel: panel1 },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n            position: { referencePanel: panel1 },\n        });\n\n        const panel4 = event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: panel1, direction: 'right' },\n        });\n\n        const panel5 = event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            title: 'Panel 5',\n            position: { referencePanel: panel4 },\n        });\n\n        const panel6 = event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            title: 'Panel 6',\n            position: { referencePanel: panel5, direction: 'below' },\n        });\n\n        const panel7 = event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            title: 'Panel 7',\n            position: { referencePanel: panel6, direction: 'left' },\n        });\n\n        event.api.addPanel({\n            id: 'panel8',\n            component: 'default',\n            title: 'Panel 8',\n            position: { referencePanel: panel7, direction: 'below' },\n        });\n\n        panel1.api.setActive();\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            defaultTabComponent={headerComponents.default}\n            rightHeaderActionsComponent={RightControls}\n            leftHeaderActionsComponent={LeftControls}\n            prefixHeaderActionsComponent={PrefixHeaderControls}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default DockviewDemo;\n","import {\n    IGridviewPanelProps,\n    Orientation,\n    GridviewReact,\n    GridviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleGridview = () => {\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            params: {\n                title: 'Panel 4',\n            },\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            params: {\n                title: 'Panel 5',\n            },\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            params: {\n                title: 'Panel 6',\n            },\n            position: { referencePanel: 'panel_5', direction: 'below' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_7',\n            component: 'default',\n            params: {\n                title: 'Panel 7',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n\n        event.api.addPanel({\n            id: 'panel_8',\n            component: 'default',\n            params: {\n                title: 'Panel 8',\n            },\n            position: { referencePanel: 'panel_6', direction: 'right' },\n            minimumWidth: 10,\n        });\n    };\n\n    return (\n        <GridviewReact\n            components={components}\n            onReady={onReady}\n            proportionalLayout={false}\n            orientation={Orientation.VERTICAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = {\n    myHeaderComponent: MyHeaderComponent,\n};\n\nexport const SimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = (props: { proportional?: boolean }) => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            minimumSize: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            minimumSize: 100,\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            proportionalLayout={props.proportional}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: {\n    id: string;\n    hideThemePicker?: boolean;\n}) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            {!props.hideThemePicker && <ThemePicker />}\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    rel='noopener'\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton\n                    id={sandboxId}\n                    hideThemePicker={props.hideThemePicker}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","\n\nexport const frontMatter = {\n\tsidebar_position: 0,\n\tdescription: 'A zero dependency layout manager supporting ReactJS and Vanilla TypeScript'\n};\nexport const contentTitle = 'Introduction';\nexport const metadata = {\n  \"id\": \"index\",\n  \"title\": \"Introduction\",\n  \"description\": \"A zero dependency layout manager supporting ReactJS and Vanilla TypeScript\",\n  \"source\": \"@site/versioned_docs/version-1.9.2/index.mdx\",\n  \"sourceDirName\": \".\",\n  \"slug\": \"/\",\n  \"permalink\": \"/docs/\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.9.2/index.mdx\",\n  \"tags\": [],\n  \"version\": \"1.9.2\",\n  \"sidebarPosition\": 0,\n  \"frontMatter\": {\n    \"sidebar_position\": 0,\n    \"description\": \"A zero dependency layout manager supporting ReactJS and Vanilla TypeScript\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"next\": {\n    \"title\": \"Theme\",\n    \"permalink\": \"/docs/theme\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {MultiFrameworkContainer} from '@site/src/components/ui/container';\nimport {SimpleSplitview} from '@site/src/components/simpleSplitview';\nimport {SimpleGridview} from '@site/src/components/simpleGridview';\nimport {SimplePaneview} from '@site/src/components/simplePaneview';\nimport DockviewDemo from '@site/sandboxes/demo-dockview/src/app';\nimport Link from '@docusaurus/Link';\nexport const toc = [{\n  \"value\": \"Quick start\",\n  \"id\": \"quick-start\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"introduction\",\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"dockview\"\n      }), \" is a zero dependency layout manager that supports tab, grids and splitviews.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"quick-start\",\n      children: \"Quick start\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"dockview\"\n      }), \" has a peer dependency on \", _jsx(_components.code, {\n        children: \"react >= 16.8.0\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"react-dom >= 16.8.0\"\n      }), \". To install \", _jsx(_components.code, {\n        children: \"dockview\"\n      }), \" you can run:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"npm install dockview\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You must also import the dockview stylesheet found under \", _jsx(_components.a, {\n        href: \"https://unpkg.com/browse/dockview@latest/dist/styles/dockview.css\",\n        children: _jsx(_components.code, {\n          children: \"dockview/dict/styles/dockview.css\"\n        })\n      }), \",\\ndepending on your solution this might be:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \"@import './node_modules/dockview/dist/styles/dockview.css';\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are 4 components you may want to use:\"\n    }), \"\\n\", _jsx(Link, {\n      to: \"./components/dockview\",\n      children: _jsx(\"h2\", {\n        children: \"Dockview\"\n      })\n    }), \"\\n\", _jsx(MultiFrameworkContainer, {\n      height: 500,\n      sandboxId: \"demo-dockview\",\n      react: DockviewDemo\n    }), \"\\n\", _jsx(Link, {\n      to: \"./components/splitview\",\n      children: _jsx(\"h2\", {\n        children: \"Splitview\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      style: {\n        height: '100px',\n        backgroundColor: 'rgb(30,30,30)',\n        color: 'white',\n        margin: '20px 0px'\n      },\n      children: _jsx(SimpleSplitview, {})\n    }), \"\\n\", _jsx(Link, {\n      to: \"./components/gridview\",\n      children: _jsx(\"h2\", {\n        children: \"Gridview\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      style: {\n        height: '300px',\n        backgroundColor: 'rgb(30,30,30)',\n        color: 'white',\n        margin: '20px 0px'\n      },\n      children: _jsx(SimpleGridview, {})\n    }), \"\\n\", _jsx(Link, {\n      to: \"./components/paneview\",\n      children: _jsx(\"h2\", {\n        children: \"Paneview\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      style: {\n        height: '300px',\n        backgroundColor: 'rgb(30,30,30)',\n        color: 'white',\n        margin: '20px 0px'\n      },\n      children: _jsx(SimplePaneview, {})\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} props\n *   Props.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(props) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (props.disableParentContext) {\n    allComponents =\n      typeof props.components === 'function'\n        ? props.components(emptyComponents)\n        : props.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(props.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    props.children\n  )\n}\n"],"names":["BrowserOnly","_ref","children","fallback","useIsBrowser","_jsx","_Fragment","TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","Array","_key","listener","disposables","map","child","dispose","forEach","d","DockviewEvent","_defaultPrevented","defaultPrevented","preventDefault","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","from","func","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","width","height","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","array","findIndex","t","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","contentSize","_contentSize","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","total","proportion","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","_onDidVisibilityChange","onDidVisibilityChange","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","wereAllChildrenHidden","areAllChildrenHidden","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","maximizedView","_maximizedNode","leaf","hasMaximizedView","maximizeView","getNode","exitMaximizedView","hiddenOnMaximize","hideAllViewsBut","parent","exclude","_onDidMaxmizedNodeChange","showViewsInReverseOrder","includes","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","_getViews","nodeCachedVisibleSize","path","n","l","onDidMaxmizedNodeChange","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDrop","onWillShowOverlay","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","maximizeGroup","hasMaximizedGroup","exitMaxmizedGroup","exitMaximizedGroup","onDidMaxmizedGroupChange","addPopoutGroup","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","onDragOver","onDragLeave","onDragEnd","onDrop","WillShowOverlayEvent","nativeEvent","directionToPosition","positionToDirection","DEFAULT_ACTIVATION_SIZE","DEFAULT_SIZE","Droptarget","_state","_onDrop","_onWillShowOverlay","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","y","quadrant","calculateQuadrant","isAlreadyUsed","willShowOverlayEvent","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","stopPropagation","setTargetZones","setOverlayModel","model","overlayModel","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","sizeOptions","_b","translate","transform","overlayType","activationSizeOptions","activationSize","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","show","display","hide","renderPanel","asActive","doRender","isPanelActive","content","renderer","overlayRenderContainer","detatch","attach","referenceContainer","focusTracker","openPanel","_width","_height","closePanel","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","setActive","isActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","dropTraget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","kind","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewDidDropEvent","DockviewWillDropEvent","_kind","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_location","groupPanel","_onDidLocationChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onWillDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","_api","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","updateActions","isGroupActive","_d","_c","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","willDropEvent","getKind","itemId","Resizable","disableResizing","_disableResizing","entry","offsetParent","currentElement","DocumentFragment","host","isInDocument","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","isMaximizedGroup","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","isHidden","_isHidden","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onDidHiddenChange","onDidHiddenChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","setHidden","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","NOT_INITIALIZED_MESSAGE","DockviewGroupPanelApiImpl","_group","onDidLocationChange","getWindow","moveTo","moveGroupOrPanel","maximize","isMaximized","exitMaximized","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","groupEventsDisposable","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DEFAULT_FLOATING_GROUP_POSITION","OverlayRenderContainer","destroy","createFocusableElement","focusContainer","box2","visibilityChanged","PopoutWindow","_window","_onWillClose","onWillClose","_onDidClose","onDidClose","dimensions","screenX","screenY","innerWidth","innerHeight","open","url","features","entries","join","externalWindow","createPopoutWindowContainer","onDidOpen","Promise","resolve","externalDocument","styleSheetList","styleSheets","styleSheet","href","link","rel","head","cssTexts","cssRules","rule","cssText","err","createTextNode","addStyles","DEFAULT_ROOT_OVERLAY_MODEL","DockviewComponent","flatMap","_options","defaultRenderer","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","_floatingGroups","_popoutGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","_rootDropTarget","rootOverlayModel","orthogonalize","theme","toClassList","list","cls","startsWith","getDockviewTheme","moveGroupWithoutDestroying","getNextGroupId","popoutUrl","popoutWindowDisposable","then","popoutContainer","referenceGroup","createGroup","popoutGroup","removedGroup","catch","error","removeEmptyGroup","skipRemoveGroup","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","_f","_e","minimumHeightWithinViewport","querySelector","floatingGroupPanel","createGroupAtLocation","changed_orientation","changed_floatingGroupBounds","changed_rootOverlayOptions","floating","includePanel","doSetGroupAndPanelActive","collection","floats","popoutGroups","grid","floatingGroups","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","serializedPopoutGroups","serializedPopoutGroup","floatingGroup","hasActiveGroup","hasActivePanel","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","selectedGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","selectedFloatingGroup","selectedPopoutGroup","GridviewComponent","_onDidLayoutfromJSON","hasOrientationChanged","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","default","opacity","onContextMenu","alert","Icon","icon","groupControlsComponents","panel_1","RightControls","setIsMaximized","isPopout","setIsPopout","disposable2","_jsxs","alignItems","onClick2","counter","LeftControls","PrefixHeaderControls","panel1","panel4","panel5","panel6","panel7","SimpleGridview","myHeaderComponent","SimplePaneview","SimpleSplitview","proportional","CodeSandboxButton","hideThemePicker","ThemePicker","fontWeight","paddingRight","Spinner","ReactIcon","marginRight","src","useBaseUrl","JavascriptIcon","themes","setTheme","localStorage","getItem","setItem","dispatchEvent","StorageEvent","onChange","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","sandboxId","background","zIndex","justifyContent","react","margin","cursor","border","MultiFrameworkContainer","frontMatter","sidebar_position","description","contentTitle","metadata","assets","toc","_createMdxContent","_components","a","code","h1","h2","pre","strong","MDXContent","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents","MDXProvider","allComponents","disableParentContext"],"sourceRoot":""}