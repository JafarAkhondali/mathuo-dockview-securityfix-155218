{"version":3,"file":"assets/js/2493.62beb79f.js","mappings":"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","sources":["webpack://dockview-docs/../../node_modules/@docusaurus/theme-common/src/hooks/usePrismTheme.ts","webpack://dockview-docs/../../node_modules/@docusaurus/theme-common/src/utils/codeBlockUtils.ts","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Container/styles.module.css","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Container/index.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Content/styles.module.css","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Content/Element.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-common/src/hooks/useMutationObserver.ts","webpack://dockview-docs/../../node_modules/@docusaurus/theme-common/src/hooks/useCodeWordWrap.ts","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Line/styles.module.css","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Line/index.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/Icon/Copy/index.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/Icon/Success/index.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/CopyButton/styles.module.css","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/CopyButton/index.js","webpack://dockview-docs/../../node_modules/copy-text-to-clipboard/index.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/Icon/WordWrap/index.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/WordWrapButton/styles.module.css","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/WordWrapButton/index.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Content/String.js","webpack://dockview-docs/../../node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js","webpack://dockview-docs/../../node_modules/parse-numeric-range/index.js","webpack://dockview-docs/../../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {useColorMode} from '../contexts/colorMode';\nimport {useThemeConfig} from '../utils/useThemeConfig';\nimport type {PrismTheme} from 'prism-react-renderer';\n\n/**\n * Returns a color-mode-dependent Prism theme: whatever the user specified in\n * the config. Falls back to `palenight`.\n */\nexport function usePrismTheme(): PrismTheme {\n  const {prism} = useThemeConfig();\n  const {colorMode} = useColorMode();\n  const lightModeTheme = prism.theme;\n  const darkModeTheme = prism.darkTheme || lightModeTheme;\n  const prismTheme = colorMode === 'dark' ? darkModeTheme : lightModeTheme;\n\n  return prismTheme;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport type {CSSProperties} from 'react';\nimport rangeParser from 'parse-numeric-range';\nimport type {PrismTheme, PrismThemeEntry} from 'prism-react-renderer';\n\nconst codeBlockTitleRegex = /title=(?<quote>[\"'])(?<title>.*?)\\1/;\nconst metastringLinesRangeRegex = /\\{(?<range>[\\d,-]+)\\}/;\n\n// Supported types of highlight comments\nconst commentPatterns = {\n  js: {start: '\\\\/\\\\/', end: ''},\n  jsBlock: {start: '\\\\/\\\\*', end: '\\\\*\\\\/'},\n  jsx: {start: '\\\\{\\\\s*\\\\/\\\\*', end: '\\\\*\\\\/\\\\s*\\\\}'},\n  bash: {start: '#', end: ''},\n  html: {start: '<!--', end: '-->'},\n  lua: {start: '--', end: ''},\n  wasm: {start: '\\\\;\\\\;', end: ''},\n  tex: {start: '%', end: ''},\n};\n\ntype CommentType = keyof typeof commentPatterns;\n\nexport type MagicCommentConfig = {\n  className: string;\n  line?: string;\n  block?: {start: string; end: string};\n};\n\nfunction getCommentPattern(\n  languages: CommentType[],\n  magicCommentDirectives: MagicCommentConfig[],\n) {\n  // To be more reliable, the opening and closing comment must match\n  const commentPattern = languages\n    .map((lang) => {\n      const {start, end} = commentPatterns[lang];\n      return `(?:${start}\\\\s*(${magicCommentDirectives\n        .flatMap((d) => [d.line, d.block?.start, d.block?.end].filter(Boolean))\n        .join('|')})\\\\s*${end})`;\n    })\n    .join('|');\n  // White space is allowed, but otherwise it should be on it's own line\n  return new RegExp(`^\\\\s*(?:${commentPattern})\\\\s*$`);\n}\n\n/**\n * Select comment styles based on language\n */\nfunction getAllMagicCommentDirectiveStyles(\n  lang: string,\n  magicCommentDirectives: MagicCommentConfig[],\n) {\n  switch (lang) {\n    case 'js':\n    case 'javascript':\n    case 'ts':\n    case 'typescript':\n      return getCommentPattern(['js', 'jsBlock'], magicCommentDirectives);\n\n    case 'jsx':\n    case 'tsx':\n      return getCommentPattern(\n        ['js', 'jsBlock', 'jsx'],\n        magicCommentDirectives,\n      );\n\n    case 'html':\n      return getCommentPattern(\n        ['js', 'jsBlock', 'html'],\n        magicCommentDirectives,\n      );\n\n    case 'python':\n    case 'py':\n    case 'bash':\n      return getCommentPattern(['bash'], magicCommentDirectives);\n\n    case 'markdown':\n    case 'md':\n      // Text uses HTML, front matter uses bash\n      return getCommentPattern(['html', 'jsx', 'bash'], magicCommentDirectives);\n\n    case 'tex':\n    case 'latex':\n    case 'matlab':\n      return getCommentPattern(['tex'], magicCommentDirectives);\n\n    case 'lua':\n    case 'haskell':\n    case 'sql':\n      return getCommentPattern(['lua'], magicCommentDirectives);\n\n    case 'wasm':\n      return getCommentPattern(['wasm'], magicCommentDirectives);\n\n    default:\n      // All comment types except lua, wasm and matlab\n      return getCommentPattern(\n        Object.keys(commentPatterns).filter(\n          (pattern) =>\n            !['lua', 'wasm', 'tex', 'latex', 'matlab'].includes(pattern),\n        ) as CommentType[],\n        magicCommentDirectives,\n      );\n  }\n}\n\nexport function parseCodeBlockTitle(metastring?: string): string {\n  return metastring?.match(codeBlockTitleRegex)?.groups!.title ?? '';\n}\n\nexport function containsLineNumbers(metastring?: string): boolean {\n  return Boolean(metastring?.includes('showLineNumbers'));\n}\n\n/**\n * Gets the language name from the class name (set by MDX).\n * e.g. `\"language-javascript\"` => `\"javascript\"`.\n * Returns undefined if there is no language class name.\n */\nexport function parseLanguage(className: string): string | undefined {\n  const languageClassName = className\n    .split(' ')\n    .find((str) => str.startsWith('language-'));\n  return languageClassName?.replace(/language-/, '');\n}\n\n/**\n * Parses the code content, strips away any magic comments, and returns the\n * clean content and the highlighted lines marked by the comments or metastring.\n *\n * If the metastring contains a range, the `content` will be returned as-is\n * without any parsing. The returned `lineClassNames` will be a map from that\n * number range to the first magic comment config entry (which _should_ be for\n * line highlight directives.)\n *\n * @param content The raw code with magic comments. Trailing newline will be\n * trimmed upfront.\n * @param options Options for parsing behavior.\n */\nexport function parseLines(\n  content: string,\n  options: {\n    /**\n     * The full metastring, as received from MDX. Line ranges declared here\n     * start at 1.\n     */\n    metastring: string | undefined;\n    /**\n     * Language of the code block, used to determine which kinds of magic\n     * comment styles to enable.\n     */\n    language: string | undefined;\n    /**\n     * Magic comment types that we should try to parse. Each entry would\n     * correspond to one class name to apply to each line.\n     */\n    magicComments: MagicCommentConfig[];\n  },\n): {\n  /**\n   * The highlighted lines, 0-indexed. e.g. `{ 0: [\"highlight\", \"sample\"] }`\n   * means the 1st line should have `highlight` and `sample` as class names.\n   */\n  lineClassNames: {[lineIndex: number]: string[]};\n  /**\n   * If there's number range declared in the metastring, the code block is\n   * returned as-is (no parsing); otherwise, this is the clean code with all\n   * magic comments stripped away.\n   */\n  code: string;\n} {\n  let code = content.replace(/\\n$/, '');\n  const {language, magicComments, metastring} = options;\n  // Highlighted lines specified in props: don't parse the content\n  if (metastring && metastringLinesRangeRegex.test(metastring)) {\n    const linesRange = metastring.match(metastringLinesRangeRegex)!.groups!\n      .range!;\n    if (magicComments.length === 0) {\n      throw new Error(\n        `A highlight range has been given in code block's metastring (\\`\\`\\` ${metastring}), but no magic comment config is available. Docusaurus applies the first magic comment entry's className for metastring ranges.`,\n      );\n    }\n    const metastringRangeClassName = magicComments[0]!.className;\n    const lines = rangeParser(linesRange)\n      .filter((n) => n > 0)\n      .map((n) => [n - 1, [metastringRangeClassName]] as [number, string[]]);\n    return {lineClassNames: Object.fromEntries(lines), code};\n  }\n  if (language === undefined) {\n    return {lineClassNames: {}, code};\n  }\n  const directiveRegex = getAllMagicCommentDirectiveStyles(\n    language,\n    magicComments,\n  );\n  // Go through line by line\n  const lines = code.split('\\n');\n  const blocks = Object.fromEntries(\n    magicComments.map((d) => [d.className, {start: 0, range: ''}]),\n  );\n  const lineToClassName: {[comment: string]: string} = Object.fromEntries(\n    magicComments\n      .filter((d) => d.line)\n      .map(({className, line}) => [line!, className] as [string, string]),\n  );\n  const blockStartToClassName: {[comment: string]: string} = Object.fromEntries(\n    magicComments\n      .filter((d) => d.block)\n      .map(({className, block}) => [block!.start, className]),\n  );\n  const blockEndToClassName: {[comment: string]: string} = Object.fromEntries(\n    magicComments\n      .filter((d) => d.block)\n      .map(({className, block}) => [block!.end, className]),\n  );\n  for (let lineNumber = 0; lineNumber < lines.length; ) {\n    const line = lines[lineNumber]!;\n    const match = line.match(directiveRegex);\n    if (!match) {\n      // Lines without directives are unchanged\n      lineNumber += 1;\n      continue;\n    }\n    const directive = match\n      .slice(1)\n      .find((item: string | undefined) => item !== undefined)!;\n    if (lineToClassName[directive]) {\n      blocks[lineToClassName[directive]!]!.range += `${lineNumber},`;\n    } else if (blockStartToClassName[directive]) {\n      blocks[blockStartToClassName[directive]!]!.start = lineNumber;\n    } else if (blockEndToClassName[directive]) {\n      blocks[blockEndToClassName[directive]!]!.range += `${\n        blocks[blockEndToClassName[directive]!]!.start\n      }-${lineNumber - 1},`;\n    }\n    lines.splice(lineNumber, 1);\n  }\n  code = lines.join('\\n');\n  const lineClassNames: {[lineIndex: number]: string[]} = {};\n  Object.entries(blocks).forEach(([className, {range}]) => {\n    rangeParser(range).forEach((l) => {\n      lineClassNames[l] ??= [];\n      lineClassNames[l]!.push(className);\n    });\n  });\n  return {lineClassNames, code};\n}\n\nexport function getPrismCssVariables(prismTheme: PrismTheme): CSSProperties {\n  const mapping: PrismThemeEntry = {\n    color: '--prism-color',\n    backgroundColor: '--prism-background-color',\n  };\n\n  const properties: {[key: string]: string} = {};\n  Object.entries(prismTheme.plain).forEach(([key, value]) => {\n    const varName = mapping[key as keyof PrismThemeEntry];\n    if (varName && typeof value === 'string') {\n      properties[varName] = value;\n    }\n  });\n  return properties;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"codeBlockContainer\":\"codeBlockContainer_ZGJx\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport clsx from 'clsx';\nimport {ThemeClassNames, usePrismTheme} from '@docusaurus/theme-common';\nimport {getPrismCssVariables} from '@docusaurus/theme-common/internal';\nimport styles from './styles.module.css';\nexport default function CodeBlockContainer({as: As, ...props}) {\n  const prismTheme = usePrismTheme();\n  const prismCssVariables = getPrismCssVariables(prismTheme);\n  return (\n    <As\n      // Polymorphic components are hard to type, without `oneOf` generics\n      {...props}\n      style={prismCssVariables}\n      className={clsx(\n        props.className,\n        styles.codeBlockContainer,\n        ThemeClassNames.common.codeBlock,\n      )}\n    />\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"codeBlockContent\":\"codeBlockContent_qZBB\",\"codeBlockTitle\":\"codeBlockTitle_zAEH\",\"codeBlock\":\"codeBlock_TAPP\",\"codeBlockStandalone\":\"codeBlockStandalone_K9VJ\",\"codeBlockLines\":\"codeBlockLines_AdAo\",\"codeBlockLinesWithNumbering\":\"codeBlockLinesWithNumbering_p5De\",\"buttonGroup\":\"buttonGroup_TNwR\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport clsx from 'clsx';\nimport Container from '@theme/CodeBlock/Container';\nimport styles from './styles.module.css';\n// <pre> tags in markdown map to CodeBlocks. They may contain JSX children. When\n// the children is not a simple string, we just return a styled block without\n// actually highlighting.\nexport default function CodeBlockJSX({children, className}) {\n  return (\n    <Container\n      as=\"pre\"\n      tabIndex={0}\n      className={clsx(styles.codeBlockStandalone, 'thin-scrollbar', className)}>\n      <code className={styles.codeBlockLines}>{children}</code>\n    </Container>\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport {useEffect} from 'react';\nimport {useEvent, useShallowMemoObject} from '../utils/reactUtils';\n\ntype Options = MutationObserverInit;\n\nconst DefaultOptions: Options = {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true,\n};\n\nexport function useMutationObserver(\n  target: Element | undefined | null,\n  callback: MutationCallback,\n  options: Options = DefaultOptions,\n): void {\n  const stableCallback = useEvent(callback);\n\n  // MutationObserver options are not nested much\n  // so this should be to memo options in 99%\n  // TODO handle options.attributeFilter array\n  const stableOptions: Options = useShallowMemoObject(options);\n\n  useEffect(() => {\n    const observer = new MutationObserver(stableCallback);\n    if (target) {\n      observer.observe(target, stableOptions);\n    }\n    return () => observer.disconnect();\n  }, [target, stableCallback, stableOptions]);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport type {RefObject} from 'react';\nimport {useState, useCallback, useEffect, useRef} from 'react';\nimport {useMutationObserver} from './useMutationObserver';\n\n// Callback fires when the \"hidden\" attribute of a tabpanel changes\n// See https://github.com/facebook/docusaurus/pull/7485\nfunction useTabBecameVisibleCallback(\n  codeBlockRef: RefObject<HTMLPreElement>,\n  callback: () => void,\n) {\n  const [hiddenTabElement, setHiddenTabElement] = useState<\n    Element | null | undefined\n  >();\n\n  const updateHiddenTabElement = useCallback(() => {\n    // No need to observe non-hidden tabs\n    // + we want to force a re-render when a tab becomes visible\n    setHiddenTabElement(\n      codeBlockRef.current?.closest('[role=tabpanel][hidden]'),\n    );\n  }, [codeBlockRef, setHiddenTabElement]);\n\n  useEffect(() => {\n    updateHiddenTabElement();\n  }, [updateHiddenTabElement]);\n\n  useMutationObserver(\n    hiddenTabElement,\n    (mutations: MutationRecord[]) => {\n      mutations.forEach((mutation) => {\n        if (\n          mutation.type === 'attributes' &&\n          mutation.attributeName === 'hidden'\n        ) {\n          callback();\n          updateHiddenTabElement();\n        }\n      });\n    },\n    {\n      attributes: true,\n      characterData: false,\n      childList: false,\n      subtree: false,\n    },\n  );\n}\n\nexport function useCodeWordWrap(): {\n  readonly codeBlockRef: RefObject<HTMLPreElement>;\n  readonly isEnabled: boolean;\n  readonly isCodeScrollable: boolean;\n  readonly toggle: () => void;\n} {\n  const [isEnabled, setIsEnabled] = useState(false);\n  const [isCodeScrollable, setIsCodeScrollable] = useState<boolean>(false);\n  const codeBlockRef = useRef<HTMLPreElement>(null);\n\n  const toggle = useCallback(() => {\n    const codeElement = codeBlockRef.current!.querySelector('code')!;\n\n    if (isEnabled) {\n      codeElement.removeAttribute('style');\n    } else {\n      codeElement.style.whiteSpace = 'pre-wrap';\n      // When code wrap is enabled, we want to avoid a scrollbar in any case\n      // Ensure that very very long words/strings/tokens still wrap\n      codeElement.style.overflowWrap = 'anywhere';\n    }\n\n    setIsEnabled((value) => !value);\n  }, [codeBlockRef, isEnabled]);\n\n  const updateCodeIsScrollable = useCallback(() => {\n    const {scrollWidth, clientWidth} = codeBlockRef.current!;\n    const isScrollable =\n      scrollWidth > clientWidth ||\n      codeBlockRef.current!.querySelector('code')!.hasAttribute('style');\n    setIsCodeScrollable(isScrollable);\n  }, [codeBlockRef]);\n\n  useTabBecameVisibleCallback(codeBlockRef, updateCodeIsScrollable);\n\n  useEffect(() => {\n    updateCodeIsScrollable();\n  }, [isEnabled, updateCodeIsScrollable]);\n\n  useEffect(() => {\n    window.addEventListener('resize', updateCodeIsScrollable, {\n      passive: true,\n    });\n\n    return () => {\n      window.removeEventListener('resize', updateCodeIsScrollable);\n    };\n  }, [updateCodeIsScrollable]);\n\n  return {codeBlockRef, isEnabled, isCodeScrollable, toggle};\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"codeLine\":\"codeLine_DPDv\",\"codeLineNumber\":\"codeLineNumber_YxQB\",\"codeLineContent\":\"codeLineContent_SOIp\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.module.css';\nexport default function CodeBlockLine({\n  line,\n  classNames,\n  showLineNumbers,\n  getLineProps,\n  getTokenProps,\n}) {\n  if (line.length === 1 && line[0].content === '\\n') {\n    line[0].content = '';\n  }\n  const lineProps = getLineProps({\n    line,\n    className: clsx(classNames, showLineNumbers && styles.codeLine),\n  });\n  const lineTokens = line.map((token, key) => (\n    <span key={key} {...getTokenProps({token, key})} />\n  ));\n  return (\n    <span {...lineProps}>\n      {showLineNumbers ? (\n        <>\n          <span className={styles.codeLineNumber} />\n          <span className={styles.codeLineContent}>{lineTokens}</span>\n        </>\n      ) : (\n        lineTokens\n      )}\n      <br />\n    </span>\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nexport default function IconCopy(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"\n      />\n    </svg>\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nexport default function IconSuccess(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"\n      />\n    </svg>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"copyButtonCopied\":\"copyButtonCopied_Mzdr\",\"copyButtonIcons\":\"copyButtonIcons_MVhB\",\"copyButtonIcon\":\"copyButtonIcon_yxgH\",\"copyButtonSuccessIcon\":\"copyButtonSuccessIcon_QJLJ\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, {useCallback, useState, useRef, useEffect} from 'react';\nimport clsx from 'clsx';\nimport copy from 'copy-text-to-clipboard';\nimport {translate} from '@docusaurus/Translate';\nimport IconCopy from '@theme/Icon/Copy';\nimport IconSuccess from '@theme/Icon/Success';\nimport styles from './styles.module.css';\nexport default function CopyButton({code, className}) {\n  const [isCopied, setIsCopied] = useState(false);\n  const copyTimeout = useRef(undefined);\n  const handleCopyCode = useCallback(() => {\n    copy(code);\n    setIsCopied(true);\n    copyTimeout.current = window.setTimeout(() => {\n      setIsCopied(false);\n    }, 1000);\n  }, [code]);\n  useEffect(() => () => window.clearTimeout(copyTimeout.current), []);\n  return (\n    <button\n      type=\"button\"\n      aria-label={\n        isCopied\n          ? translate({\n              id: 'theme.CodeBlock.copied',\n              message: 'Copied',\n              description: 'The copied button label on code blocks',\n            })\n          : translate({\n              id: 'theme.CodeBlock.copyButtonAriaLabel',\n              message: 'Copy code to clipboard',\n              description: 'The ARIA label for copy code blocks button',\n            })\n      }\n      title={translate({\n        id: 'theme.CodeBlock.copy',\n        message: 'Copy',\n        description: 'The copy button label on code blocks',\n      })}\n      className={clsx(\n        'clean-btn',\n        className,\n        styles.copyButton,\n        isCopied && styles.copyButtonCopied,\n      )}\n      onClick={handleCopyCode}>\n      <span className={styles.copyButtonIcons} aria-hidden=\"true\">\n        <IconCopy className={styles.copyButtonIcon} />\n        <IconSuccess className={styles.copyButtonSuccessIcon} />\n      </span>\n    </button>\n  );\n}\n","export default function copyTextToClipboard(text, {target = document.body} = {}) {\n\tif (typeof text !== 'string') {\n\t\tthrow new TypeError(`Expected parameter \\`text\\` to be a \\`string\\`, got \\`${typeof text}\\`.`);\n\t}\n\n\tconst element = document.createElement('textarea');\n\tconst previouslyFocusedElement = document.activeElement;\n\n\telement.value = text;\n\n\t// Prevent keyboard from showing on mobile\n\telement.setAttribute('readonly', '');\n\n\telement.style.contain = 'strict';\n\telement.style.position = 'absolute';\n\telement.style.left = '-9999px';\n\telement.style.fontSize = '12pt'; // Prevent zooming on iOS\n\n\tconst selection = document.getSelection();\n\tconst originalRange = selection.rangeCount > 0 && selection.getRangeAt(0);\n\n\ttarget.append(element);\n\telement.select();\n\n\t// Explicit selection workaround for iOS\n\telement.selectionStart = 0;\n\telement.selectionEnd = text.length;\n\n\tlet isSuccess = false;\n\ttry {\n\t\tisSuccess = document.execCommand('copy');\n\t} catch {}\n\n\telement.remove();\n\n\tif (originalRange) {\n\t\tselection.removeAllRanges();\n\t\tselection.addRange(originalRange);\n\t}\n\n\t// Get the focus back on the previously focused element, if any\n\tif (previouslyFocusedElement) {\n\t\tpreviouslyFocusedElement.focus();\n\t}\n\n\treturn isSuccess;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nexport default function IconWordWrap(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M4 19h6v-2H4v2zM20 5H4v2h16V5zm-3 6H4v2h13.25c1.1 0 2 .9 2 2s-.9 2-2 2H15v-2l-3 3l3 3v-2h2c2.21 0 4-1.79 4-4s-1.79-4-4-4z\"\n      />\n    </svg>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wordWrapButtonIcon\":\"wordWrapButtonIcon_SMj9\",\"wordWrapButtonEnabled\":\"wordWrapButtonEnabled_vR9E\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport clsx from 'clsx';\nimport {translate} from '@docusaurus/Translate';\nimport IconWordWrap from '@theme/Icon/WordWrap';\nimport styles from './styles.module.css';\nexport default function WordWrapButton({className, onClick, isEnabled}) {\n  const title = translate({\n    id: 'theme.CodeBlock.wordWrapToggle',\n    message: 'Toggle word wrap',\n    description:\n      'The title attribute for toggle word wrapping button of code block lines',\n  });\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className={clsx(\n        'clean-btn',\n        className,\n        isEnabled && styles.wordWrapButtonEnabled,\n      )}\n      aria-label={title}\n      title={title}>\n      <IconWordWrap className={styles.wordWrapButtonIcon} aria-hidden=\"true\" />\n    </button>\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport clsx from 'clsx';\nimport {useThemeConfig, usePrismTheme} from '@docusaurus/theme-common';\nimport {\n  parseCodeBlockTitle,\n  parseLanguage,\n  parseLines,\n  containsLineNumbers,\n  useCodeWordWrap,\n} from '@docusaurus/theme-common/internal';\nimport {Highlight} from 'prism-react-renderer';\nimport Line from '@theme/CodeBlock/Line';\nimport CopyButton from '@theme/CodeBlock/CopyButton';\nimport WordWrapButton from '@theme/CodeBlock/WordWrapButton';\nimport Container from '@theme/CodeBlock/Container';\nimport styles from './styles.module.css';\n// Prism languages are always lowercase\n// We want to fail-safe and allow both \"php\" and \"PHP\"\n// See https://github.com/facebook/docusaurus/issues/9012\nfunction normalizeLanguage(language) {\n  return language?.toLowerCase();\n}\nexport default function CodeBlockString({\n  children,\n  className: blockClassName = '',\n  metastring,\n  title: titleProp,\n  showLineNumbers: showLineNumbersProp,\n  language: languageProp,\n}) {\n  const {\n    prism: {defaultLanguage, magicComments},\n  } = useThemeConfig();\n  const language = normalizeLanguage(\n    languageProp ?? parseLanguage(blockClassName) ?? defaultLanguage,\n  );\n  const prismTheme = usePrismTheme();\n  const wordWrap = useCodeWordWrap();\n  // We still parse the metastring in case we want to support more syntax in the\n  // future. Note that MDX doesn't strip quotes when parsing metastring:\n  // \"title=\\\"xyz\\\"\" => title: \"\\\"xyz\\\"\"\n  const title = parseCodeBlockTitle(metastring) || titleProp;\n  const {lineClassNames, code} = parseLines(children, {\n    metastring,\n    language,\n    magicComments,\n  });\n  const showLineNumbers =\n    showLineNumbersProp ?? containsLineNumbers(metastring);\n  return (\n    <Container\n      as=\"div\"\n      className={clsx(\n        blockClassName,\n        language &&\n          !blockClassName.includes(`language-${language}`) &&\n          `language-${language}`,\n      )}>\n      {title && <div className={styles.codeBlockTitle}>{title}</div>}\n      <div className={styles.codeBlockContent}>\n        <Highlight theme={prismTheme} code={code} language={language ?? 'text'}>\n          {({className, style, tokens, getLineProps, getTokenProps}) => (\n            <pre\n              /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */\n              tabIndex={0}\n              ref={wordWrap.codeBlockRef}\n              className={clsx(className, styles.codeBlock, 'thin-scrollbar')}\n              style={style}>\n              <code\n                className={clsx(\n                  styles.codeBlockLines,\n                  showLineNumbers && styles.codeBlockLinesWithNumbering,\n                )}>\n                {tokens.map((line, i) => (\n                  <Line\n                    key={i}\n                    line={line}\n                    getLineProps={getLineProps}\n                    getTokenProps={getTokenProps}\n                    classNames={lineClassNames[i]}\n                    showLineNumbers={showLineNumbers}\n                  />\n                ))}\n              </code>\n            </pre>\n          )}\n        </Highlight>\n        <div className={styles.buttonGroup}>\n          {(wordWrap.isEnabled || wordWrap.isCodeScrollable) && (\n            <WordWrapButton\n              className={styles.codeButton}\n              onClick={() => wordWrap.toggle()}\n              isEnabled={wordWrap.isEnabled}\n            />\n          )}\n          <CopyButton className={styles.codeButton} code={code} />\n        </div>\n      </div>\n    </Container>\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, {isValidElement} from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\nimport ElementContent from '@theme/CodeBlock/Content/Element';\nimport StringContent from '@theme/CodeBlock/Content/String';\n/**\n * Best attempt to make the children a plain string so it is copyable. If there\n * are react elements, we will not be able to copy the content, and it will\n * return `children` as-is; otherwise, it concatenates the string children\n * together.\n */\nfunction maybeStringifyChildren(children) {\n  if (React.Children.toArray(children).some((el) => isValidElement(el))) {\n    return children;\n  }\n  // The children is now guaranteed to be one/more plain strings\n  return Array.isArray(children) ? children.join('') : children;\n}\nexport default function CodeBlock({children: rawChildren, ...props}) {\n  // The Prism theme on SSR is always the default theme but the site theme can\n  // be in a different mode. React hydration doesn't update DOM styles that come\n  // from SSR. Hence force a re-render after mounting to apply the current\n  // relevant styles.\n  const isBrowser = useIsBrowser();\n  const children = maybeStringifyChildren(rawChildren);\n  const CodeBlockComp =\n    typeof children === 'string' ? StringContent : ElementContent;\n  return (\n    <CodeBlockComp key={String(isBrowser)} {...props}>\n      {children}\n    </CodeBlockComp>\n  );\n}\n","/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n\n  for (let str of string.split(\",\").map((str) => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (\n      (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/))\n    ) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n      let [_, lhs, sep, rhs] = m;\n\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right 'stop-point' away by one.\n        if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n\n  return res;\n}\n\nexports.default = parsePart;\nmodule.exports = parsePart;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} props\n *   Props.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(props) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (props.disableParentContext) {\n    allComponents =\n      typeof props.components === 'function'\n        ? props.components(emptyComponents)\n        : props.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(props.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    props.children\n  )\n}\n"],"names":["usePrismTheme","prism","useThemeConfig","colorMode","useColorMode","lightModeTheme","theme","darkModeTheme","darkTheme","codeBlockTitleRegex","metastringLinesRangeRegex","commentPatterns","js","start","end","jsBlock","jsx","bash","html","lua","wasm","tex","getCommentPattern","languages","magicCommentDirectives","commentPattern","map","lang","flatMap","d","line","block","filter","Boolean","join","RegExp","parseLines","content","options","code","replace","language","magicComments","metastring","test","linesRange","match","groups","range","length","Error","metastringRangeClassName","className","lines","rangeParser","n","lineClassNames","Object","fromEntries","undefined","directiveRegex","keys","pattern","includes","getAllMagicCommentDirectiveStyles","split","blocks","lineToClassName","_ref","blockStartToClassName","_ref2","blockEndToClassName","_ref3","lineNumber","directive","slice","find","item","splice","entries","forEach","_ref4","l","push","CodeBlockContainer","as","As","props","prismCssVariables","prismTheme","mapping","color","backgroundColor","properties","plain","_ref5","key","value","varName","getPrismCssVariables","_jsx","style","clsx","styles","codeBlockContainer","ThemeClassNames","common","codeBlock","CodeBlockJSX","children","Container","tabIndex","codeBlockStandalone","codeBlockLines","DefaultOptions","attributes","characterData","childList","subtree","useTabBecameVisibleCallback","codeBlockRef","callback","hiddenTabElement","setHiddenTabElement","useState","updateHiddenTabElement","useCallback","current","closest","useEffect","target","stableCallback","useEvent","stableOptions","useShallowMemoObject","observer","MutationObserver","observe","disconnect","useMutationObserver","mutations","mutation","type","attributeName","CodeBlockLine","classNames","showLineNumbers","getLineProps","getTokenProps","lineProps","codeLine","lineTokens","token","_jsxs","_Fragment","codeLineNumber","codeLineContent","IconCopy","viewBox","fill","IconSuccess","CopyButton","isCopied","setIsCopied","copyTimeout","useRef","handleCopyCode","text","_temp","document","body","TypeError","element","createElement","previouslyFocusedElement","activeElement","setAttribute","contain","position","left","fontSize","selection","getSelection","originalRange","rangeCount","getRangeAt","append","select","selectionStart","selectionEnd","isSuccess","execCommand","remove","removeAllRanges","addRange","focus","copy","window","setTimeout","clearTimeout","translate","id","message","description","title","copyButton","copyButtonCopied","onClick","copyButtonIcons","copyButtonIcon","copyButtonSuccessIcon","IconWordWrap","WordWrapButton","isEnabled","wordWrapButtonEnabled","wordWrapButtonIcon","CodeBlockString","blockClassName","titleProp","showLineNumbersProp","languageProp","defaultLanguage","toLowerCase","normalizeLanguage","languageClassName","str","startsWith","parseLanguage","wordWrap","setIsEnabled","isCodeScrollable","setIsCodeScrollable","toggle","codeElement","querySelector","removeAttribute","whiteSpace","overflowWrap","updateCodeIsScrollable","scrollWidth","clientWidth","isScrollable","hasAttribute","addEventListener","passive","removeEventListener","useCodeWordWrap","parseCodeBlockTitle","containsLineNumbers","codeBlockTitle","codeBlockContent","Highlight","tokens","ref","codeBlockLinesWithNumbering","i","Line","buttonGroup","codeButton","CodeBlock","rawChildren","isBrowser","useIsBrowser","React","toArray","some","el","isValidElement","Array","isArray","maybeStringifyChildren","CodeBlockComp","StringContent","ElementContent","String","parsePart","string","m","res","trim","parseInt","_","lhs","sep","rhs","incr","exports","module","emptyComponents","MDXContext","useMDXComponents","components","contextComponents","MDXProvider","allComponents","disableParentContext","Provider"],"sourceRoot":""}