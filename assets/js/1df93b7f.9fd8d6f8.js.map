{"version":3,"file":"assets/js/1df93b7f.9fd8d6f8.js","mappings":"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","sources":["webpack://dockview-docs/./static/img/dockview_grid_3.svg","webpack://dockview-docs/./static/img/dockview_grid_4.svg","webpack://dockview-docs/./static/img/dockview_splash_2.svg","webpack://dockview-docs/../../node_modules/@docusaurus/core/lib/client/exports/BrowserOnly.js","webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/greadyRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./src/components/HomepageFeatures/styles.module.css","webpack://dockview-docs/./src/components/HomepageFeatures/index.tsx","webpack://dockview-docs/./src/components/ui/browserHeader.tsx","webpack://dockview-docs/../../node_modules/uuid/dist/esm-browser/native.js","webpack://dockview-docs/../../node_modules/uuid/dist/esm-browser/rng.js","webpack://dockview-docs/../../node_modules/uuid/dist/esm-browser/stringify.js","webpack://dockview-docs/../../node_modules/uuid/dist/esm-browser/v4.js","webpack://dockview-docs/./sandboxes/demo-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/dockview-app/src/app.tsx","webpack://dockview-docs/./src/components/HomepageFeatures/introduction.tsx","webpack://dockview-docs/./src/pages/index.module.css","webpack://dockview-docs/./src/pages/index.tsx"],"sourcesContent":["var _rect, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _rect10, _rect11, _rect12, _rect13, _rect14, _rect15, _rect16, _path18, _path19, _path20, _path21, _path22, _path23, _rect17, _rect18, _path24, _path25, _path26, _path27, _rect19, _rect20, _path28, _path29;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewGrid3 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 311.504,\n    height: 200,\n    rx: 5,\n    fill: \"#fff\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#A8A8A8\",\n    d: \"M0 11h156v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M156 11h156v91H156zM234 102h78v98h-78zM156 102h78v98h-78zM0 24h156v176H0z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M157 102h155v1H157zM157 11h-1v189h1zM234 103h-1v97h1v-97Z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h156v14H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M0 11h30v14H0zM31 11h30v14H31z\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M62 11h30v14H62z\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M30 11h1v14h-1zM61 11h1v14h-1zM92 11h1v14h-1z\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M157 11h155v14H157z\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M157 11h30v14h-30z\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M188 11h30v14h-30z\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M187 11h1v14h-1zM218 11h1v14h-1z\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M234 103h78v14h-78z\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M234 103h24v14h-24z\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M258 103h24v14h-24z\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M258 103h.503v14H258zM282 103h.503v14H282z\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 66,\n    y: 16,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 76,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 260,\n    y: 108,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 268,\n    y: 108,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 206,\n    y: 16,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 160,\n    y: 16,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 166,\n    y: 16,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 237,\n    y: 108,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 33,\n    y: 16,\n    width: 15,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 2,\n    y: 16,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 16,\n    width: 18,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#E1E1E1\",\n    fillOpacity: 0.25,\n    d: \"M297 11h15v189h-15z\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M90.5 18.5h48v13h-48z\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M140.344 22.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M139.5 23.5h4v2h-4z\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M97.33 23.09h.421l.989 2.416h.034l.989-2.415h.42V26h-.33v-2.21h-.028L98.916 26h-.318l-.91-2.21h-.028V26h-.33v-2.91Zm4.889 2.018v-1.29h.335V26h-.335v-.37h-.023a.713.713 0 0 1-.238.283.692.692 0 0 1-.41.115.727.727 0 0 1-.363-.09.623.623 0 0 1-.25-.272 1.03 1.03 0 0 1-.091-.462v-1.386h.335v1.364c0 .159.045.286.134.38.09.095.204.142.343.142a.571.571 0 0 0 .563-.596Zm1.284-2.017V26h-.335v-2.91h.335Zm1.563.727v.284h-1.13v-.284h1.13Zm-.801-.523h.335v2.08c0 .095.014.166.042.213a.212.212 0 0 0 .107.094.438.438 0 0 0 .141.023.598.598 0 0 0 .091-.006l.057-.012.068.302a.7.7 0 0 1-.528-.021.556.556 0 0 1-.225-.187.532.532 0 0 1-.088-.315v-2.17ZM105.57 26v-2.182h.336V26h-.336Zm.171-2.546a.238.238 0 0 1-.169-.066.216.216 0 0 1-.07-.16c0-.063.024-.117.07-.161a.238.238 0 0 1 .169-.067c.065 0 .121.022.168.067a.214.214 0 0 1 .071.16.214.214 0 0 1-.071.16.236.236 0 0 1-.168.067Zm.779 3.364v-3h.324v.347h.039c.025-.038.059-.086.103-.145a.596.596 0 0 1 .19-.16.683.683 0 0 1 .338-.07c.184 0 .346.046.486.138a.92.92 0 0 1 .328.39c.079.169.118.368.118.597 0 .23-.039.431-.118.6a.935.935 0 0 1-.327.393.852.852 0 0 1-.481.137.7.7 0 0 1-.337-.07.636.636 0 0 1-.195-.16c-.045-.06-.08-.11-.105-.15h-.028v1.153h-.335Zm.329-1.909c0 .165.024.31.073.436a.661.661 0 0 0 .211.294.55.55 0 0 0 .341.105.55.55 0 0 0 .351-.11.672.672 0 0 0 .213-.302c.048-.127.073-.268.073-.423 0-.153-.024-.292-.071-.415a.644.644 0 0 0-.212-.294.56.56 0 0 0-.354-.11.556.556 0 0 0-.343.105.627.627 0 0 0-.211.287 1.187 1.187 0 0 0-.071.427Zm2.443-1.818V26h-.335v-2.91h.335Zm1.529 2.954c-.21 0-.391-.046-.544-.139a.942.942 0 0 1-.351-.392 1.343 1.343 0 0 1-.122-.588c0-.223.041-.42.122-.59a.967.967 0 0 1 .344-.401.924.924 0 0 1 .517-.145c.114 0 .226.019.337.057.111.037.211.099.302.184a.884.884 0 0 1 .218.335c.054.14.081.311.081.515v.142h-1.682v-.29h1.341a.718.718 0 0 0-.074-.33.556.556 0 0 0-.523-.312.6.6 0 0 0-.346.1.65.65 0 0 0-.223.255.74.74 0 0 0-.079.338v.193c0 .165.029.305.086.42.057.113.137.2.24.26a.701.701 0 0 0 .356.087.728.728 0 0 0 .239-.037.511.511 0 0 0 .186-.113.526.526 0 0 0 .121-.19l.324.09a.734.734 0 0 1-.172.29.84.84 0 0 1-.299.193 1.104 1.104 0 0 1-.399.069Zm2.539.773v-3h.323v.347h.04a3.76 3.76 0 0 1 .102-.145.6.6 0 0 1 .191-.16.683.683 0 0 1 .338-.07c.184 0 .346.046.486.138a.92.92 0 0 1 .328.39c.078.169.118.368.118.597 0 .23-.04.431-.118.6a.935.935 0 0 1-.327.393.854.854 0 0 1-.481.137.697.697 0 0 1-.337-.07.636.636 0 0 1-.195-.16c-.045-.06-.08-.11-.105-.15h-.028v1.153h-.335Zm.329-1.909c0 .165.024.31.073.436a.653.653 0 0 0 .211.294.55.55 0 0 0 .341.105.55.55 0 0 0 .351-.11.672.672 0 0 0 .213-.302c.048-.127.072-.268.072-.423 0-.153-.023-.292-.071-.415a.642.642 0 0 0-.211-.294.56.56 0 0 0-.354-.11.561.561 0 0 0-.344.105.625.625 0 0 0-.21.287 1.187 1.187 0 0 0-.071.427Zm2.75 1.142a.883.883 0 0 1-.376-.078.643.643 0 0 1-.269-.229.647.647 0 0 1-.099-.363c0-.125.024-.227.074-.304a.522.522 0 0 1 .197-.185c.082-.044.173-.078.273-.1.1-.022.201-.04.302-.053.133-.017.24-.03.323-.039a.5.5 0 0 0 .182-.047c.038-.021.058-.06.058-.113v-.012a.444.444 0 0 0-.115-.326c-.076-.078-.191-.117-.345-.117a.605.605 0 0 0-.377.105.622.622 0 0 0-.192.225l-.318-.114a.764.764 0 0 1 .228-.31.843.843 0 0 1 .312-.156c.114-.03.225-.045.335-.045.07 0 .151.008.242.025.092.016.18.05.265.101a.59.59 0 0 1 .215.232.86.86 0 0 1 .085.415V26h-.335v-.296h-.017a.653.653 0 0 1-.325.29.82.82 0 0 1-.323.057Zm.051-.301a.66.66 0 0 0 .335-.078.537.537 0 0 0 .279-.462v-.307c-.014.018-.046.033-.094.047a1.55 1.55 0 0 1-.165.036 6.889 6.889 0 0 1-.321.042c-.087.012-.168.03-.244.056a.424.424 0 0 0-.182.112.288.288 0 0 0-.068.202.3.3 0 0 0 .129.264.581.581 0 0 0 .331.088Zm1.896-1.063V26h-.335v-2.182h.324v.341h.028c.051-.11.129-.2.233-.267a.726.726 0 0 1 .404-.102c.147 0 .277.03.387.09.111.06.197.151.259.273.061.122.092.275.092.46V26h-.335v-1.364c0-.171-.045-.305-.134-.4a.473.473 0 0 0-.366-.145.585.585 0 0 0-.287.07.497.497 0 0 0-.197.203.663.663 0 0 0-.073.323Zm2.92 1.358c-.211 0-.392-.046-.544-.139a.929.929 0 0 1-.351-.392 1.33 1.33 0 0 1-.122-.588c0-.223.04-.42.122-.59a.964.964 0 0 1 .343-.401.926.926 0 0 1 .517-.145c.114 0 .226.019.337.057a.835.835 0 0 1 .52.52c.054.139.081.31.081.514v.142h-1.682v-.29h1.341a.718.718 0 0 0-.074-.33.554.554 0 0 0-.523-.312.6.6 0 0 0-.346.1.65.65 0 0 0-.223.255.752.752 0 0 0-.078.338v.193c0 .165.028.305.085.42.058.113.138.2.24.26a.702.702 0 0 0 .357.087.722.722 0 0 0 .238-.037.511.511 0 0 0 .186-.113.513.513 0 0 0 .121-.19l.324.09a.711.711 0 0 1-.172.29.835.835 0 0 1-.298.193 1.112 1.112 0 0 1-.399.069Zm1.748-2.954V26h-.335v-2.91h.335Zm2.16 1.216-.302.085a.53.53 0 0 0-.083-.146.413.413 0 0 0-.148-.12.54.54 0 0 0-.24-.047.572.572 0 0 0-.334.093c-.088.06-.132.138-.132.231 0 .084.03.15.091.198.06.048.155.088.284.12l.324.08c.195.048.34.12.436.218a.507.507 0 0 1 .143.373.554.554 0 0 1-.108.335.713.713 0 0 1-.298.233 1.089 1.089 0 0 1-.446.085.978.978 0 0 1-.552-.144.639.639 0 0 1-.277-.424l.318-.08c.03.118.087.206.172.265a.575.575 0 0 0 .333.088.625.625 0 0 0 .373-.1c.092-.067.139-.147.139-.24a.254.254 0 0 0-.08-.191.505.505 0 0 0-.244-.117l-.364-.085c-.2-.047-.346-.12-.44-.22a.532.532 0 0 1-.139-.377.54.54 0 0 1 .103-.326.716.716 0 0 1 .286-.223c.121-.054.258-.081.412-.081.216 0 .385.047.508.142.124.095.213.22.265.375Zm1.788.239c0-.358.047-.688.14-.988.093-.3.227-.578.4-.83h.296a1.75 1.75 0 0 0-.192.346 4.068 4.068 0 0 0-.26.956 3.627 3.627 0 0 0 .028 1.201c.044.232.103.448.176.647.074.199.157.36.248.486h-.296a3.068 3.068 0 0 1-.4-.83 3.337 3.337 0 0 1-.14-.988Zm2.307 1.494c-.187 0-.354-.032-.501-.097a.857.857 0 0 1-.348-.268.719.719 0 0 1-.139-.402h.358c.007.093.04.174.096.243.057.067.132.119.223.156a.815.815 0 0 0 .306.055.796.796 0 0 0 .332-.065.536.536 0 0 0 .227-.182.455.455 0 0 0 .083-.27.507.507 0 0 0-.313-.476.903.903 0 0 0-.375-.07h-.233v-.312h.233c.116 0 .217-.02.304-.062a.474.474 0 0 0 .282-.443.488.488 0 0 0-.066-.258.446.446 0 0 0-.184-.17.602.602 0 0 0-.279-.061c-.1 0-.195.018-.284.055a.53.53 0 0 0-.216.158.412.412 0 0 0-.091.247h-.341a.696.696 0 0 1 .138-.4.868.868 0 0 1 .338-.27c.14-.065.294-.097.462-.097.18 0 .334.037.463.11a.748.748 0 0 1 .4.669.653.653 0 0 1-.477.66v.021c.184.03.327.109.431.235.103.125.154.28.154.464 0 .158-.043.3-.129.426a.88.88 0 0 1-.349.296 1.139 1.139 0 0 1-.505.108Zm2.286-1.494c0 .357-.047.687-.141.988-.092.3-.225.577-.399.83h-.295a1.8 1.8 0 0 0 .19-.347c.06-.136.112-.286.156-.449a4.123 4.123 0 0 0 .142-1.023c0-.225-.021-.454-.065-.686a3.876 3.876 0 0 0-.176-.646 2.031 2.031 0 0 0-.247-.486h.295c.174.253.307.53.399.831.094.3.141.63.141.988Z\",\n    fill: \"#fff\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M279.5 46.5h29v13h-29z\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 283,\n    y: 51,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 294,\n    y: 51,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M305.344 61.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M304.5 62.5h4v2h-4z\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#E1E1E1\",\n    fillOpacity: 0.25,\n    d: \"M157 153h76v47h-76z\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M180.5 163.5h29v13h-29z\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 184,\n    y: 168,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 195,\n    y: 168,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M194.344 176.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M193.5 177.5h4v2h-4z\"\n  })));\n};\nexport default SvgDockviewGrid3;","var _rect, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _path19, _rect10, _rect11, _rect12, _rect13, _rect14, _path20, _circle, _circle2, _circle3, _path21, _circle4, _circle5, _circle6, _path22, _rect15, _rect16, _path23, _circle7, _circle8, _circle9, _path24, _rect17, _path25, _g, _path26, _path27, _path28, _path29, _path30, _path31, _rect18, _rect19, _rect20, _rect21, _path32, _path33, _path34;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewGrid4 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 311.504,\n    height: 200,\n    rx: 5,\n    fill: \"#fff\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#A8A8A8\",\n    d: \"M0 11h156v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M188 11h124v91H188zM188 102h124v98H188zM0 24h187v176H0z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M188 102h124v1H188zM188 11h-1v189h1z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h187v14H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M0 11h35.962v14H0zM37.16 11h35.962v14H37.16z\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M74.32 11h35.962v14H74.32z\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M35.962 11h1.199v14h-1.199zM73.122 11h1.199v14h-1.199zM110.282 11h1.199v14h-1.199z\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M188 11h124v14H188z\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M188 11h30v14h-30z\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M219 11h30v14h-30z\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M218 11h1v14h-1zM249 11h1v14h-1z\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M188 103h124v14H188z\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M188 103h24v14h-24z\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M212 103h24v14h-24z\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M212 103h.503v14H212zM236 103h.503v14H236z\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M76 18a2 2 0 0 1 2-2h3a2 2 0 1 1 0 4h-3a2 2 0 0 1-2-2Z\",\n    fill: \"#fff\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 85,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 222,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 214,\n    y: 108,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 222,\n    y: 108,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 237,\n    y: 16,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 16,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 197,\n    y: 16,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 108,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39 18a2 2 0 0 1 2-2h11a2 2 0 1 1 0 4H41a2 2 0 0 1-2-2Z\",\n    fill: \"#777\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 2,\n    y: 16,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 16,\n    width: 18,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M173 11h14v14h-14z\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 176,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 176 18)\",\n    fill: \"#fff\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 184,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 184 18)\",\n    fill: \"#fff\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 180,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 180 18)\",\n    fill: \"#fff\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M298 11h14v14h-14z\"\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 301,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 301 18)\",\n    fill: \"#fff\"\n  })), _circle5 || (_circle5 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 309,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 309 18)\",\n    fill: \"#fff\"\n  })), _circle6 || (_circle6 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 305,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 305 18)\",\n    fill: \"#fff\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M111 11h14v14h-14z\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 117.333,\n    y: 14,\n    width: 1.333,\n    height: 8,\n    rx: 0.667,\n    fill: \"#fff\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 114,\n    y: 18.666,\n    width: 1.333,\n    height: 8,\n    rx: 0.667,\n    transform: \"rotate(-90 114 18.666)\",\n    fill: \"#fff\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M298 103h14v14h-14z\"\n  })), _circle7 || (_circle7 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 301,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 301 110)\",\n    fill: \"#fff\"\n  })), _circle8 || (_circle8 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 309,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 309 110)\",\n    fill: \"#fff\"\n  })), _circle9 || (_circle9 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 305,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 305 110)\",\n    fill: \"#fff\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M285 103h14v14h-14z\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 288.5,\n    y: 106.5,\n    width: 7,\n    height: 7,\n    rx: 1.5,\n    stroke: \"#fff\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#fff\",\n    d: \"M288 109h8v2h-8z\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.35\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M40 45h128.769v91H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M40 136h128.769v1H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M40 45h128.769v14H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M40 45h31.154v14H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M72.192 45h31.154v14H72.192z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M71.154 45h1.038v14h-1.038zM40 45h1v92h-1zM168 45h1v92h-1zM103.346 45h1.038v14h-1.038z\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 75.308,\n    y: 50,\n    width: 12.461,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 90.885,\n    y: 50,\n    width: 4.154,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 43.115,\n    y: 50,\n    width: 5.192,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 49.346,\n    y: 50,\n    width: 16.615,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M40 45h128.769v1H40z\"\n  }))), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M29 54h128.769v91H29z\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M29 145h128.769v1H29z\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M29 54h128.769v14H29z\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M29 54h31.154v14H29z\"\n  })), _path30 || (_path30 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M61.192 54h31.154v14H61.192z\"\n  })), _path31 || (_path31 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M60.154 54h1.038v14h-1.038zM29 54h1v92h-1zM157 54h1v92h-1zM92.346 54h1.038v14h-1.038z\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 64.308,\n    y: 59,\n    width: 12.461,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 79.885,\n    y: 59,\n    width: 4.154,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 32.115,\n    y: 59,\n    width: 5.192,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect21 || (_rect21 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 38.346,\n    y: 59,\n    width: 16.615,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _path32 || (_path32 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M29 54h128.769v1H29z\"\n  })), _path33 || (_path33 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M128.344 61.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path34 || (_path34 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M127.5 62.5h4v2h-4z\"\n  })));\n};\nexport default SvgDockviewGrid4;","var _path, _path2, _rect, _rect2, _rect3, _path3, _path4, _path5, _path6, _path7, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _rect10, _path8, _path9, _path10, _rect11, _rect12, _rect13, _rect14, _rect15, _rect16, _rect17, _rect18, _rect19, _rect20, _rect21, _rect22, _rect23;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewSplash2 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#D9D9D9\",\n    d: \"M0 11h312v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M0 11h166v189H0zM167 11h145v189H167z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M166 11h1v189h-1zM167 56h145v1H167zM167 112h145v1H167z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h166v10H0zM0 22h166v10H0zM0 94h166v10H0zM0 190h166v10H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M0 21h166v1H0z\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 14,\n    width: 21,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 34,\n    y: 14,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 25,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 19,\n    y: 25,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 97,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 29,\n    y: 97,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 193,\n    width: 14,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m5 29-3-3.392.538-.608L5 27.799l2.463-2.785.537.608L5 29ZM5 101l-3-3.392.538-.608L5 99.799l2.463-2.785.537.608L5 101ZM6 16l-3.392 3L2 18.462 4.799 16l-2.785-2.463.608-.537L6 16ZM6 195l-3.392 3-.608-.537L4.799 195l-2.785-2.462.608-.538L6 195Z\",\n    fill: \"#fff\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M212.674 111c.236 0 .394-.221.297-.416l-2.174-4.409c-.115-.233-.479-.233-.594 0l-2.174 4.409c-.097.195.061.416.297.416h.889a.327.327 0 0 0 .297-.175l.691-1.401c.115-.233.479-.233.594 0l.691 1.401a.327.327 0 0 0 .297.175h.889ZM208.326 114c-.236 0-.394.221-.297.416l2.174 4.409c.115.233.479.233.594 0l2.174-4.409c.097-.195-.061-.416-.297-.416h-.889a.327.327 0 0 0-.297.175l-.691 1.401c-.115.233-.479.233-.594 0l-.691-1.401a.327.327 0 0 0-.297-.175h-.889Z\",\n    fill: \"#fff\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    d: \"M210.5 116v-7\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 175,\n    y: 18,\n    width: 20,\n    height: 19,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 198,\n    y: 18,\n    width: 5,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 206,\n    y: 18,\n    width: 26,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 203,\n    y: 71,\n    width: 44,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 228,\n    y: 78,\n    width: 44,\n    height: 14,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 250,\n    y: 71,\n    width: 22,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 239,\n    y: 95,\n    width: 33,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 272,\n    y: 117,\n    width: 33,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 259,\n    y: 117,\n    width: 7,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 213,\n    y: 95,\n    width: 23,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect21 || (_rect21 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 203,\n    y: 95,\n    width: 8,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect22 || (_rect22 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 198,\n    y: 25,\n    width: 15,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect23 || (_rect23 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 215,\n    y: 25,\n    width: 18,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })));\n};\nexport default SvgDockviewSplash2;","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { isValidElement } from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n// Similar comp to the one described here:\n// https://www.joshwcomeau.com/react/the-perils-of-rehydration/#abstractions\nexport default function BrowserOnly({ children, fallback, }) {\n    const isBrowser = useIsBrowser();\n    if (isBrowser) {\n        if (typeof children !== 'function' &&\n            process.env.NODE_ENV === 'development') {\n            throw new Error(`Docusaurus error: The children of <BrowserOnly> must be a \"render function\", e.g. <BrowserOnly>{() => <span>{window.location.href}</span>}</BrowserOnly>.\nCurrent type: ${isValidElement(children) ? 'React element' : typeof children}`);\n        }\n        return <>{children?.()}</>;\n    }\n    return fallback ?? null;\n}\n","class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private contentSize = 0;\n    private _proportions: number[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): number[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this.contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n\n                item.size = clamp(\n                    Math.round(this.proportions[i] * size),\n                    item.minimumSize,\n                    item.maximumSize\n                );\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this.contentSize > 0) {\n            this._proportions = this.viewItems.map(\n                (i) => i.size / this.contentSize\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this.contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n            this._onDidChange.fire({});\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(...this.children.map((c) => c.minimumOrthogonalSize));\n    }\n\n    get maximumSize(): number {\n        return Math.min(...this.children.map((c) => c.maximumOrthogonalSize));\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n    setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = Event.any(\n            ...this.children.map((c) => c.onDidChange)\n        )((e) => {\n            /**\n             * indicate a change has occured to allows any re-rendering but don't bubble\n             * event because that was specific to this branch\n             */\n            this._onDidChange.fire({ size: e.orthogonalSize });\n        });\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    private _root: BranchNode | undefined;\n    public readonly element: HTMLElement;\n    private disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this.setState(quadrant);\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    renderer?: DockviewPanelRenderer;\n    params?: { [key: string]: any };\n}\n","import {\n    CompositeDisposable,\n    Disposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DragAndDropObserver } from '../../../dnd/dnd';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { DockviewDropTargets } from '../../types';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        // for hosted containers\n        // 1) register a drop target on the host\n        // 2) register window dragStart events to disable pointer events\n        // 3) register dragEnd events\n        // 4) register mouseMove events (if no buttons are present we take this as a dragEnd event)\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (!data && event.shiftKey && !this.group.isFloating) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(panel: IDockviewPanel): void {\n        const isActive = panel === this.group.activePanel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.greadyRenderContainer.remove(panel);\n                if (isActive) {\n                    if (this.panel) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container =\n                    this.accessor.greadyRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n        }\n\n        if (isActive) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        const renderer = panel.api.renderer;\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (renderer) {\n            case 'always':\n                container =\n                    this.accessor.greadyRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n            case 'onlyWhenVisibile':\n                this._element.appendChild(this.panel.view.content.element);\n                container = this._element;\n                break;\n        }\n\n        const _onDidFocus = this.panel.view.content.onDidFocus;\n        const _onDidBlur = this.panel.view.content.onDidBlur;\n\n        const disposable = new CompositeDisposable();\n        const focusTracker = trackFocus(container);\n\n        disposable.addDisposables(\n            focusTracker,\n            focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n            focusTracker.onDidBlur(() => this._onDidBlur.fire())\n        );\n\n        if (_onDidFocus) {\n            disposable.addDisposables(\n                _onDidFocus(() => this._onDidFocus.fire())\n            );\n        }\n        if (_onDidBlur) {\n            disposable.addDisposables(_onDidBlur(() => this._onDidBlur.fire()));\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.accessor.options.defaultRenderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.isFloating && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        !this.group.api.isFloating\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.isFloating && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Droptarget, Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    // private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _isFloating = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get isFloating(): boolean {\n        return this._isFloating;\n    }\n\n    set isFloating(value: boolean) {\n        this._isFloating = value;\n\n        this.contentContainer.dropTarget.setTargetZones(\n            value ? ['center'] : ['top', 'bottom', 'left', 'right', 'center']\n        );\n\n        toggleClass(this.container, 'dv-groupview-floating', value);\n\n        this.groupPanel.api._onDidFloatingStateChange.fire({\n            isFloating: this.isFloating,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel);\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        // this.dropTarget.dispose();\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement?: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!document.body.contains(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly isFloating: boolean;\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly isFloating: boolean;\n}\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidFloatingStateChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidFloatingStateChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidFloatingStateChange.event;\n\n    get isFloating() {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n        return this._group.model.isFloating;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidFloatingStateChange);\n    }\n\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(`DockviewGroupPanelApiImpl not initialized`);\n        }\n\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            undefined,\n            options.position ?? 'center'\n        );\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 100,\n                minimumWidth: 100,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { DockviewPanel, IDockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../dockview/components/greadyRenderContainer';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\n/*\n * omit visibility modifiers since the visibility of a single group doesn't make sense\n * because it belongs to a groupview\n */\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return !!this.group?.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: {\n            height: number;\n            width: number;\n            left: number;\n            top: number;\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(\n        bounds: Partial<{\n            height: number;\n            width: number;\n            top: number;\n            left: number;\n        }> = {}\n    ): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): { top: number; left: number; height: number; width: number } {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import { DragAndDropObserver } from '../../dnd/dnd';\nimport { Droptarget } from '../../dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from '../../dom';\nimport { CompositeDisposable, Disposable, IDisposable } from '../../lifecycle';\nimport { IDockviewPanel } from '../dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class GreadyRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        { disposable: IDisposable; element: HTMLElement }\n    > = {};\n\n    get allIds(): string[] {\n        return Object.keys(this.map);\n    }\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables({\n            dispose: () => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                }\n            },\n        });\n    }\n\n    remove(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            this.map[panel.api.id].disposable.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    setReferenceContentContainer(\n        panel: IDockviewPanel,\n        referenceContainer: IRenderable\n    ): HTMLElement {\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                disposable: Disposable.NONE,\n                element,\n            };\n        }\n\n        this.map[panel.api.id]?.disposable.dispose();\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.isFloating\n            );\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n            panel.api.onDidVisibilityChange((event) => {\n                focusContainer.style.display = event.isVisible ? '' : 'none';\n            }),\n            panel.api.onDidDimensionsChange((event) => {\n                resize();\n            }),\n            {\n                dispose: () => {\n                    focusContainer.removeChild(panel.view.content.element);\n                    this.element.removeChild(focusContainer);\n                },\n            }\n        );\n\n        queueMicrotask(() => {\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            resize();\n        });\n\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport {\n    DockviewFloatingGroupPanel,\n    IDockviewFloatingGroupPanel,\n} from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport {\n    GreadyRenderContainer,\n    DockviewPanelRenderer,\n} from './components/greadyRenderContainer';\n\nconst DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: { height: number; width: number; left: number; top: number };\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly floatingGroups: IDockviewFloatingGroupPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly greadyRenderContainer: GreadyRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    readonly floatingGroups: DockviewFloatingGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-gready-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.greadyRenderContainer = new GreadyRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.greadyRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.isFloating = true;\n\n        const overlayLeft =\n            typeof coord?.x === 'number' ? Math.max(coord.x, 0) : 100;\n        const overlayTop =\n            typeof coord?.y === 'number' ? Math.max(coord.y, 0) : 100;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.isFloating = false;\n                    remove(this.floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this.floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const hasFloatingGroupOptionsChanged =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (hasFloatingGroupOptionsChanged) {\n            for (const group of this.floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this.floatingGroups) {\n            for (const floating of this.floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this.floatingGroups.map(\n            (floatingGroup) => {\n                return {\n                    data: floatingGroup.group.toJSON() as GroupPanelViewState,\n                    position: floatingGroup.overlay.toJSON(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            for (const floatingGroup of this.floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this.floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (referenceGroup.api.isFloating || target === 'center') {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.greadyRenderContainer.remove(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => !x.api.isFloating).length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        const floatingGroup = this.floatingGroups.find(\n            (_) => _.group === group\n        );\n        if (floatingGroup) {\n            if (!options?.skipDispose) {\n                floatingGroup.group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            floatingGroup.dispose();\n\n            if (!options?.skipActive && this._activeGroup === group) {\n                const groups = Array.from(this._groups.values());\n\n                this.doSetGroupActive(\n                    groups.length > 0 ? groups[0].value : undefined\n                );\n            }\n\n            return floatingGroup.group;\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                const isFloating = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (!isFloating) {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                const floatingGroup = this.floatingGroups.find(\n                    (x) => x.group === sourceGroup\n                );\n\n                if (floatingGroup) {\n                    floatingGroup.dispose();\n                } else {\n                    this.gridview.removeView(\n                        getGridLocation(sourceGroup.element)\n                    );\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.renderer}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: {\n    id: string;\n    hideThemePicker?: boolean;\n}) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            {!props.hideThemePicker && <ThemePicker />}\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton\n                    id={sandboxId}\n                    hideThemePicker={props.hideThemePicker}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"features\":\"features_t9lD\",\"featureSvg\":\"featureSvg_GfXr\"};","import React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.module.css';\n\ntype FeatureItem = {\n    title: string;\n    Svg: React.ComponentType<React.ComponentProps<'svg'>>;\n    description: JSX.Element;\n};\n\nconst FeatureList: FeatureItem[] = [\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_grid_3.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Serializable Layouts\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Add and remove panels using the provided api or use the\n                        serialziation methods to persist layouts.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Customizable Theme\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Adjust a number of provided CSS Properties for a simple\n                        change or target specific classes for a more customized\n                        approach.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Choose Your Control\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Choose from a simple splitview, gridview, collapsable\n                        panes or a full docking solution. Combine multiple for\n                        complex layouts.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_grid_4.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Rich Feature Control\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Customize header features to add additional icons and\n                        more as well as custom tab rendering.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Floating Group Support\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Built-in support for floating groups with a supporting\n                        api for progmatic control.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">Drag And Drop</h3>\n                    <p className=\"feature-banner-content\">\n                        Drag and Drop tab to position your layout as well as\n                        interacting with external drag events.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_splash_2.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">Zero Dependencies</h3>\n                    <p className=\"feature-banner-content\">\n                        Zero dependencies, that's all.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Code Quality and Transparency\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        All of the code is run through Sonarcloud Code Analysis,\n                        which along with the source code and high test coverage\n                        can be viewed from the Github page.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        React or Vanilla TypeScript\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Exposes native support for both ReactJS components and\n                        Vanilla TypeScript.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n];\n\nfunction Feature({ title, Svg, description }: FeatureItem) {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                margin: 'auto',\n                justifyContent: 'center',\n            }}\n            className=\"dockview-feature\"\n        >\n            <Svg className={styles.featureSvg} role=\"img\" />\n            <div style={{ maxWidth: '400px', padding: '0px 20px' }}>\n                <h3>{title}</h3>\n                {description}\n            </div>\n        </div>\n    );\n}\n\nexport default function HomepageFeatures(): JSX.Element {\n    return (\n        <section className={styles.features}>\n            <div className=\"container\">\n                <div className=\"row\">\n                    {FeatureList.map((props, idx) => (\n                        <Feature key={idx} {...props} />\n                    ))}\n                </div>\n            </div>\n        </section>\n    );\n}\n","import * as React from 'react';\n\nexport const BrowserHeader = () => (\n    <div\n        style={{\n            height: '30px',\n            borderBottom: '1px solid #BABABA',\n            backgroundColor: '#DCDCDC',\n            borderTopLeftRadius: '15px',\n            borderTopRightRadius: '15px',\n            padding: '0px 15px',\n            display: 'flex',\n            alignItems: 'center',\n        }}\n    >\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#FD605E',\n                marginRight: 7,\n            }}\n        />\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#FBBC3F',\n                marginRight: 7,\n            }}\n        />\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#34C942',\n                marginRight: 7,\n            }}\n        />\n    </div>\n);\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import {\n    DockviewDefaultTab,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelHeaderProps,\n    IDockviewPanelProps,\n    IDockviewHeaderActionsProps,\n    DockviewPanelApi,\n    DockviewPanelRenderer,\n} from 'dockview';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { v4 } from 'uuid';\nimport './app.scss';\n\nconst useRenderer = (\n    api: DockviewPanelApi\n): [DockviewPanelRenderer, (value: DockviewPanelRenderer) => void] => {\n    const [mode, setMode] = React.useState<DockviewPanelRenderer>(api.renderer);\n\n    React.useEffect(() => {\n        const disposable = api.onDidRendererChange((event) => {\n            setMode(event.renderer);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const _setMode = React.useCallback(\n        (mode: DockviewPanelRenderer) => {\n            api.setRenderer(mode);\n        },\n        [api]\n    );\n\n    return [mode, _setMode];\n};\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        const [mode, setMode] = useRenderer(props.api);\n\n        return (\n            <div style={{ height: '100%', overflow: 'auto', color: 'white' }}>\n                <div\n                    style={{\n                        height: '1000px',\n                        padding: '20px',\n                        overflow: 'auto',\n                    }}\n                >\n                    <div>{props.api.title}</div>\n                    <input />\n                    <div>\n                        {mode}\n                        <button\n                            onClick={() => {\n                                setMode(\n                                    mode === 'onlyWhenVisibile'\n                                        ? 'always'\n                                        : 'onlyWhenVisibile'\n                                );\n                            }}\n                        >\n                            Toggle render mode\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    },\n};\n\nconst headerComponents = {\n    default: (props: IDockviewPanelHeaderProps) => {\n        const onContextMenu = (event: React.MouseEvent) => {\n            event.preventDefault();\n            alert('context menu');\n        };\n        return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n    },\n};\n\nconst Popover = (props: {\n    children: React.ReactNode;\n    position?: { x: number; y: number };\n    close: () => void;\n}) => {\n    const uuid = React.useMemo(() => v4(), []);\n\n    React.useEffect(() => {\n        const listener = (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                props.close();\n            }\n        };\n        const listener2 = (event: MouseEvent) => {\n            let target = event.target;\n\n            while (target) {\n                if (target instanceof HTMLElement) {\n                    if (target.classList.contains(uuid)) {\n                        return;\n                    } else {\n                        target = target.parentElement;\n                    }\n                } else {\n                    target = null;\n                }\n            }\n\n            props.close();\n        };\n        window.addEventListener('keypress', listener);\n        window.addEventListener('mousedown', listener2);\n\n        return () => {\n            window.removeEventListener('keypress', listener);\n            window.removeEventListener('mousedown', listener2);\n        };\n    }, [props.close, uuid]);\n\n    if (!props.position) {\n        return null;\n    }\n\n    return ReactDOM.createPortal(\n        <div\n            className={uuid}\n            style={{\n                position: 'absolute',\n                top: props.position.y,\n                left: props.position.x,\n                background: 'white',\n                border: '1px solid black',\n                zIndex: 99,\n                padding: '10px',\n            }}\n        >\n            {props.children}\n        </div>,\n        document.body\n    );\n};\n\nconst Icon = (props: {\n    icon: string;\n    onClick?: (event: React.MouseEvent) => void;\n}) => {\n    return (\n        <div className=\"action\" onClick={props.onClick}>\n            <span\n                style={{ fontSize: 'inherit' }}\n                className=\"material-symbols-outlined\"\n            >\n                {props.icon}\n            </span>\n        </div>\n    );\n};\n\nconst Button = () => {\n    const [position, setPosition] = React.useState<\n        { x: number; y: number } | undefined\n    >(undefined);\n\n    const close = () => setPosition(undefined);\n\n    const onClick = (event: React.MouseEvent) => {\n        setPosition({ x: event.pageX, y: event.pageY });\n    };\n\n    return (\n        <>\n            <Icon icon=\"more_vert\" onClick={onClick} />\n            {position && (\n                <Popover position={position} close={close}>\n                    <div>hello</div>\n                </Popover>\n            )}\n        </>\n    );\n};\n\nconst groupControlsComponents = {\n    panel_1: () => {\n        return <Icon icon=\"file_download\" />;\n    },\n};\n\nconst RightControls = (props: IDockviewHeaderActionsProps) => {\n    const Component = React.useMemo(() => {\n        if (!props.isGroupActive || !props.activePanel) {\n            return null;\n        }\n\n        return groupControlsComponents[props.activePanel.id];\n    }, [props.isGroupActive, props.activePanel]);\n\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            {props.isGroupActive && <Icon icon=\"star\" />}\n            {Component && <Component />}\n            <Button />\n        </div>\n    );\n};\n\nlet counter = 0;\n\nconst LeftControls = (props: IDockviewHeaderActionsProps) => {\n    const onClick = () => {\n        props.containerApi.addPanel({\n            id: `id_${Date.now().toString()}`,\n            component: 'default',\n            title: `Tab ${counter++}`,\n            position: {\n                referenceGroup: props.group,\n            },\n        });\n    };\n\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            <Icon onClick={onClick} icon=\"add\" />\n        </div>\n    );\n};\n\nconst PrefixHeaderControls = (props: IDockviewHeaderActionsProps) => {\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            <Icon icon=\"Menu\" />\n        </div>\n    );\n};\n\nconst DockviewDemo = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n            position: { referencePanel: 'panel_2', direction: 'below' },\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n        // event.api.addPanel({\n        //     id: 'panel_5',\n        //     component: 'default',\n        //     title: 'Panel 5',\n        //     position: { referencePanel: 'panel_3', direction: 'below' },\n        // });\n        // event.api.addPanel({\n        //     id: 'panel_6',\n        //     component: 'default',\n        //     title: 'Panel 6',\n        //     position: { referencePanel: 'panel_3', direction: 'right' },\n        // });\n\n        event.api.getPanel('panel_1')!.api.setActive();\n\n        console.log(event.api.toJSON());\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            defaultTabComponent={headerComponents.default}\n            rightHeaderActionsComponent={RightControls}\n            leftHeaderActionsComponent={LeftControls}\n            prefixHeaderActionsComponent={PrefixHeaderControls}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n            // debug={true}\n        />\n    );\n};\n\nexport default DockviewDemo;\n","import {\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst paneComponents = {\n    default: (props: IPaneviewPanelProps) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n    panes: (props: IGridviewPanelProps) => {\n        const onReady = (event: PaneviewReadyEvent) => {\n            event.api.addPanel({\n                id: 'pane_1',\n                component: 'default',\n                title: 'Pane 1',\n                isExpanded: false,\n            });\n\n            event.api.addPanel({\n                id: 'pane_2',\n                component: 'default',\n                title: 'Pane 2',\n                isExpanded: true,\n            });\n\n            event.api.addPanel({\n                id: 'pane_3',\n                component: 'default',\n                title: 'Pane 3',\n                isExpanded: true,\n            });\n\n            event.api.addPanel({\n                id: 'pane_4',\n                component: 'default',\n                title: 'Pane 4',\n                isExpanded: false,\n            });\n        };\n\n        return <PaneviewReact onReady={onReady} components={paneComponents} />;\n    },\n};\n\nconst DockviewDemo2 = (props: { theme?: string }) => {\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panes',\n            component: 'panes',\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            position: { referencePanel: 'panes', direction: 'right' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            position: { referencePanel: 'panel_1', direction: 'below' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            position: { referencePanel: 'panel_2', direction: 'below' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n    };\n\n    return (\n        <GridviewReact\n            onReady={onReady}\n            components={components}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nexport default DockviewDemo2;\n","import useBaseUrl from '@docusaurus/useBaseUrl';\nimport HomepageFeatures from '.';\nimport { BrowserHeader } from '../ui/browserHeader';\nimport { MultiFrameworkContainer } from '../ui/container';\nimport * as React from 'react';\nimport DockviewDemo from '@site/sandboxes/demo-dockview/src/app';\nimport DockviewDemo2 from '@site/sandboxes/dockview-app/src/app';\n\nexport const Introduction = () => {\n    return (\n        <>\n            <HomepageFeatures />\n            <div\n                id=\"live-demo\"\n                style={{\n                    height: '30px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '1.5em',\n                    fontWeight: 'bold',\n                }}\n            >\n                <img src={useBaseUrl('/img/dockview_logo.svg')} height={30} />\n                <span style={{ paddingLeft: '8px' }}>Dockview Live Demos</span>\n            </div>\n            <div style={{ padding: '20px' }}>\n                <BrowserHeader />\n                <MultiFrameworkContainer\n                    height={500}\n                    sandboxId=\"demo-dockview\"\n                    react={DockviewDemo}\n                />\n            </div>\n            <div style={{ padding: '20px' }}>\n                <BrowserHeader />\n                <MultiFrameworkContainer\n                    height={500}\n                    react={DockviewDemo2}\n                    sandboxId=\"dockview-app\"\n                />\n            </div>\n        </>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"heroBanner\":\"heroBanner_qdFl\",\"buttons\":\"buttons_AeoN\"};","import React from 'react';\nimport clsx from 'clsx';\nimport Layout from '@theme/Layout';\nimport Link from '@docusaurus/Link';\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport { Introduction } from '../components/HomepageFeatures/introduction';\nimport styles from './index.module.css';\nimport './index.scss';\n\nfunction HomepageHeader2() {\n    const { siteConfig } = useDocusaurusContext();\n    return (\n        <header className={clsx('hero hero--primary', styles.heroBanner)}>\n            <div className=\"container homepage\">\n                <img src={useBaseUrl('/img/dockview_logo.svg')} />\n                <h1 className=\"hero__title\">{siteConfig.title}</h1>\n                {/* <div className=\"badge-container\">\n                            <img src=\"https://badge.fury.io/js/dockview.svg\" />\n                            <img src=\"https://github.com/mathuo/dockview/workflows/CI/badge.svg\" />\n                            <img src=\"https://sonarcloud.io/api/project_badges/measure?project=mathuo_dockview&metric=coverage\" />\n                            <img src=\"https://sonarcloud.io/api/project_badges/measure?project=mathuo_dockview&metric=alert_status\" />\n                        </div> */}\n                <p className=\"hero__subtitle\">{siteConfig.tagline}</p>\n                <div className={styles.buttons}>\n                    <Link\n                        className=\"button button--secondary button--lg\"\n                        to={useBaseUrl('docs/')}\n                    >\n                        Get Started\n                    </Link>\n                    <Link\n                        className=\"button button--secondary button--lg\"\n                        to={'#live-demo'}\n                    >\n                        Live Demo\n                    </Link>\n                </div>\n            </div>\n        </header>\n    );\n}\n\nexport default function Home(): JSX.Element {\n    const { siteConfig } = useDocusaurusContext();\n    return (\n        <Layout\n            title={`${siteConfig.tagline}`}\n            description={`${siteConfig.description}`}\n        >\n            <HomepageHeader2 />\n\n            <main className=\"container\">\n                <Introduction />\n            </main>\n        </Layout>\n    );\n}\n"],"names":["_rect","_path","_path2","_path3","_path4","_path5","_path6","_path7","_path8","_path9","_path10","_path11","_path12","_path13","_path14","_path15","_path16","_path17","_rect2","_rect3","_rect4","_rect5","_rect6","_rect7","_rect8","_rect9","_rect10","_rect11","_rect12","_rect13","_rect14","_rect15","_rect16","_path18","_path19","_path20","_path21","_path22","_path23","_rect17","_rect18","_path24","_path25","_path26","_path27","_rect19","_rect20","_path28","_path29","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_ref","title","titleId","props","width","height","viewBox","fill","xmlns","id","rx","d","x","y","fillOpacity","stroke","fillRule","clipRule","strokeDasharray","_circle","_circle2","_circle3","_circle4","_circle5","_circle6","_circle7","_circle8","_circle9","_g","_path30","_path31","_rect21","_path32","_path33","_path34","cx","cy","r","transform","opacity","_rect22","_rect23","BrowserOnly","children","fallback","useIsBrowser","React","TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","getPaneData","paneTransfer","Event","Disposable","any","_len","Array","_key","listener","disposables","map","child","dispose","forEach","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","pushToStart","unshift","pushToEnd","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","from","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","contentSize","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","array","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","getNode","_getViews","nodeCachedVisibleSize","path","n","l","parent","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","DragAndDropObserver","callbacks","registerListeners","onDragEnter","onDragOver","preventDefault","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","DockviewDropTargets","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","isFloating","Panel","show","display","hide","renderPanel","isActive","renderer","greadyRenderContainer","content","setReferenceContentContainer","focusTracker","openPanel","_width","_height","closePanel","defaultRenderer","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","model","setActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","findIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_isFloating","groupPanel","_onDidFloatingStateChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","disableResizing","_disableResizing","entry","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onDidVisibilityChange","onDidVisibilityChange","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","DockviewGroupPanelApiImpl","_group","onDidFloatingStateChange","moveTo","moveGroupOrPanel","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","GreadyRenderContainer","allIds","referenceContainer","createFocusableElement","focusContainer","box2","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","floatingGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","minimumHeightWithinViewport","querySelector","floatingGroupPanel","t","createGroupAtLocation","hasOrientationChanged","hasFloatingGroupOptionsChanged","floating","includePanel","doSetGroupAndPanelActive","collection","floats","floatingGroup","grid","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","err","hasActiveGroup","hasActivePanel","entries","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","ref","triggerRender","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","CodeSandboxButton","url","hideThemePicker","ThemePicker","alignItems","href","fontWeight","paddingRight","Spinner","Container","injectVanillaJS","sandboxId","ReactIcon","marginRight","src","useBaseUrl","JavascriptIcon","themes","theme","setTheme","localStorage","getItem","setItem","dispatchEvent","StorageEvent","onChange","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","background","zIndex","justifyContent","react","margin","cursor","border","MultiFrameworkContainer","FeatureList","Svg","require","description","Feature","flexWrap","featureSvg","role","maxWidth","HomepageFeatures","features","idx","BrowserHeader","borderBottom","borderTopLeftRadius","borderTopRightRadius","randomUUID","crypto","getRandomValues","rnds8","Uint8Array","rng","byteToHex","unsafeStringify","buf","rnds","random","default","mode","setMode","_setMode","useRenderer","onContextMenu","alert","Popover","uuid","v4","listener2","Icon","icon","Button","setPosition","pageX","pageY","groupControlsComponents","panel_1","RightControls","counter","LeftControls","PrefixHeaderControls","log","paneComponents","panes","Introduction","paddingLeft","DockviewDemo","DockviewDemo2","HomepageHeader2","siteConfig","useDocusaurusContext","clsx","heroBanner","tagline","buttons","Link","Home","Layout"],"sourceRoot":""}