{"version":3,"file":"assets/js/35f4d965.78b2877e.js","mappings":"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","sources":["webpack://dockview-docs/./src/components/ui/reference/docRef.tsx","webpack://dockview-docs/./docs/api/gridview/api.mdx"],"sourcesContent":["import * as React from 'react';\nimport CodeBlock from '@theme/CodeBlock';\nimport './docRef.scss';\n\nexport interface DocRefProps {\n    declaration: string;\n    methods?: string[];\n}\n\nimport docsJson_ from '../../../generated/api.output.json';\nconst docsJson = docsJson_ as any as DocsJson;\n\ntype DocsContent = { kind: string; text: string; tag?: string };\ntype DocsTag = { tag: string; content: DocsContent[] };\ntype DocsComment = {\n    summary?: DocsContent[];\n    blockTags?: DocsTag[];\n};\ntype Doc = {\n    name: string;\n    code: string;\n    comment?: DocsComment;\n    kind: 'accessor' | 'property' | 'method';\n    pieces: string[];\n};\ntype DocsJson = {\n    [index: string]: {\n        kind: string;\n        metadata?: Doc;\n        children: Doc[];\n    };\n};\n\nexport const Text = (props: { content: DocsContent[] }) => {\n    return (\n        <div className=\"doc-text\">\n            {props.content.map((piece, i) => {\n                switch (piece.kind) {\n                    case 'text': {\n                        return <span key={i}>{piece.text}</span>;\n                    }\n                    case 'code':\n                        return (\n                            <code key={i}>\n                                {piece.text.substring(1, piece.text.length - 1)}\n                            </code>\n                        );\n                    default:\n                        throw new Error(`unhandled piece ${piece.kind}`);\n                }\n            })}\n        </div>\n    );\n};\n\nexport const Tags = (props: { tags: DocsTag[] }) => {\n    return (\n        <div>\n            {props.tags.map((tag, i) => {\n                return (\n                    <div key={i}>\n                        <div>{tag.tag}</div>\n                        <Text content={tag.content} />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport const Summary = (props: { summary: DocsComment }) => {\n    return (\n        <div>\n            <Text content={props.summary.summary ?? []} />\n            {/* <Tags tags={props.summary.blockTags ?? []} /> */}\n        </div>\n    );\n};\n\nexport const Markdown = (props: { children: string }) => {\n    return <span>{props.children}</span>;\n};\n\nconst Piece = (props: { piece: string }) => {\n    const item = docsJson[props.piece];\n\n    if (!item) {\n        return;\n    }\n\n    if (item.kind === 'interface') {\n        return;\n    }\n\n    if (!item.metadata?.code) {\n        return;\n    }\n\n    return <CodeBlock language=\"tsx\">{item.metadata.code}</CodeBlock>;\n};\n\nconst Row = (props: { doc: Doc }) => {\n    return (\n        <tr>\n            <th\n                style={{\n                    width: '40%',\n                    display: 'flex',\n                }}\n            >\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'start',\n                    }}\n                >\n                    <h6\n                        style={{\n                            fontFamily: 'monospace',\n                            fontSize: '1.2em',\n                        }}\n                    >\n                        {props.doc.name}\n                    </h6>\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'start',\n                        }}\n                    >\n                        {/* <span\n                            style={{\n                                fontSize: '0.75em',\n                                color: 'var(--ifm-color-content-secondary)',\n                            }}\n                        >\n                            {'Type'}\n                        </span>\n                        <span\n                            style={{\n                                color: 'var(--ifm-color-primary)',\n                            }}\n                        >\n                            {doc.type}\n                        </span> */}\n                    </div>\n                </div>\n            </th>\n            <th style={{ width: '60%' }}>\n                {/* <div>{'-'}</div> */}\n                <div>\n                    <div>\n                        {props.doc.comment && (\n                            <Summary summary={props.doc.comment} />\n                        )}\n                    </div>\n                    <CodeBlock language=\"tsx\">{props.doc.code}</CodeBlock>\n                </div>\n            </th>\n        </tr>\n    );\n};\n\nexport const DocRef = (props: DocRefProps) => {\n    const docs = React.useMemo(\n        () => (docsJson as DocsJson)[props.declaration],\n        [props.declaration]\n    );\n\n    const filteredDocs = React.useMemo(\n        () =>\n            docs?.children?.filter((child) => {\n                if (props.methods && !props.methods.includes(child.name)) {\n                    return false;\n                }\n                return true;\n            }),\n        [docs]\n    );\n\n    if (!docs) {\n        return <span>{`Failed to find docs for '${props.declaration}'`}</span>;\n    }\n\n    return (\n        <table className=\"doc-ref-table\">\n            <tbody>\n                {filteredDocs.map((doc, i) => {\n                    return (\n                        <>\n                            <Row key={i} doc={doc} />\n                            {/* {doc.pieces?.map((piece) => (\n                                <tr>\n                                    <th colSpan={2}>\n                                        <Piece piece={piece} />\n                                    </th>\n                                </tr>\n                            ))} */}\n                        </>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n};\n","\n\nexport const frontMatter = {\n\tdescription: 'API',\n\ttitle: 'API',\n\tsidebar_position: 1\n};\nexport const contentTitle = undefined;\nexport const metadata = {\n  \"id\": \"api/gridview/api\",\n  \"title\": \"API\",\n  \"description\": \"API\",\n  \"source\": \"@site/docs/api/gridview/api.mdx\",\n  \"sourceDirName\": \"api/gridview\",\n  \"slug\": \"/api/gridview/api\",\n  \"permalink\": \"/docs/api/gridview/api\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"editUrl\": \"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/gridview/api.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"sidebarPosition\": 1,\n  \"frontMatter\": {\n    \"description\": \"API\",\n    \"title\": \"API\",\n    \"sidebar_position\": 1\n  },\n  \"sidebar\": \"api\",\n  \"previous\": {\n    \"title\": \"Options\",\n    \"permalink\": \"/docs/api/gridview/options\"\n  },\n  \"next\": {\n    \"title\": \"Panel API\",\n    \"permalink\": \"/docs/api/gridview/panelApi\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {DocRef} from '@site/src/components/ui/reference/docRef';\nexport const toc = [];\nfunction _createMdxContent(props) {\n  return _jsx(DocRef, {\n    declaration: \"GridviewApi\"\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n"],"names":["docsJson","docsJson_","Text","props","_jsx","className","children","content","map","piece","i","kind","text","substring","length","Error","Summary","summary","Row","_jsxs","style","width","display","flexDirection","alignItems","fontFamily","fontSize","doc","name","comment","CodeBlock","language","code","DocRef","docs","React","declaration","filteredDocs","filter","child","methods","includes","_Fragment","frontMatter","description","title","sidebar_position","contentTitle","undefined","metadata","assets","toc","_createMdxContent","MDXContent","wrapper","MDXLayout","components"],"sourceRoot":""}