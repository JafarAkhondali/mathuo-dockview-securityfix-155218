{"version":3,"file":"assets/js/1df93b7f.1e0f616e.js","mappings":"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","sources":["webpack://dockview-docs/../../node_modules/@docusaurus/core/lib/client/exports/BrowserOnly.js","webpack://dockview-docs/../dockview-core/src/dnd/dataTransfer.ts","webpack://dockview-docs/../dockview-core/src/events.ts","webpack://dockview-docs/../dockview-core/src/lifecycle.ts","webpack://dockview-docs/../dockview-core/src/dom.ts","webpack://dockview-docs/../dockview-core/src/array.ts","webpack://dockview-docs/../dockview-core/src/math.ts","webpack://dockview-docs/../dockview-core/src/splitview/viewItem.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitview.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneview.ts","webpack://dockview-docs/../dockview-core/src/gridview/leafNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/branchNode.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridview.ts","webpack://dockview-docs/../dockview-core/src/api/component.api.ts","webpack://dockview-docs/../dockview-core/src/dnd/dnd.ts","webpack://dockview-docs/../dockview-core/src/dnd/droptarget.ts","webpack://dockview-docs/../dockview-core/src/dockview/types.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/panel/content.ts","webpack://dockview-docs/../dockview-core/src/dnd/abstractDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/tab.ts","webpack://dockview-docs/../dockview-core/src/dnd/groupDragHandler.ts","webpack://dockview-docs/../dockview-core/src/dnd/ghost.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/voidContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/titlebar/tabsContainer.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanelModel.ts","webpack://dockview-docs/../dockview-core/src/resizable.ts","webpack://dockview-docs/../dockview-core/src/gridview/baseComponentGridview.ts","webpack://dockview-docs/../dockview-core/src/api/panelApi.ts","webpack://dockview-docs/../dockview-core/src/api/splitviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/api/paneviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/basePanelView.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/paneview/draggablePaneviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/gridviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewGroupPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/api/dockviewPanelApi.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanel.ts","webpack://dockview-docs/../dockview-core/src/svg.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/tab/defaultTab.ts","webpack://dockview-docs/../dockview-core/src/panel/componentFactory.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPanelModel.ts","webpack://dockview-docs/../dockview-core/src/dockview/deserializer.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/watermark/watermark.ts","webpack://dockview-docs/../dockview-core/src/dnd/overlay.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewFloatingGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/dockview/components/greadyRenderContainer.ts","webpack://dockview-docs/../dockview-core/src/popoutWindow.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewPopoutGroupPanel.ts","webpack://dockview-docs/../dockview-core/src/constants.ts","webpack://dockview-docs/../dockview-core/src/dockview/dockviewComponent.ts","webpack://dockview-docs/../dockview-core/src/dockview/options.ts","webpack://dockview-docs/../dockview-core/src/gridview/gridviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewComponent.ts","webpack://dockview-docs/../dockview-core/src/paneview/defaultPaneviewHeader.ts","webpack://dockview-docs/../dockview-core/src/paneview/paneviewComponent.ts","webpack://dockview-docs/../dockview-core/src/splitview/splitviewPanel.ts","webpack://dockview-docs/../dockview/src/react.ts","webpack://dockview-docs/../dockview/src/dockview/reactContentPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactHeaderPart.ts","webpack://dockview-docs/../dockview/src/dockview/reactWatermarkPart.ts","webpack://dockview-docs/../dockview/src/dockview/headerActionsRenderer.ts","webpack://dockview-docs/../dockview/src/dockview/dockview.tsx","webpack://dockview-docs/../dockview/src/svg.tsx","webpack://dockview-docs/../dockview/src/dockview/defaultTab.tsx","webpack://dockview-docs/../dockview/src/splitview/view.ts","webpack://dockview-docs/../dockview/src/splitview/splitview.tsx","webpack://dockview-docs/../dockview/src/gridview/view.ts","webpack://dockview-docs/../dockview/src/gridview/gridview.tsx","webpack://dockview-docs/../dockview/src/paneview/view.tsx","webpack://dockview-docs/../dockview/src/paneview/paneview.tsx","webpack://dockview-docs/./src/components/ui/codeSandboxButton.tsx","webpack://dockview-docs/./src/components/ui/spinner.tsx","webpack://dockview-docs/./src/components/ui/container.tsx","webpack://dockview-docs/./src/components/HomepageFeatures/styles.module.css","webpack://dockview-docs/./src/components/HomepageFeatures/index.tsx","webpack://dockview-docs/./src/components/ui/browserHeader.tsx","webpack://dockview-docs/./sandboxes/demo-dockview/src/app.tsx","webpack://dockview-docs/./sandboxes/dockview-app/src/app.tsx","webpack://dockview-docs/./src/components/HomepageFeatures/introduction.tsx","webpack://dockview-docs/./src/pages/index.module.css","webpack://dockview-docs/./src/pages/index.tsx","webpack://dockview-docs/./static/img/dockview_grid_3.svg","webpack://dockview-docs/./static/img/dockview_grid_4.svg","webpack://dockview-docs/./static/img/dockview_splash_2.svg"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { isValidElement } from 'react';\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n// Similar comp to the one described here:\n// https://www.joshwcomeau.com/react/the-perils-of-rehydration/#abstractions\nexport default function BrowserOnly({ children, fallback, }) {\n    const isBrowser = useIsBrowser();\n    if (isBrowser) {\n        if (typeof children !== 'function' &&\n            process.env.NODE_ENV === 'development') {\n            throw new Error(`Docusaurus error: The children of <BrowserOnly> must be a \"render function\", e.g. <BrowserOnly>{() => <span>{window.location.href}</span>}</BrowserOnly>.\nCurrent type: ${isValidElement(children) ? 'React element' : typeof children}`);\n        }\n        return <>{children?.()}</>;\n    }\n    return fallback ?? null;\n}\n","class TransferObject {}\n\nexport class PanelTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly groupId: string,\n        public readonly panelId: string | null\n    ) {\n        super();\n    }\n}\n\nexport class PaneTransfer extends TransferObject {\n    constructor(\n        public readonly viewId: string,\n        public readonly paneId: string\n    ) {\n        super();\n    }\n}\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n    private static readonly INSTANCE = new LocalSelectionTransfer();\n\n    private data?: T[];\n    private proto?: T;\n\n    private constructor() {\n        // protect against external instantiation\n    }\n\n    static getInstance<T>(): LocalSelectionTransfer<T> {\n        return LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n    }\n\n    hasData(proto: T): boolean {\n        return proto && proto === this.proto;\n    }\n\n    clearData(proto: T): void {\n        if (this.hasData(proto)) {\n            this.proto = undefined;\n            this.data = undefined;\n        }\n    }\n\n    getData(proto: T): T[] | undefined {\n        if (this.hasData(proto)) {\n            return this.data;\n        }\n\n        return undefined;\n    }\n\n    setData(data: T[], proto: T): void {\n        if (proto) {\n            this.data = data;\n            this.proto = proto;\n        }\n    }\n}\n\nexport function getPanelData(): PanelTransfer | undefined {\n    const panelTransfer = LocalSelectionTransfer.getInstance<PanelTransfer>();\n    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return panelTransfer.getData(PanelTransfer.prototype)![0];\n}\n\nexport function getPaneData(): PaneTransfer | undefined {\n    const paneTransfer = LocalSelectionTransfer.getInstance<PaneTransfer>();\n    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);\n\n    if (!isPanelEvent) {\n        return undefined;\n    }\n\n    return paneTransfer.getData(PaneTransfer.prototype)![0];\n}\n","import { IDisposable } from './lifecycle';\n\nexport interface Event<T> {\n    (listener: (e: T) => any): IDisposable;\n}\n\nexport interface EmitterOptions {\n    readonly replay?: boolean;\n}\n\nexport namespace Event {\n    export const any = <T>(...children: Event<T>[]): Event<T> => {\n        return (listener: (e: T) => void) => {\n            const disposables = children.map((child) => child(listener));\n\n            return {\n                dispose: () => {\n                    disposables.forEach((d) => {\n                        d.dispose();\n                    });\n                },\n            };\n        };\n    };\n}\n\nclass LeakageMonitor {\n    readonly events = new Map<Event<any>, Stacktrace>();\n\n    get size(): number {\n        return this.events.size;\n    }\n\n    add<T>(event: Event<T>, stacktrace: Stacktrace): void {\n        this.events.set(event, stacktrace);\n    }\n\n    delete<T>(event: Event<T>): void {\n        this.events.delete(event);\n    }\n\n    clear(): void {\n        this.events.clear();\n    }\n}\n\nclass Stacktrace {\n    static create(): Stacktrace {\n        return new Stacktrace(new Error().stack ?? '');\n    }\n\n    private constructor(readonly value: string) {}\n\n    print(): void {\n        console.warn(this.value);\n    }\n}\n\nclass Listener<T> {\n    constructor(\n        readonly callback: (t: T) => void,\n        readonly stacktrace: Stacktrace | undefined\n    ) {}\n}\n\n// relatively simple event emitter taken from https://github.com/microsoft/vscode/blob/master/src/vs/base/common/event.ts\nexport class Emitter<T> implements IDisposable {\n    private _event?: Event<T>;\n\n    private _last?: T;\n    private _listeners: Listener<any>[] = [];\n    private _disposed = false;\n\n    static ENABLE_TRACKING = false;\n    static readonly MEMORY_LEAK_WATCHER = new LeakageMonitor();\n\n    static setLeakageMonitorEnabled(isEnabled: boolean): void {\n        if (isEnabled !== Emitter.ENABLE_TRACKING) {\n            Emitter.MEMORY_LEAK_WATCHER.clear();\n        }\n        Emitter.ENABLE_TRACKING = isEnabled;\n    }\n\n    constructor(private readonly options?: EmitterOptions) {}\n\n    get event(): Event<T> {\n        if (!this._event) {\n            this._event = (callback: (e: T) => void): IDisposable => {\n                if (this.options?.replay && this._last !== undefined) {\n                    callback(this._last);\n                }\n\n                const listener = new Listener(\n                    callback,\n                    Emitter.ENABLE_TRACKING ? Stacktrace.create() : undefined\n                );\n                this._listeners.push(listener);\n\n                return {\n                    dispose: () => {\n                        const index = this._listeners.indexOf(listener);\n                        if (index > -1) {\n                            this._listeners.splice(index, 1);\n                        } else if (Emitter.ENABLE_TRACKING) {\n                            // console.warn(\n                            //     `Listener already disposed`,\n                            //     Stacktrace.create().print()\n                            // );\n                        }\n                    },\n                };\n            };\n\n            if (Emitter.ENABLE_TRACKING) {\n                Emitter.MEMORY_LEAK_WATCHER.add(\n                    this._event,\n                    Stacktrace.create()\n                );\n            }\n        }\n        return this._event;\n    }\n\n    public fire(e: T): void {\n        this._last = e;\n        for (const listener of this._listeners) {\n            listener.callback(e);\n        }\n    }\n\n    public dispose(): void {\n        if (!this._disposed) {\n            this._disposed = true;\n\n            if (this._listeners.length > 0) {\n                if (Emitter.ENABLE_TRACKING) {\n                    queueMicrotask(() => {\n                        // don't check until stack of execution is completed to allow for out-of-order disposals within the same execution block\n                        for (const listener of this._listeners) {\n                            console.warn(listener.stacktrace?.print());\n                        }\n                    });\n                }\n\n                this._listeners = [];\n            }\n\n            if (Emitter.ENABLE_TRACKING && this._event) {\n                Emitter.MEMORY_LEAK_WATCHER.delete(this._event);\n            }\n        }\n    }\n}\n\nexport function addDisposableWindowListener<K extends keyof WindowEventMap>(\n    element: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport function addDisposableListener<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n): IDisposable {\n    element.addEventListener(type, listener, options);\n\n    return {\n        dispose: () => {\n            element.removeEventListener(type, listener, options);\n        },\n    };\n}\n\nexport class TickDelayedEvent implements IDisposable {\n    private timer: any;\n\n    private readonly _onFired = new Emitter<void>();\n    readonly onEvent = this._onFired.event;\n\n    fire(): void {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        this.timer = setTimeout(() => {\n            this._onFired.fire();\n            clearTimeout(this.timer);\n        });\n    }\n\n    dispose(): void {\n        this._onFired.dispose();\n    }\n}\n","export interface IDisposable {\n    dispose: () => void;\n}\n\nexport interface IValueDisposable<T> {\n    readonly value: T;\n    readonly disposable: IDisposable;\n}\n\nexport namespace Disposable {\n    export const NONE: IDisposable = {\n        dispose: () => {\n            // noop\n        },\n    };\n}\n\nexport class CompositeDisposable {\n    private readonly _disposables: IDisposable[];\n    private _isDisposed = false;\n\n    protected get isDisposed(): boolean {\n        return this._isDisposed;\n    }\n\n    constructor(...args: IDisposable[]) {\n        this._disposables = args;\n    }\n\n    public addDisposables(...args: IDisposable[]): void {\n        args.forEach((arg) => this._disposables.push(arg));\n    }\n\n    public dispose(): void {\n        this._disposables.forEach((arg) => arg.dispose());\n\n        this._isDisposed = true;\n    }\n}\n\nexport class MutableDisposable implements IDisposable {\n    private _disposable = Disposable.NONE;\n\n    set value(disposable: IDisposable) {\n        if (this._disposable) {\n            this._disposable.dispose();\n        }\n        this._disposable = disposable;\n    }\n\n    public dispose(): void {\n        if (this._disposable) {\n            this._disposable.dispose();\n            this._disposable = Disposable.NONE;\n        }\n    }\n}\n","import {\n    Event as DockviewEvent,\n    Emitter,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from './events';\nimport { IDisposable, CompositeDisposable } from './lifecycle';\n\nexport function watchElementResize(\n    element: HTMLElement,\n    cb: (entry: ResizeObserverEntry) => void\n): IDisposable {\n    const observer = new ResizeObserver((entires) => {\n        /**\n         * Fast browser window resize produces Error: ResizeObserver loop limit exceeded.\n         * The error isn't visible in browser console, doesn't affect functionality, but degrades performance.\n         * See https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded/58701523#58701523\n         */\n        requestAnimationFrame(() => {\n            const firstEntry = entires[0];\n            cb(firstEntry);\n        });\n    });\n\n    observer.observe(element);\n\n    return {\n        dispose: () => {\n            observer.unobserve(element);\n            observer.disconnect();\n        },\n    };\n}\n\nexport const removeClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (element.classList.contains(classname)) {\n            element.classList.remove(classname);\n        }\n    }\n};\n\nexport const addClasses = (\n    element: HTMLElement,\n    ...classes: string[]\n): void => {\n    for (const classname of classes) {\n        if (!element.classList.contains(classname)) {\n            element.classList.add(classname);\n        }\n    }\n};\n\nexport const toggleClass = (\n    element: HTMLElement,\n    className: string,\n    isToggled: boolean\n): void => {\n    const hasClass = element.classList.contains(className);\n    if (isToggled && !hasClass) {\n        element.classList.add(className);\n    }\n    if (!isToggled && hasClass) {\n        element.classList.remove(className);\n    }\n};\n\nexport function isAncestor(\n    testChild: Node | null,\n    testAncestor: Node | null\n): boolean {\n    while (testChild) {\n        if (testChild === testAncestor) {\n            return true;\n        }\n        testChild = testChild.parentNode;\n    }\n\n    return false;\n}\n\nexport function getElementsByTagName(tag: string): HTMLElement[] {\n    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);\n}\n\nexport interface IFocusTracker extends IDisposable {\n    readonly onDidFocus: DockviewEvent<void>;\n    readonly onDidBlur: DockviewEvent<void>;\n    refreshState?(): void;\n}\n\nexport function trackFocus(element: HTMLElement | Window): IFocusTracker {\n    return new FocusTracker(element);\n}\n\n/**\n * Track focus on an element. Ensure tabIndex is set when an HTMLElement is not focusable by default\n */\nclass FocusTracker extends CompositeDisposable implements IFocusTracker {\n    private readonly _onDidFocus = new Emitter<void>();\n    public readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    public readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    private _refreshStateHandler: () => void;\n\n    constructor(element: HTMLElement | Window) {\n        super();\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        let hasFocus = isAncestor(document.activeElement, <HTMLElement>element);\n        let loosingFocus = false;\n\n        const onFocus = () => {\n            loosingFocus = false;\n            if (!hasFocus) {\n                hasFocus = true;\n                this._onDidFocus.fire();\n            }\n        };\n\n        const onBlur = () => {\n            if (hasFocus) {\n                loosingFocus = true;\n                window.setTimeout(() => {\n                    if (loosingFocus) {\n                        loosingFocus = false;\n                        hasFocus = false;\n                        this._onDidBlur.fire();\n                    }\n                }, 0);\n            }\n        };\n\n        this._refreshStateHandler = () => {\n            const currentNodeHasFocus = isAncestor(\n                document.activeElement,\n                <HTMLElement>element\n            );\n            if (currentNodeHasFocus !== hasFocus) {\n                if (hasFocus) {\n                    onBlur();\n                } else {\n                    onFocus();\n                }\n            }\n        };\n\n        if (element instanceof HTMLElement) {\n            this.addDisposables(\n                addDisposableListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableListener(element, 'blur', onBlur, true)\n            );\n        } else {\n            this.addDisposables(\n                addDisposableWindowListener(element, 'focus', onFocus, true)\n            );\n            this.addDisposables(\n                addDisposableWindowListener(element, 'blur', onBlur, true)\n            );\n        }\n    }\n\n    refreshState(): void {\n        this._refreshStateHandler();\n    }\n}\n\n// quasi: apparently, but not really; seemingly\nconst QUASI_PREVENT_DEFAULT_KEY = 'dv-quasiPreventDefault';\n\n// mark an event directly for other listeners to check\nexport function quasiPreventDefault(event: Event): void {\n    (event as any)[QUASI_PREVENT_DEFAULT_KEY] = true;\n}\n\n// check if this event has been marked\nexport function quasiDefaultPrevented(event: Event): boolean {\n    return (event as any)[QUASI_PREVENT_DEFAULT_KEY];\n}\n\nexport function addStyles(document: Document, styleSheetList: StyleSheetList) {\n    const styleSheets = Array.from(styleSheetList);\n\n    for (const styleSheet of styleSheets) {\n        if (styleSheet.href) {\n            const link = document.createElement('link');\n            link.href = styleSheet.href;\n            link.type = styleSheet.type;\n            link.rel = 'stylesheet';\n            document.head.appendChild(link);\n        }\n\n        let cssTexts: string[] = [];\n\n        try {\n            if (styleSheet.cssRules) {\n                cssTexts = Array.from(styleSheet.cssRules).map(\n                    (rule) => rule.cssText\n                );\n            }\n        } catch (err) {\n            // security errors (lack of permissions), ignore\n        }\n\n        for (const rule of cssTexts) {\n            const style = document.createElement('style');\n            style.appendChild(document.createTextNode(rule));\n            document.head.appendChild(style);\n        }\n    }\n}\n\nexport function getDomNodePagePosition(domNode: Element): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n} {\n    const { left, top, width, height } = domNode.getBoundingClientRect();\n    return {\n        left: left + window.scrollX,\n        top: top + window.scrollY,\n        width: width,\n        height: height,\n    };\n}\n","export function tail<T>(arr: T[]): [T[], T] {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function last<T>(arr: T[]): T | undefined {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function sequenceEquals<T>(arr1: T[], arr2: T[]): boolean {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n    const index = arr.indexOf(value);\n\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\n\nexport function firstIndex<T>(\n    array: T[] | ReadonlyArray<T>,\n    fn: (item: T) => boolean\n): number {\n    for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n\n        if (fn(element)) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nexport function remove<T>(array: T[], value: T): boolean {\n    const index = array.findIndex((t) => t === value);\n\n    if (index > -1) {\n        array.splice(index, 1);\n        return true;\n    }\n    return false;\n}\n","export const clamp = (value: number, min: number, max: number): number => {\n    if (min > max) {\n        throw new Error(`${min} > ${max} is an invalid condition`);\n    }\n    return Math.min(max, Math.max(value, min));\n};\n\nexport const sequentialNumberGenerator = (): { next: () => string } => {\n    let value = 1;\n    return { next: () => (value++).toString() };\n};\n\nexport const range = (from: number, to?: number): number[] => {\n    const result: number[] = [];\n\n    if (typeof to !== 'number') {\n        to = from;\n        from = 0;\n    }\n\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n\n    return result;\n};\n","import { IDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { IView, LayoutPriority } from './splitview';\n\nexport class ViewItem {\n    private _size: number;\n    private _cachedVisibleSize: number | undefined = undefined;\n\n    set size(size: number) {\n        this._size = size;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get cachedVisibleSize(): number | undefined {\n        return this._cachedVisibleSize;\n    }\n\n    get visible(): boolean {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n\n    get minimumSize(): number {\n        return this.visible ? this.view.minimumSize : 0;\n    }\n    get viewMinimumSize(): number {\n        return this.view.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.visible ? this.view.maximumSize : 0;\n    }\n    get viewMaximumSize(): number {\n        return this.view.maximumSize;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n    get snap(): boolean {\n        return !!this.view.snap;\n    }\n\n    set enabled(enabled: boolean) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n\n    constructor(\n        public container: HTMLElement,\n        public view: IView,\n        size: number | { cachedVisibleSize: number },\n        private disposable: IDisposable\n    ) {\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        } else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n\n    setVisible(visible: boolean, size?: number): void {\n        if (visible === this.visible) {\n            return;\n        }\n\n        if (visible) {\n            this.size = clamp(\n                this._cachedVisibleSize ?? 0,\n                this.viewMinimumSize,\n                this.viewMaximumSize\n            );\n            this._cachedVisibleSize = undefined;\n        } else {\n            this._cachedVisibleSize =\n                typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n\n        this.container.classList.toggle('visible', visible);\n\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    dispose(): IView {\n        this.disposable.dispose();\n        return this.view;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/splitview\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    removeClasses,\n    addClasses,\n    toggleClass,\n    getElementsByTagName,\n} from '../dom';\nimport { Event, Emitter } from '../events';\nimport { pushToStart, pushToEnd, firstIndex } from '../array';\nimport { range, clamp } from '../math';\nimport { ViewItem } from './viewItem';\nimport { IDisposable } from '../lifecycle';\n\nexport enum Orientation {\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\n\nexport enum SashState {\n    MAXIMUM,\n    MINIMUM,\n    DISABLED,\n    ENABLED,\n}\n\nexport interface ISplitviewStyles {\n    separatorBorder: string;\n}\n\nexport interface SplitViewOptions {\n    readonly orientation: Orientation;\n    readonly descriptor?: ISplitViewDescriptor;\n    readonly proportionalLayout?: boolean;\n    readonly styles?: ISplitviewStyles;\n}\n\nexport enum LayoutPriority {\n    Low = 'low', // view is offered space last\n    High = 'high', // view is offered space first\n    Normal = 'normal', // view is offered space in view order\n}\n\nexport interface IBaseView extends IDisposable {\n    minimumSize: number;\n    maximumSize: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n\nexport interface IView extends IBaseView {\n    readonly element: HTMLElement | DocumentFragment;\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }>;\n    layout(size: number, orthogonalSize: number): void;\n    setVisible(visible: boolean): void;\n}\n\ninterface ISashItem {\n    container: HTMLElement;\n    disposable: () => void;\n}\n\ninterface ISashDragSnapState {\n    readonly index: number;\n    readonly limitDelta: number;\n    readonly size: number;\n}\n\ntype ViewItemSize = number | { cachedVisibleSize: number };\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split'; index: number };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;\n\nexport namespace Sizing {\n    export const Distribute: DistributeSizing = { type: 'distribute' };\n    export function Split(index: number): SplitSizing {\n        return { type: 'split', index };\n    }\n    export function Invisible(cachedVisibleSize: number): InvisibleSizing {\n        return { type: 'invisible', cachedVisibleSize };\n    }\n}\n\nexport interface ISplitViewDescriptor {\n    size: number;\n    views: {\n        visible?: boolean;\n        size: number;\n        view: IView;\n    }[];\n}\n\nexport class Splitview {\n    private element: HTMLElement;\n    private viewContainer: HTMLElement;\n    private sashContainer: HTMLElement;\n    private viewItems: ViewItem[] = [];\n    private sashes: ISashItem[] = [];\n    private _orientation: Orientation;\n    private _size = 0;\n    private _orthogonalSize = 0;\n    private _contentSize = 0;\n    private _proportions: (number | undefined)[] | undefined = undefined;\n    private proportionalLayout: boolean;\n    private _startSnappingEnabled = true;\n    private _endSnappingEnabled = true;\n\n    private readonly _onDidSashEnd = new Emitter<void>();\n    readonly onDidSashEnd = this._onDidSashEnd.event;\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get contentSize(): number {\n        return this._contentSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    set size(value: number) {\n        this._size = value;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(value: number) {\n        this._orthogonalSize = value;\n    }\n\n    public get length(): number {\n        return this.viewItems.length;\n    }\n\n    public get proportions(): (number | undefined)[] | undefined {\n        return this._proportions ? [...this._proportions] : undefined;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n\n        const tmp = this.size;\n        this.size = this.orthogonalSize;\n        this.orthogonalSize = tmp;\n\n        removeClasses(this.element, 'horizontal', 'vertical');\n        this.element.classList.add(\n            this.orientation == Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical'\n        );\n    }\n\n    get minimumSize(): number {\n        return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);\n    }\n\n    get maximumSize(): number {\n        return this.length === 0\n            ? Number.POSITIVE_INFINITY\n            : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);\n    }\n\n    get startSnappingEnabled(): boolean {\n        return this._startSnappingEnabled;\n    }\n\n    set startSnappingEnabled(startSnappingEnabled: boolean) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    get endSnappingEnabled(): boolean {\n        return this._endSnappingEnabled;\n    }\n\n    set endSnappingEnabled(endSnappingEnabled: boolean) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        options: SplitViewOptions\n    ) {\n        this._orientation = options.orientation;\n        this.element = this.createContainer();\n\n        this.proportionalLayout =\n            options.proportionalLayout === undefined\n                ? true\n                : !!options.proportionalLayout;\n\n        this.viewContainer = this.createViewContainer();\n        this.sashContainer = this.createSashContainer();\n\n        this.element.appendChild(this.sashContainer);\n        this.element.appendChild(this.viewContainer);\n\n        this.container.appendChild(this.element);\n\n        this.style(options.styles);\n\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this._size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing =\n                    viewDescriptor.visible === undefined ||\n                    viewDescriptor.visible\n                        ? viewDescriptor.size\n                        : ({\n                              type: 'invisible',\n                              cachedVisibleSize: viewDescriptor.size,\n                          } as InvisibleSizing);\n\n                const view = viewDescriptor.view;\n                this.addView(\n                    view,\n                    sizing,\n                    index,\n                    true\n                    // true skip layout\n                );\n            });\n\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n\n    style(styles?: ISplitviewStyles): void {\n        if (styles?.separatorBorder === 'transparent') {\n            removeClasses(this.element, 'separator-border');\n            this.element.style.removeProperty('--dv-separator-border');\n        } else {\n            addClasses(this.element, 'separator-border');\n            if (styles?.separatorBorder) {\n                this.element.style.setProperty(\n                    '--dv-separator-border',\n                    styles.separatorBorder\n                );\n            }\n        }\n    }\n\n    isViewVisible(index: number): boolean {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.visible;\n    }\n\n    setViewVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        toggleClass(this.container, 'visible', visible);\n\n        const viewItem = this.viewItems[index];\n\n        toggleClass(this.container, 'visible', visible);\n\n        viewItem.setVisible(visible, viewItem.size);\n\n        this.distributeEmptySpace(index);\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    getViewSize(index: number): number {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n\n        return this.viewItems[index].size;\n    }\n\n    resizeView(index: number, size: number): void {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        const item = this.viewItems[index];\n        size = Math.round(size);\n        size = clamp(\n            size,\n            item.minimumSize,\n            Math.min(item.maximumSize, this._size)\n        );\n\n        item.size = size;\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public getViews<T extends IView>(): T[] {\n        return this.viewItems.map((x) => x.view as T);\n    }\n\n    private onDidChange(item: ViewItem, size: number | undefined): void {\n        const index = this.viewItems.indexOf(item);\n\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n\n        item.size = size;\n\n        const indexes = range(this.viewItems.length).filter((i) => i !== index);\n        const lowPriorityIndexes = [\n            ...indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            ),\n            index,\n        ];\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        /**\n         * add this view we are changing to the low-index list since we have determined the size\n         * here and don't want it changed\n         */\n        this.relayout([...lowPriorityIndexes, index], highPriorityIndexes);\n    }\n\n    public addView(\n        view: IView,\n        size: number | Sizing = { type: 'distribute' },\n        index: number = this.viewItems.length,\n        skipLayout?: boolean\n    ): void {\n        const container = document.createElement('div');\n        container.className = 'view';\n\n        container.appendChild(view.element);\n\n        let viewSize: ViewItemSize;\n\n        if (typeof size === 'number') {\n            viewSize = size;\n        } else if (size.type === 'split') {\n            viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n        } else {\n            viewSize = view.minimumSize;\n        }\n\n        const disposable = view.onDidChange((newSize) =>\n            this.onDidChange(viewItem, newSize.size)\n        );\n\n        const viewItem = new ViewItem(container, view, viewSize, {\n            dispose: () => {\n                disposable.dispose();\n                this.viewContainer.removeChild(container);\n            },\n        });\n\n        if (index === this.viewItems.length) {\n            this.viewContainer.appendChild(container);\n        } else {\n            this.viewContainer.insertBefore(\n                container,\n                this.viewContainer.children.item(index)\n            );\n        }\n\n        this.viewItems.splice(index, 0, viewItem);\n\n        if (this.viewItems.length > 1) {\n            //add sash\n            const sash = document.createElement('div');\n            sash.className = 'sash';\n\n            const onPointerStart = (event: PointerEvent) => {\n                for (const item of this.viewItems) {\n                    item.enabled = false;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                const start =\n                    this._orientation === Orientation.HORIZONTAL\n                        ? event.clientX\n                        : event.clientY;\n\n                const sashIndex = firstIndex(\n                    this.sashes,\n                    (s) => s.container === sash\n                );\n\n                //\n                const sizes = this.viewItems.map((x) => x.size);\n\n                //\n                let snapBefore: ISashDragSnapState | undefined;\n                let snapAfter: ISashDragSnapState | undefined;\n                const upIndexes = range(sashIndex, -1);\n                const downIndexes = range(sashIndex + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce(\n                    (r, i) => r + (this.viewItems[i].minimumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaUp = upIndexes.reduce(\n                    (r, i) =>\n                        r + (this.viewItems[i].viewMaximumSize - sizes[i]),\n                    0\n                );\n                const maxDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.POSITIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] - this.viewItems[i].minimumSize),\n                              0\n                          );\n                const minDeltaDown =\n                    downIndexes.length === 0\n                        ? Number.NEGATIVE_INFINITY\n                        : downIndexes.reduce(\n                              (r, i) =>\n                                  r +\n                                  (sizes[i] -\n                                      this.viewItems[i].viewMaximumSize),\n                              0\n                          );\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? minDelta - halfSize\n                            : minDelta + halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                if (typeof snapAfterIndex === 'number') {\n                    const snappedViewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(\n                        snappedViewItem.viewMinimumSize / 2\n                    );\n\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: snappedViewItem.visible\n                            ? maxDelta + halfSize\n                            : maxDelta - halfSize,\n                        size: snappedViewItem.size,\n                    };\n                }\n\n                const onPointerMove = (event: PointerEvent) => {\n                    const current =\n                        this._orientation === Orientation.HORIZONTAL\n                            ? event.clientX\n                            : event.clientY;\n                    const delta = current - start;\n\n                    this.resize(\n                        sashIndex,\n                        delta,\n                        sizes,\n                        undefined,\n                        undefined,\n                        minDelta,\n                        maxDelta,\n                        snapBefore,\n                        snapAfter\n                    );\n                    this.distributeEmptySpace();\n                    this.layoutViews();\n                };\n\n                const end = () => {\n                    for (const item of this.viewItems) {\n                        item.enabled = true;\n                    }\n\n                    for (const iframe of iframes) {\n                        iframe.style.pointerEvents = 'auto';\n                    }\n\n                    this.saveProportions();\n\n                    document.removeEventListener('pointermove', onPointerMove);\n                    document.removeEventListener('pointerup', end);\n                    document.removeEventListener('pointercancel', end);\n\n                    this._onDidSashEnd.fire(undefined);\n                };\n\n                document.addEventListener('pointermove', onPointerMove);\n                document.addEventListener('pointerup', end);\n                document.addEventListener('pointercancel', end);\n            };\n\n            sash.addEventListener('pointerdown', onPointerStart);\n\n            const sashItem: ISashItem = {\n                container: sash,\n                disposable: () => {\n                    sash.removeEventListener('pointerdown', onPointerStart);\n                    this.sashContainer.removeChild(sash);\n                },\n            };\n\n            this.sashContainer.appendChild(sash);\n            this.sashes.push(sashItem);\n        }\n\n        if (!skipLayout) {\n            this.relayout([index]);\n        }\n\n        if (\n            !skipLayout &&\n            typeof size !== 'number' &&\n            size.type === 'distribute'\n        ) {\n            this.distributeViewSizes();\n        }\n\n        this._onDidAddView.fire(view);\n    }\n\n    distributeViewSizes(): void {\n        const flexibleViewItems: ViewItem[] = [];\n        let flexibleSize = 0;\n\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n\n    public removeView(\n        index: number,\n        sizing?: Sizing,\n        skipLayout = false\n    ): IView {\n        // Remove view\n        const viewItem = this.viewItems.splice(index, 1)[0];\n        viewItem.dispose();\n\n        // Remove sash\n        if (this.viewItems.length >= 1) {\n            const sashIndex = Math.max(index - 1, 0);\n            const sashItem = this.sashes.splice(sashIndex, 1)[0];\n            sashItem.disposable();\n        }\n\n        if (!skipLayout) {\n            this.relayout();\n        }\n\n        if (sizing && sizing.type === 'distribute') {\n            this.distributeViewSizes();\n        }\n\n        this._onDidRemoveView.fire(viewItem.view);\n\n        return viewItem.view;\n    }\n\n    getViewCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.viewItems.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        const viewItem = this.viewItems[index];\n        return viewItem.cachedVisibleSize;\n    }\n\n    public moveView(from: number, to: number): void {\n        const cachedVisibleSize = this.getViewCachedVisibleSize(from);\n        const sizing =\n            typeof cachedVisibleSize === 'undefined'\n                ? this.getViewSize(from)\n                : Sizing.Invisible(cachedVisibleSize);\n        const view = this.removeView(from, undefined, true);\n        this.addView(view, sizing, to);\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.orthogonalSize = orthogonalSize;\n\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.Low\n            );\n            const highPriorityIndexes = indexes.filter(\n                (i) => this.viewItems[i].priority === LayoutPriority.High\n            );\n\n            this.resize(\n                this.viewItems.length - 1,\n                size - previousSize,\n                undefined,\n                lowPriorityIndexes,\n                highPriorityIndexes\n            );\n        } else {\n            let total = 0;\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                } else {\n                    size -= item.size;\n                }\n            }\n\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(\n                        Math.round((proportion * size) / total),\n                        item.minimumSize,\n                        item.maximumSize\n                    );\n                }\n            }\n        }\n\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n\n    private relayout(\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[]\n    ): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n\n        this.resize(\n            this.viewItems.length - 1,\n            this._size - contentSize,\n            undefined,\n            lowPriorityIndexes,\n            highPriorityIndexes\n        );\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n\n    private distributeEmptySpace(lowPriorityIndex?: number): void {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.Low\n        );\n        const highPriorityIndexes = indexes.filter(\n            (i) => this.viewItems[i].priority === LayoutPriority.High\n        );\n\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(\n                item.size + emptyDelta,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - item.size;\n\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n\n    private saveProportions(): void {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this._proportions = this.viewItems.map((i) =>\n                i.visible ? i.size / this._contentSize : undefined\n            );\n        }\n    }\n\n    private layoutViews(): void {\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let sum = 0;\n        const x: number[] = [];\n\n        this.updateSashEnablement();\n\n        for (let i = 0; i < this.viewItems.length - 1; i++) {\n            sum += this.viewItems[i].size;\n            x.push(sum);\n\n            const offset = Math.min(Math.max(0, sum - 2), this.size - 4);\n\n            if (this._orientation === Orientation.HORIZONTAL) {\n                this.sashes[i].container.style.left = `${offset}px`;\n                this.sashes[i].container.style.top = `0px`;\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                this.sashes[i].container.style.left = `0px`;\n                this.sashes[i].container.style.top = `${offset}px`;\n            }\n        }\n        this.viewItems.forEach((view, i) => {\n            if (this._orientation === Orientation.HORIZONTAL) {\n                view.container.style.width = `${view.size}px`;\n                view.container.style.left = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.top = '';\n                view.container.style.height = '';\n            }\n            if (this._orientation === Orientation.VERTICAL) {\n                view.container.style.height = `${view.size}px`;\n                view.container.style.top = i == 0 ? '0px' : `${x[i - 1]}px`;\n                view.container.style.width = '';\n                view.container.style.left = '';\n            }\n\n            view.view.layout(view.size, this._orthogonalSize);\n        });\n    }\n\n    private findFirstSnapIndex(indexes: number[]): number | undefined {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (!viewItem.visible) {\n                continue;\n            }\n\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n\n            if (\n                viewItem.visible &&\n                viewItem.maximumSize - viewItem.minimumSize > 0\n            ) {\n                return undefined;\n            }\n\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateSashEnablement(): void {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(\n            (i) => (previous = i.size - i.minimumSize > 0 || previous)\n        );\n\n        previous = false;\n        const expandsDown = this.viewItems.map(\n            (i) => (previous = i.maximumSize - i.size > 0 || previous)\n        );\n\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews\n            .map((i) => (previous = i.size - i.minimumSize > 0 || previous))\n            .reverse();\n\n        previous = false;\n        const expandsUp = reverseViews\n            .map((i) => (previous = i.maximumSize - i.size > 0 || previous))\n            .reverse();\n\n        let position = 0;\n        for (let index = 0; index < this.sashes.length; index++) {\n            const sash = this.sashes[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n\n                const snappedBefore =\n                    typeof snapBeforeIndex === 'number' &&\n                    !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter =\n                    typeof snapAfterIndex === 'number' &&\n                    !this.viewItems[snapAfterIndex].visible;\n\n                if (\n                    snappedBefore &&\n                    collapsesUp[index] &&\n                    (position > 0 || this.startSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MINIMUM);\n                } else if (\n                    snappedAfter &&\n                    collapsesDown[index] &&\n                    (position < this._contentSize || this.endSnappingEnabled)\n                ) {\n                    this.updateSash(sash, SashState.MAXIMUM);\n                } else {\n                    this.updateSash(sash, SashState.DISABLED);\n                }\n            } else if (min && !max) {\n                this.updateSash(sash, SashState.MINIMUM);\n            } else if (!min && max) {\n                this.updateSash(sash, SashState.MAXIMUM);\n            } else {\n                this.updateSash(sash, SashState.ENABLED);\n            }\n        }\n    }\n\n    private updateSash(sash: ISashItem, state: SashState): void {\n        toggleClass(sash.container, 'disabled', state === SashState.DISABLED);\n        toggleClass(sash.container, 'enabled', state === SashState.ENABLED);\n        toggleClass(sash.container, 'maximum', state === SashState.MAXIMUM);\n        toggleClass(sash.container, 'minimum', state === SashState.MINIMUM);\n    }\n\n    private resize = (\n        index: number,\n        delta: number,\n        sizes: number[] = this.viewItems.map((x) => x.size),\n        lowPriorityIndexes?: number[],\n        highPriorityIndexes?: number[],\n        overloadMinDelta: number = Number.NEGATIVE_INFINITY,\n        overloadMaxDelta: number = Number.POSITIVE_INFINITY,\n        snapBefore?: ISashDragSnapState,\n        snapAfter?: ISashDragSnapState\n    ): number => {\n        if (index < 0 || index > this.viewItems.length) {\n            return 0;\n        }\n\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        //\n        if (highPriorityIndexes) {\n            for (const i of highPriorityIndexes) {\n                pushToStart(upIndexes, i);\n                pushToStart(downIndexes, i);\n            }\n        }\n\n        if (lowPriorityIndexes) {\n            for (const i of lowPriorityIndexes) {\n                pushToEnd(upIndexes, i);\n                pushToEnd(downIndexes, i);\n            }\n        }\n        //\n        const upItems = upIndexes.map((i) => this.viewItems[i]);\n        const upSizes = upIndexes.map((i) => sizes[i]);\n        //\n        const downItems = downIndexes.map((i) => this.viewItems[i]);\n        const downSizes = downIndexes.map((i) => sizes[i]);\n        //\n        const minDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].minimumSize - sizes[i],\n            0\n        );\n        const maxDeltaUp = upIndexes.reduce(\n            (_, i) => _ + this.viewItems[i].maximumSize - sizes[i],\n            0\n        );\n        //\n        const maxDeltaDown =\n            downIndexes.length === 0\n                ? Number.POSITIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].minimumSize,\n\n                      0\n                  );\n        const minDeltaDown =\n            downIndexes.length === 0\n                ? Number.NEGATIVE_INFINITY\n                : downIndexes.reduce(\n                      (_, i) => _ + sizes[i] - this.viewItems[i].maximumSize,\n                      0\n                  );\n        //\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        //\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n\n        if (snapped) {\n            return this.resize(\n                index,\n                delta,\n                sizes,\n                lowPriorityIndexes,\n                highPriorityIndexes,\n                overloadMinDelta,\n                overloadMaxDelta\n            );\n        }\n        //\n        const tentativeDelta = clamp(delta, minDelta, maxDelta);\n        let actualDelta = 0;\n        //\n        let deltaUp = tentativeDelta;\n\n        for (let i = 0; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(\n                upSizes[i] + deltaUp,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - upSizes[i];\n\n            actualDelta += viewDelta;\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        //\n        let deltaDown = actualDelta;\n        for (let i = 0; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(\n                downSizes[i] - deltaDown,\n                item.minimumSize,\n                item.maximumSize\n            );\n            const viewDelta = size - downSizes[i];\n\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        //\n        return delta;\n    };\n\n    private createViewContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'view-container';\n        return element;\n    }\n\n    private createSashContainer(): HTMLElement {\n        const element = document.createElement('div');\n        element.className = 'sash-container';\n        return element;\n    }\n\n    private createContainer(): HTMLElement {\n        const element = document.createElement('div');\n        const orientationClassname =\n            this._orientation === Orientation.HORIZONTAL\n                ? 'horizontal'\n                : 'vertical';\n        element.className = `split-view-container ${orientationClassname}`;\n        return element;\n    }\n\n    public dispose(): void {\n        this._onDidSashEnd.dispose();\n        this._onDidAddView.dispose();\n        this._onDidRemoveView.dispose();\n\n        for (let i = 0; i < this.element.children.length; i++) {\n            if (this.element.children.item(i) === this.element) {\n                this.element.removeChild(this.element);\n                break;\n            }\n        }\n\n        for (const viewItem of this.viewItems) {\n            viewItem.dispose();\n        }\n\n        this.element.remove();\n    }\n}\n","import {\n    Splitview,\n    Orientation,\n    ISplitViewDescriptor,\n    Sizing,\n} from '../splitview/splitview';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { Emitter, Event } from '../events';\nimport { addClasses, removeClasses } from '../dom';\nimport { PaneviewPanel } from './paneviewPanel';\n\ninterface PaneItem {\n    pane: PaneviewPanel;\n    disposable: IDisposable;\n}\n\nexport class Paneview extends CompositeDisposable implements IDisposable {\n    private element: HTMLElement;\n    private splitview: Splitview;\n    private paneItems: PaneItem[] = [];\n    private _orientation: Orientation;\n    private animationTimer: any;\n    private skipAnimation = false;\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    get onDidAddView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidAddView;\n    }\n    get onDidRemoveView(): Event<PaneviewPanel> {\n        return <Event<PaneviewPanel>>this.splitview.onDidRemoveView;\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get size(): number {\n        return this.splitview.size;\n    }\n\n    get orthogonalSize(): number {\n        return this.splitview.orthogonalSize;\n    }\n\n    constructor(\n        container: HTMLElement,\n        options: { orientation: Orientation; descriptor?: ISplitViewDescriptor }\n    ) {\n        super();\n\n        this._orientation = options.orientation ?? Orientation.VERTICAL;\n\n        this.element = document.createElement('div');\n        this.element.className = 'pane-container';\n\n        container.appendChild(this.element);\n\n        this.splitview = new Splitview(this.element, {\n            orientation: this._orientation,\n            proportionalLayout: false,\n            descriptor: options.descriptor,\n        });\n\n        // if we've added views from the descriptor we need to\n        // add the panes to our Pane array and setup animation\n        this.getPanes().forEach((pane) => {\n            const disposable = new CompositeDisposable(\n                pane.onDidChangeExpansionState(() => {\n                    this.setupAnimation();\n                    this._onDidChange.fire(undefined);\n                })\n            );\n\n            const paneItem: PaneItem = {\n                pane,\n                disposable: {\n                    dispose: () => {\n                        disposable.dispose();\n                    },\n                },\n            };\n\n            this.paneItems.push(paneItem);\n            pane.orthogonalSize = this.splitview.orthogonalSize;\n        });\n\n        this.addDisposables(\n            this._onDidChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire(undefined);\n            }),\n            this.splitview.onDidAddView(() => {\n                this._onDidChange.fire();\n            }),\n            this.splitview.onDidRemoveView(() => {\n                this._onDidChange.fire();\n            })\n        );\n    }\n\n    public addPane(\n        pane: PaneviewPanel,\n        size?: number | Sizing,\n        index = this.splitview.length,\n        skipLayout = false\n    ): void {\n        const disposable = pane.onDidChangeExpansionState(() => {\n            this.setupAnimation();\n            this._onDidChange.fire(undefined);\n        });\n\n        const paneItem: PaneItem = {\n            pane,\n            disposable: {\n                dispose: () => {\n                    disposable.dispose();\n                },\n            },\n        };\n\n        this.paneItems.splice(index, 0, paneItem);\n\n        pane.orthogonalSize = this.splitview.orthogonalSize;\n        this.splitview.addView(pane, size, index, skipLayout);\n    }\n\n    getViewSize(index: number): number {\n        return this.splitview.getViewSize(index);\n    }\n\n    public getPanes(): PaneviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    public removePane(\n        index: number,\n        options: { skipDispose: boolean } = { skipDispose: false }\n    ): PaneItem {\n        const paneItem = this.paneItems.splice(index, 1)[0];\n        this.splitview.removeView(index);\n\n        if (!options.skipDispose) {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        }\n\n        return paneItem;\n    }\n\n    public moveView(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        const view = this.removePane(from, { skipDispose: true });\n\n        this.skipAnimation = true;\n        try {\n            this.addPane(view.pane, view.pane.size, to, false);\n        } finally {\n            this.skipAnimation = false;\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private setupAnimation(): void {\n        if (this.skipAnimation) {\n            return;\n        }\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        addClasses(this.element, 'animated');\n\n        this.animationTimer = setTimeout(() => {\n            this.animationTimer = undefined;\n            removeClasses(this.element, 'animated');\n        }, 200);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        if (this.animationTimer) {\n            clearTimeout(this.animationTimer);\n            this.animationTimer = undefined;\n        }\n\n        this.paneItems.forEach((paneItem) => {\n            paneItem.disposable.dispose();\n            paneItem.pane.dispose();\n        });\n        this.paneItems = [];\n\n        this.splitview.dispose();\n        this.element.remove();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport { IView, LayoutPriority, Orientation } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IGridView } from './gridview';\nimport { IDisposable } from '../lifecycle';\n\nexport class LeafNode implements IView {\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n    private _size: number;\n    private _orthogonalSize: number;\n    private _disposable: IDisposable;\n\n    private get minimumWidth(): number {\n        return this.view.minimumWidth;\n    }\n\n    private get maximumWidth(): number {\n        return this.view.maximumWidth;\n    }\n\n    private get minimumHeight(): number {\n        return this.view.minimumHeight;\n    }\n\n    private get maximumHeight(): number {\n        return this.view.maximumHeight;\n    }\n\n    get priority(): LayoutPriority | undefined {\n        return this.view.priority;\n    }\n\n    get snap(): boolean | undefined {\n        return this.view.snap;\n    }\n\n    get minimumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumHeight\n            : this.minimumWidth;\n    }\n\n    get maximumSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumHeight\n            : this.maximumWidth;\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumWidth\n            : this.minimumHeight;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumWidth\n            : this.maximumHeight;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get element(): HTMLElement {\n        return this.view.element;\n    }\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    constructor(\n        public readonly view: IGridView,\n        readonly orientation: Orientation,\n        orthogonalSize: number,\n        size = 0\n    ) {\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n\n        this._disposable = this.view.onDidChange((event) => {\n            if (event) {\n                this._onDidChange.fire({\n                    size:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.width\n                            : event.height,\n                    orthogonalSize:\n                        this.orientation === Orientation.VERTICAL\n                            ? event.height\n                            : event.width,\n                });\n            } else {\n                this._onDidChange.fire({});\n            }\n        });\n    }\n\n    public setVisible(visible: boolean): void {\n        if (this.view.setVisible) {\n            this.view.setVisible(visible);\n        }\n    }\n\n    public layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n\n        this.view.layout(this.width, this.height);\n    }\n\n    public dispose(): void {\n        this._onDidChange.dispose();\n        this._disposable.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    IView,\n    Splitview,\n    Orientation,\n    Sizing,\n    LayoutPriority,\n    ISplitviewStyles,\n} from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { INodeDescriptor } from './gridview';\nimport { LeafNode } from './leafNode';\nimport { Node } from './types';\nimport { CompositeDisposable, IDisposable, Disposable } from '../lifecycle';\n\nexport class BranchNode extends CompositeDisposable implements IView {\n    readonly element: HTMLElement;\n    private splitview: Splitview;\n    private _orthogonalSize: number;\n    private _size: number;\n    private _childrenDisposable: IDisposable = Disposable.NONE;\n\n    public readonly children: Node[] = [];\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidVisibilityChange = new Emitter<boolean>();\n    readonly onDidVisibilityChange: Event<boolean> =\n        this._onDidVisibilityChange.event;\n\n    get width(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.size\n            : this.orthogonalSize;\n    }\n\n    get height(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.orthogonalSize\n            : this.size;\n    }\n\n    get minimumSize(): number {\n        return this.children.length === 0\n            ? 0\n            : Math.max(\n                  ...this.children.map((c, index) =>\n                      this.splitview.isViewVisible(index)\n                          ? c.minimumOrthogonalSize\n                          : 0\n                  )\n              );\n    }\n\n    get maximumSize(): number {\n        return Math.min(\n            ...this.children.map((c, index) =>\n                this.splitview.isViewVisible(index)\n                    ? c.maximumOrthogonalSize\n                    : Number.POSITIVE_INFINITY\n            )\n        );\n    }\n\n    get minimumOrthogonalSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumOrthogonalSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get minimumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumOrthogonalSize\n            : this.minimumSize;\n    }\n\n    get minimumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.minimumSize\n            : this.minimumOrthogonalSize;\n    }\n\n    get maximumWidth(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumOrthogonalSize\n            : this.maximumSize;\n    }\n\n    get maximumHeight(): number {\n        return this.orientation === Orientation.HORIZONTAL\n            ? this.maximumSize\n            : this.maximumOrthogonalSize;\n    }\n\n    get priority(): LayoutPriority {\n        if (this.children.length === 0) {\n            return LayoutPriority.Normal;\n        }\n\n        const priorities = this.children.map((c) =>\n            typeof c.priority === 'undefined'\n                ? LayoutPriority.Normal\n                : c.priority\n        );\n\n        if (priorities.some((p) => p === LayoutPriority.High)) {\n            return LayoutPriority.High;\n        } else if (priorities.some((p) => p === LayoutPriority.Low)) {\n            return LayoutPriority.Low;\n        }\n\n        return LayoutPriority.Normal;\n    }\n\n    constructor(\n        readonly orientation: Orientation,\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        size: number,\n        orthogonalSize: number,\n        childDescriptors?: INodeDescriptor[]\n    ) {\n        super();\n        this._orthogonalSize = orthogonalSize;\n        this._size = size;\n        this.element = document.createElement('div');\n        this.element.className = 'branch-node';\n\n        if (!childDescriptors) {\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                proportionalLayout,\n                styles,\n            });\n            this.splitview.layout(this.size, this.orthogonalSize);\n        } else {\n            const descriptor = {\n                views: childDescriptors.map((childDescriptor) => {\n                    return {\n                        view: childDescriptor.node,\n                        size: childDescriptor.node.size,\n                        visible:\n                            childDescriptor.node instanceof LeafNode &&\n                            childDescriptor.visible !== undefined\n                                ? childDescriptor.visible\n                                : true,\n                    };\n                }),\n                size: this.orthogonalSize,\n            };\n\n            this.children = childDescriptors.map((c) => c.node);\n            this.splitview = new Splitview(this.element, {\n                orientation: this.orientation,\n                descriptor,\n                proportionalLayout,\n                styles,\n            });\n        }\n\n        this.addDisposables(\n            this._onDidChange,\n            this._onDidVisibilityChange,\n            this.splitview.onDidSashEnd(() => {\n                this._onDidChange.fire({});\n            })\n        );\n\n        this.setupChildrenEvents();\n    }\n\n    setVisible(visible: boolean): void {\n        for (const child of this.children) {\n            child.setVisible(visible);\n        }\n    }\n\n    isChildVisible(index: number): boolean {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.isViewVisible(index);\n    }\n\n     setChildVisible(index: number, visible: boolean): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        if (this.splitview.isViewVisible(index) === visible) {\n            return;\n        }\n\n        const wereAllChildrenHidden = this.splitview.contentSize === 0;\n        this.splitview.setViewVisible(index, visible);\n        const areAllChildrenHidden = this.splitview.contentSize === 0;\n\n        // If all children are hidden then the parent should hide the entire splitview\n        // If the entire splitview is hidden then the parent should show the splitview when a child is shown\n        if (\n            (visible && wereAllChildrenHidden) ||\n            (!visible && areAllChildrenHidden)\n        ) {\n            this._onDidVisibilityChange.fire(visible);\n        }\n    }\n\n    moveChild(from: number, to: number): void {\n        if (from === to) {\n            return;\n        }\n\n        if (from < 0 || from >= this.children.length) {\n            throw new Error('Invalid from index');\n        }\n\n        if (from < to) {\n            to--;\n        }\n\n        this.splitview.moveView(from, to);\n\n        const child = this._removeChild(from);\n        this._addChild(child, to);\n    }\n\n    getChildSize(index: number): number {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewSize(index);\n    }\n\n    resizeChild(index: number, size: number): void {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.resizeView(index, size);\n    }\n\n    public layout(size: number, orthogonalSize: number) {\n        this._size = orthogonalSize;\n        this._orthogonalSize = size;\n\n        this.splitview.layout(orthogonalSize, size);\n    }\n\n    public addChild(\n        node: Node,\n        size: number | Sizing,\n        index: number,\n        skipLayout?: boolean\n    ): void {\n        if (index < 0 || index > this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.addView(node, size, index, skipLayout);\n        this._addChild(node, index);\n    }\n\n    getChildCachedVisibleSize(index: number): number | undefined {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        return this.splitview.getViewCachedVisibleSize(index);\n    }\n\n    public removeChild(index: number, sizing?: Sizing): Node {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error('Invalid index');\n        }\n\n        this.splitview.removeView(index, sizing);\n        return this._removeChild(index);\n    }\n\n    private _addChild(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        this.setupChildrenEvents();\n    }\n\n    private _removeChild(index: number): Node {\n        const [child] = this.children.splice(index, 1);\n        this.setupChildrenEvents();\n\n        return child;\n    }\n\n    private setupChildrenEvents(): void {\n        this._childrenDisposable.dispose();\n\n        this._childrenDisposable = new CompositeDisposable(\n            Event.any(...this.children.map((c) => c.onDidChange))((e) => {\n                /**\n                 * indicate a change has occured to allows any re-rendering but don't bubble\n                 * event because that was specific to this branch\n                 */\n                this._onDidChange.fire({ size: e.orthogonalSize });\n            }),\n            ...this.children.map((c, i) => {\n                if (c instanceof BranchNode) {\n                    return c.onDidVisibilityChange((visible) => {\n                        this.setChildVisible(i, visible);\n                    });\n                }\n                return Disposable.NONE;\n            })\n        );\n    }\n\n    public dispose(): void {\n        this._childrenDisposable.dispose();\n        this.splitview.dispose();\n        this.children.forEach((child) => child.dispose());\n\n        super.dispose();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n * Accreditation: This file is largly based upon the MIT licenced VSCode sourcecode found at:\n * https://github.com/microsoft/vscode/tree/main/src/vs/base/browser/ui/grid\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n    ISplitviewStyles,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n} from '../splitview/splitview';\nimport { tail } from '../array';\nimport { LeafNode } from './leafNode';\nimport { BranchNode } from './branchNode';\nimport { Node } from './types';\nimport { Emitter, Event } from '../events';\nimport { IDisposable, MutableDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\n\nfunction findLeaf(candiateNode: Node, last: boolean): LeafNode {\n    if (candiateNode instanceof LeafNode) {\n        return candiateNode;\n    }\n    if (candiateNode instanceof BranchNode) {\n        return findLeaf(\n            candiateNode.children[last ? candiateNode.children.length - 1 : 0],\n            last\n        );\n    }\n    throw new Error('invalid node');\n}\n\nfunction flipNode<T extends Node>(\n    node: T,\n    size: number,\n    orthogonalSize: number\n): T {\n    if (node instanceof BranchNode) {\n        const result = new BranchNode(\n            orthogonal(node.orientation),\n            node.proportionalLayout,\n            node.styles,\n            size,\n            orthogonalSize\n        );\n\n        let totalSize = 0;\n\n        for (let i = node.children.length - 1; i >= 0; i--) {\n            const child = node.children[i];\n            const childSize =\n                child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n            let newSize =\n                node.size === 0\n                    ? 0\n                    : Math.round((size * childSize) / node.size);\n            totalSize += newSize;\n\n            // The last view to add should adjust to rounding errors\n            if (i === 0) {\n                newSize += size - totalSize;\n            }\n\n            result.addChild(\n                flipNode(child, orthogonalSize, newSize),\n                newSize,\n                0,\n                true\n            );\n        }\n\n        return result as T;\n    } else {\n        return new LeafNode(\n            node.view,\n            orthogonal(node.orientation),\n            orthogonalSize\n        ) as T;\n    }\n}\n\nexport function indexInParent(element: HTMLElement): number {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    let el = parentElement.firstElementChild;\n    let index = 0;\n\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n\n    return index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nexport function getGridLocation(element: HTMLElement): number[] {\n    const parentElement = element.parentElement;\n\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n\n    if (/\\bgrid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n\n    const index = indexInParent(parentElement);\n    const ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n    return [...getGridLocation(ancestor), index];\n}\n\nexport function getRelativeLocation(\n    rootOrientation: Orientation,\n    location: number[],\n    direction: Position\n): number[] {\n    const orientation = getLocationOrientation(rootOrientation, location);\n    const directionOrientation = getDirectionOrientation(direction);\n\n    if (orientation === directionOrientation) {\n        const [rest, _index] = tail(location);\n        let index = _index;\n\n        if (direction === 'right' || direction === 'bottom') {\n            index += 1;\n        }\n\n        return [...rest, index];\n    } else {\n        const index = direction === 'right' || direction === 'bottom' ? 1 : 0;\n        return [...location, index];\n    }\n}\n\nexport function getDirectionOrientation(direction: Position): Orientation {\n    return direction === 'top' || direction === 'bottom'\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n}\n\nexport function getLocationOrientation(\n    rootOrientation: Orientation,\n    location: number[]\n): Orientation {\n    return location.length % 2 === 0\n        ? orthogonal(rootOrientation)\n        : rootOrientation;\n}\n\nexport interface IViewSize {\n    width?: number;\n    height?: number;\n}\n\nexport interface IGridView {\n    readonly onDidChange: Event<IViewSize | undefined>;\n    readonly element: HTMLElement;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    priority?: LayoutPriority;\n    layout(width: number, height: number): void;\n    toJSON(): object;\n    fromJSON?(json: object): void;\n    snap?: boolean;\n    setVisible?(visible: boolean): void;\n}\n\nexport const orthogonal = (orientation: Orientation) =>\n    orientation === Orientation.HORIZONTAL\n        ? Orientation.VERTICAL\n        : Orientation.HORIZONTAL;\n\nexport interface GridLeafNode<T extends IGridView> {\n    readonly view: T;\n    readonly cachedVisibleSize: number | undefined;\n    readonly box: { width: number; height: number };\n}\n\nexport interface GridBranchNode<T extends IGridView> {\n    readonly children: GridNode<T>[];\n    readonly box: { width: number; height: number };\n}\n\nexport type GridNode<T extends IGridView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IGridView>(\n    node: GridNode<T>\n): node is GridBranchNode<T> {\n    return !!(node as any).children;\n}\n\nexport interface SerializedGridObject<T> {\n    type: 'leaf' | 'branch';\n    data: T | SerializedGridObject<T>[];\n    size?: number;\n    visible?: boolean;\n}\n\nconst serializeBranchNode = <T extends IGridView>(\n    node: GridNode<T>,\n    orientation: Orientation\n): SerializedGridObject<any> => {\n    const size =\n        orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n    if (!isGridBranchNode(node)) {\n        if (typeof node.cachedVisibleSize === 'number') {\n            return {\n                type: 'leaf',\n                data: node.view.toJSON(),\n                size: node.cachedVisibleSize,\n                visible: false,\n            };\n        }\n\n        return { type: 'leaf', data: node.view.toJSON(), size };\n    }\n\n    return {\n        type: 'branch',\n        data: node.children.map((c) =>\n            serializeBranchNode(c, orthogonal(orientation))\n        ),\n        size,\n    };\n};\n\nexport interface ISerializedLeafNode<T = any> {\n    type: 'leaf';\n    data: T;\n    size: number;\n    visible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n    type: 'branch';\n    data: ISerializedNode[];\n    size: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface INodeDescriptor {\n    node: Node;\n    visible?: boolean;\n}\n\nexport interface IViewDeserializer {\n    fromJSON: (data: ISerializedLeafNode) => IGridView;\n}\n\nexport interface SerializedGridview<T> {\n    root: SerializedGridObject<T>;\n    width: number;\n    height: number;\n    orientation: Orientation;\n}\n\nexport class Gridview implements IDisposable {\n    readonly element: HTMLElement;\n\n    private _root: BranchNode | undefined;\n    private _maximizedNode: LeafNode | undefined = undefined;\n    private readonly disposable: MutableDisposable = new MutableDisposable();\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private readonly _onDidMaxmizedNodeChange = new Emitter<void>();\n    readonly onDidMaxmizedNodeChange = this._onDidMaxmizedNodeChange.event;\n\n    public get length(): number {\n        return this._root ? this._root.children.length : 0;\n    }\n\n    public get orientation(): Orientation {\n        return this.root.orientation;\n    }\n\n    public set orientation(orientation: Orientation) {\n        if (this.root.orientation === orientation) {\n            return;\n        }\n\n        const { size, orthogonalSize } = this.root;\n        this.root = flipNode(this.root, orthogonalSize, size);\n        this.root.layout(size, orthogonalSize);\n    }\n\n    get width(): number {\n        return this.root.width;\n    }\n\n    get height(): number {\n        return this.root.height;\n    }\n\n    get minimumWidth(): number {\n        return this.root.minimumWidth;\n    }\n\n    get minimumHeight(): number {\n        return this.root.minimumHeight;\n    }\n\n    get maximumWidth(): number {\n        return this.root.maximumHeight;\n    }\n\n    get maximumHeight(): number {\n        return this.root.maximumHeight;\n    }\n\n    maximizedView(): IGridView | undefined {\n        return this._maximizedNode?.view;\n    }\n\n    hasMaximizedView(): boolean {\n        return this._maximizedNode !== undefined;\n    }\n\n    maximizeView(view: IGridView): void {\n        const location = getGridLocation(view.element);\n        const [_, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            return;\n        }\n\n        if (this._maximizedNode === node) {\n            return;\n        }\n\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        function hideAllViewsBut(parent: BranchNode, exclude: LeafNode): void {\n            for (let i = 0; i < parent.children.length; i++) {\n                const child = parent.children[i];\n                if (child instanceof LeafNode) {\n                    if (child !== exclude) {\n                        parent.setChildVisible(i, false);\n                    }\n                } else {\n                    hideAllViewsBut(child, exclude);\n                }\n            }\n        }\n\n        hideAllViewsBut(this.root, node);\n        this._maximizedNode = node;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    exitMaximizedView(): void {\n        if (!this._maximizedNode) {\n            return;\n        }\n\n        function showViewsInReverseOrder(parent: BranchNode): void {\n            for (let index = parent.children.length - 1; index >= 0; index--) {\n                const child = parent.children[index];\n                if (child instanceof LeafNode) {\n                    parent.setChildVisible(index, true);\n                } else {\n                    showViewsInReverseOrder(child);\n                }\n            }\n        }\n\n        showViewsInReverseOrder(this.root);\n\n        this._maximizedNode = undefined;\n        this._onDidMaxmizedNodeChange.fire();\n    }\n\n    public serialize(): SerializedGridview<any> {\n        const root = serializeBranchNode(this.getView(), this.orientation);\n\n        return {\n            root,\n            width: this.width,\n            height: this.height,\n            orientation: this.orientation,\n        };\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        this._onDidChange.dispose();\n        this._onDidMaxmizedNodeChange.dispose();\n        this.root.dispose();\n\n        this.element.remove();\n    }\n\n    public clear(): void {\n        const orientation = this.root.orientation;\n        this.root = new BranchNode(\n            orientation,\n            this.proportionalLayout,\n            this.styles,\n            this.root.size,\n            this.root.orthogonalSize\n        );\n    }\n\n    public deserialize(json: any, deserializer: IViewDeserializer): void {\n        const orientation = json.orientation;\n        const height =\n            orientation === Orientation.VERTICAL ? json.height : json.width;\n        this._deserialize(\n            json.root as ISerializedBranchNode,\n            orientation,\n            deserializer,\n            height\n        );\n    }\n\n    private _deserialize(\n        root: ISerializedBranchNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): void {\n        this.root = this._deserializeNode(\n            root,\n            orientation,\n            deserializer,\n            orthogonalSize\n        ) as BranchNode;\n    }\n\n    private _deserializeNode(\n        node: ISerializedNode,\n        orientation: Orientation,\n        deserializer: IViewDeserializer,\n        orthogonalSize: number\n    ): Node {\n        let result: Node;\n        if (node.type === 'branch') {\n            const serializedChildren = node.data;\n            const children = serializedChildren.map((serializedChild) => {\n                return {\n                    node: this._deserializeNode(\n                        serializedChild,\n                        orthogonal(orientation),\n                        deserializer,\n                        node.size\n                    ),\n                    visible: (serializedChild as { visible: boolean }).visible,\n                } as INodeDescriptor;\n            });\n\n            result = new BranchNode(\n                orientation,\n                this.proportionalLayout,\n                this.styles,\n                node.size, // <- orthogonal size - flips at each depth\n                orthogonalSize, // <- size - flips at each depth\n\n                children\n            );\n        } else {\n            result = new LeafNode(\n                deserializer.fromJSON(node),\n                orientation,\n                orthogonalSize,\n                node.size\n            );\n        }\n\n        return result;\n    }\n\n    private get root(): BranchNode {\n        return this._root!;\n    }\n\n    private set root(root: BranchNode) {\n        const oldRoot = this._root;\n\n        if (oldRoot) {\n            oldRoot.dispose();\n            this.element.removeChild(oldRoot.element);\n        }\n\n        this._root = root;\n        this.element.appendChild(this._root.element);\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    /**\n     * If the root is orientated as a VERTICAL node then nest the existing root within a new HORIZIONTAL root node\n     * If the root is orientated as a HORIZONTAL node then nest the existing root within a new VERITCAL root node\n     */\n    public insertOrthogonalSplitviewAtRoot(): void {\n        if (!this._root) {\n            return;\n        }\n\n        const oldRoot = this.root;\n        oldRoot.element.remove();\n\n        this._root = new BranchNode(\n            orthogonal(oldRoot.orientation),\n            this.proportionalLayout,\n            this.styles,\n            this.root.orthogonalSize,\n            this.root.size\n        );\n\n        if (oldRoot.children.length === 0) {\n            // no data so no need to add anything back in\n        } else if (oldRoot.children.length === 1) {\n            // can remove one level of redundant branching if there is only a single child\n            const childReference = oldRoot.children[0];\n            const child = oldRoot.removeChild(0); // remove to prevent disposal when disposing of unwanted root\n            child.dispose();\n            oldRoot.dispose();\n\n            this._root.addChild(\n                /**\n                 * the child node will have the same orientation as the new root since\n                 * we are removing the inbetween node.\n                 * the entire 'tree' must be flipped recursively to ensure that the orientation\n                 * flips at each level\n                 */\n                flipNode(\n                    childReference,\n                    childReference.orthogonalSize,\n                    childReference.size\n                ),\n                Sizing.Distribute,\n                0\n            );\n        } else {\n            this._root.addChild(oldRoot, Sizing.Distribute, 0);\n        }\n\n        this.element.appendChild(this._root.element);\n\n        this.disposable.value = this._root.onDidChange((e) => {\n            this._onDidChange.fire(e);\n        });\n    }\n\n    public next(location: number[]): LeafNode {\n        return this.progmaticSelect(location);\n    }\n\n    public previous(location: number[]): LeafNode {\n        return this.progmaticSelect(location, true);\n    }\n\n    getView(): GridBranchNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView>;\n    getView(location?: number[]): GridNode<IGridView> {\n        const node = location ? this.getNode(location)[1] : this.root;\n        return this._getViews(node, this.orientation);\n    }\n\n    private _getViews(\n        node: Node,\n        orientation: Orientation,\n        cachedVisibleSize?: number\n    ): GridNode<IGridView> {\n        const box = { height: node.height, width: node.width };\n\n        if (node instanceof LeafNode) {\n            return { box, view: node.view, cachedVisibleSize };\n        }\n\n        const children: GridNode<IGridView>[] = [];\n\n        for (let i = 0; i < node.children.length; i++) {\n            const child = node.children[i];\n            const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n            children.push(\n                this._getViews(\n                    child,\n                    orthogonal(orientation),\n                    nodeCachedVisibleSize\n                )\n            );\n        }\n\n        return { box, children };\n    }\n\n    private progmaticSelect(location: number[], reverse = false): LeafNode {\n        const [path, node] = this.getNode(location);\n\n        if (!(node instanceof LeafNode)) {\n            throw new Error('invalid location');\n        }\n\n        for (let i = path.length - 1; i > -1; i--) {\n            const n = path[i];\n            const l = location[i] || 0;\n            const canProgressInCurrentLevel = reverse\n                ? l - 1 > -1\n                : l + 1 < n.children.length;\n            if (canProgressInCurrentLevel) {\n                return findLeaf(n.children[reverse ? l - 1 : l + 1], reverse);\n            }\n        }\n\n        return findLeaf(this.root, reverse);\n    }\n\n    constructor(\n        readonly proportionalLayout: boolean,\n        readonly styles: ISplitviewStyles | undefined,\n        orientation: Orientation\n    ) {\n        this.element = document.createElement('div');\n        this.element.className = 'grid-view';\n        this.root = new BranchNode(\n            orientation,\n            proportionalLayout,\n            styles,\n            0,\n            0\n        );\n    }\n\n    isViewVisible(location: number[]): boolean {\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        return parent.isChildVisible(index);\n    }\n\n    setViewVisible(location: number[], visible: boolean): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid from location');\n        }\n\n        parent.setChildVisible(index, visible);\n    }\n\n    public moveView(parentLocation: number[], from: number, to: number): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [, parent] = this.getNode(parentLocation);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.moveChild(from, to);\n    }\n\n    public addView(\n        view: IGridView,\n        size: number | Sizing,\n        location: number[]\n    ): void {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (parent instanceof BranchNode) {\n            const node = new LeafNode(\n                view,\n                orthogonal(parent.orientation),\n                parent.orthogonalSize\n            );\n            parent.addChild(node, size, index);\n        } else {\n            const [grandParent, ..._] = [...pathToParent].reverse();\n            const [parentIndex, ...__] = [...rest].reverse();\n\n            let newSiblingSize: number | Sizing = 0;\n\n            const newSiblingCachedVisibleSize =\n                grandParent.getChildCachedVisibleSize(parentIndex);\n            if (typeof newSiblingCachedVisibleSize === 'number') {\n                newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n            }\n\n            const child = grandParent.removeChild(parentIndex);\n            child.dispose();\n\n            const newParent = new BranchNode(\n                parent.orientation,\n                this.proportionalLayout,\n                this.styles,\n                parent.size,\n                parent.orthogonalSize\n            );\n            grandParent.addChild(newParent, parent.size, parentIndex);\n\n            const newSibling = new LeafNode(\n                parent.view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(newSibling, newSiblingSize, 0);\n\n            if (typeof size !== 'number' && size.type === 'split') {\n                size = { type: 'split', index: 0 };\n            }\n\n            const node = new LeafNode(\n                view,\n                grandParent.orientation,\n                parent.size\n            );\n            newParent.addChild(node, size, index);\n        }\n    }\n\n    public remove(view: IGridView, sizing?: Sizing): IGridView {\n        const location = getGridLocation(view.element);\n        return this.removeView(location, sizing);\n    }\n\n    removeView(location: number[], sizing?: Sizing): IGridView {\n        if (this.hasMaximizedView()) {\n            this.exitMaximizedView();\n        }\n\n        const [rest, index] = tail(location);\n        const [pathToParent, parent] = this.getNode(rest);\n\n        if (!(parent instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const nodeToRemove = parent.children[index];\n\n        if (!(nodeToRemove instanceof LeafNode)) {\n            throw new Error('Invalid location');\n        }\n\n        parent.removeChild(index, sizing);\n        nodeToRemove.dispose();\n\n        if (parent.children.length !== 1) {\n            return nodeToRemove.view;\n        }\n\n        // if the parent has only one child and we know the parent is a BranchNode we can make the tree\n        // more efficiently spaced by replacing the parent BranchNode with the child.\n        // if that child is a LeafNode then we simply replace the BranchNode with the child otherwise if the child\n        // is a BranchNode too we should spread it's children into the grandparent.\n\n        // refer to the remaining child as the sibling\n        const sibling = parent.children[0];\n\n        if (pathToParent.length === 0) {\n            // if the parent is root\n\n            if (sibling instanceof LeafNode) {\n                // if the sibling is a leaf node no action is required\n                return nodeToRemove.view;\n            }\n\n            // otherwise the sibling is a branch node. since the parent is the root and the root has only one child\n            // which is a branch node we can just set this branch node to be the new root node\n\n            // for good housekeeping we'll removing the sibling from it's existing tree\n            parent.removeChild(0, sizing);\n\n            // and set that sibling node to be root\n            this.root = sibling;\n\n            return nodeToRemove.view;\n        }\n\n        // otherwise the parent is apart of a large sub-tree\n\n        const [grandParent, ..._] = [...pathToParent].reverse();\n        const [parentIndex, ...__] = [...rest].reverse();\n\n        const isSiblingVisible = parent.isChildVisible(0);\n\n        // either way we need to remove the sibling from it's existing tree\n        parent.removeChild(0, sizing);\n\n        // note the sizes of all of the grandparents children\n        const sizes = grandParent.children.map((_size, i) =>\n            grandParent.getChildSize(i)\n        );\n\n        // remove the parent from the grandparent since we are moving the sibling to take the parents place\n        // this parent is no longer used and can be disposed of\n        grandParent.removeChild(parentIndex, sizing).dispose();\n\n        if (sibling instanceof BranchNode) {\n            // replace the parent with the siblings children\n            sizes.splice(\n                parentIndex,\n                1,\n                ...sibling.children.map((c) => c.size)\n            );\n\n            // and add those siblings to the grandparent\n            for (let i = 0; i < sibling.children.length; i++) {\n                const child = sibling.children[i];\n                grandParent.addChild(child, child.size, parentIndex + i);\n            }\n\n            /**\n             * clean down the branch node since we need to dipose of it and\n             * when .dispose() it called on a branch it will dispose of any\n             * views it is holding onto.\n             */\n            while (sibling.children.length > 0) {\n                sibling.removeChild(0);\n            }\n        } else {\n            // otherwise create a new leaf node and add that to the grandparent\n\n            const newSibling = new LeafNode(\n                sibling.view,\n                orthogonal(sibling.orientation),\n                sibling.size\n            );\n            const siblingSizing = isSiblingVisible\n                ? sibling.orthogonalSize\n                : Sizing.Invisible(sibling.orthogonalSize);\n\n            grandParent.addChild(newSibling, siblingSizing, parentIndex);\n        }\n\n        // the containing node of the sibling is no longer required and can be disposed of\n        sibling.dispose();\n\n        // resize everything\n        for (let i = 0; i < sizes.length; i++) {\n            grandParent.resizeChild(i, sizes[i]);\n        }\n\n        return nodeToRemove.view;\n    }\n\n    public layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.root.orientation === Orientation.HORIZONTAL\n                ? [height, width]\n                : [width, height];\n        this.root.layout(size, orthogonalSize);\n    }\n\n    private getNode(\n        location: number[],\n        node: Node = this.root,\n        path: BranchNode[] = []\n    ): [BranchNode[], Node] {\n        if (location.length === 0) {\n            return [path, node];\n        }\n\n        if (!(node instanceof BranchNode)) {\n            throw new Error('Invalid location');\n        }\n\n        const [index, ...rest] = location;\n\n        if (index < 0 || index >= node.children.length) {\n            throw new Error('Invalid location');\n        }\n\n        const child = node.children[index];\n        path.push(node);\n\n        return this.getNode(rest, child, path);\n    }\n}\n","import {\n    DockviewDropEvent,\n    IDockviewComponent,\n    SerializedDockview,\n} from '../dockview/dockviewComponent';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    MovementOptions,\n} from '../dockview/options';\nimport { Parameters } from '../panel/types';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport {\n    AddComponentOptions,\n    IGridviewComponent,\n    SerializedGridviewComponent,\n} from '../gridview/gridviewComponent';\nimport { IGridviewPanel } from '../gridview/gridviewPanel';\n\nimport {\n    AddPaneviewComponentOptions,\n    SerializedPaneview,\n    IPaneviewComponent,\n} from '../paneview/paneviewComponent';\nimport { IPaneviewPanel } from '../paneview/paneviewPanel';\nimport {\n    AddSplitviewComponentOptions,\n    ISplitviewComponent,\n    SerializedSplitview,\n    SplitviewComponentUpdateOptions,\n} from '../splitview/splitviewComponent';\nimport { IView, Orientation, Sizing } from '../splitview/splitview';\nimport { ISplitviewPanel } from '../splitview/splitviewPanel';\nimport {\n    DockviewGroupPanel,\n    IDockviewGroupPanel,\n} from '../dockview/dockviewGroupPanel';\nimport { Emitter, Event } from '../events';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport { PaneviewDropEvent } from '../paneview/draggablePaneviewPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from '../dockview/components/titlebar/tabsContainer';\nimport { Box } from '../types';\n\nexport interface CommonApi<T = any> {\n    readonly height: number;\n    readonly width: number;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    focus(): void;\n    layout(width: number, height: number): void;\n    fromJSON(data: T): void;\n    toJSON(): T;\n    clear(): void;\n}\n\nexport class SplitviewApi implements CommonApi<SerializedSplitview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n    /**\n     * The current number of panels.\n     */\n    get length(): number {\n        return this.component.length;\n    }\n\n    /**\n     * The current orientation of the component.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    /**\n     * The list of current panels.\n     */\n    get panels(): ISplitviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked after a layout is loaded through the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked whenever any aspect of the layout changes.\n     * If listening to this event it may be worth debouncing ouputs.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a view is added.\n     */\n    get onDidAddView(): Event<IView> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a view is removed.\n     */\n    get onDidRemoveView(): Event<IView> {\n        return this.component.onDidRemoveView;\n    }\n\n    constructor(private readonly component: ISplitviewComponent) {}\n\n    /**\n     * Update configuratable options.\n     */\n    updateOptions(options: SplitviewComponentUpdateOptions): void {\n        this.component.updateOptions(options);\n    }\n\n    /**\n     * Removes an existing panel and optionally provide a `Sizing` method\n     * for the subsequent resize.\n     */\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Focus the component.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get the reference to a panel given it's `string` id.\n     */\n    getPanel(id: string): ISplitviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Layout the panel with a width and height.\n     */\n    layout(width: number, height: number): void {\n        return this.component.layout(width, height);\n    }\n\n    /**\n     * Add a new panel and return the created instance.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     * Deserialize a layout to built a splitivew.\n     */\n    fromJSON(data: SerializedSplitview): void {\n        this.component.fromJSON(data);\n    }\n\n    /** Serialize a layout */\n    toJSON(): SerializedSplitview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Remove all panels and clear the component.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class PaneviewApi implements CommonApi<SerializedPaneview> {\n    /**\n     * The minimum size  the component can reach where size is measured in the direction of orientation provided.\n     */\n    get minimumSize(): number {\n        return this.component.minimumSize;\n    }\n\n    /**\n     * The maximum size the component can reach where size is measured in the direction of orientation provided.\n     */\n    get maximumSize(): number {\n        return this.component.maximumSize;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IPaneviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddView(): Event<IPaneviewPanel> {\n        return this.component.onDidAddView;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemoveView(): Event<IPaneviewPanel> {\n        return this.component.onDidRemoveView;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<PaneviewDropEvent> {\n        const emitter = new Emitter<PaneviewDropEvent>();\n\n        const disposable = this.component.onDidDrop((e) => {\n            emitter.fire({ ...e, api: this });\n        });\n\n        emitter.dispose = () => {\n            disposable.dispose();\n            emitter.dispose();\n        };\n\n        return emitter.event;\n    }\n\n    constructor(private readonly component: IPaneviewComponent) {}\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IPaneviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IPaneviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Move a panel given it's current and desired index.\n     */\n    movePanel(from: number, to: number): void {\n        this.component.movePanel(from, to);\n    }\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number): void {\n        this.component.layout(width, height);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedPaneview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedPaneview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class GridviewApi implements CommonApi<SerializedGridviewComponent> {\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IGridviewPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IGridviewPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IGridviewPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IGridviewPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     * Current orientation. Can be changed after initialization.\n     */\n    get orientation(): Orientation {\n        return this.component.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.component.updateOptions({ orientation: value });\n    }\n\n    constructor(private readonly component: IGridviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void {\n        this.component.removePanel(panel, sizing);\n    }\n\n    /**\n     * Move a panel in a particular direction relative to another panel.\n     */\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        this.component.movePanel(panel, options);\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IGridviewPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedGridviewComponent): void {\n        return this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedGridviewComponent {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n}\n\nexport class DockviewApi implements CommonApi<SerializedDockview> {\n    /**\n     * The unique identifier for this instance. Used to manage scope of Drag'n'Drop events.\n     */\n    get id(): string {\n        return this.component.id;\n    }\n\n    /**\n     * Width of the component.\n     */\n    get width(): number {\n        return this.component.width;\n    }\n\n    /**\n     * Height of the component.\n     */\n    get height(): number {\n        return this.component.height;\n    }\n\n    /**\n     * Minimum height of the component.\n     */\n    get minimumHeight(): number {\n        return this.component.minimumHeight;\n    }\n\n    /**\n     * Maximum height of the component.\n     */\n    get maximumHeight(): number {\n        return this.component.maximumHeight;\n    }\n\n    /**\n     * Minimum width of the component.\n     */\n    get minimumWidth(): number {\n        return this.component.minimumWidth;\n    }\n\n    /**\n     * Maximum width of the component.\n     */\n    get maximumWidth(): number {\n        return this.component.maximumWidth;\n    }\n\n    /**\n     * Total number of groups.\n     */\n    get size(): number {\n        return this.component.size;\n    }\n\n    /**\n     * Total number of panels.\n     */\n    get totalPanels(): number {\n        return this.component.totalPanels;\n    }\n\n    /**\n     * Invoked when the active group changes. May be undefined if no group is active.\n     */\n    get onDidActiveGroupChange(): Event<DockviewGroupPanel | undefined> {\n        return this.component.onDidActiveGroupChange;\n    }\n\n    /**\n     * Invoked when a group is added. May be called multiple times when moving groups.\n     */\n    get onDidAddGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidAddGroup;\n    }\n\n    /**\n     * Invoked when a group is removed. May be called multiple times when moving groups.\n     */\n    get onDidRemoveGroup(): Event<DockviewGroupPanel> {\n        return this.component.onDidRemoveGroup;\n    }\n\n    /**\n     * Invoked when the active panel changes. May be undefined if no panel is active.\n     */\n    get onDidActivePanelChange(): Event<IDockviewPanel | undefined> {\n        return this.component.onDidActivePanelChange;\n    }\n\n    /**\n     * Invoked when a panel is added. May be called multiple times when moving panels.\n     */\n    get onDidAddPanel(): Event<IDockviewPanel> {\n        return this.component.onDidAddPanel;\n    }\n\n    /**\n     * Invoked when a panel is removed. May be called multiple times when moving panels.\n     */\n    get onDidRemovePanel(): Event<IDockviewPanel> {\n        return this.component.onDidRemovePanel;\n    }\n\n    /**\n     * Invoked after a layout is deserialzied using the `fromJSON` method.\n     */\n    get onDidLayoutFromJSON(): Event<void> {\n        return this.component.onDidLayoutFromJSON;\n    }\n\n    /**\n     * Invoked when any layout change occures, an aggregation of many events.\n     */\n    get onDidLayoutChange(): Event<void> {\n        return this.component.onDidLayoutChange;\n    }\n\n    /**\n     * Invoked when a Drag'n'Drop event occurs that the component was unable to handle. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onDidDrop(): Event<DockviewDropEvent> {\n        return this.component.onDidDrop;\n    }\n\n    /**\n     * Invoked before a group is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragGroup(): Event<GroupDragEvent> {\n        return this.component.onWillDragGroup;\n    }\n\n    /**\n     * Invoked before a panel is dragged. Exposed for custom Drag'n'Drop functionality.\n     */\n    get onWillDragPanel(): Event<TabDragEvent> {\n        return this.component.onWillDragPanel;\n    }\n\n    /**\n     * All panel objects.\n     */\n    get panels(): IDockviewPanel[] {\n        return this.component.panels;\n    }\n\n    /**\n     * All group objects.\n     */\n    get groups(): DockviewGroupPanel[] {\n        return this.component.groups;\n    }\n\n    /**\n     *  Active panel object.\n     */\n    get activePanel(): IDockviewPanel | undefined {\n        return this.component.activePanel;\n    }\n\n    /**\n     * Active group object.\n     */\n    get activeGroup(): DockviewGroupPanel | undefined {\n        return this.component.activeGroup;\n    }\n\n    constructor(private readonly component: IDockviewComponent) {}\n\n    /**\n     *  Focus the component. Will try to focus an active panel if one exists.\n     */\n    focus(): void {\n        this.component.focus();\n    }\n\n    /**\n     * Get a panel object given a `string` id. May return `undefined`.\n     */\n    getPanel(id: string): IDockviewPanel | undefined {\n        return this.component.getGroupPanel(id);\n    }\n\n    /**\n     * Force resize the component to an exact width and height. Read about auto-resizing before using.\n     */\n    layout(width: number, height: number, force = false): void {\n        this.component.layout(width, height, force);\n    }\n\n    /**\n     * Add a panel and return the created object.\n     */\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel {\n        return this.component.addPanel(options);\n    }\n\n    /**\n     * Remove a panel given the panel object.\n     */\n    removePanel(panel: IDockviewPanel): void {\n        this.component.removePanel(panel);\n    }\n\n    /**\n     * Add a group and return the created object.\n     */\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        return this.component.addGroup(options);\n    }\n\n    /**\n     * Close all groups and panels.\n     */\n    closeAllGroups(): void {\n        return this.component.closeAllGroups();\n    }\n\n    /**\n     * Remove a group and any panels within the group.\n     */\n    removeGroup(group: IDockviewGroupPanel): void {\n        this.component.removeGroup(<DockviewGroupPanel>group);\n    }\n\n    /**\n     * Get a group object given a `string` id. May return undefined.\n     */\n    getGroup(id: string): DockviewGroupPanel | undefined {\n        return this.component.getPanel(id);\n    }\n\n    /**\n     * Add a floating group\n     */\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void {\n        return this.component.addFloatingGroup(item, coord);\n    }\n\n    /**\n     * Create a component from a serialized object.\n     */\n    fromJSON(data: SerializedDockview): void {\n        this.component.fromJSON(data);\n    }\n\n    /**\n     * Create a serialized object of the current component.\n     */\n    toJSON(): SerializedDockview {\n        return this.component.toJSON();\n    }\n\n    /**\n     * Reset the component back to an empty and default state.\n     */\n    clear(): void {\n        this.component.clear();\n    }\n\n    /**\n     * Move the focus progmatically to the next panel or group.\n     */\n    moveToNext(options?: MovementOptions): void {\n        this.component.moveToNext(options);\n    }\n\n    /**\n     * Move the focus progmatically to the previous panel or group.\n     */\n    moveToPrevious(options?: MovementOptions): void {\n        this.component.moveToPrevious(options);\n    }\n\n    maximizeGroup(panel: IDockviewPanel): void {\n        this.component.maximizeGroup(panel.group);\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.component.hasMaximizedGroup();\n    }\n\n    exitMaxmizedGroup(): void {\n        this.component.exitMaximizedGroup();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.component.onDidMaxmizedGroupChange;\n    }\n\n    /**\n     * Add a popout group in a new Window\n     */\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        this.component.addPopoutGroup(item, options);\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\n\nexport interface IDragAndDropObserverCallbacks {\n    onDragEnter: (e: DragEvent) => void;\n    onDragLeave: (e: DragEvent) => void;\n    onDrop: (e: DragEvent) => void;\n    onDragEnd: (e: DragEvent) => void;\n    onDragOver?: (e: DragEvent) => void;\n}\n\nexport class DragAndDropObserver extends CompositeDisposable {\n    private target: EventTarget | null = null;\n\n    constructor(\n        private element: HTMLElement,\n        private callbacks: IDragAndDropObserverCallbacks\n    ) {\n        super();\n\n        this.registerListeners();\n    }\n\n    onDragEnter(e: DragEvent): void {\n        this.target = e.target;\n        this.callbacks.onDragEnter(e);\n    }\n\n    onDragOver(e: DragEvent): void {\n        e.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n        if (this.callbacks.onDragOver) {\n            this.callbacks.onDragOver(e);\n        }\n    }\n\n    onDragLeave(e: DragEvent): void {\n        if (this.target === e.target) {\n            this.target = null;\n\n            this.callbacks.onDragLeave(e);\n        }\n    }\n\n    onDragEnd(e: DragEvent): void {\n        this.target = null;\n        this.callbacks.onDragEnd(e);\n    }\n\n    onDrop(e: DragEvent): void {\n        this.callbacks.onDrop(e);\n    }\n\n    private registerListeners(): void {\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragenter',\n                (e: DragEvent) => {\n                    this.onDragEnter(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(\n                this.element,\n                'dragover',\n                (e: DragEvent) => {\n                    this.onDragOver(e);\n                },\n                true\n            )\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragleave', (e: DragEvent) => {\n                this.onDragLeave(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'dragend', (e: DragEvent) => {\n                this.onDragEnd(e);\n            })\n        );\n\n        this.addDisposables(\n            addDisposableListener(this.element, 'drop', (e: DragEvent) => {\n                this.onDrop(e);\n            })\n        );\n    }\n}\n\nexport interface IDraggedCompositeData {\n    eventData: DragEvent;\n    dragAndDropData: any;\n}\n\nexport interface ICompositeDragAndDropObserverCallbacks {\n    onDragEnter?: (e: IDraggedCompositeData) => void;\n    onDragLeave?: (e: IDraggedCompositeData) => void;\n    onDrop?: (e: IDraggedCompositeData) => void;\n    onDragOver?: (e: IDraggedCompositeData) => void;\n    onDragStart?: (e: IDraggedCompositeData) => void;\n    onDragEnd?: (e: IDraggedCompositeData) => void;\n}\n","import { toggleClass } from '../dom';\nimport { Emitter, Event } from '../events';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DragAndDropObserver } from './dnd';\nimport { clamp } from '../math';\nimport { Direction } from '../gridview/baseComponentGridview';\n\nfunction numberOrFallback(maybeNumber: any, fallback: number): number {\n    return typeof maybeNumber === 'number' ? maybeNumber : fallback;\n}\n\nexport function directionToPosition(direction: Direction): Position {\n    switch (direction) {\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'within':\n            return 'center';\n        default:\n            throw new Error(`invalid direction '${direction}'`);\n    }\n}\n\nexport function positionToDirection(position: Position): Direction {\n    switch (position) {\n        case 'top':\n            return 'above';\n        case 'bottom':\n            return 'below';\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'center':\n            return 'within';\n        default:\n            throw new Error(`invalid position '${position}'`);\n    }\n}\n\nexport interface DroptargetEvent {\n    readonly position: Position;\n    readonly nativeEvent: DragEvent;\n}\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\nexport type CanDisplayOverlay =\n    | boolean\n    | ((dragEvent: DragEvent, state: Position) => boolean);\n\nexport class Droptarget extends CompositeDisposable {\n    private targetElement: HTMLElement | undefined;\n    private overlayElement: HTMLElement | undefined;\n    private _state: Position | undefined;\n    private _acceptedTargetZonesSet: Set<Position>;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    readonly dnd: DragAndDropObserver;\n\n    private static USED_EVENT_ID = '__dockview_droptarget_event_is_used__';\n\n    get state(): Position | undefined {\n        return this._state;\n    }\n\n    constructor(\n        private readonly element: HTMLElement,\n        private readonly options: {\n            canDisplayOverlay: CanDisplayOverlay;\n            acceptedTargetZones: Position[];\n            overlayModel?: {\n                size?: { value: number; type: 'pixels' | 'percentage' };\n                activationSize?: {\n                    value: number;\n                    type: 'pixels' | 'percentage';\n                };\n            };\n        }\n    ) {\n        super();\n\n        // use a set to take advantage of #<set>.has\n        this._acceptedTargetZonesSet = new Set(\n            this.options.acceptedTargetZones\n        );\n\n        this.dnd = new DragAndDropObserver(this.element, {\n            onDragEnter: () => undefined,\n            onDragOver: (e) => {\n                if (this._acceptedTargetZonesSet.size === 0) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                const width = this.element.clientWidth;\n                const height = this.element.clientHeight;\n\n                if (width === 0 || height === 0) {\n                    return; // avoid div!0\n                }\n\n                const rect = (\n                    e.currentTarget as HTMLElement\n                ).getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n\n                const quadrant = this.calculateQuadrant(\n                    this._acceptedTargetZonesSet,\n                    x,\n                    y,\n                    width,\n                    height\n                );\n\n                /**\n                 * If the event has already been used by another DropTarget instance\n                 * then don't show a second drop target, only one target should be\n                 * active at any one time\n                 */\n                if (this.isAlreadyUsed(e) || quadrant === null) {\n                    // no drop target should be displayed\n                    this.removeDropTarget();\n                    return;\n                }\n\n                if (typeof this.options.canDisplayOverlay === 'boolean') {\n                    if (!this.options.canDisplayOverlay) {\n                        this.removeDropTarget();\n                        return;\n                    }\n                } else if (!this.options.canDisplayOverlay(e, quadrant)) {\n                    this.removeDropTarget();\n                    return;\n                }\n\n                this.markAsUsed(e);\n\n                if (!this.targetElement) {\n                    this.targetElement = document.createElement('div');\n                    this.targetElement.className = 'drop-target-dropzone';\n                    this.overlayElement = document.createElement('div');\n                    this.overlayElement.className = 'drop-target-selection';\n                    this._state = 'center';\n                    this.targetElement.appendChild(this.overlayElement);\n\n                    this.element.classList.add('drop-target');\n                    this.element.append(this.targetElement);\n                }\n\n                this.toggleClasses(quadrant, width, height);\n\n                this.setState(quadrant);\n            },\n            onDragLeave: () => {\n                this.removeDropTarget();\n            },\n            onDragEnd: () => {\n                this.removeDropTarget();\n            },\n            onDrop: (e) => {\n                e.preventDefault();\n\n                const state = this._state;\n\n                this.removeDropTarget();\n\n                if (state) {\n                    // only stop the propagation of the event if we are dealing with it\n                    // which is only when the target has state\n                    e.stopPropagation();\n                    this._onDrop.fire({ position: state, nativeEvent: e });\n                }\n            },\n        });\n\n        this.addDisposables(this._onDrop, this.dnd);\n    }\n\n    setTargetZones(acceptedTargetZones: Position[]): void {\n        this._acceptedTargetZonesSet = new Set(acceptedTargetZones);\n    }\n\n    dispose(): void {\n        this.removeDropTarget();\n        super.dispose();\n    }\n\n    /**\n     * Add a property to the event object for other potential listeners to check\n     */\n    private markAsUsed(event: DragEvent): void {\n        (event as any)[Droptarget.USED_EVENT_ID] = true;\n    }\n\n    /**\n     * Check is the event has already been used by another instance od DropTarget\n     */\n    private isAlreadyUsed(event: DragEvent): boolean {\n        const value = (event as any)[Droptarget.USED_EVENT_ID];\n        return typeof value === 'boolean' && value;\n    }\n\n    private toggleClasses(\n        quadrant: Position,\n        width: number,\n        height: number\n    ): void {\n        if (!this.overlayElement) {\n            return;\n        }\n\n        const isSmallX = width < 100;\n        const isSmallY = height < 100;\n\n        const isLeft = quadrant === 'left';\n        const isRight = quadrant === 'right';\n        const isTop = quadrant === 'top';\n        const isBottom = quadrant === 'bottom';\n\n        const rightClass = !isSmallX && isRight;\n        const leftClass = !isSmallX && isLeft;\n        const topClass = !isSmallY && isTop;\n        const bottomClass = !isSmallY && isBottom;\n\n        let size = 0.5;\n\n        if (this.options.overlayModel?.size?.type === 'percentage') {\n            size = clamp(this.options.overlayModel.size.value, 0, 100) / 100;\n        }\n\n        if (this.options.overlayModel?.size?.type === 'pixels') {\n            if (rightClass || leftClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, width) /\n                    width;\n            }\n            if (topClass || bottomClass) {\n                size =\n                    clamp(0, this.options.overlayModel.size.value, height) /\n                    height;\n            }\n        }\n\n        const translate = (1 - size) / 2;\n        const scale = size;\n\n        let transform: string;\n\n        if (rightClass) {\n            transform = `translateX(${100 * translate}%) scaleX(${scale})`;\n        } else if (leftClass) {\n            transform = `translateX(-${100 * translate}%) scaleX(${scale})`;\n        } else if (topClass) {\n            transform = `translateY(-${100 * translate}%) scaleY(${scale})`;\n        } else if (bottomClass) {\n            transform = `translateY(${100 * translate}%) scaleY(${scale})`;\n        } else {\n            transform = '';\n        }\n\n        this.overlayElement.style.transform = transform;\n\n        toggleClass(this.overlayElement, 'small-right', isSmallX && isRight);\n        toggleClass(this.overlayElement, 'small-left', isSmallX && isLeft);\n        toggleClass(this.overlayElement, 'small-top', isSmallY && isTop);\n        toggleClass(this.overlayElement, 'small-bottom', isSmallY && isBottom);\n    }\n\n    private setState(quadrant: Position): void {\n        switch (quadrant) {\n            case 'top':\n                this._state = 'top';\n                break;\n            case 'left':\n                this._state = 'left';\n                break;\n            case 'bottom':\n                this._state = 'bottom';\n                break;\n            case 'right':\n                this._state = 'right';\n                break;\n            case 'center':\n                this._state = 'center';\n                break;\n        }\n    }\n\n    private calculateQuadrant(\n        overlayType: Set<Position>,\n        x: number,\n        y: number,\n        width: number,\n        height: number\n    ): Position | null {\n        const isPercentage =\n            this.options.overlayModel?.activationSize === undefined ||\n            this.options.overlayModel?.activationSize?.type === 'percentage';\n\n        const value = numberOrFallback(\n            this.options?.overlayModel?.activationSize?.value,\n            20\n        );\n\n        if (isPercentage) {\n            return calculateQuadrantAsPercentage(\n                overlayType,\n                x,\n                y,\n                width,\n                height,\n                value\n            );\n        }\n\n        return calculateQuadrantAsPixels(\n            overlayType,\n            x,\n            y,\n            width,\n            height,\n            value\n        );\n    }\n\n    private removeDropTarget(): void {\n        if (this.targetElement) {\n            this._state = undefined;\n            this.element.removeChild(this.targetElement);\n            this.targetElement = undefined;\n            this.overlayElement = undefined;\n            this.element.classList.remove('drop-target');\n        }\n    }\n}\n\nexport function calculateQuadrantAsPercentage(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    const xp = (100 * x) / width;\n    const yp = (100 * y) / height;\n\n    if (overlayType.has('left') && xp < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && xp > 100 - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && yp < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && yp > 100 - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n\nexport function calculateQuadrantAsPixels(\n    overlayType: Set<Position>,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold: number\n): Position | null {\n    if (overlayType.has('left') && x < threshold) {\n        return 'left';\n    }\n    if (overlayType.has('right') && x > width - threshold) {\n        return 'right';\n    }\n    if (overlayType.has('top') && y < threshold) {\n        return 'top';\n    }\n    if (overlayType.has('bottom') && y > height - threshold) {\n        return 'bottom';\n    }\n\n    if (!overlayType.has('center')) {\n        return null;\n    }\n\n    return 'center';\n}\n","import { IDockviewComponent } from './dockviewComponent';\nimport { DockviewPanelApi } from '../api/dockviewPanelApi';\nimport { PanelInitParameters, IPanel } from '../panel/types';\nimport { DockviewApi } from '../api/component.api';\nimport { Event } from '../events';\nimport { Optional } from '../types';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport enum DockviewDropTargets {\n    Tab,\n    Panel,\n    TabContainer,\n    Edge,\n}\n\nexport interface HeaderPartInitParameters {\n    title: string;\n}\n\nexport interface GroupPanelPartInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport interface GroupPanelContentPartInitParameters\n    extends GroupPanelPartInitParameters {\n    tab: ITabRenderer;\n}\n\nexport interface WatermarkRendererInitParameters {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n}\n\nexport interface IWatermarkRenderer\n    extends Optional<\n        Omit<IPanel, 'id' | 'init'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init: (params: WatermarkRendererInitParameters) => void;\n    updateParentGroup(group: DockviewGroupPanel, visible: boolean): void;\n}\n\nexport interface ITabRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    init(parameters: GroupPanelPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\nexport interface IContentRenderer\n    extends Optional<\n        Omit<IPanel, 'id'>,\n        'dispose' | 'update' | 'layout' | 'toJSON'\n    > {\n    readonly element: HTMLElement;\n    readonly onDidFocus?: Event<void>;\n    readonly onDidBlur?: Event<void>;\n    init(parameters: GroupPanelContentPartInitParameters): void;\n    onGroupChange?(group: DockviewGroupPanel): void;\n    onPanelVisibleChange?(isPanelVisible: boolean): void;\n}\n\n// watermark component\n\nexport interface WatermarkPartInitParameters {\n    accessor: IDockviewComponent;\n}\n\n// constructors\n\nexport interface WatermarkConstructor {\n    new (): IWatermarkRenderer;\n}\n\nexport interface IGroupPanelInitParameters\n    extends PanelInitParameters,\n        HeaderPartInitParameters {\n    //\n}\n\nexport interface GroupviewPanelState {\n    id: string;\n    contentComponent?: string;\n    tabComponent?: string;\n    title?: string;\n    renderer?: DockviewPanelRenderer;\n    params?: { [key: string]: any };\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../../../lifecycle';\nimport { Emitter, Event } from '../../../events';\nimport { trackFocus } from '../../../dom';\nimport { IDockviewPanel } from '../../dockviewPanel';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { Droptarget } from '../../../dnd/droptarget';\nimport { DockviewGroupPanelModel } from '../../dockviewGroupPanelModel';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { DockviewDropTargets } from '../../types';\n\nexport interface IContentContainer extends IDisposable {\n    readonly dropTarget: Droptarget;\n    onDidFocus: Event<void>;\n    onDidBlur: Event<void>;\n    element: HTMLElement;\n    layout(width: number, height: number): void;\n    openPanel: (panel: IDockviewPanel) => void;\n    closePanel: () => void;\n    show(): void;\n    hide(): void;\n    renderPanel(panel: IDockviewPanel): void;\n}\n\nexport class ContentContainer\n    extends CompositeDisposable\n    implements IContentContainer\n{\n    private _element: HTMLElement;\n    private panel: IDockviewPanel | undefined;\n    private disposable = new MutableDisposable();\n\n    private readonly _onDidFocus = new Emitter<void>();\n    readonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new Emitter<void>();\n    readonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    readonly dropTarget: Droptarget;\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanelModel\n    ) {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'content-container';\n        this._element.tabIndex = -1;\n\n        this.addDisposables(this._onDidFocus, this._onDidBlur);\n\n        // for hosted containers\n        // 1) register a drop target on the host\n        // 2) register window dragStart events to disable pointer events\n        // 3) register dragEnd events\n        // 4) register mouseMove events (if no buttons are present we take this as a dragEnd event)\n\n        this.dropTarget = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            canDisplayOverlay: (event, position) => {\n                if (\n                    this.group.locked === 'no-drop-target' ||\n                    (this.group.locked && position === 'center')\n                ) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (\n                    !data &&\n                    event.shiftKey &&\n                    this.group.location !== 'floating'\n                ) {\n                    return false;\n                }\n\n                if (data && data.viewId === this.accessor.id) {\n                    if (data.groupId === this.group.id) {\n                        if (position === 'center') {\n                            // don't allow to drop on self for center position\n                            return false;\n                        }\n                        if (data.panelId === null) {\n                            // don't allow group move to drop anywhere on self\n                            return false;\n                        }\n                    }\n\n                    const groupHasOnePanelAndIsActiveDragElement =\n                        this.group.panels.length === 1 &&\n                        data.groupId === this.group.id;\n\n                    return !groupHasOnePanelAndIsActiveDragElement;\n                }\n\n                return this.group.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(this.dropTarget);\n    }\n\n    show(): void {\n        this.element.style.display = '';\n    }\n\n    hide(): void {\n        this.element.style.display = 'none';\n    }\n\n    renderPanel(panel: IDockviewPanel): void {\n        const isActive = panel === this.group.activePanel;\n\n        let container: HTMLElement;\n\n        switch (panel.api.renderer) {\n            case 'onlyWhenVisibile':\n                this.accessor.greadyRenderContainer.remove(panel);\n                if (isActive) {\n                    if (this.panel) {\n                        this._element.appendChild(\n                            this.panel.view.content.element\n                        );\n                    }\n                }\n                container = this._element;\n                break;\n            case 'always':\n                if (\n                    panel.view.content.element.parentElement === this._element\n                ) {\n                    this._element.removeChild(panel.view.content.element);\n                }\n                container =\n                    this.accessor.greadyRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n        }\n\n        if (isActive) {\n            const _onDidFocus = panel.view.content.onDidFocus;\n            const _onDidBlur = panel.view.content.onDidBlur;\n\n            const focusTracker = trackFocus(container);\n            const disposable = new CompositeDisposable();\n\n            disposable.addDisposables(\n                focusTracker,\n                focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n                focusTracker.onDidBlur(() => this._onDidBlur.fire())\n            );\n\n            if (_onDidFocus) {\n                disposable.addDisposables(\n                    _onDidFocus(() => this._onDidFocus.fire())\n                );\n            }\n            if (_onDidBlur) {\n                disposable.addDisposables(\n                    _onDidBlur(() => this._onDidBlur.fire())\n                );\n            }\n\n            this.disposable.value = disposable;\n        }\n    }\n\n    public openPanel(panel: IDockviewPanel): void {\n        if (this.panel === panel) {\n            return;\n        }\n\n        const renderer = panel.api.renderer;\n\n        if (\n            this.panel &&\n            this.panel.view.content.element.parentElement === this._element\n        ) {\n            /**\n             * If the currently attached panel is mounted directly to the content then remove it\n             */\n            this._element.removeChild(this.panel.view.content.element);\n        }\n\n        this.panel = panel;\n\n        let container: HTMLElement;\n\n        switch (renderer) {\n            case 'always':\n                container =\n                    this.accessor.greadyRenderContainer.setReferenceContentContainer(\n                        panel,\n                        this\n                    );\n                break;\n            case 'onlyWhenVisibile':\n                this._element.appendChild(this.panel.view.content.element);\n                container = this._element;\n                break;\n        }\n\n        const _onDidFocus = this.panel.view.content.onDidFocus;\n        const _onDidBlur = this.panel.view.content.onDidBlur;\n\n        const disposable = new CompositeDisposable();\n        const focusTracker = trackFocus(container);\n\n        disposable.addDisposables(\n            focusTracker,\n            focusTracker.onDidFocus(() => this._onDidFocus.fire()),\n            focusTracker.onDidBlur(() => this._onDidBlur.fire())\n        );\n\n        if (_onDidFocus) {\n            disposable.addDisposables(\n                _onDidFocus(() => this._onDidFocus.fire())\n            );\n        }\n        if (_onDidBlur) {\n            disposable.addDisposables(_onDidBlur(() => this._onDidBlur.fire()));\n        }\n\n        this.disposable.value = disposable;\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public closePanel(): void {\n        if (this.panel) {\n            if (this.accessor.options.defaultRenderer === 'onlyWhenVisibile') {\n                this._element.removeChild(this.panel.view.content.element);\n            }\n            this.panel = undefined;\n        }\n    }\n\n    public dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { getElementsByTagName } from '../dom';\nimport { addDisposableListener, Emitter } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\n\nexport abstract class DragHandler extends CompositeDisposable {\n    private readonly dataDisposable = new MutableDisposable();\n    private readonly pointerEventsDisposable = new MutableDisposable();\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    constructor(protected readonly el: HTMLElement) {\n        super();\n\n        this.addDisposables(\n            this._onDragStart,\n            this.dataDisposable,\n            this.pointerEventsDisposable\n        );\n\n        this.configure();\n    }\n\n    abstract getData(event: DragEvent): IDisposable;\n\n    protected isCancelled(_event: DragEvent): boolean {\n        return false;\n    }\n\n    private configure(): void {\n        this.addDisposables(\n            this._onDragStart,\n            addDisposableListener(this.el, 'dragstart', (event) => {\n                if (event.defaultPrevented || this.isCancelled(event)) {\n                    event.preventDefault();\n                    return;\n                }\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                this.pointerEventsDisposable.value = {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                };\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                this.el.classList.add('dv-dragged');\n                setTimeout(() => this.el.classList.remove('dv-dragged'), 0);\n\n                this.dataDisposable.value = this.getData(event);\n                this._onDragStart.fire(event);\n\n                if (event.dataTransfer) {\n                    event.dataTransfer.effectAllowed = 'move';\n\n                    const hasData = event.dataTransfer.items.length > 0;\n\n                    if (!hasData) {\n                        /**\n                         * Although this is not used by dockview many third party dnd libraries will check\n                         * dataTransfer.types to determine valid drag events.\n                         *\n                         * For example: in react-dnd if dataTransfer.types is not set then the dragStart event will be cancelled\n                         * through .preventDefault(). Since this is applied globally to all drag events this would break dockviews\n                         * dnd logic. You can see the code at\n                         * https://github.com/react-dnd/react-dnd/blob/main/packages/backend-html5/src/HTML5BackendImpl.ts#L542\n                         */\n                        event.dataTransfer.setData(\n                            'text/plain',\n                            '__dockview_internal_drag_event__'\n                        );\n                    }\n                }\n            }),\n            addDisposableListener(this.el, 'dragend', () => {\n                this.pointerEventsDisposable.dispose();\n                this.dataDisposable.dispose();\n            })\n        );\n    }\n}\n","import { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable, IDisposable } from '../../../lifecycle';\nimport {\n    getPanelData,\n    LocalSelectionTransfer,\n    PanelTransfer,\n} from '../../../dnd/dataTransfer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewDropTargets, ITabRenderer } from '../../types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DroptargetEvent, Droptarget } from '../../../dnd/droptarget';\nimport { DragHandler } from '../../../dnd/abstractDragHandler';\nimport { IDockviewPanel } from '../../dockviewPanel';\n\nclass TabDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel,\n        private readonly panel: IDockviewPanel\n    ) {\n        super(element);\n    }\n\n    getData(event: DragEvent): IDisposable {\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)],\n            PanelTransfer.prototype\n        );\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n\nexport interface ITab extends IDisposable {\n    readonly panel: IDockviewPanel;\n    readonly element: HTMLElement;\n    setContent: (element: ITabRenderer) => void;\n    onChanged: Event<MouseEvent>;\n    onDrop: Event<DroptargetEvent>;\n    setActive(isActive: boolean): void;\n}\n\nexport class Tab extends CompositeDisposable implements ITab {\n    private readonly _element: HTMLElement;\n    private readonly droptarget: Droptarget;\n    private content: ITabRenderer | undefined = undefined;\n\n    private readonly _onChanged = new Emitter<MouseEvent>();\n    readonly onChanged: Event<MouseEvent> = this._onChanged.event;\n\n    private readonly _onDropped = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDropped.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    public get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly panel: IDockviewPanel,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'tab';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        toggleClass(this.element, 'inactive-tab', true);\n\n        const dragHandler = new TabDragHandler(\n            this._element,\n            this.accessor,\n            this.group,\n            this.panel\n        );\n\n        this.droptarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                if (this.group.locked) {\n                    return false;\n                }\n\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    return this.panel.id !== data.panelId;\n                }\n\n                return this.group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Tab\n                );\n            },\n        });\n\n        this.addDisposables(\n            this._onChanged,\n            this._onDropped,\n            this._onDragStart,\n            dragHandler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            dragHandler,\n            addDisposableListener(this._element, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                this._onChanged.fire(event);\n            }),\n            this.droptarget.onDrop((event) => {\n                this._onDropped.fire(event);\n            }),\n            this.droptarget\n        );\n    }\n\n    public setActive(isActive: boolean): void {\n        toggleClass(this.element, 'active-tab', isActive);\n        toggleClass(this.element, 'inactive-tab', !isActive);\n    }\n\n    public setContent(part: ITabRenderer): void {\n        if (this.content) {\n            this._element.removeChild(this.content.element);\n        }\n        this.content = part;\n        this._element.appendChild(this.content.element);\n    }\n\n    public dispose(): void {\n        super.dispose();\n    }\n}\n","import { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { quasiPreventDefault } from '../dom';\nimport { addDisposableListener } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { DragHandler } from './abstractDragHandler';\nimport { LocalSelectionTransfer, PanelTransfer } from './dataTransfer';\nimport { addGhostImage } from './ghost';\n\nexport class GroupDragHandler extends DragHandler {\n    private readonly panelTransfer =\n        LocalSelectionTransfer.getInstance<PanelTransfer>();\n\n    constructor(\n        element: HTMLElement,\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super(element);\n\n        this.addDisposables(\n            addDisposableListener(\n                element,\n                'mousedown',\n                (e) => {\n                    if (e.shiftKey) {\n                        /**\n                         * You cannot call e.preventDefault() because that will prevent drag events from firing\n                         * but we also need to stop any group overlay drag events from occuring\n                         * Use a custom event marker that can be checked by the overlay drag events\n                         */\n                        quasiPreventDefault(e);\n                    }\n                },\n                true\n            )\n        );\n    }\n\n    override isCancelled(_event: DragEvent): boolean {\n        if (this.group.api.location === 'floating' && !_event.shiftKey) {\n            return true;\n        }\n        return false;\n    }\n\n    getData(dragEvent: DragEvent): IDisposable {\n        const dataTransfer = dragEvent.dataTransfer;\n\n        this.panelTransfer.setData(\n            [new PanelTransfer(this.accessor.id, this.group.id, null)],\n            PanelTransfer.prototype\n        );\n\n        const style = window.getComputedStyle(this.el);\n\n        const bgColor = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-background-color'\n        );\n        const color = style.getPropertyValue(\n            '--dv-activegroup-visiblepanel-tab-color'\n        );\n\n        if (dataTransfer) {\n            const ghostElement = document.createElement('div');\n\n            ghostElement.style.backgroundColor = bgColor;\n            ghostElement.style.color = color;\n            ghostElement.style.padding = '2px 8px';\n            ghostElement.style.height = '24px';\n            ghostElement.style.fontSize = '11px';\n            ghostElement.style.lineHeight = '20px';\n            ghostElement.style.borderRadius = '12px';\n            ghostElement.style.position = 'absolute';\n            ghostElement.textContent = `Multiple Panels (${this.group.size})`;\n\n            addGhostImage(dataTransfer, ghostElement);\n        }\n\n        return {\n            dispose: () => {\n                this.panelTransfer.clearData(PanelTransfer.prototype);\n            },\n        };\n    }\n}\n","import { addClasses, removeClasses } from '../dom';\n\nexport function addGhostImage(\n    dataTransfer: DataTransfer,\n    ghostElement: HTMLElement\n): void {\n    // class dockview provides to force ghost image to be drawn on a different layer and prevent weird rendering issues\n    addClasses(ghostElement, 'dv-dragged');\n\n    document.body.appendChild(ghostElement);\n    dataTransfer.setDragImage(ghostElement, 0, 0);\n\n    setTimeout(() => {\n        removeClasses(ghostElement, 'dv-dragged');\n        ghostElement.remove();\n    }, 0);\n}\n","import { last } from '../../../array';\nimport { getPanelData } from '../../../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../../../dnd/droptarget';\nimport { GroupDragHandler } from '../../../dnd/groupDragHandler';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { DockviewDropTargets } from '../../types';\n\nexport class VoidContainer extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private readonly voidDropTarget: Droptarget;\n\n    private readonly _onDrop = new Emitter<DroptargetEvent>();\n    readonly onDrop: Event<DroptargetEvent> = this._onDrop.event;\n\n    private readonly _onDragStart = new Emitter<DragEvent>();\n    readonly onDragStart = this._onDragStart.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n\n        this._element.className = 'void-container';\n        this._element.tabIndex = 0;\n        this._element.draggable = true;\n\n        this.addDisposables(\n            this._onDrop,\n            this._onDragStart,\n            addDisposableListener(this._element, 'click', () => {\n                this.accessor.doSetGroupActive(this.group);\n            })\n        );\n\n        const handler = new GroupDragHandler(this._element, accessor, group);\n\n        this.voidDropTarget = new Droptarget(this._element, {\n            acceptedTargetZones: ['center'],\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data && this.accessor.id === data.viewId) {\n                    if (\n                        data.panelId === null &&\n                        data.groupId === this.group.id\n                    ) {\n                        // don't allow group move to drop on self\n                        return false;\n                    }\n\n                    // don't show the overlay if the tab being dragged is the last panel of this group\n                    return last(this.group.panels)?.id !== data.panelId;\n                }\n\n                return group.model.canDisplayOverlay(\n                    event,\n                    position,\n                    DockviewDropTargets.Panel\n                );\n            },\n        });\n\n        this.addDisposables(\n            handler,\n            handler.onDragStart((event) => {\n                this._onDragStart.fire(event);\n            }),\n            this.voidDropTarget.onDrop((event) => {\n                this._onDrop.fire(event);\n            }),\n            this.voidDropTarget\n        );\n    }\n}\n","import {\n    IDisposable,\n    CompositeDisposable,\n    IValueDisposable,\n} from '../../../lifecycle';\nimport { addDisposableListener, Emitter, Event } from '../../../events';\nimport { ITab, Tab } from '../tab/tab';\nimport { DockviewComponent } from '../../dockviewComponent';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { VoidContainer } from './voidContainer';\nimport { toggleClass } from '../../../dom';\nimport { DockviewPanel, IDockviewPanel } from '../../dockviewPanel';\n\nexport interface TabDropIndexEvent {\n    readonly event: DragEvent;\n    readonly index: number;\n}\n\nexport interface TabDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupDragEvent {\n    readonly nativeEvent: DragEvent;\n    readonly group: DockviewGroupPanel;\n}\n\nexport interface ITabsContainer extends IDisposable {\n    readonly element: HTMLElement;\n    readonly panels: string[];\n    readonly size: number;\n    hidden: boolean;\n    delete: (id: string) => void;\n    indexOf: (id: string) => number;\n    onDrop: Event<TabDropIndexEvent>;\n    onTabDragStart: Event<TabDragEvent>;\n    onGroupDragStart: Event<GroupDragEvent>;\n    setActive: (isGroupActive: boolean) => void;\n    setActivePanel: (panel: IDockviewPanel) => void;\n    isActive: (tab: ITab) => boolean;\n    closePanel: (panel: IDockviewPanel) => void;\n    openPanel: (panel: IDockviewPanel, index?: number) => void;\n    setRightActionsElement(element: HTMLElement | undefined): void;\n    setLeftActionsElement(element: HTMLElement | undefined): void;\n    setPrefixActionsElement(element: HTMLElement | undefined): void;\n    show(): void;\n    hide(): void;\n}\n\nexport class TabsContainer\n    extends CompositeDisposable\n    implements ITabsContainer\n{\n    private readonly _element: HTMLElement;\n    private readonly tabContainer: HTMLElement;\n    private readonly rightActionsContainer: HTMLElement;\n    private readonly leftActionsContainer: HTMLElement;\n    private readonly preActionsContainer: HTMLElement;\n    private readonly voidContainer: VoidContainer;\n\n    private tabs: IValueDisposable<ITab>[] = [];\n    private selectedIndex = -1;\n    private rightActions: HTMLElement | undefined;\n    private leftActions: HTMLElement | undefined;\n    private preActions: HTMLElement | undefined;\n\n    private _hidden = false;\n\n    private readonly _onDrop = new Emitter<TabDropIndexEvent>();\n    readonly onDrop: Event<TabDropIndexEvent> = this._onDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    get panels(): string[] {\n        return this.tabs.map((_) => _.value.panel.id);\n    }\n\n    get size(): number {\n        return this.tabs.length;\n    }\n\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.element.style.display = value ? 'none' : '';\n    }\n\n    show(): void {\n        if (!this.hidden) {\n            this.element.style.display = '';\n        }\n    }\n\n    hide(): void {\n        this._element.style.display = 'none';\n    }\n\n    setRightActionsElement(element: HTMLElement | undefined): void {\n        if (this.rightActions === element) {\n            return;\n        }\n        if (this.rightActions) {\n            this.rightActions.remove();\n            this.rightActions = undefined;\n        }\n        if (element) {\n            this.rightActionsContainer.appendChild(element);\n            this.rightActions = element;\n        }\n    }\n\n    setLeftActionsElement(element: HTMLElement | undefined): void {\n        if (this.leftActions === element) {\n            return;\n        }\n        if (this.leftActions) {\n            this.leftActions.remove();\n            this.leftActions = undefined;\n        }\n        if (element) {\n            this.leftActionsContainer.appendChild(element);\n            this.leftActions = element;\n        }\n    }\n\n    setPrefixActionsElement(element: HTMLElement | undefined): void {\n        if (this.preActions === element) {\n            return;\n        }\n        if (this.preActions) {\n            this.preActions.remove();\n            this.preActions = undefined;\n        }\n        if (element) {\n            this.preActionsContainer.appendChild(element);\n            this.preActions = element;\n        }\n    }\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    public isActive(tab: ITab): boolean {\n        return (\n            this.selectedIndex > -1 &&\n            this.tabs[this.selectedIndex].value === tab\n        );\n    }\n\n    public indexOf(id: string): number {\n        return this.tabs.findIndex((tab) => tab.value.panel.id === id);\n    }\n\n    constructor(\n        private readonly accessor: DockviewComponent,\n        private readonly group: DockviewGroupPanel\n    ) {\n        super();\n\n        this.addDisposables(\n            this._onDrop,\n            this._onTabDragStart,\n            this._onGroupDragStart\n        );\n\n        this._element = document.createElement('div');\n        this._element.className = 'tabs-and-actions-container';\n\n        toggleClass(\n            this._element,\n            'dv-full-width-single-tab',\n            this.accessor.options.singleTabMode === 'fullwidth'\n        );\n\n        this.addDisposables(\n            this.accessor.onDidAddPanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            }),\n            this.accessor.onDidRemovePanel((e) => {\n                if (e.api.group === this.group) {\n                    toggleClass(\n                        this._element,\n                        'dv-single-tab',\n                        this.size === 1\n                    );\n                }\n            })\n        );\n\n        this.rightActionsContainer = document.createElement('div');\n        this.rightActionsContainer.className = 'right-actions-container';\n\n        this.leftActionsContainer = document.createElement('div');\n        this.leftActionsContainer.className = 'left-actions-container';\n\n        this.preActionsContainer = document.createElement('div');\n        this.preActionsContainer.className = 'pre-actions-container';\n\n        this.tabContainer = document.createElement('div');\n        this.tabContainer.className = 'tabs-container';\n\n        this.voidContainer = new VoidContainer(this.accessor, this.group);\n\n        this._element.appendChild(this.preActionsContainer);\n        this._element.appendChild(this.tabContainer);\n        this._element.appendChild(this.leftActionsContainer);\n        this._element.appendChild(this.voidContainer.element);\n        this._element.appendChild(this.rightActionsContainer);\n\n        this.addDisposables(\n            this.voidContainer,\n            this.voidContainer.onDragStart((event) => {\n                this._onGroupDragStart.fire({\n                    nativeEvent: event,\n                    group: this.group,\n                });\n            }),\n            this.voidContainer.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.length,\n                });\n            }),\n            addDisposableListener(\n                this.voidContainer.element,\n                'mousedown',\n                (event) => {\n                    const isFloatingGroupsEnabled =\n                        !this.accessor.options.disableFloatingGroups;\n\n                    if (\n                        isFloatingGroupsEnabled &&\n                        event.shiftKey &&\n                        this.group.api.location !== 'floating'\n                    ) {\n                        event.preventDefault();\n\n                        const { top, left } =\n                            this.element.getBoundingClientRect();\n                        const { top: rootTop, left: rootLeft } =\n                            this.accessor.element.getBoundingClientRect();\n\n                        this.accessor.addFloatingGroup(\n                            this.group,\n                            {\n                                x: left - rootLeft + 20,\n                                y: top - rootTop + 20,\n                            },\n                            { inDragMode: true }\n                        );\n                    }\n                }\n            ),\n            addDisposableListener(this.tabContainer, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    return;\n                }\n\n                const isLeftClick = event.button === 0;\n\n                if (isLeftClick) {\n                    this.accessor.doSetGroupActive(this.group);\n                }\n            })\n        );\n    }\n\n    public setActive(_isGroupActive: boolean) {\n        // noop\n    }\n\n    private addTab(\n        tab: IValueDisposable<ITab>,\n        index: number = this.tabs.length\n    ): void {\n        if (index < 0 || index > this.tabs.length) {\n            throw new Error('invalid location');\n        }\n\n        this.tabContainer.insertBefore(\n            tab.value.element,\n            this.tabContainer.children[index]\n        );\n\n        this.tabs = [\n            ...this.tabs.slice(0, index),\n            tab,\n            ...this.tabs.slice(index),\n        ];\n\n        if (this.selectedIndex < 0) {\n            this.selectedIndex = index;\n        }\n    }\n\n    public delete(id: string): void {\n        const index = this.tabs.findIndex((tab) => tab.value.panel.id === id);\n\n        const tabToRemove = this.tabs.splice(index, 1)[0];\n\n        const { value, disposable } = tabToRemove;\n\n        disposable.dispose();\n        value.dispose();\n        value.element.remove();\n    }\n\n    public setActivePanel(panel: IDockviewPanel): void {\n        this.tabs.forEach((tab) => {\n            const isActivePanel = panel.id === tab.value.panel.id;\n            tab.value.setActive(isActivePanel);\n        });\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        index: number = this.tabs.length\n    ): void {\n        if (this.tabs.find((tab) => tab.value.panel.id === panel.id)) {\n            return;\n        }\n        const tab = new Tab(panel, this.accessor, this.group);\n        if (!panel.view?.tab) {\n            throw new Error('invalid header component');\n        }\n        tab.setContent(panel.view.tab);\n\n        const disposable = new CompositeDisposable(\n            tab.onDragStart((event) => {\n                this._onTabDragStart.fire({ nativeEvent: event, panel });\n            }),\n            tab.onChanged((event) => {\n                const isFloatingGroupsEnabled =\n                    !this.accessor.options.disableFloatingGroups;\n\n                const isFloatingWithOnePanel =\n                    this.group.api.location === 'floating' && this.size === 1;\n\n                if (\n                    isFloatingGroupsEnabled &&\n                    !isFloatingWithOnePanel &&\n                    event.shiftKey\n                ) {\n                    event.preventDefault();\n\n                    const panel = this.accessor.getGroupPanel(tab.panel.id);\n\n                    const { top, left } = tab.element.getBoundingClientRect();\n                    const { top: rootTop, left: rootLeft } =\n                        this.accessor.element.getBoundingClientRect();\n\n                    this.accessor.addFloatingGroup(\n                        panel as DockviewPanel,\n                        {\n                            x: left - rootLeft,\n                            y: top - rootTop,\n                        },\n                        { inDragMode: true }\n                    );\n                    return;\n                }\n\n                const alreadyFocused =\n                    panel.id === this.group.model.activePanel?.id &&\n                    this.group.model.isContentFocused;\n\n                const isLeftClick = event.button === 0;\n\n                if (!isLeftClick || event.defaultPrevented) {\n                    return;\n                }\n\n                this.group.model.openPanel(panel, {\n                    skipFocus: alreadyFocused,\n                });\n            }),\n            tab.onDrop((event) => {\n                this._onDrop.fire({\n                    event: event.nativeEvent,\n                    index: this.tabs.findIndex((x) => x.value === tab),\n                });\n            })\n        );\n\n        const value: IValueDisposable<ITab> = { value: tab, disposable };\n\n        this.addTab(value, index);\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.delete(panel.id);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const { value, disposable } of this.tabs) {\n            disposable.dispose();\n            value.dispose();\n        }\n\n        this.tabs = [];\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { getPanelData, PanelTransfer } from '../dnd/dataTransfer';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from './dockviewComponent';\nimport { isAncestor, toggleClass } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport { IViewSize } from '../gridview/gridview';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanel, PanelInitParameters, PanelUpdateEvent } from '../panel/types';\nimport {\n    ContentContainer,\n    IContentContainer,\n} from './components/panel/content';\nimport {\n    GroupDragEvent,\n    ITabsContainer,\n    TabDragEvent,\n    TabsContainer,\n} from './components/titlebar/tabsContainer';\nimport { DockviewDropTargets, IWatermarkRenderer } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDockviewPanel } from './dockviewPanel';\nimport { IHeaderActionsRenderer } from './options';\n\nexport interface DndService {\n    canDisplayOverlay(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        target: DockviewDropTargets\n    ): boolean;\n    onDrop(\n        group: IDockviewGroupPanelModel,\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void;\n}\n\nexport interface IGroupItem {\n    id: string;\n    header: { element: HTMLElement };\n    body: { element: HTMLElement };\n}\n\ninterface GroupMoveEvent {\n    groupId: string;\n    itemId?: string;\n    target: Position;\n    index?: number;\n}\n\ninterface CoreGroupOptions {\n    locked?: DockviewGroupPanelLocked;\n    hideHeader?: boolean;\n}\n\nexport interface GroupOptions extends CoreGroupOptions {\n    readonly panels?: IDockviewPanel[];\n    readonly activePanel?: IDockviewPanel;\n    readonly id?: string;\n}\n\nexport interface GroupPanelViewState extends CoreGroupOptions {\n    views: string[];\n    activeView?: string;\n    id: string;\n}\n\nexport interface GroupviewChangeEvent {\n    readonly panel: IDockviewPanel;\n}\n\nexport interface GroupviewDropEvent {\n    readonly nativeEvent: DragEvent;\n    readonly position: Position;\n    readonly index?: number;\n    getData(): PanelTransfer | undefined;\n}\n\nexport interface IHeader {\n    hidden: boolean;\n}\n\nexport type DockviewGroupPanelLocked = boolean | 'no-drop-target';\n\nexport interface IDockviewGroupPanelModel extends IPanel {\n    readonly isActive: boolean;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly header: IHeader;\n    readonly isContentFocused: boolean;\n    readonly onDidDrop: Event<GroupviewDropEvent>;\n    readonly onDidAddPanel: Event<GroupviewChangeEvent>;\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent>;\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent>;\n    readonly onMove: Event<GroupMoveEvent>;\n    locked: DockviewGroupPanelLocked;\n    setActive(isActive: boolean): void;\n    initialize(): void;\n    // state\n    isPanelActive: (panel: IDockviewPanel) => boolean;\n    indexOf(panel: IDockviewPanel): number;\n    // panel lifecycle\n    openPanel(\n        panel: IDockviewPanel,\n        options?: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        }\n    ): void;\n    closePanel(panel: IDockviewPanel): void;\n    closeAllPanels(): void;\n    containsPanel(panel: IDockviewPanel): boolean;\n    removePanel: (panelOrId: IDockviewPanel | string) => IDockviewPanel;\n    moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void;\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean;\n}\n\nexport type DockviewGroupLocation = 'grid' | 'floating' | 'popout';\n\nexport class DockviewGroupPanelModel\n    extends CompositeDisposable\n    implements IDockviewGroupPanelModel\n{\n    private readonly tabsContainer: ITabsContainer;\n    private readonly contentContainer: IContentContainer;\n    // private readonly dropTarget: Droptarget;\n    private _activePanel: IDockviewPanel | undefined;\n    private watermark?: IWatermarkRenderer;\n    private _isGroupActive = false;\n    private _locked: DockviewGroupPanelLocked = false;\n    private _rightHeaderActions: IHeaderActionsRenderer | undefined;\n    private _leftHeaderActions: IHeaderActionsRenderer | undefined;\n    private _prefixHeaderActions: IHeaderActionsRenderer | undefined;\n\n    private _location: DockviewGroupLocation = 'grid';\n\n    private mostRecentlyUsed: IDockviewPanel[] = [];\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    private _width = 0;\n    private _height = 0;\n\n    private _panels: IDockviewPanel[] = [];\n\n    private readonly _onMove = new Emitter<GroupMoveEvent>();\n    readonly onMove: Event<GroupMoveEvent> = this._onMove.event;\n\n    private readonly _onDidDrop = new Emitter<GroupviewDropEvent>();\n    readonly onDidDrop: Event<GroupviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onTabDragStart = new Emitter<TabDragEvent>();\n    readonly onTabDragStart: Event<TabDragEvent> = this._onTabDragStart.event;\n\n    private readonly _onGroupDragStart = new Emitter<GroupDragEvent>();\n    readonly onGroupDragStart: Event<GroupDragEvent> =\n        this._onGroupDragStart.event;\n\n    private readonly _onDidAddPanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidAddPanel: Event<GroupviewChangeEvent> =\n        this._onDidAddPanel.event;\n\n    private readonly _onDidRemovePanel = new Emitter<GroupviewChangeEvent>();\n    readonly onDidRemovePanel: Event<GroupviewChangeEvent> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidActivePanelChange =\n        new Emitter<GroupviewChangeEvent>();\n    readonly onDidActivePanelChange: Event<GroupviewChangeEvent> =\n        this._onDidActivePanelChange.event;\n\n    get element(): HTMLElement {\n        throw new Error('not supported');\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._activePanel;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._locked = value;\n\n        toggleClass(\n            this.container,\n            'locked-groupview',\n            value === 'no-drop-target' || value\n        );\n    }\n\n    get isActive(): boolean {\n        return this._isGroupActive;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this._panels;\n    }\n\n    get size(): number {\n        return this._panels.length;\n    }\n\n    get isEmpty(): boolean {\n        return this._panels.length === 0;\n    }\n\n    get hasWatermark(): boolean {\n        return !!(\n            this.watermark && this.container.contains(this.watermark.element)\n        );\n    }\n\n    get header(): IHeader {\n        return this.tabsContainer;\n    }\n\n    get isContentFocused(): boolean {\n        if (!document.activeElement) {\n            return false;\n        }\n        return isAncestor(\n            document.activeElement,\n            this.contentContainer.element\n        );\n    }\n\n    get location(): DockviewGroupLocation {\n        return this._location;\n    }\n\n    set location(value: DockviewGroupLocation) {\n        this._location = value;\n\n        toggleClass(this.container, 'dv-groupview-floating', false);\n        toggleClass(this.container, 'dv-groupview-popout', false);\n\n        switch (value) {\n            case 'grid':\n                this.contentContainer.dropTarget.setTargetZones([\n                    'top',\n                    'bottom',\n                    'left',\n                    'right',\n                    'center',\n                ]);\n                break;\n            case 'floating':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n                this.contentContainer.dropTarget.setTargetZones(\n                    value\n                        ? ['center']\n                        : ['top', 'bottom', 'left', 'right', 'center']\n                );\n\n                toggleClass(this.container, 'dv-groupview-floating', true);\n\n                break;\n            case 'popout':\n                this.contentContainer.dropTarget.setTargetZones(['center']);\n\n                toggleClass(this.container, 'dv-groupview-popout', true);\n\n                break;\n        }\n\n        this.groupPanel.api._onDidRenderPositionChange.fire({\n            location: this.location,\n        });\n    }\n\n    constructor(\n        private readonly container: HTMLElement,\n        private accessor: DockviewComponent,\n        public id: string,\n        private readonly options: GroupOptions,\n        private readonly groupPanel: DockviewGroupPanel\n    ) {\n        super();\n\n        toggleClass(this.container, 'groupview', true);\n\n        this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);\n\n        this.contentContainer = new ContentContainer(this.accessor, this);\n\n        container.append(\n            this.tabsContainer.element,\n            this.contentContainer.element\n        );\n\n        this.header.hidden = !!options.hideHeader;\n        this.locked = options.locked ?? false;\n\n        this.addDisposables(\n            this._onTabDragStart,\n            this._onGroupDragStart,\n            this.tabsContainer.onTabDragStart((event) => {\n                this._onTabDragStart.fire(event);\n            }),\n            this.tabsContainer.onGroupDragStart((event) => {\n                this._onGroupDragStart.fire(event);\n            }),\n            this.tabsContainer.onDrop((event) => {\n                this.handleDropEvent(event.event, 'center', event.index);\n            }),\n            this.contentContainer.onDidFocus(() => {\n                this.accessor.doSetGroupActive(this.groupPanel, true);\n            }),\n            this.contentContainer.onDidBlur(() => {\n                // noop\n            }),\n            this.contentContainer.dropTarget.onDrop((event) => {\n                this.handleDropEvent(event.nativeEvent, event.position);\n            }),\n            this._onMove,\n            this._onDidChange,\n            this._onDidDrop,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidActivePanelChange\n        );\n    }\n\n    initialize(): void {\n        if (this.options?.panels) {\n            this.options.panels.forEach((panel) => {\n                this.doAddPanel(panel);\n            });\n        }\n\n        if (this.options?.activePanel) {\n            this.openPanel(this.options.activePanel);\n        }\n\n        // must be run after the constructor otherwise this.parent may not be\n        // correctly initialized\n        this.setActive(this.isActive, true, true);\n        this.updateContainer();\n\n        if (this.accessor.options.createRightHeaderActionsElement) {\n            this._rightHeaderActions =\n                this.accessor.options.createRightHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._rightHeaderActions);\n            this._rightHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setRightActionsElement(\n                this._rightHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createLeftHeaderActionsElement) {\n            this._leftHeaderActions =\n                this.accessor.options.createLeftHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._leftHeaderActions);\n            this._leftHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setLeftActionsElement(\n                this._leftHeaderActions.element\n            );\n        }\n\n        if (this.accessor.options.createPrefixHeaderActionsElement) {\n            this._prefixHeaderActions =\n                this.accessor.options.createPrefixHeaderActionsElement(\n                    this.groupPanel\n                );\n            this.addDisposables(this._prefixHeaderActions);\n            this._prefixHeaderActions.init({\n                containerApi: new DockviewApi(this.accessor),\n                api: this.groupPanel.api,\n            });\n            this.tabsContainer.setPrefixActionsElement(\n                this._prefixHeaderActions.element\n            );\n        }\n    }\n\n    rerender(panel: IDockviewPanel): void {\n        this.contentContainer.renderPanel(panel);\n    }\n\n    public indexOf(panel: IDockviewPanel): number {\n        return this.tabsContainer.indexOf(panel.id);\n    }\n\n    public toJSON(): GroupPanelViewState {\n        const result: GroupPanelViewState = {\n            views: this.tabsContainer.panels,\n            activeView: this._activePanel?.id,\n            id: this.id,\n        };\n\n        if (this.locked !== false) {\n            result.locked = this.locked;\n        }\n\n        if (this.header.hidden) {\n            result.hideHeader = true;\n        }\n\n        return result;\n    }\n\n    public moveToNext(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        const index = options.panel ? this.panels.indexOf(options.panel) : -1;\n\n        let normalizedIndex: number;\n\n        if (index < this.panels.length - 1) {\n            normalizedIndex = index + 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = 0;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public moveToPrevious(options?: {\n        panel?: IDockviewPanel;\n        suppressRoll?: boolean;\n    }): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.panel) {\n            options.panel = this.activePanel;\n        }\n\n        if (!options.panel) {\n            return;\n        }\n\n        const index = this.panels.indexOf(options.panel);\n\n        let normalizedIndex: number;\n\n        if (index > 0) {\n            normalizedIndex = index - 1;\n        } else if (!options.suppressRoll) {\n            normalizedIndex = this.panels.length - 1;\n        } else {\n            return;\n        }\n\n        this.openPanel(this.panels[normalizedIndex]);\n    }\n\n    public containsPanel(panel: IDockviewPanel): boolean {\n        return this.panels.includes(panel);\n    }\n\n    init(_params: PanelInitParameters): void {\n        //noop\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //noop\n    }\n\n    focus(): void {\n        this._activePanel?.focus?.();\n    }\n\n    public openPanel(\n        panel: IDockviewPanel,\n        options: {\n            index?: number;\n            skipFocus?: boolean;\n            skipSetPanelActive?: boolean;\n            skipSetGroupActive?: boolean;\n        } = {}\n    ): void {\n        if (\n            typeof options.index !== 'number' ||\n            options.index > this.panels.length\n        ) {\n            options.index = this.panels.length;\n        }\n\n        const skipSetPanelActive = !!options.skipSetPanelActive;\n        const skipSetGroupActive = !!options.skipSetGroupActive;\n\n        // ensure the group is updated before we fire any events\n        panel.updateParentGroup(this.groupPanel, true);\n\n        if (this._activePanel === panel) {\n            if (!skipSetGroupActive) {\n                this.accessor.doSetGroupActive(this.groupPanel);\n            }\n            return;\n        }\n\n        this.doAddPanel(panel, options.index, skipSetPanelActive);\n\n        if (!skipSetPanelActive) {\n            this.doSetActivePanel(panel);\n        }\n\n        if (!skipSetGroupActive) {\n            this.accessor.doSetGroupActive(\n                this.groupPanel,\n                !!options.skipFocus\n            );\n        }\n\n        this.updateContainer();\n    }\n\n    public removePanel(groupItemOrId: IDockviewPanel | string): IDockviewPanel {\n        const id =\n            typeof groupItemOrId === 'string'\n                ? groupItemOrId\n                : groupItemOrId.id;\n\n        const panelToRemove = this._panels.find((panel) => panel.id === id);\n\n        if (!panelToRemove) {\n            throw new Error('invalid operation');\n        }\n\n        return this._removePanel(panelToRemove);\n    }\n\n    public closeAllPanels(): void {\n        if (this.panels.length > 0) {\n            // take a copy since we will be edting the array as we iterate through\n            const arrPanelCpy = [...this.panels];\n            for (const panel of arrPanelCpy) {\n                this.doClose(panel);\n            }\n        } else {\n            this.accessor.removeGroup(this.groupPanel);\n        }\n    }\n\n    public closePanel(panel: IDockviewPanel): void {\n        this.doClose(panel);\n    }\n\n    private doClose(panel: IDockviewPanel): void {\n        this.accessor.removePanel(panel);\n    }\n\n    public isPanelActive(panel: IDockviewPanel): boolean {\n        return this._activePanel === panel;\n    }\n\n    updateActions(element: HTMLElement | undefined): void {\n        this.tabsContainer.setRightActionsElement(element);\n    }\n\n    public setActive(\n        isGroupActive: boolean,\n        skipFocus = false,\n        force = false\n    ): void {\n        if (!force && this.isActive === isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n            return;\n        }\n\n        this._isGroupActive = isGroupActive;\n\n        toggleClass(this.container, 'active-group', isGroupActive);\n        toggleClass(this.container, 'inactive-group', !isGroupActive);\n\n        this.tabsContainer.setActive(this.isActive);\n\n        if (!this._activePanel && this.panels.length > 0) {\n            this.doSetActivePanel(this.panels[0]);\n        }\n\n        this.updateContainer();\n\n        if (isGroupActive) {\n            if (!skipFocus) {\n                this._activePanel?.focus?.();\n            }\n        }\n    }\n\n    public layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n\n        this.contentContainer.layout(this._width, this._height);\n\n        if (this._activePanel?.layout) {\n            this._activePanel.layout(this._width, this._height);\n        }\n    }\n\n    private _removePanel(panel: IDockviewPanel): IDockviewPanel {\n        const isActivePanel = this._activePanel === panel;\n\n        this.doRemovePanel(panel);\n\n        if (isActivePanel && this.panels.length > 0) {\n            const nextPanel = this.mostRecentlyUsed[0];\n            this.openPanel(nextPanel);\n        }\n\n        if (this._activePanel && this.panels.length === 0) {\n            this.doSetActivePanel(undefined);\n        }\n\n        this.updateContainer();\n        return panel;\n    }\n\n    private doRemovePanel(panel: IDockviewPanel): void {\n        const index = this.panels.indexOf(panel);\n\n        if (this._activePanel === panel) {\n            this.contentContainer.closePanel();\n        }\n\n        this.tabsContainer.delete(panel.id);\n        this._panels.splice(index, 1);\n\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n\n        this._onDidRemovePanel.fire({ panel });\n    }\n\n    private doAddPanel(\n        panel: IDockviewPanel,\n        index: number = this.panels.length,\n        skipSetActive = false\n    ): void {\n        const existingPanel = this._panels.indexOf(panel);\n        const hasExistingPanel = existingPanel > -1;\n\n        this.tabsContainer.show();\n        this.contentContainer.show();\n\n        this.tabsContainer.openPanel(panel, index);\n\n        if (!skipSetActive) {\n            this.contentContainer.openPanel(panel);\n        }\n\n        if (hasExistingPanel) {\n            // TODO - need to ensure ordering hasn't changed and if it has need to re-order this.panels\n            return;\n        }\n\n        this.updateMru(panel);\n        this.panels.splice(index, 0, panel);\n\n        this._onDidAddPanel.fire({ panel });\n    }\n\n    private doSetActivePanel(panel: IDockviewPanel | undefined): void {\n        this._activePanel = panel;\n\n        if (panel) {\n            this.tabsContainer.setActivePanel(panel);\n\n            panel.layout(this._width, this._height);\n\n            this.updateMru(panel);\n\n            this._onDidActivePanelChange.fire({ panel });\n        }\n    }\n\n    private updateMru(panel: IDockviewPanel): void {\n        if (this.mostRecentlyUsed.includes(panel)) {\n            this.mostRecentlyUsed.splice(\n                this.mostRecentlyUsed.indexOf(panel),\n                1\n            );\n        }\n        this.mostRecentlyUsed = [panel, ...this.mostRecentlyUsed];\n    }\n\n    private updateContainer(): void {\n        toggleClass(this.container, 'empty', this.isEmpty);\n\n        this.panels.forEach((panel) =>\n            panel.updateParentGroup(this.groupPanel, this.isActive)\n        );\n\n        if (this.isEmpty && !this.watermark) {\n            const watermark = this.accessor.createWatermarkComponent();\n            watermark.init({\n                containerApi: new DockviewApi(this.accessor),\n                group: this.groupPanel,\n            });\n            this.watermark = watermark;\n\n            addDisposableListener(this.watermark.element, 'click', () => {\n                if (!this.isActive) {\n                    this.accessor.doSetGroupActive(this.groupPanel);\n                }\n            });\n\n            this.tabsContainer.hide();\n            this.contentContainer.element.appendChild(this.watermark.element);\n\n            this.watermark.updateParentGroup(this.groupPanel, true);\n        }\n        if (!this.isEmpty && this.watermark) {\n            this.watermark.element.remove();\n            this.watermark.dispose?.();\n            this.watermark = undefined;\n            this.tabsContainer.show();\n        }\n    }\n\n    canDisplayOverlay(\n        event: DragEvent,\n        position: Position,\n        target: DockviewDropTargets\n    ): boolean {\n        // custom overlay handler\n        if (this.accessor.options.showDndOverlay) {\n            return this.accessor.options.showDndOverlay({\n                nativeEvent: event,\n                target,\n                group: this.accessor.getPanel(this.id)!,\n                position,\n                getData: getPanelData,\n            });\n        }\n        return false;\n    }\n\n    private handleDropEvent(\n        event: DragEvent,\n        position: Position,\n        index?: number\n    ): void {\n        if (this.locked === 'no-drop-target') {\n            return;\n        }\n\n        const data = getPanelData();\n\n        if (data && data.viewId === this.accessor.id) {\n            if (data.panelId === null) {\n                // this is a group move dnd event\n                const { groupId } = data;\n\n                this._onMove.fire({\n                    target: position,\n                    groupId: groupId,\n                    index,\n                });\n                return;\n            }\n\n            const fromSameGroup =\n                this.tabsContainer.indexOf(data.panelId) !== -1;\n\n            if (fromSameGroup && this.tabsContainer.size === 1) {\n                return;\n            }\n\n            const { groupId, panelId } = data;\n            const isSameGroup = this.id === groupId;\n            if (isSameGroup && !position) {\n                const oldIndex = this.tabsContainer.indexOf(panelId);\n                if (oldIndex === index) {\n                    return;\n                }\n            }\n\n            this._onMove.fire({\n                target: position,\n                groupId: data.groupId,\n                itemId: data.panelId,\n                index,\n            });\n        } else {\n            this._onDidDrop.fire({\n                nativeEvent: event,\n                position,\n                index,\n                getData: () => getPanelData(),\n            });\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this.watermark?.element.remove();\n        this.watermark?.dispose?.();\n\n        for (const panel of this.panels) {\n            panel.dispose();\n        }\n\n        this.tabsContainer.dispose();\n        this.contentContainer.dispose();\n    }\n}\n","import { watchElementResize } from './dom';\nimport { CompositeDisposable } from './lifecycle';\n\nexport abstract class Resizable extends CompositeDisposable {\n    private readonly _element: HTMLElement;\n    private _disableResizing: boolean;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get disableResizing(): boolean {\n        return this._disableResizing;\n    }\n\n    set disableResizing(value: boolean) {\n        this._disableResizing = value;\n    }\n\n    constructor(parentElement?: HTMLElement, disableResizing = false) {\n        super();\n\n        this._disableResizing = disableResizing;\n\n        if (parentElement) {\n            this._element = parentElement;\n        } else {\n            this._element = document.createElement('div');\n            this._element.style.height = '100%';\n            this._element.style.width = '100%';\n            this._element.className = 'dv-resizable-container';\n        }\n\n        this.addDisposables(\n            watchElementResize(this._element, (entry) => {\n                if (this.isDisposed) {\n                    /**\n                     * resize is delayed through requestAnimationFrame so there is a small chance\n                     * the component has already been disposed of\n                     */\n                    return;\n                }\n\n                if (this.disableResizing) {\n                    return;\n                }\n\n                if (!document.body.contains(this._element)) {\n                    /**\n                     * since the event is dispatched through requestAnimationFrame there is a small chance\n                     * the component is no longer attached to the DOM, if that is the case the dimensions\n                     * are mostly likely all zero and meaningless. we should skip this case.\n                     */\n                    return;\n                }\n\n                const { width, height } = entry.contentRect;\n                this.layout(width, height);\n            })\n        );\n    }\n\n    abstract layout(width: number, height: number): void;\n}\n","import { Emitter, Event, TickDelayedEvent } from '../events';\nimport { getGridLocation, Gridview, IGridView } from './gridview';\nimport { Position } from '../dnd/droptarget';\nimport { IValueDisposable } from '../lifecycle';\nimport { sequentialNumberGenerator } from '../math';\nimport { ISplitviewStyles, Orientation, Sizing } from '../splitview/splitview';\nimport { IPanel } from '../panel/types';\nimport { MovementOptions2 } from '../dockview/options';\nimport { Resizable } from '../resizable';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport type Direction = 'left' | 'right' | 'above' | 'below' | 'within';\n\nexport function toTarget(direction: Direction): Position {\n    switch (direction) {\n        case 'left':\n            return 'left';\n        case 'right':\n            return 'right';\n        case 'above':\n            return 'top';\n        case 'below':\n            return 'bottom';\n        case 'within':\n        default:\n            return 'center';\n    }\n}\n\nexport interface BaseGridOptions {\n    readonly proportionalLayout: boolean;\n    readonly orientation: Orientation;\n    readonly styles?: ISplitviewStyles;\n    readonly parentElement?: HTMLElement;\n    readonly disableAutoResizing?: boolean;\n}\n\nexport interface IGridPanelView extends IGridView, IPanel {\n    setActive(isActive: boolean): void;\n    readonly isActive: boolean;\n}\n\nexport interface IBaseGrid<T extends IGridPanelView> {\n    readonly element: HTMLElement;\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly activeGroup: T | undefined;\n    readonly size: number;\n    readonly groups: T[];\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidRemoveGroup: Event<T>;\n    readonly onDidAddGroup: Event<T>;\n    readonly onDidActiveGroupChange: Event<T | undefined>;\n    getPanel(id: string): T | undefined;\n    toJSON(): object;\n    fromJSON(data: any): void;\n    clear(): void;\n    layout(width: number, height: number, force?: boolean): void;\n    setVisible(panel: T, visible: boolean): void;\n    isVisible(panel: T): boolean;\n    maximizeGroup(panel: T): void;\n    isMaximizedGroup(panel: T): boolean;\n    exitMaximizedGroup(): void;\n    hasMaximizedGroup(): boolean;\n    readonly onDidMaxmizedGroupChange: Event<void>;\n}\n\nexport abstract class BaseGrid<T extends IGridPanelView>\n    extends Resizable\n    implements IBaseGrid<T>\n{\n    private readonly _id = nextLayoutId.next();\n    protected readonly _groups = new Map<string, IValueDisposable<T>>();\n    protected readonly gridview: Gridview;\n    //\n    protected _activeGroup: T | undefined;\n\n    private _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange = this._onDidLayoutChange.event;\n\n    protected readonly _onDidRemoveGroup = new Emitter<T>();\n    readonly onDidRemoveGroup: Event<T> = this._onDidRemoveGroup.event;\n\n    protected readonly _onDidAddGroup = new Emitter<T>();\n    readonly onDidAddGroup: Event<T> = this._onDidAddGroup.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<T | undefined>();\n    readonly onDidActiveGroupChange: Event<T | undefined> =\n        this._onDidActiveGroupChange.event;\n\n    protected readonly _bufferOnDidLayoutChange = new TickDelayedEvent();\n\n    get id(): string {\n        return this._id;\n    }\n\n    get size(): number {\n        return this._groups.size;\n    }\n\n    get groups(): T[] {\n        return Array.from(this._groups.values()).map((_) => _.value);\n    }\n\n    get width(): number {\n        return this.gridview.width;\n    }\n\n    get height(): number {\n        return this.gridview.height;\n    }\n\n    get minimumHeight(): number {\n        return this.gridview.minimumHeight;\n    }\n    get maximumHeight(): number {\n        return this.gridview.maximumHeight;\n    }\n    get minimumWidth(): number {\n        return this.gridview.minimumWidth;\n    }\n    get maximumWidth(): number {\n        return this.gridview.maximumWidth;\n    }\n\n    get activeGroup(): T | undefined {\n        return this._activeGroup;\n    }\n\n    constructor(options: BaseGridOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.gridview = new Gridview(\n            !!options.proportionalLayout,\n            options.styles,\n            options.orientation\n        );\n\n        this.element.appendChild(this.gridview.element);\n\n        this.layout(0, 0, true); // set some elements height/widths\n\n        this.addDisposables(\n            this.gridview.onDidChange(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup,\n                this.onDidActiveGroupChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange.onEvent(() => {\n                this._onDidLayoutChange.fire();\n            }),\n            this._bufferOnDidLayoutChange\n        );\n    }\n\n    public abstract toJSON(): object;\n\n    public abstract fromJSON(data: any): void;\n\n    public abstract clear(): void;\n\n    public setVisible(panel: T, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n        this._onDidLayoutChange.fire();\n    }\n\n    public isVisible(panel: T): boolean {\n        return this.gridview.isViewVisible(getGridLocation(panel.element));\n    }\n\n    maximizeGroup(panel: T): void {\n        this.gridview.maximizeView(panel);\n    }\n\n    isMaximizedGroup(panel: T): boolean {\n        return this.gridview.maximizedView() === panel;\n    }\n\n    exitMaximizedGroup(): void {\n        this.gridview.exitMaximizedView();\n    }\n\n    hasMaximizedGroup(): boolean {\n        return this.gridview.hasMaximizedView();\n    }\n\n    get onDidMaxmizedGroupChange(): Event<void> {\n        return this.gridview.onDidMaxmizedNodeChange;\n    }\n\n    protected doAddGroup(\n        group: T,\n        location: number[] = [0],\n        size?: number\n    ): void {\n        this.gridview.addView(group, size ?? Sizing.Distribute, location);\n\n        this._onDidAddGroup.fire(group);\n\n        this.doSetGroupActive(group);\n    }\n\n    protected doRemoveGroup(\n        group: T,\n        options?: { skipActive?: boolean; skipDispose?: boolean }\n    ): T {\n        if (!this._groups.has(group.id)) {\n            throw new Error('invalid operation');\n        }\n\n        const item = this._groups.get(group.id);\n\n        const view = this.gridview.remove(group, Sizing.Distribute);\n\n        if (item && !options?.skipDispose) {\n            item.disposable.dispose();\n            item.value.dispose();\n            this._groups.delete(group.id);\n        }\n\n        this._onDidRemoveGroup.fire(group);\n\n        if (!options?.skipActive && this._activeGroup === group) {\n            const groups = Array.from(this._groups.values());\n\n            this.doSetGroupActive(\n                groups.length > 0 ? groups[0].value : undefined\n            );\n        }\n\n        return view as T;\n    }\n\n    public getPanel(id: string): T | undefined {\n        return this._groups.get(id)?.value;\n    }\n\n    public doSetGroupActive(group: T | undefined, skipFocus?: boolean): void {\n        if (this._activeGroup === group) {\n            return;\n        }\n        if (this._activeGroup) {\n            this._activeGroup.setActive(false);\n            if (!skipFocus) {\n                this._activeGroup.focus?.();\n            }\n        }\n\n        if (group) {\n            group.setActive(true);\n            if (!skipFocus) {\n                group.focus?.();\n            }\n        }\n\n        this._activeGroup = group;\n\n        this._onDidActiveGroupChange.fire(group);\n    }\n\n    public removeGroup(group: T): void {\n        this.doRemoveGroup(group);\n    }\n\n    public moveToNext(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.next(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public moveToPrevious(options?: MovementOptions2): void {\n        if (!options) {\n            options = {};\n        }\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        this.doSetGroupActive(next as T);\n    }\n\n    public layout(width: number, height: number, forceResize?: boolean): void {\n        const different =\n            forceResize ?? (width !== this.width || height !== this.height);\n\n        if (!different) {\n            return;\n        }\n\n        this.gridview.element.style.height = `${height}px`;\n        this.gridview.element.style.width = `${width}px`;\n\n        this.gridview.layout(width, height);\n    }\n\n    public dispose(): void {\n        this._onDidActiveGroupChange.dispose();\n        this._onDidAddGroup.dispose();\n        this._onDidRemoveGroup.dispose();\n        this._onDidLayoutChange.dispose();\n\n        for (const group of this.groups) {\n            group.dispose();\n        }\n\n        this.gridview.dispose();\n\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { IPanel, Parameters } from '../panel/types';\n\nexport interface FocusEvent {\n    readonly isFocused: boolean;\n}\nexport interface PanelDimensionChangeEvent {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface VisibilityEvent {\n    readonly isVisible: boolean;\n}\n\nexport interface ActiveEvent {\n    readonly isActive: boolean;\n}\n\nexport interface PanelApi {\n    // events\n    readonly onDidDimensionsChange: Event<PanelDimensionChangeEvent>;\n    readonly onDidFocusChange: Event<FocusEvent>;\n    readonly onDidVisibilityChange: Event<VisibilityEvent>;\n    readonly onDidActiveChange: Event<ActiveEvent>;\n    setVisible(isVisible: boolean): void;\n    setActive(): void;\n    updateParameters(parameters: Parameters): void;\n    /**\n     * The id of the panel that would have been assigned when the panel was created\n     */\n    readonly id: string;\n    /**\n     * Whether the panel holds the current focus\n     */\n    readonly isFocused: boolean;\n    /**\n     * Whether the panel is the actively selected panel\n     */\n    readonly isActive: boolean;\n    /**\n     * Whether the panel is visible\n     */\n    readonly isVisible: boolean;\n    /**\n     * The panel width in pixels\n     */\n    readonly width: number;\n    /**\n     * The panel height in pixels\n     */\n    readonly height: number;\n}\n\n/**\n * A core api implementation that should be used across all panel-like objects\n */\nexport class PanelApiImpl extends CompositeDisposable implements PanelApi {\n    private _isFocused = false;\n    private _isActive = false;\n    private _isVisible = true;\n    private _width = 0;\n    private _height = 0;\n\n    private readonly panelUpdatesDisposable = new MutableDisposable();\n\n    readonly _onDidDimensionChange = new Emitter<PanelDimensionChangeEvent>({\n        replay: true,\n    });\n    readonly onDidDimensionsChange = this._onDidDimensionChange.event;\n    //\n    readonly _onDidChangeFocus = new Emitter<FocusEvent>({\n        replay: true,\n    });\n    readonly onDidFocusChange: Event<FocusEvent> = this._onDidChangeFocus.event;\n    //\n    readonly _onFocusEvent = new Emitter<void>();\n    readonly onFocusEvent: Event<void> = this._onFocusEvent.event;\n    //\n    readonly _onDidVisibilityChange = new Emitter<VisibilityEvent>({\n        replay: true,\n    });\n    readonly onDidVisibilityChange: Event<VisibilityEvent> =\n        this._onDidVisibilityChange.event;\n    //\n\n    readonly _onVisibilityChange = new Emitter<VisibilityEvent>();\n    readonly onVisibilityChange: Event<VisibilityEvent> =\n        this._onVisibilityChange.event;\n    //\n    readonly _onDidActiveChange = new Emitter<ActiveEvent>({\n        replay: true,\n    });\n    readonly onDidActiveChange: Event<ActiveEvent> =\n        this._onDidActiveChange.event;\n    //\n    readonly _onActiveChange = new Emitter<void>();\n    readonly onActiveChange: Event<void> = this._onActiveChange.event;\n    //\n    readonly _onUpdateParameters = new Emitter<Parameters>();\n    readonly onUpdateParameters: Event<Parameters> =\n        this._onUpdateParameters.event;\n    //\n\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    get isActive() {\n        return this._isActive;\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    constructor(readonly id: string) {\n        super();\n\n        this.addDisposables(\n            this.onDidFocusChange((event) => {\n                this._isFocused = event.isFocused;\n            }),\n            this.onDidActiveChange((event) => {\n                this._isActive = event.isActive;\n            }),\n            this.onDidVisibilityChange((event) => {\n                this._isVisible = event.isVisible;\n            }),\n            this.onDidDimensionsChange((event) => {\n                this._width = event.width;\n                this._height = event.height;\n            }),\n            this.panelUpdatesDisposable,\n            this._onDidDimensionChange,\n            this._onDidChangeFocus,\n            this._onDidVisibilityChange,\n            this._onDidActiveChange,\n            this._onFocusEvent,\n            this._onActiveChange,\n            this._onVisibilityChange,\n            this._onUpdateParameters\n        );\n    }\n\n    public initialize(panel: IPanel): void {\n        this.panelUpdatesDisposable.value = this._onUpdateParameters.event(\n            (parameters) => {\n                panel.update({\n                    params: parameters,\n                });\n            }\n        );\n    }\n\n    setVisible(isVisible: boolean) {\n        this._onVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(): void {\n        this._onActiveChange.fire();\n    }\n\n    updateParameters(parameters: Parameters): void {\n        this._onUpdateParameters.fire(parameters);\n    }\n\n    dispose() {\n        super.dispose();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\ninterface PanelConstraintChangeEvent2 {\n    readonly minimumSize?: FunctionOrValue<number>;\n    readonly maximumSize?: FunctionOrValue<number>;\n}\n\nexport interface PanelConstraintChangeEvent {\n    readonly minimumSize?: number;\n    readonly maximumSize?: number;\n}\n\nexport interface PanelSizeEvent {\n    readonly size: number;\n}\n\nexport interface SplitviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent>;\n    setConstraints(value: PanelConstraintChangeEvent2): void;\n    setSize(event: PanelSizeEvent): void;\n}\n\nexport class SplitviewPanelApiImpl\n    extends PanelApiImpl\n    implements SplitviewPanelApi, IDisposable\n{\n    readonly _onDidConstraintsChangeInternal =\n        new Emitter<PanelConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<PanelConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n    //\n\n    readonly _onDidConstraintsChange = new Emitter<PanelConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<PanelConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n    //\n\n    readonly _onDidSizeChange = new Emitter<PanelSizeEvent>();\n    readonly onDidSizeChange: Event<PanelSizeEvent> =\n        this._onDidSizeChange.event;\n    //\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n    }\n\n    setConstraints(value: PanelConstraintChangeEvent2) {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    setSize(event: PanelSizeEvent) {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { PaneviewPanel } from '../paneview/paneviewPanel';\nimport { SplitviewPanelApi, SplitviewPanelApiImpl } from './splitviewPanelApi';\n\nexport interface ExpansionEvent {\n    readonly isExpanded: boolean;\n}\n\nexport interface PaneviewPanelApi extends SplitviewPanelApi {\n    readonly isExpanded: boolean;\n    readonly onDidExpansionChange: Event<ExpansionEvent>;\n    readonly onMouseEnter: Event<MouseEvent>;\n    readonly onMouseLeave: Event<MouseEvent>;\n    setExpanded(isExpanded: boolean): void;\n}\n\nexport class PaneviewPanelApiImpl\n    extends SplitviewPanelApiImpl\n    implements PaneviewPanelApi\n{\n    readonly _onDidExpansionChange = new Emitter<ExpansionEvent>({\n        replay: true,\n    });\n    readonly onDidExpansionChange: Event<ExpansionEvent> =\n        this._onDidExpansionChange.event;\n\n    readonly _onMouseEnter = new Emitter<MouseEvent>({});\n    readonly onMouseEnter: Event<MouseEvent> = this._onMouseEnter.event;\n    readonly _onMouseLeave = new Emitter<MouseEvent>({});\n    readonly onMouseLeave: Event<MouseEvent> = this._onMouseLeave.event;\n\n    private _pane: PaneviewPanel | undefined;\n\n    set pane(pane: PaneviewPanel) {\n        this._pane = pane;\n    }\n\n    constructor(id: string) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidExpansionChange,\n            this._onMouseEnter,\n            this._onMouseLeave\n        );\n    }\n\n    setExpanded(isExpanded: boolean): void {\n        this._pane?.setExpanded(isExpanded);\n    }\n\n    get isExpanded(): boolean {\n        return !!this._pane?.isExpanded();\n    }\n}\n","import { trackFocus } from '../dom';\nimport { CompositeDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelUpdateEvent,\n    PanelInitParameters,\n    IPanel,\n    Parameters,\n} from '../panel/types';\nimport { PanelApi, PanelApiImpl } from '../api/panelApi';\n\nexport interface BasePanelViewState {\n    readonly id: string;\n    readonly component: string;\n    readonly params?: Parameters;\n}\n\nexport interface BasePanelViewExported<T extends PanelApi> {\n    readonly id: string;\n    readonly api: T;\n    readonly width: number;\n    readonly height: number;\n    readonly params: Parameters | undefined;\n    focus(): void;\n    toJSON(): object;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport abstract class BasePanelView<T extends PanelApiImpl>\n    extends CompositeDisposable\n    implements IPanel, BasePanelViewExported<T>\n{\n    private _height = 0;\n    private _width = 0;\n    private _element: HTMLElement;\n    protected part?: IFrameworkPart;\n    protected _params?: PanelInitParameters;\n\n    // provide an IFrameworkPart that will determine the rendered UI of this view piece.\n    protected abstract getComponent(): IFrameworkPart;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get width(): number {\n        return this._width;\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    get params(): Parameters | undefined {\n        return this._params?.params;\n    }\n\n    constructor(\n        public readonly id: string,\n        protected readonly component: string,\n        public readonly api: T\n    ) {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.tabIndex = -1;\n        this._element.style.outline = 'none';\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n        this._element.style.overflow = 'hidden';\n\n        const focusTracker = trackFocus(this._element);\n\n        this.addDisposables(\n            this.api,\n            focusTracker.onDidFocus(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: true });\n            }),\n            focusTracker.onDidBlur(() => {\n                this.api._onDidChangeFocus.fire({ isFocused: false });\n            }),\n            focusTracker\n        );\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    layout(width: number, height: number): void {\n        this._width = width;\n        this._height = height;\n        this.api._onDidDimensionChange.fire({ width, height });\n\n        if (this.part) {\n            if (this._params) {\n                this.part.update(this._params.params);\n            }\n        }\n    }\n\n    init(parameters: PanelInitParameters): void {\n        this._params = parameters;\n        this.part = this.getComponent();\n    }\n\n    update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...this._params,\n            params: {\n                ...this._params?.params,\n                ...event.params,\n            },\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params.params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.part?.update({ params: this._params.params });\n    }\n\n    toJSON(): BasePanelViewState {\n        const params = this._params?.params ?? {};\n\n        return {\n            id: this.id,\n            component: this.component,\n            params: Object.keys(params).length > 0 ? params : undefined,\n        };\n    }\n\n    dispose(): void {\n        this.api.dispose();\n        this.part?.dispose();\n\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { addClasses, removeClasses } from '../dom';\nimport { addDisposableListener, Emitter, Event } from '../events';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from '../gridview/basePanelView';\nimport { IDisposable } from '../lifecycle';\nimport {\n    IFrameworkPart,\n    PanelInitParameters,\n    PanelUpdateEvent,\n    Parameters,\n} from '../panel/types';\nimport { IView, Orientation } from '../splitview/splitview';\n\nexport interface PanePanelViewState extends BasePanelViewState {\n    headerComponent?: string;\n    title: string;\n}\n\nexport interface PanePanelInitParameter extends PanelInitParameters {\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    containerApi: PaneviewApi;\n}\n\nexport interface PanePanelComponentInitParameter\n    extends PanePanelInitParameter {\n    api: PaneviewPanelApiImpl;\n}\n\nexport interface IPaneBodyPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneHeaderPart extends IDisposable {\n    readonly element: HTMLElement;\n    update(params: PanelUpdateEvent): void;\n    init(parameters: PanePanelComponentInitParameter): void;\n}\n\nexport interface IPaneview extends IView {\n    onDidChangeExpansionState: Event<boolean>;\n}\n\nexport interface IPaneviewPanel\n    extends BasePanelViewExported<PaneviewPanelApiImpl> {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly minimumBodySize: number;\n    readonly maximumBodySize: number;\n    isExpanded(): boolean;\n    setExpanded(isExpanded: boolean): void;\n    headerVisible: boolean;\n}\n\nexport abstract class PaneviewPanel\n    extends BasePanelView<PaneviewPanelApiImpl>\n    implements IPaneview, IPaneviewPanel\n{\n    private _onDidChangeExpansionState: Emitter<boolean> = new Emitter<boolean>(\n        { replay: true }\n    );\n    onDidChangeExpansionState = this._onDidChangeExpansionState.event;\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    private headerSize = 22;\n    private _orthogonalSize = 0;\n    private _size = 0;\n    private _minimumBodySize = 100;\n    private _maximumBodySize: number = Number.POSITIVE_INFINITY;\n    private _isExpanded = false;\n    protected header?: HTMLElement;\n    protected body?: HTMLElement;\n    private bodyPart?: IPaneHeaderPart;\n    private headerPart?: IPaneBodyPart;\n    private expandedSize = 0;\n    private animationTimer: any;\n    private _orientation: Orientation;\n\n    private _headerVisible: boolean;\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation;\n    }\n\n    get minimumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const minimumBodySize = expanded ? this._minimumBodySize : 0;\n\n        return headerSize + minimumBodySize;\n    }\n\n    get maximumSize(): number {\n        const headerSize = this.headerSize;\n        const expanded = this.isExpanded();\n        const maximumBodySize = expanded ? this._maximumBodySize : 0;\n\n        return headerSize + maximumBodySize;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get orthogonalSize(): number {\n        return this._orthogonalSize;\n    }\n\n    set orthogonalSize(size: number) {\n        this._orthogonalSize = size;\n    }\n\n    get minimumBodySize(): number {\n        return this._minimumBodySize;\n    }\n\n    set minimumBodySize(value: number) {\n        this._minimumBodySize = typeof value === 'number' ? value : 0;\n    }\n\n    get maximumBodySize(): number {\n        return this._maximumBodySize;\n    }\n\n    set maximumBodySize(value: number) {\n        this._maximumBodySize =\n            typeof value === 'number' ? value : Number.POSITIVE_INFINITY;\n    }\n\n    get headerVisible(): boolean {\n        return this._headerVisible;\n    }\n\n    set headerVisible(value: boolean) {\n        this._headerVisible = value;\n        this.header!.style.display = value ? '' : 'none';\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        private readonly headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        isHeaderVisible: boolean\n    ) {\n        super(id, component, new PaneviewPanelApiImpl(id));\n        this.api.pane = this; // TODO cannot use 'this' before 'super'\n        this.api.initialize(this);\n\n        this._isExpanded = isExpanded;\n        this._headerVisible = isHeaderVisible;\n\n        this._onDidChangeExpansionState.fire(this.isExpanded()); // initialize value\n\n        this._orientation = orientation;\n\n        this.element.classList.add('pane');\n\n        this.addDisposables(\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            }),\n            addDisposableListener(\n                this.element,\n                'mouseenter',\n                (ev: MouseEvent) => {\n                    this.api._onMouseEnter.fire(ev);\n                }\n            ),\n            addDisposableListener(\n                this.element,\n                'mouseleave',\n                (ev: MouseEvent) => {\n                    this.api._onMouseLeave.fire(ev);\n                }\n            )\n        );\n\n        this.addDisposables(\n            this._onDidChangeExpansionState,\n            this.onDidChangeExpansionState((isPanelExpanded) => {\n                this.api._onDidExpansionChange.fire({\n                    isExpanded: isPanelExpanded,\n                });\n            }),\n            this.api.onDidFocusChange((e) => {\n                if (!this.header) {\n                    return;\n                }\n                if (e.isFocused) {\n                    addClasses(this.header, 'focused');\n                } else {\n                    removeClasses(this.header, 'focused');\n                }\n            })\n        );\n\n        this.renderOnce();\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    isExpanded(): boolean {\n        return this._isExpanded;\n    }\n\n    setExpanded(expanded: boolean): void {\n        if (this._isExpanded === expanded) {\n            return;\n        }\n\n        this._isExpanded = expanded;\n\n        if (expanded) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            if (this.body) {\n                this.element.appendChild(this.body);\n            }\n        } else {\n            this.animationTimer = setTimeout(() => {\n                this.body?.remove();\n            }, 200);\n        }\n\n        this._onDidChange.fire(expanded ? { size: this.width } : {});\n        this._onDidChangeExpansionState.fire(expanded);\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        this._size = size;\n        this._orthogonalSize = orthogonalSize;\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        if (this.isExpanded()) {\n            this.expandedSize = width;\n        }\n        super.layout(width, height);\n    }\n\n    init(parameters: PanePanelInitParameter): void {\n        super.init(parameters);\n\n        if (typeof parameters.minimumBodySize === 'number') {\n            this.minimumBodySize = parameters.minimumBodySize;\n        }\n        if (typeof parameters.maximumBodySize === 'number') {\n            this.maximumBodySize = parameters.maximumBodySize;\n        }\n\n        this.bodyPart = this.getBodyComponent();\n        this.headerPart = this.getHeaderComponent();\n\n        this.bodyPart.init({ ...parameters, api: this.api });\n        this.headerPart.init({ ...parameters, api: this.api });\n\n        this.body?.append(this.bodyPart.element);\n        this.header?.append(this.headerPart.element);\n\n        if (typeof parameters.isExpanded === 'boolean') {\n            this.setExpanded(parameters.isExpanded);\n        }\n    }\n\n    toJSON(): PanePanelViewState {\n        const params = this._params as PanePanelInitParameter;\n        return {\n            ...super.toJSON(),\n            headerComponent: this.headerComponent,\n            title: params.title,\n        };\n    }\n\n    private renderOnce(): void {\n        this.header = document.createElement('div');\n        this.header.tabIndex = 0;\n\n        this.header.className = 'pane-header';\n        this.header.style.height = `${this.headerSize}px`;\n        this.header.style.lineHeight = `${this.headerSize}px`;\n        this.header.style.minHeight = `${this.headerSize}px`;\n        this.header.style.maxHeight = `${this.headerSize}px`;\n\n        this.element.appendChild(this.header);\n\n        this.body = document.createElement('div');\n\n        this.body.className = 'pane-body';\n\n        this.element.appendChild(this.body);\n    }\n\n    // TODO slightly hacky by-pass of the component to create a body and header component\n    getComponent(): IFrameworkPart {\n        return {\n            update: (params: Parameters) => {\n                this.bodyPart?.update({ params });\n                this.headerPart?.update({ params });\n            },\n            dispose: () => {\n                this.bodyPart?.dispose();\n                this.headerPart?.dispose();\n            },\n        };\n    }\n\n    protected abstract getBodyComponent(): IPaneBodyPart;\n    protected abstract getHeaderComponent(): IPaneHeaderPart;\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { DragHandler } from '../dnd/abstractDragHandler';\nimport {\n    getPaneData,\n    LocalSelectionTransfer,\n    PaneTransfer,\n} from '../dnd/dataTransfer';\nimport { Droptarget, DroptargetEvent } from '../dnd/droptarget';\nimport { Emitter } from '../events';\nimport { IDisposable } from '../lifecycle';\nimport { Orientation } from '../splitview/splitview';\nimport { IPaneviewComponent } from './paneviewComponent';\nimport {\n    IPaneviewPanel,\n    PanePanelInitParameter,\n    PaneviewPanel,\n} from './paneviewPanel';\n\nexport interface PaneviewDropEvent extends DroptargetEvent {\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n    api: PaneviewApi;\n}\n\nexport abstract class DraggablePaneviewPanel extends PaneviewPanel {\n    private handler: DragHandler | undefined;\n    private target: Droptarget | undefined;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop = this._onDidDrop.event;\n\n    constructor(\n        private readonly accessor: IPaneviewComponent,\n        id: string,\n        component: string,\n        headerComponent: string | undefined,\n        orientation: Orientation,\n        isExpanded: boolean,\n        disableDnd: boolean\n    ) {\n        super(id, component, headerComponent, orientation, isExpanded, true);\n\n        if (!disableDnd) {\n            this.initDragFeatures();\n        }\n    }\n\n    private initDragFeatures(): void {\n        if (!this.header) {\n            return;\n        }\n\n        const id = this.id;\n        const accessorId = this.accessor.id;\n        this.header.draggable = true;\n\n        this.handler = new (class PaneDragHandler extends DragHandler {\n            getData(): IDisposable {\n                LocalSelectionTransfer.getInstance().setData(\n                    [new PaneTransfer(accessorId, id)],\n                    PaneTransfer.prototype\n                );\n\n                return {\n                    dispose: () => {\n                        LocalSelectionTransfer.getInstance().clearData(\n                            PaneTransfer.prototype\n                        );\n                    },\n                };\n            }\n        })(this.header);\n\n        this.target = new Droptarget(this.element, {\n            acceptedTargetZones: ['top', 'bottom'],\n            overlayModel: {\n                activationSize: { type: 'percentage', value: 50 },\n            },\n            canDisplayOverlay: (event) => {\n                const data = getPaneData();\n\n                if (data) {\n                    if (\n                        data.paneId !== this.id &&\n                        data.viewId === this.accessor.id\n                    ) {\n                        return true;\n                    }\n                }\n\n                if (this.accessor.options.showDndOverlay) {\n                    return this.accessor.options.showDndOverlay({\n                        nativeEvent: event,\n                        getData: getPaneData,\n                        panel: this,\n                    });\n                }\n\n                return false;\n            },\n        });\n\n        this.addDisposables(\n            this._onDidDrop,\n            this.handler,\n            this.target,\n            this.target.onDrop((event) => {\n                this.onDrop(event);\n            })\n        );\n    }\n\n    private onDrop(event: DroptargetEvent): void {\n        const data = getPaneData();\n\n        if (!data || data.viewId !== this.accessor.id) {\n            // if there is no local drag event for this panel\n            // or if the drag event was creating by another Paneview instance\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                api: new PaneviewApi(this.accessor),\n                getData: getPaneData,\n            });\n            return;\n        }\n\n        const containerApi = (this._params! as PanePanelInitParameter)\n            .containerApi;\n        const panelId = data.paneId;\n\n        const existingPanel = containerApi.getPanel(panelId);\n        if (!existingPanel) {\n            // if the panel doesn't exist\n            this._onDidDrop.fire({\n                ...event,\n                panel: this,\n                getData: getPaneData,\n                api: new PaneviewApi(this.accessor),\n            });\n            return;\n        }\n\n        const allPanels = containerApi.panels;\n\n        const fromIndex = allPanels.indexOf(existingPanel);\n        let toIndex = containerApi.panels.indexOf(this);\n\n        if (event.position === 'left' || event.position === 'top') {\n            toIndex = Math.max(0, toIndex - 1);\n        }\n        if (event.position === 'right' || event.position === 'bottom') {\n            if (fromIndex > toIndex) {\n                toIndex++;\n            }\n            toIndex = Math.min(allPanels.length - 1, toIndex);\n        }\n\n        containerApi.movePanel(fromIndex, toIndex);\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { IPanel } from '../panel/types';\nimport { FunctionOrValue } from '../types';\nimport { PanelApiImpl, PanelApi } from './panelApi';\n\nexport interface GridConstraintChangeEvent {\n    readonly minimumWidth?: number;\n    readonly minimumHeight?: number;\n    readonly maximumWidth?: number;\n    readonly maximumHeight?: number;\n}\n\ninterface GridConstraintChangeEvent2 {\n    readonly minimumWidth?: FunctionOrValue<number>;\n    readonly minimumHeight?: FunctionOrValue<number>;\n    readonly maximumWidth?: FunctionOrValue<number>;\n    readonly maximumHeight?: FunctionOrValue<number>;\n}\n\nexport interface SizeEvent {\n    readonly width?: number;\n    readonly height?: number;\n}\n\nexport interface GridviewPanelApi extends PanelApi {\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent>;\n    setConstraints(value: GridConstraintChangeEvent2): void;\n    setSize(event: SizeEvent): void;\n}\n\nexport class GridviewPanelApiImpl\n    extends PanelApiImpl\n    implements GridviewPanelApi\n{\n    private readonly _onDidConstraintsChangeInternal =\n        new Emitter<GridConstraintChangeEvent2>();\n    readonly onDidConstraintsChangeInternal: Event<GridConstraintChangeEvent2> =\n        this._onDidConstraintsChangeInternal.event;\n\n    readonly _onDidConstraintsChange = new Emitter<GridConstraintChangeEvent>({\n        replay: true,\n    });\n    readonly onDidConstraintsChange: Event<GridConstraintChangeEvent> =\n        this._onDidConstraintsChange.event;\n\n    private readonly _onDidSizeChange = new Emitter<SizeEvent>();\n    readonly onDidSizeChange: Event<SizeEvent> = this._onDidSizeChange.event;\n\n    constructor(id: string, panel?: IPanel) {\n        super(id);\n\n        this.addDisposables(\n            this._onDidConstraintsChangeInternal,\n            this._onDidConstraintsChange,\n            this._onDidSizeChange\n        );\n\n        if (panel) {\n            this.initialize(panel);\n        }\n    }\n\n    public setConstraints(value: GridConstraintChangeEvent): void {\n        this._onDidConstraintsChangeInternal.fire(value);\n    }\n\n    public setSize(event: SizeEvent): void {\n        this._onDidSizeChange.fire(event);\n    }\n}\n","import { PanelInitParameters } from '../panel/types';\nimport {\n    GridviewComponent,\n    IGridPanelComponentView,\n} from './gridviewComponent';\nimport { FunctionOrValue } from '../types';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n    BasePanelViewState,\n} from './basePanelView';\nimport {\n    GridviewPanelApi,\n    GridviewPanelApiImpl,\n} from '../api/gridviewPanelApi';\nimport { LayoutPriority } from '../splitview/splitview';\nimport { Emitter, Event } from '../events';\nimport { IViewSize } from './gridview';\n\nexport interface GridviewInitParameters extends PanelInitParameters {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    priority?: LayoutPriority;\n    snap?: boolean;\n    accessor: GridviewComponent;\n    isVisible?: boolean;\n}\n\nexport interface IGridviewPanel<T extends GridviewPanelApi = GridviewPanelApi>\n    extends BasePanelViewExported<T> {\n    readonly minimumWidth: number;\n    readonly maximumWidth: number;\n    readonly minimumHeight: number;\n    readonly maximumHeight: number;\n    readonly priority: LayoutPriority | undefined;\n    readonly snap: boolean;\n}\n\nexport abstract class GridviewPanel<\n        T extends GridviewPanelApiImpl = GridviewPanelApiImpl\n    >\n    extends BasePanelView<T>\n    implements IGridPanelComponentView, IGridviewPanel\n{\n    private _evaluatedMinimumWidth = 0;\n    private _evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;\n    private _evaluatedMinimumHeight = 0;\n    private _evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;\n\n    private _minimumWidth: FunctionOrValue<number> = 0;\n    private _minimumHeight: FunctionOrValue<number> = 0;\n    private _maximumWidth: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _maximumHeight: FunctionOrValue<number> = Number.MAX_SAFE_INTEGER;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private readonly _onDidChange = new Emitter<IViewSize | undefined>();\n    readonly onDidChange: Event<IViewSize | undefined> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    get minimumWidth(): number {\n        const width =\n            typeof this._minimumWidth === 'function'\n                ? this._minimumWidth()\n                : this._minimumWidth;\n\n        if (width !== this._evaluatedMinimumWidth) {\n            this._evaluatedMinimumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get minimumHeight(): number {\n        const height =\n            typeof this._minimumHeight === 'function'\n                ? this._minimumHeight()\n                : this._minimumHeight;\n\n        if (height !== this._evaluatedMinimumHeight) {\n            this._evaluatedMinimumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumHeight(): number {\n        const height =\n            typeof this._maximumHeight === 'function'\n                ? this._maximumHeight()\n                : this._maximumHeight;\n\n        if (height !== this._evaluatedMaximumHeight) {\n            this._evaluatedMaximumHeight = height;\n            this.updateConstraints();\n        }\n\n        return height;\n    }\n\n    get maximumWidth(): number {\n        const width =\n            typeof this._maximumWidth === 'function'\n                ? this._maximumWidth()\n                : this._maximumWidth;\n\n        if (width !== this._evaluatedMaximumWidth) {\n            this._evaluatedMaximumWidth = width;\n            this.updateConstraints();\n        }\n\n        return width;\n    }\n\n    get isActive(): boolean {\n        return this.api.isActive;\n    }\n\n    constructor(\n        id: string,\n        component: string,\n        options?: {\n            minimumWidth?: number;\n            maximumWidth?: number;\n            minimumHeight?: number;\n            maximumHeight?: number;\n        },\n        api?: T\n    ) {\n        super(id, component, api ?? <T>new GridviewPanelApiImpl(id));\n\n        if (typeof options?.minimumWidth === 'number') {\n            this._minimumWidth = options.minimumWidth;\n        }\n        if (typeof options?.maximumWidth === 'number') {\n            this._maximumWidth = options.maximumWidth;\n        }\n        if (typeof options?.minimumHeight === 'number') {\n            this._minimumHeight = options.minimumHeight;\n        }\n        if (typeof options?.maximumHeight === 'number') {\n            this._maximumHeight = options.maximumHeight;\n        }\n\n        this.api.initialize(this); // TODO: required to by-pass 'super before this' requirement\n\n        this.addDisposables(\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as GridviewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumWidth === 'number' ||\n                    typeof event.minimumWidth === 'function'\n                ) {\n                    this._minimumWidth = event.minimumWidth;\n                }\n                if (\n                    typeof event.minimumHeight === 'number' ||\n                    typeof event.minimumHeight === 'function'\n                ) {\n                    this._minimumHeight = event.minimumHeight;\n                }\n                if (\n                    typeof event.maximumWidth === 'number' ||\n                    typeof event.maximumWidth === 'function'\n                ) {\n                    this._maximumWidth = event.maximumWidth;\n                }\n                if (\n                    typeof event.maximumHeight === 'number' ||\n                    typeof event.maximumHeight === 'function'\n                ) {\n                    this._maximumHeight = event.maximumHeight;\n                }\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({\n                    height: event.height,\n                    width: event.width,\n                });\n            }),\n            this._onDidChange\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    init(parameters: GridviewInitParameters): void {\n        if (parameters.maximumHeight) {\n            this._maximumHeight = parameters.maximumHeight;\n        }\n        if (parameters.minimumHeight) {\n            this._minimumHeight = parameters.minimumHeight;\n        }\n        if (parameters.maximumWidth) {\n            this._maximumWidth = parameters.maximumWidth;\n        }\n        if (parameters.minimumWidth) {\n            this._minimumWidth = parameters.minimumWidth;\n        }\n\n        this._priority = parameters.priority;\n        this._snap = !!parameters.snap;\n\n        super.init(parameters);\n\n        if (typeof parameters.isVisible === 'boolean') {\n            this.setVisible(parameters.isVisible);\n        }\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            minimumWidth: this._evaluatedMinimumWidth,\n            maximumWidth: this._evaluatedMaximumWidth,\n            minimumHeight: this._evaluatedMinimumHeight,\n            maximumHeight: this._evaluatedMaximumHeight,\n        });\n    }\n\n    toJSON(): GridPanelViewState {\n        const state = super.toJSON();\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ? undefined : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...state,\n            minimumHeight: minimum(this.minimumHeight),\n            maximumHeight: maximum(this.maximumHeight),\n            minimumWidth: minimum(this.minimumWidth),\n            maximumWidth: maximum(this.maximumWidth),\n            snap: this.snap,\n            priority: this.priority,\n        };\n    }\n}\n\nexport interface GridPanelViewState extends BasePanelViewState {\n    minimumHeight?: number;\n    maximumHeight?: number;\n    minimumWidth?: number;\n    maximumWidth?: number;\n    snap?: boolean;\n    priority?: LayoutPriority;\n}\n","import { Position } from '../dnd/droptarget';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { DockviewGroupLocation } from '../dockview/dockviewGroupPanelModel';\nimport { Emitter, Event } from '../events';\nimport { GridviewPanelApi, GridviewPanelApiImpl } from './gridviewPanelApi';\n\nexport interface DockviewGroupPanelApi extends GridviewPanelApi {\n    readonly onDidRenderPositionChange: Event<DockviewGroupPanelFloatingChangeEvent>;\n    readonly location: DockviewGroupLocation;\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport interface DockviewGroupPanelFloatingChangeEvent {\n    readonly location: DockviewGroupLocation;\n}\n\n// TODO find a better way to initialize and avoid needing null checks\nconst NOT_INITIALIZED_MESSAGE = 'DockviewGroupPanelApiImpl not initialized';\n\nexport class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {\n    private _group: DockviewGroupPanel | undefined;\n\n    readonly _onDidRenderPositionChange =\n        new Emitter<DockviewGroupPanelFloatingChangeEvent>();\n    readonly onDidRenderPositionChange: Event<DockviewGroupPanelFloatingChangeEvent> =\n        this._onDidRenderPositionChange.event;\n\n    get location(): DockviewGroupLocation {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n        return this._group.model.location;\n    }\n\n    constructor(id: string, private readonly accessor: DockviewComponent) {\n        super(id);\n\n        this.addDisposables(this._onDidRenderPositionChange);\n    }\n\n    moveTo(options: { group: DockviewGroupPanel; position?: Position }): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            undefined,\n            options.position ?? 'center'\n        );\n    }\n\n    maximize(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        this.accessor.maximizeGroup(this._group);\n    }\n\n    isMaximized(): boolean {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        return this.accessor.isMaximizedGroup(this._group);\n    }\n\n    exitMaximized(): void {\n        if (!this._group) {\n            throw new Error(NOT_INITIALIZED_MESSAGE);\n        }\n\n        if (this.isMaximized()) {\n            this.accessor.exitMaximizedGroup();\n        }\n    }\n\n    initialize(group: DockviewGroupPanel): void {\n        this._group = group;\n    }\n}\n","import { IFrameworkPart } from '../panel/types';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport {\n    DockviewGroupPanelModel,\n    GroupOptions,\n    IDockviewGroupPanelModel,\n    IHeader,\n    DockviewGroupPanelLocked,\n} from './dockviewGroupPanelModel';\nimport { GridviewPanel, IGridviewPanel } from '../gridview/gridviewPanel';\nimport { IDockviewPanel } from '../dockview/dockviewPanel';\nimport {\n    DockviewGroupPanelApi,\n    DockviewGroupPanelApiImpl,\n} from '../api/dockviewGroupPanelApi';\n\nexport interface IDockviewGroupPanel\n    extends IGridviewPanel<DockviewGroupPanelApi> {\n    model: IDockviewGroupPanelModel;\n    locked: DockviewGroupPanelLocked;\n    readonly size: number;\n    readonly panels: IDockviewPanel[];\n    readonly activePanel: IDockviewPanel | undefined;\n}\n\nexport type IDockviewGroupPanelPublic = IDockviewGroupPanel;\n\nexport class DockviewGroupPanel\n    extends GridviewPanel<DockviewGroupPanelApiImpl>\n    implements IDockviewGroupPanel\n{\n    private readonly _model: DockviewGroupPanelModel;\n\n    get panels(): IDockviewPanel[] {\n        return this._model.panels;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        return this._model.activePanel;\n    }\n\n    get size(): number {\n        return this._model.size;\n    }\n\n    get model(): DockviewGroupPanelModel {\n        return this._model;\n    }\n\n    get locked(): DockviewGroupPanelLocked {\n        return this._model.locked;\n    }\n\n    set locked(value: DockviewGroupPanelLocked) {\n        this._model.locked = value;\n    }\n\n    get header(): IHeader {\n        return this._model.header;\n    }\n\n    constructor(\n        accessor: DockviewComponent,\n        id: string,\n        options: GroupOptions\n    ) {\n        super(\n            id,\n            'groupview_default',\n            {\n                minimumHeight: 0,\n                minimumWidth: 0,\n            },\n            new DockviewGroupPanelApiImpl(id, accessor)\n        );\n\n        this.api.initialize(this); // cannot use 'this' after after 'super' call\n\n        this._model = new DockviewGroupPanelModel(\n            this.element,\n            accessor,\n            id,\n            options,\n            this\n        );\n    }\n\n    initialize(): void {\n        this._model.initialize();\n    }\n\n    setActive(isActive: boolean): void {\n        super.setActive(isActive);\n        this.model.setActive(isActive);\n    }\n\n    layout(width: number, height: number) {\n        super.layout(width, height);\n        this.model.layout(width, height);\n    }\n\n    getComponent(): IFrameworkPart {\n        return this._model;\n    }\n\n    toJSON(): any {\n        return this.model.toJSON();\n    }\n}\n","import { Emitter, Event } from '../events';\nimport { GridviewPanelApiImpl, GridviewPanelApi } from './gridviewPanelApi';\nimport { DockviewGroupPanel } from '../dockview/dockviewGroupPanel';\nimport { MutableDisposable } from '../lifecycle';\nimport { DockviewPanel } from '../dockview/dockviewPanel';\nimport { DockviewComponent } from '../dockview/dockviewComponent';\nimport { Position } from '../dnd/droptarget';\nimport { DockviewPanelRenderer } from '../dockview/components/greadyRenderContainer';\n\nexport interface TitleEvent {\n    readonly title: string;\n}\n\nexport interface RendererChangedEvent {\n    renderer: DockviewPanelRenderer;\n}\n\nexport interface DockviewPanelApi\n    extends Omit<\n        GridviewPanelApi,\n        // omit properties that do not make sense here\n        'setVisible' | 'onDidConstraintsChange' | 'setConstraints'\n    > {\n    readonly group: DockviewGroupPanel;\n    readonly isGroupActive: boolean;\n    readonly renderer: DockviewPanelRenderer;\n    readonly title: string | undefined;\n    readonly onDidActiveGroupChange: Event<void>;\n    readonly onDidGroupChange: Event<void>;\n    readonly onDidRendererChange: Event<RendererChangedEvent>;\n    close(): void;\n    setTitle(title: string): void;\n    setRenderer(renderer: DockviewPanelRenderer): void;\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void;\n    maximize(): void;\n    isMaximized(): boolean;\n    exitMaximized(): void;\n}\n\nexport class DockviewPanelApiImpl\n    extends GridviewPanelApiImpl\n    implements DockviewPanelApi\n{\n    private _group: DockviewGroupPanel;\n\n    readonly _onDidTitleChange = new Emitter<TitleEvent>();\n    readonly onDidTitleChange = this._onDidTitleChange.event;\n\n    private readonly _onDidActiveGroupChange = new Emitter<void>();\n    readonly onDidActiveGroupChange = this._onDidActiveGroupChange.event;\n\n    private readonly _onDidGroupChange = new Emitter<void>();\n    readonly onDidGroupChange = this._onDidGroupChange.event;\n\n    readonly _onDidRendererChange = new Emitter<RendererChangedEvent>();\n    readonly onDidRendererChange = this._onDidRendererChange.event;\n\n    private readonly disposable = new MutableDisposable();\n\n    get title(): string | undefined {\n        return this.panel.title;\n    }\n\n    get isGroupActive(): boolean {\n        return this.group.isActive;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.panel.renderer;\n    }\n\n    set group(value: DockviewGroupPanel) {\n        const isOldGroupActive = this.isGroupActive;\n\n        this._group = value;\n\n        this._onDidGroupChange.fire();\n\n        if (this._group) {\n            this.disposable.value = this._group.api.onDidActiveChange(() => {\n                this._onDidActiveGroupChange.fire();\n            });\n\n            if (this.isGroupActive !== isOldGroupActive) {\n                this._onDidActiveGroupChange.fire();\n            }\n        }\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private panel: DockviewPanel,\n        group: DockviewGroupPanel,\n        private readonly accessor: DockviewComponent\n    ) {\n        super(panel.id);\n\n        this.initialize(panel);\n\n        this._group = group;\n\n        this.addDisposables(\n            this.disposable,\n            this._onDidRendererChange,\n            this._onDidTitleChange,\n            this._onDidGroupChange,\n            this._onDidActiveGroupChange\n        );\n    }\n\n    moveTo(options: {\n        group: DockviewGroupPanel;\n        position?: Position;\n        index?: number;\n    }): void {\n        this.accessor.moveGroupOrPanel(\n            options.group,\n            this._group.id,\n            this.panel.id,\n            options.position ?? 'center',\n            options.index\n        );\n    }\n\n    setTitle(title: string): void {\n        this.panel.setTitle(title);\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        this.panel.setRenderer(renderer);\n    }\n\n    close(): void {\n        this.group.model.closePanel(this.panel);\n    }\n\n    maximize(): void {\n        this.group.api.maximize();\n    }\n\n    isMaximized(): boolean {\n        return this.group.api.isMaximized();\n    }\n\n    exitMaximized(): void {\n        this.group.api.exitMaximized();\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport {\n    DockviewPanelApi,\n    DockviewPanelApiImpl,\n} from '../api/dockviewPanelApi';\nimport { GroupviewPanelState, IGroupPanelInitParameters } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { CompositeDisposable, IDisposable } from '../lifecycle';\nimport { IPanel, PanelUpdateEvent, Parameters } from '../panel/types';\nimport { IDockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport interface IDockviewPanel extends IDisposable, IPanel {\n    readonly view: IDockviewPanelModel;\n    readonly group: DockviewGroupPanel;\n    readonly api: DockviewPanelApi;\n    readonly title: string | undefined;\n    readonly params: Parameters | undefined;\n    updateParentGroup(group: DockviewGroupPanel, isGroupActive: boolean): void;\n    init(params: IGroupPanelInitParameters): void;\n    toJSON(): GroupviewPanelState;\n    setTitle(title: string): void;\n    update(event: PanelUpdateEvent): void;\n}\n\nexport class DockviewPanel\n    extends CompositeDisposable\n    implements IDockviewPanel\n{\n    readonly api: DockviewPanelApiImpl;\n\n    private _group: DockviewGroupPanel;\n    private _params?: Parameters;\n    private _title: string | undefined;\n    private _renderer: DockviewPanelRenderer | undefined;\n\n    get params(): Parameters | undefined {\n        return this._params;\n    }\n\n    get title(): string | undefined {\n        return this._title;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this._renderer ?? this.accessor.renderer;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly accessor: DockviewComponent,\n        private readonly containerApi: DockviewApi,\n        group: DockviewGroupPanel,\n        readonly view: IDockviewPanelModel,\n        options: { renderer?: DockviewPanelRenderer }\n    ) {\n        super();\n        this._renderer = options.renderer;\n        this._group = group;\n\n        this.api = new DockviewPanelApiImpl(this, this._group, accessor);\n\n        this.addDisposables(\n            this.api.onActiveChange(() => {\n                accessor.setActivePanel(this);\n            }),\n            this.api.onDidSizeChange((event) => {\n                // forward the resize event to the group since if you want to resize a panel\n                // you are actually just resizing the panels parent which is the group\n                this.group.api.setSize(event);\n            }),\n            this.api.onDidRendererChange((event) => {\n                this.group.model.rerender(this);\n            })\n        );\n    }\n\n    public init(params: IGroupPanelInitParameters): void {\n        this._params = params.params;\n\n        this.view.init({\n            ...params,\n            api: this.api,\n            containerApi: this.containerApi,\n        });\n\n        this.setTitle(params.title);\n    }\n\n    focus(): void {\n        this.api._onFocusEvent.fire();\n    }\n\n    public toJSON(): GroupviewPanelState {\n        return <GroupviewPanelState>{\n            id: this.id,\n            contentComponent: this.view.contentComponent,\n            tabComponent: this.view.tabComponent,\n            params:\n                Object.keys(this._params || {}).length > 0\n                    ? this._params\n                    : undefined,\n            title: this.title,\n            renderer: this._renderer,\n        };\n    }\n\n    setTitle(title: string): void {\n        const didTitleChange = title !== this.title;\n\n        if (didTitleChange) {\n            this._title = title;\n\n            this.view.update({\n                params: {\n                    params: this._params,\n                    title: this.title,\n                },\n            });\n            this.api._onDidTitleChange.fire({ title });\n        }\n    }\n\n    setRenderer(renderer: DockviewPanelRenderer): void {\n        const didChange = renderer !== this.renderer;\n\n        if (didChange) {\n            this._renderer = renderer;\n            this.api._onDidRendererChange.fire({\n                renderer: renderer,\n            });\n        }\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        // merge the new parameters with the existing parameters\n        this._params = {\n            ...(this._params ?? {}),\n            ...event.params,\n        };\n\n        /**\n         * delete new keys that have a value of undefined,\n         * allow values of null\n         */\n        for (const key of Object.keys(event.params)) {\n            if (event.params[key] === undefined) {\n                delete this._params[key];\n            }\n        }\n\n        // update the view with the updated props\n        this.view.update({\n            params: {\n                params: this._params,\n                title: this.title,\n            },\n        });\n    }\n\n    public updateParentGroup(\n        group: DockviewGroupPanel,\n        isGroupActive: boolean\n    ): void {\n        this._group = group;\n        this.api.group = group;\n\n        const isPanelVisible = this._group.model.isPanelActive(this);\n\n        this.api._onDidActiveChange.fire({\n            isActive: isGroupActive && isPanelVisible,\n        });\n        this.api._onDidVisibilityChange.fire({\n            isVisible: isPanelVisible,\n        });\n\n        this.view.updateParentGroup(\n            this._group,\n            this._group.model.isPanelActive(this)\n        );\n    }\n\n    public layout(width: number, height: number): void {\n        // the obtain the correct dimensions of the content panel we must deduct the tab height\n        this.api._onDidDimensionChange.fire({\n            width,\n            height: height,\n        });\n\n        this.view.layout(width, height);\n    }\n\n    public dispose(): void {\n        this.api.dispose();\n        this.view.dispose();\n    }\n}\n","const createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}): SVGSVGElement => {\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttributeNS(null, 'height', params.height);\n    svg.setAttributeNS(null, 'width', params.width);\n    svg.setAttributeNS(null, 'viewBox', params.viewbox);\n    svg.setAttributeNS(null, 'aria-hidden', 'false');\n    svg.setAttributeNS(null, 'focusable', 'false');\n    svg.classList.add('dockview-svg');\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttributeNS(null, 'd', params.path);\n    svg.appendChild(path);\n    return svg;\n};\n\nexport const createCloseButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 28 28',\n        path: 'M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z',\n    });\n\nexport const createExpandMoreButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 24 15',\n        path: 'M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z',\n    });\n\nexport const createChevronRightButton = (): SVGSVGElement =>\n    createSvgElementFromPath({\n        width: '11',\n        height: '11',\n        viewbox: '0 0 15 25',\n        path: 'M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z',\n    });\n","import { CompositeDisposable } from '../../../lifecycle';\nimport { ITabRenderer, GroupPanelPartInitParameters } from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { createCloseButton } from '../../../svg';\n\nexport class DefaultTab extends CompositeDisposable implements ITabRenderer {\n    private _element: HTMLElement;\n    private _content: HTMLElement;\n    private _actionContainer: HTMLElement;\n    private _list: HTMLElement;\n    private action: HTMLElement;\n    //\n    private params: GroupPanelPartInitParameters = {} as any;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this._element.className = 'default-tab';\n        //\n        this._content = document.createElement('div');\n        this._content.className = 'tab-content';\n        //\n        this._actionContainer = document.createElement('div');\n        this._actionContainer.className = 'action-container';\n        //\n        this._list = document.createElement('ul');\n        this._list.className = 'tab-list';\n        //\n        this.action = document.createElement('div');\n        this.action.className = 'tab-action';\n        this.action.appendChild(createCloseButton());\n\n        //\n        this._element.appendChild(this._content);\n        this._element.appendChild(this._actionContainer);\n        this._actionContainer.appendChild(this._list);\n        this._list.appendChild(this.action);\n        //\n        this.addDisposables(\n            addDisposableListener(this._actionContainer, 'mousedown', (ev) => {\n                ev.preventDefault();\n            })\n        );\n\n        this.render();\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.params = { ...this.params, ...event.params };\n        this.render();\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(params: GroupPanelPartInitParameters): void {\n        this.params = params;\n        this._content.textContent = params.title;\n\n        addDisposableListener(this.action, 'click', (ev) => {\n            ev.preventDefault(); //\n            this.params.api.close();\n        });\n    }\n\n    onGroupChange(_group: DockviewGroupPanel): void {\n        this.render();\n    }\n\n    onPanelVisibleChange(_isPanelVisible: boolean): void {\n        this.render();\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    private render(): void {\n        if (this._content.textContent !== this.params.title) {\n            this._content.textContent = this.params.title;\n        }\n    }\n}\n","export interface FrameworkFactory<T> {\n    createComponent: (id: string, componentId: string, component: any) => T;\n}\n\nexport type ComponentConstructor<T> = {\n    new (id: string, component: string): T;\n};\n\nexport function createComponent<T>(\n    id: string,\n    componentName?: string,\n    components: {\n        [componentName: string]: ComponentConstructor<T>;\n    } = {},\n    frameworkComponents: {\n        [componentName: string]: any;\n    } = {},\n    createFrameworkComponent?: FrameworkFactory<T>,\n    fallback?: () => T\n): T {\n    const Component =\n        typeof componentName === 'string'\n            ? components[componentName]\n            : undefined;\n    const FrameworkComponent =\n        typeof componentName === 'string'\n            ? frameworkComponents[componentName]\n            : undefined;\n\n    if (Component && FrameworkComponent) {\n        throw new Error(\n            `Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`\n        );\n    }\n    if (FrameworkComponent) {\n        if (!createFrameworkComponent) {\n            throw new Error(\n                `Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`\n            );\n        }\n        return createFrameworkComponent.createComponent(\n            id,\n            componentName!,\n            FrameworkComponent\n        );\n    }\n\n    if (!Component) {\n        if (fallback) {\n            return fallback();\n        }\n        throw new Error(\n            `Cannot create '${id}', no component '${componentName}' provided`\n        );\n    }\n\n    return new Component(id, componentName!);\n}\n","import { DefaultTab } from './components/tab/defaultTab';\nimport {\n    GroupPanelPartInitParameters,\n    IContentRenderer,\n    ITabRenderer,\n} from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { IDisposable } from '../lifecycle';\nimport { createComponent } from '../panel/componentFactory';\nimport { IDockviewComponent } from './dockviewComponent';\nimport { PanelUpdateEvent } from '../panel/types';\n\nexport interface IDockviewPanelModel extends IDisposable {\n    readonly contentComponent: string;\n    readonly tabComponent?: string;\n    readonly content: IContentRenderer;\n    readonly tab?: ITabRenderer;\n    update(event: PanelUpdateEvent): void;\n    layout(width: number, height: number): void;\n    init(params: GroupPanelPartInitParameters): void;\n    updateParentGroup(group: DockviewGroupPanel, isPanelVisible: boolean): void;\n}\n\nexport class DockviewPanelModel implements IDockviewPanelModel {\n    private readonly _content: IContentRenderer;\n    private readonly _tab: ITabRenderer;\n\n    private _group: DockviewGroupPanel | null = null;\n    private _isPanelVisible: boolean | null = null;\n\n    get content(): IContentRenderer {\n        return this._content;\n    }\n\n    get tab(): ITabRenderer {\n        return this._tab;\n    }\n\n    constructor(\n        private readonly accessor: IDockviewComponent,\n        private readonly id: string,\n        readonly contentComponent: string,\n        readonly tabComponent?: string\n    ) {\n        this._content = this.createContentComponent(this.id, contentComponent);\n        this._tab = this.createTabComponent(this.id, tabComponent);\n    }\n\n    init(params: GroupPanelPartInitParameters): void {\n        this.content.init({ ...params, tab: this.tab });\n        this.tab.init(params);\n    }\n\n    updateParentGroup(\n        group: DockviewGroupPanel,\n        isPanelVisible: boolean\n    ): void {\n        if (group !== this._group) {\n            this._group = group;\n            if (this._content.onGroupChange) {\n                this._content.onGroupChange(group);\n            }\n            if (this._tab.onGroupChange) {\n                this._tab.onGroupChange(group);\n            }\n        }\n\n        if (isPanelVisible !== this._isPanelVisible) {\n            this._isPanelVisible = isPanelVisible;\n            if (this._content.onPanelVisibleChange) {\n                this._content.onPanelVisibleChange(isPanelVisible);\n            }\n            if (this._tab.onPanelVisibleChange) {\n                this._tab.onPanelVisibleChange(isPanelVisible);\n            }\n        }\n    }\n\n    layout(width: number, height: number): void {\n        this.content.layout?.(width, height);\n    }\n\n    update(event: PanelUpdateEvent): void {\n        this.content.update?.(event);\n        this.tab.update?.(event);\n    }\n\n    dispose(): void {\n        this.content.dispose?.();\n        this.tab.dispose?.();\n    }\n\n    private createContentComponent(\n        id: string,\n        componentName: string\n    ): IContentRenderer {\n        return createComponent(\n            id,\n            componentName,\n            this.accessor.options.components ?? {},\n            this.accessor.options.frameworkComponents,\n            this.accessor.options.frameworkComponentFactory?.content\n        );\n    }\n\n    private createTabComponent(\n        id: string,\n        componentName?: string\n    ): ITabRenderer {\n        if (componentName) {\n            return createComponent(\n                id,\n                componentName,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else if (this.accessor.options.defaultTabComponent) {\n            return createComponent(\n                id,\n                this.accessor.options.defaultTabComponent,\n                this.accessor.options.tabComponents,\n                this.accessor.options.frameworkTabComponents,\n                this.accessor.options.frameworkComponentFactory?.tab,\n                () => new DefaultTab()\n            );\n        } else {\n            return new DefaultTab();\n        }\n    }\n}\n","import { GroupviewPanelState } from './types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { DockviewComponent } from './dockviewComponent';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { DockviewApi } from '../api/component.api';\n\nexport interface IPanelDeserializer {\n    fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel;\n}\n\n// @depreciated\ninterface LegacyState extends GroupviewPanelState {\n    view?: {\n        tab?: { id: string };\n        content: { id: string };\n    };\n}\n\nexport class DefaultDockviewDeserialzier implements IPanelDeserializer {\n    constructor(private readonly accessor: DockviewComponent) {}\n\n    public fromJSON(\n        panelData: GroupviewPanelState,\n        group: DockviewGroupPanel\n    ): IDockviewPanel {\n        const panelId = panelData.id;\n        const params = panelData.params;\n        const title = panelData.title;\n\n        const viewData = (panelData as LegacyState).view!;\n\n        const contentComponent = viewData\n            ? viewData.content.id\n            : panelData.contentComponent ?? 'unknown';\n        const tabComponent = viewData\n            ? viewData.tab?.id\n            : panelData.tabComponent;\n\n        const view = new DockviewPanelModel(\n            this.accessor,\n            panelId,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            panelId,\n            this.accessor,\n            new DockviewApi(this.accessor),\n            group,\n            view,\n            {\n                renderer: panelData.renderer,\n            }\n        );\n\n        panel.init({\n            title: title ?? panelId,\n            params: params ?? {},\n        });\n\n        return panel;\n    }\n}\n","import {\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n} from '../../types';\nimport { addDisposableListener } from '../../../events';\nimport { toggleClass } from '../../../dom';\nimport { CompositeDisposable } from '../../../lifecycle';\nimport { DockviewGroupPanel } from '../../dockviewGroupPanel';\nimport { PanelUpdateEvent } from '../../../panel/types';\nimport { createCloseButton } from '../../../svg';\nimport { DockviewApi } from '../../../api/component.api';\n\nexport class Watermark\n    extends CompositeDisposable\n    implements IWatermarkRenderer\n{\n    private _element: HTMLElement;\n    private _group: DockviewGroupPanel | undefined;\n    private _api: DockviewApi | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n        this._element = document.createElement('div');\n        this._element.className = 'watermark';\n\n        const title = document.createElement('div');\n        title.className = 'watermark-title';\n\n        const emptySpace = document.createElement('span');\n        emptySpace.style.flexGrow = '1';\n\n        const content = document.createElement('div');\n        content.className = 'watermark-content';\n\n        this._element.appendChild(title);\n        this._element.appendChild(content);\n\n        const actionsContainer = document.createElement('div');\n        actionsContainer.className = 'actions-container';\n\n        const closeAnchor = document.createElement('div');\n        closeAnchor.className = 'close-action';\n        closeAnchor.appendChild(createCloseButton());\n\n        actionsContainer.appendChild(closeAnchor);\n\n        title.appendChild(emptySpace);\n        title.appendChild(actionsContainer);\n\n        this.addDisposables(\n            addDisposableListener(closeAnchor, 'click', (ev) => {\n                ev.preventDefault();\n                if (this._group) {\n                    this._api?.removeGroup(this._group);\n                }\n            })\n        );\n    }\n\n    update(_event: PanelUpdateEvent): void {\n        // noop\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    init(_params: WatermarkRendererInitParameters): void {\n        this._api = _params.containerApi;\n        this.render();\n    }\n\n    updateParentGroup(group: DockviewGroupPanel, _visible: boolean): void {\n        this._group = group;\n        this.render();\n    }\n\n    dispose(): void {\n        super.dispose();\n    }\n\n    private render(): void {\n        const isOneGroup = !!(this._api && this._api.size <= 1);\n        toggleClass(this.element, 'has-actions', isOneGroup);\n    }\n}\n","import {\n    getElementsByTagName,\n    quasiDefaultPrevented,\n    toggleClass,\n} from '../dom';\nimport {\n    Emitter,\n    Event,\n    addDisposableListener,\n    addDisposableWindowListener,\n} from '../events';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { clamp } from '../math';\nimport { Box } from '../types';\n\nconst bringElementToFront = (() => {\n    let previous: HTMLElement | null = null;\n\n    function pushToTop(element: HTMLElement) {\n        if (previous !== element && previous !== null) {\n            toggleClass(previous, 'dv-bring-to-front', false);\n        }\n\n        toggleClass(element, 'dv-bring-to-front', true);\n        previous = element;\n    }\n\n    return pushToTop;\n})();\n\nexport class Overlay extends CompositeDisposable {\n    private _element: HTMLElement = document.createElement('div');\n\n    private readonly _onDidChange = new Emitter<void>();\n    readonly onDidChange: Event<void> = this._onDidChange.event;\n\n    private readonly _onDidChangeEnd = new Emitter<void>();\n    readonly onDidChangeEnd: Event<void> = this._onDidChangeEnd.event;\n\n    private static MINIMUM_HEIGHT = 20;\n    private static MINIMUM_WIDTH = 20;\n\n    set minimumInViewportWidth(value: number | undefined) {\n        this.options.minimumInViewportWidth = value;\n    }\n\n    set minimumInViewportHeight(value: number | undefined) {\n        this.options.minimumInViewportHeight = value;\n    }\n\n    constructor(\n        private readonly options: Box & {\n            container: HTMLElement;\n            content: HTMLElement;\n            minimumInViewportWidth?: number;\n            minimumInViewportHeight?: number;\n        }\n    ) {\n        super();\n\n        this.addDisposables(this._onDidChange, this._onDidChangeEnd);\n\n        this._element.className = 'dv-resize-container';\n\n        this.setupResize('top');\n        this.setupResize('bottom');\n        this.setupResize('left');\n        this.setupResize('right');\n        this.setupResize('topleft');\n        this.setupResize('topright');\n        this.setupResize('bottomleft');\n        this.setupResize('bottomright');\n\n        this._element.appendChild(this.options.content);\n        this.options.container.appendChild(this._element);\n\n        // if input bad resize within acceptable boundaries\n        this.setBounds({\n            height: this.options.height,\n            width: this.options.width,\n            top: this.options.top,\n            left: this.options.left,\n        });\n    }\n\n    setBounds(bounds: Partial<Box> = {}): void {\n        if (typeof bounds.height === 'number') {\n            this._element.style.height = `${bounds.height}px`;\n        }\n        if (typeof bounds.width === 'number') {\n            this._element.style.width = `${bounds.width}px`;\n        }\n        if (typeof bounds.top === 'number') {\n            this._element.style.top = `${bounds.top}px`;\n        }\n        if (typeof bounds.left === 'number') {\n            this._element.style.left = `${bounds.left}px`;\n        }\n\n        const containerRect = this.options.container.getBoundingClientRect();\n        const overlayRect = this._element.getBoundingClientRect();\n\n        // region: ensure bounds within allowable limits\n\n        // a minimum width of minimumViewportWidth must be inside the viewport\n        const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));\n\n        // a minimum height of minimumViewportHeight must be inside the viewport\n        const yOffset =\n            typeof this.options.minimumInViewportHeight === 'number'\n                ? Math.max(0, this.getMinimumHeight(overlayRect.height))\n                : 0;\n\n        const left = clamp(\n            overlayRect.left - containerRect.left,\n            -xOffset,\n            Math.max(0, containerRect.width - overlayRect.width + xOffset)\n        );\n\n        const top = clamp(\n            overlayRect.top - containerRect.top,\n            -yOffset,\n            Math.max(0, containerRect.height - overlayRect.height + yOffset)\n        );\n\n        this._element.style.left = `${left}px`;\n        this._element.style.top = `${top}px`;\n\n        this._onDidChange.fire();\n    }\n\n    toJSON(): Box {\n        const container = this.options.container.getBoundingClientRect();\n        const element = this._element.getBoundingClientRect();\n\n        return {\n            top: element.top - container.top,\n            left: element.left - container.left,\n            width: element.width,\n            height: element.height,\n        };\n    }\n\n    setupDrag(\n        dragTarget: HTMLElement,\n        options: { inDragMode: boolean } = { inDragMode: false }\n    ): void {\n        const move = new MutableDisposable();\n\n        const track = () => {\n            let offset: { x: number; y: number } | null = null;\n\n            const iframes = [\n                ...getElementsByTagName('iframe'),\n                ...getElementsByTagName('webview'),\n            ];\n\n            for (const iframe of iframes) {\n                iframe.style.pointerEvents = 'none';\n            }\n\n            move.value = new CompositeDisposable(\n                {\n                    dispose: () => {\n                        for (const iframe of iframes) {\n                            iframe.style.pointerEvents = 'auto';\n                        }\n                    },\n                },\n                addDisposableWindowListener(window, 'mousemove', (e) => {\n                    const containerRect =\n                        this.options.container.getBoundingClientRect();\n                    const x = e.clientX - containerRect.left;\n                    const y = e.clientY - containerRect.top;\n\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        true\n                    );\n\n                    const overlayRect = this._element.getBoundingClientRect();\n                    if (offset === null) {\n                        offset = {\n                            x: e.clientX - overlayRect.left,\n                            y: e.clientY - overlayRect.top,\n                        };\n                    }\n\n                    const xOffset = Math.max(\n                        0,\n                        this.getMinimumWidth(overlayRect.width)\n                    );\n                    const yOffset = Math.max(\n                        0,\n                        this.options.minimumInViewportHeight\n                            ? this.getMinimumHeight(overlayRect.height)\n                            : 0\n                    );\n\n                    const left = clamp(\n                        x - offset.x,\n                        -xOffset,\n                        Math.max(\n                            0,\n                            containerRect.width - overlayRect.width + xOffset\n                        )\n                    );\n\n                    const top = clamp(\n                        y - offset.y,\n                        -yOffset,\n                        Math.max(\n                            0,\n                            containerRect.height - overlayRect.height + yOffset\n                        )\n                    );\n\n                    this.setBounds({ top, left });\n                }),\n                addDisposableWindowListener(window, 'mouseup', () => {\n                    toggleClass(\n                        this._element,\n                        'dv-resize-container-dragging',\n                        false\n                    );\n\n                    move.dispose();\n                    this._onDidChangeEnd.fire();\n                })\n            );\n        };\n\n        this.addDisposables(\n            move,\n            addDisposableListener(dragTarget, 'mousedown', (event) => {\n                if (event.defaultPrevented) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // if somebody has marked this event then treat as a defaultPrevented\n                // without actually calling event.preventDefault()\n                if (quasiDefaultPrevented(event)) {\n                    return;\n                }\n\n                track();\n            }),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                (event) => {\n                    if (event.defaultPrevented) {\n                        return;\n                    }\n\n                    // if somebody has marked this event then treat as a defaultPrevented\n                    // without actually calling event.preventDefault()\n                    if (quasiDefaultPrevented(event)) {\n                        return;\n                    }\n\n                    if (event.shiftKey) {\n                        track();\n                    }\n                }\n            ),\n            addDisposableListener(\n                this.options.content,\n                'mousedown',\n                () => {\n                    bringElementToFront(this._element);\n                },\n                true\n            )\n        );\n\n        bringElementToFront(this._element);\n\n        if (options.inDragMode) {\n            track();\n        }\n    }\n\n    private setupResize(\n        direction:\n            | 'top'\n            | 'bottom'\n            | 'left'\n            | 'right'\n            | 'topleft'\n            | 'topright'\n            | 'bottomleft'\n            | 'bottomright'\n    ): void {\n        const resizeHandleElement = document.createElement('div');\n        resizeHandleElement.className = `dv-resize-handle-${direction}`;\n        this._element.appendChild(resizeHandleElement);\n\n        const move = new MutableDisposable();\n\n        this.addDisposables(\n            move,\n            addDisposableListener(resizeHandleElement, 'mousedown', (e) => {\n                e.preventDefault();\n\n                let startPosition: {\n                    originalY: number;\n                    originalHeight: number;\n                    originalX: number;\n                    originalWidth: number;\n                } | null = null;\n\n                const iframes = [\n                    ...getElementsByTagName('iframe'),\n                    ...getElementsByTagName('webview'),\n                ];\n\n                for (const iframe of iframes) {\n                    iframe.style.pointerEvents = 'none';\n                }\n\n                move.value = new CompositeDisposable(\n                    addDisposableWindowListener(window, 'mousemove', (e) => {\n                        const containerRect =\n                            this.options.container.getBoundingClientRect();\n                        const overlayRect =\n                            this._element.getBoundingClientRect();\n\n                        const y = e.clientY - containerRect.top;\n                        const x = e.clientX - containerRect.left;\n\n                        if (startPosition === null) {\n                            // record the initial dimensions since as all subsequence moves are relative to this\n                            startPosition = {\n                                originalY: y,\n                                originalHeight: overlayRect.height,\n                                originalX: x,\n                                originalWidth: overlayRect.width,\n                            };\n                        }\n\n                        let top: number | undefined = undefined;\n                        let height: number | undefined = undefined;\n                        let left: number | undefined = undefined;\n                        let width: number | undefined = undefined;\n\n                        const moveTop = () => {\n                            top = clamp(\n                                y,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalY +\n                                    startPosition!.originalHeight >\n                                    containerRect.height\n                                    ? this.getMinimumHeight(\n                                          containerRect.height\n                                      )\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalY +\n                                              startPosition!.originalHeight -\n                                              Overlay.MINIMUM_HEIGHT\n                                      )\n                            );\n                            height =\n                                startPosition!.originalY +\n                                startPosition!.originalHeight -\n                                top;\n                        };\n\n                        const moveBottom = () => {\n                            top =\n                                startPosition!.originalY -\n                                startPosition!.originalHeight;\n\n                            height = clamp(\n                                y - top,\n                                top < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportHeight === 'number'\n                                    ? -top +\n                                          this.options.minimumInViewportHeight\n                                    : Overlay.MINIMUM_HEIGHT,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        const moveLeft = () => {\n                            left = clamp(\n                                x,\n                                -Number.MAX_VALUE,\n                                startPosition!.originalX +\n                                    startPosition!.originalWidth >\n                                    containerRect.width\n                                    ? this.getMinimumWidth(containerRect.width)\n                                    : Math.max(\n                                          0,\n                                          startPosition!.originalX +\n                                              startPosition!.originalWidth -\n                                              Overlay.MINIMUM_WIDTH\n                                      )\n                            );\n\n                            width =\n                                startPosition!.originalX +\n                                startPosition!.originalWidth -\n                                left;\n                        };\n\n                        const moveRight = () => {\n                            left =\n                                startPosition!.originalX -\n                                startPosition!.originalWidth;\n\n                            width = clamp(\n                                x - left,\n                                left < 0 &&\n                                    typeof this.options\n                                        .minimumInViewportWidth === 'number'\n                                    ? -left +\n                                          this.options.minimumInViewportWidth\n                                    : Overlay.MINIMUM_WIDTH,\n                                Number.MAX_VALUE\n                            );\n                        };\n\n                        switch (direction) {\n                            case 'top':\n                                moveTop();\n                                break;\n                            case 'bottom':\n                                moveBottom();\n                                break;\n                            case 'left':\n                                moveLeft();\n                                break;\n                            case 'right':\n                                moveRight();\n                                break;\n                            case 'topleft':\n                                moveTop();\n                                moveLeft();\n                                break;\n                            case 'topright':\n                                moveTop();\n                                moveRight();\n                                break;\n                            case 'bottomleft':\n                                moveBottom();\n                                moveLeft();\n                                break;\n                            case 'bottomright':\n                                moveBottom();\n                                moveRight();\n                                break;\n                        }\n\n                        this.setBounds({ height, width, top, left });\n                    }),\n                    {\n                        dispose: () => {\n                            for (const iframe of iframes) {\n                                iframe.style.pointerEvents = 'auto';\n                            }\n                        },\n                    },\n                    addDisposableWindowListener(window, 'mouseup', () => {\n                        move.dispose();\n                        this._onDidChangeEnd.fire();\n                    })\n                );\n            })\n        );\n    }\n\n    private getMinimumWidth(width: number) {\n        if (typeof this.options.minimumInViewportWidth === 'number') {\n            return width - this.options.minimumInViewportWidth;\n        }\n        return 0;\n    }\n\n    private getMinimumHeight(height: number) {\n        if (typeof this.options.minimumInViewportHeight === 'number') {\n            return height - this.options.minimumInViewportHeight;\n        }\n        return height;\n    }\n\n    override dispose(): void {\n        this._element.remove();\n        super.dispose();\n    }\n}\n","import { Overlay } from '../dnd/overlay';\nimport { CompositeDisposable } from '../lifecycle';\nimport { DockviewGroupPanel, IDockviewGroupPanel } from './dockviewGroupPanel';\n\nexport interface IDockviewFloatingGroupPanel {\n    readonly group: IDockviewGroupPanel;\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void;\n}\n\nexport class DockviewFloatingGroupPanel\n    extends CompositeDisposable\n    implements IDockviewFloatingGroupPanel\n{\n    constructor(readonly group: DockviewGroupPanel, readonly overlay: Overlay) {\n        super();\n\n        this.addDisposables(overlay);\n    }\n\n    position(\n        bounds: Partial<{\n            top: number;\n            left: number;\n            height: number;\n            width: number;\n        }>\n    ): void {\n        this.overlay.setBounds(bounds);\n    }\n}\n","import { DragAndDropObserver } from '../../dnd/dnd';\nimport { Droptarget } from '../../dnd/droptarget';\nimport { getDomNodePagePosition, toggleClass } from '../../dom';\nimport { CompositeDisposable, Disposable, IDisposable } from '../../lifecycle';\nimport { IDockviewPanel } from '../dockviewPanel';\n\nexport type DockviewPanelRenderer = 'onlyWhenVisibile' | 'always';\n\nexport interface IRenderable {\n    readonly element: HTMLElement;\n    readonly dropTarget: Droptarget;\n}\n\nfunction createFocusableElement(): HTMLDivElement {\n    const element = document.createElement('div');\n    element.tabIndex = -1;\n    return element;\n}\n\nexport class GreadyRenderContainer extends CompositeDisposable {\n    private readonly map: Record<\n        string,\n        { disposable: IDisposable; element: HTMLElement }\n    > = {};\n\n    get allIds(): string[] {\n        return Object.keys(this.map);\n    }\n\n    constructor(private readonly element: HTMLElement) {\n        super();\n\n        this.addDisposables({\n            dispose: () => {\n                for (const value of Object.values(this.map)) {\n                    value.disposable.dispose();\n                }\n            },\n        });\n    }\n\n    remove(panel: IDockviewPanel): boolean {\n        if (this.map[panel.api.id]) {\n            this.map[panel.api.id].disposable.dispose();\n            delete this.map[panel.api.id];\n            return true;\n        }\n        return false;\n    }\n\n    setReferenceContentContainer(\n        panel: IDockviewPanel,\n        referenceContainer: IRenderable\n    ): HTMLElement {\n        if (!this.map[panel.api.id]) {\n            const element = createFocusableElement();\n            element.className = 'dv-render-overlay';\n\n            this.map[panel.api.id] = {\n                disposable: Disposable.NONE,\n                element,\n            };\n        }\n\n        this.map[panel.api.id]?.disposable.dispose();\n        const focusContainer = this.map[panel.api.id].element;\n\n        if (panel.view.content.element.parentElement !== focusContainer) {\n            focusContainer.appendChild(panel.view.content.element);\n        }\n\n        if (focusContainer.parentElement !== this.element) {\n            this.element.appendChild(focusContainer);\n        }\n\n        const resize = () => {\n            // TODO propagate position to avoid getDomNodePagePosition calls\n            const box = getDomNodePagePosition(referenceContainer.element);\n            const box2 = getDomNodePagePosition(this.element);\n            focusContainer.style.left = `${box.left - box2.left}px`;\n            focusContainer.style.top = `${box.top - box2.top}px`;\n            focusContainer.style.width = `${box.width}px`;\n            focusContainer.style.height = `${box.height}px`;\n\n            toggleClass(\n                focusContainer,\n                'dv-render-overlay-float',\n                panel.group.api.location === 'floating'\n            );\n        };\n\n        const disposable = new CompositeDisposable(\n            /**\n             * since container is positioned absoutely we must explicitly forward\n             * the dnd events for the expect behaviours to continue to occur in terms of dnd\n             */\n            new DragAndDropObserver(focusContainer, {\n                onDragEnd: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnd(e);\n                },\n                onDragEnter: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragEnter(e);\n                },\n                onDragLeave: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragLeave(e);\n                },\n                onDrop: (e) => {\n                    referenceContainer.dropTarget.dnd.onDrop(e);\n                },\n                onDragOver: (e) => {\n                    referenceContainer.dropTarget.dnd.onDragOver(e);\n                },\n            }),\n            panel.api.onDidVisibilityChange((event) => {\n                focusContainer.style.display = event.isVisible ? '' : 'none';\n            }),\n            panel.api.onDidDimensionsChange((event) => {\n                resize();\n            }),\n            {\n                dispose: () => {\n                    focusContainer.removeChild(panel.view.content.element);\n                    this.element.removeChild(focusContainer);\n                },\n            }\n        );\n\n        queueMicrotask(() => {\n            /**\n             * wait until everything has finished in the current stack-frame call before\n             * calling the first resize as other size-altering events may still occur before\n             * the end of the stack-frame.\n             */\n            resize();\n        });\n\n        this.map[panel.api.id].disposable = disposable;\n\n        return focusContainer;\n    }\n}\n","import { addStyles } from './dom';\nimport { Emitter, addDisposableWindowListener } from './events';\nimport { CompositeDisposable, IDisposable } from './lifecycle';\nimport { Box } from './types';\n\nexport type PopoutWindowOptions = {\n    url: string;\n} & Box;\n\nexport class PopoutWindow extends CompositeDisposable {\n    private readonly _onDidClose = new Emitter<void>();\n    readonly onDidClose = this._onDidClose.event;\n\n    private _window: { value: Window; disposable: IDisposable } | null = null;\n\n    constructor(\n        private readonly id: string,\n        private readonly className: string,\n        private readonly options: PopoutWindowOptions\n    ) {\n        super();\n\n        this.addDisposables(this._onDidClose, {\n            dispose: () => {\n                this.close();\n            },\n        });\n    }\n\n    dimensions(): Box | null {\n        if (!this._window) {\n            return null;\n        }\n\n        const left = this._window.value.screenX;\n        const top = this._window.value.screenY;\n        const width = this._window.value.innerWidth;\n        const height = this._window.value.innerHeight;\n\n        return { top, left, width, height };\n    }\n\n    close(): void {\n        if (this._window) {\n            this._window.disposable.dispose();\n            this._window.value.close();\n            this._window = null;\n        }\n    }\n\n    open(content: HTMLElement): void {\n        if (this._window) {\n            throw new Error('instance of popout window is already open');\n        }\n\n        const url = `${this.options.url}`;\n\n        const features = Object.entries({\n            top: this.options.top,\n            left: this.options.left,\n            width: this.options.width,\n            height: this.options.height,\n        })\n            .map(([key, value]) => `${key}=${value}`)\n            .join(',');\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/open\n        const externalWindow = window.open(url, this.id, features);\n\n        if (!externalWindow) {\n            return;\n        }\n\n        const disposable = new CompositeDisposable();\n\n        this._window = { value: externalWindow, disposable };\n\n        const grievingParent = content.parentElement;\n\n        const cleanUp = () => {\n            grievingParent?.appendChild(content);\n            this._onDidClose.fire();\n            this._window = null;\n        };\n\n        // prevent any default content from loading\n        // externalWindow.document.body.replaceWith(document.createElement('div'));\n\n        disposable.addDisposables(\n            addDisposableWindowListener(window, 'beforeunload', () => {\n                cleanUp();\n                this.close();\n            })\n        );\n\n        externalWindow.addEventListener('load', () => {\n            const externalDocument = externalWindow.document;\n            externalDocument.title = document.title;\n\n            const div = document.createElement('div');\n            div.classList.add('dv-popout-window');\n            div.style.position = 'absolute';\n            div.style.width = '100%';\n            div.style.height = '100%';\n            div.style.top = '0px';\n            div.style.left = '0px';\n            div.classList.add(this.className);\n            div.appendChild(content);\n\n            externalDocument.body.replaceChildren(div);\n            externalDocument.body.classList.add(this.className);\n\n            addStyles(externalDocument, window.document.styleSheets);\n\n            externalWindow.addEventListener('beforeunload', () => {\n                // TODO: indicate external window is closing\n                cleanUp();\n            });\n        });\n    }\n}\n","import { CompositeDisposable } from '../lifecycle';\nimport { PopoutWindow } from '../popoutWindow';\nimport { Box } from '../types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\n\nexport class DockviewPopoutGroupPanel extends CompositeDisposable {\n    readonly window: PopoutWindow;\n\n    constructor(\n        readonly group: DockviewGroupPanel,\n        private readonly options: {\n            className: string;\n            popoutUrl: string;\n            box: Box;\n        }\n    ) {\n        super();\n\n        this.window = new PopoutWindow('test', options.className ?? '', {\n            url: this.options.popoutUrl,\n            left: this.options.box.left,\n            top: this.options.box.top,\n            width: this.options.box.width,\n            height: this.options.box.height,\n        });\n\n        group.model.location = 'popout';\n\n        this.addDisposables(\n            this.window,\n            {\n                dispose: () => {\n                    group.model.location = 'grid';\n                },\n            },\n            this.window.onDidClose(() => {\n                this.dispose();\n            })\n        );\n\n        this.window.open(group.element);\n    }\n}\n","export const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;\n\nexport const DEFAULT_FLOATING_GROUP_POSITION = { left: 100, top: 100 };\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    ISerializedLeafNode,\n} from '../gridview/gridview';\nimport { directionToPosition, Droptarget, Position } from '../dnd/droptarget';\nimport { tail, sequenceEquals, remove } from '../array';\nimport { DockviewPanel, IDockviewPanel } from './dockviewPanel';\nimport { CompositeDisposable } from '../lifecycle';\nimport { Event, Emitter } from '../events';\nimport { Watermark } from './components/watermark/watermark';\nimport {\n    IWatermarkRenderer,\n    GroupviewPanelState,\n    DockviewDropTargets,\n} from './types';\nimport { sequentialNumberGenerator } from '../math';\nimport { DefaultDockviewDeserialzier } from './deserializer';\nimport { createComponent } from '../panel/componentFactory';\nimport {\n    AddGroupOptions,\n    AddPanelOptions,\n    DockviewComponentOptions,\n    isGroupOptionsWithGroup,\n    isGroupOptionsWithPanel,\n    isPanelOptionsWithGroup,\n    isPanelOptionsWithPanel,\n    MovementOptions,\n} from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    toTarget,\n} from '../gridview/baseComponentGridview';\nimport { DockviewApi } from '../api/component.api';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport {\n    GroupOptions,\n    GroupPanelViewState,\n    GroupviewDropEvent,\n} from './dockviewGroupPanelModel';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { DockviewPanelModel } from './dockviewPanelModel';\nimport { getPanelData } from '../dnd/dataTransfer';\nimport { Parameters } from '../panel/types';\nimport { Overlay } from '../dnd/overlay';\nimport { toggleClass, watchElementResize } from '../dom';\nimport { DockviewFloatingGroupPanel } from './dockviewFloatingGroupPanel';\nimport {\n    GroupDragEvent,\n    TabDragEvent,\n} from './components/titlebar/tabsContainer';\nimport { Box } from '../types';\nimport {\n    GreadyRenderContainer,\n    DockviewPanelRenderer,\n} from './components/greadyRenderContainer';\nimport { DockviewPopoutGroupPanel } from './dockviewPopoutGroupPanel';\nimport {\n    DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n    DEFAULT_FLOATING_GROUP_POSITION,\n} from '../constants';\n\nfunction getTheme(element: HTMLElement): string | undefined {\n    function toClassList(element: HTMLElement) {\n        const list: string[] = [];\n\n        for (let i = 0; i < element.classList.length; i++) {\n            list.push(element.classList.item(i)!);\n        }\n\n        return list;\n    }\n\n    let theme: string | undefined = undefined;\n    let parent: HTMLElement | null = element;\n\n    while (parent !== null) {\n        theme = toClassList(parent).find((cls) =>\n            cls.startsWith('dockview-theme-')\n        );\n        if (typeof theme === 'string') {\n            break;\n        }\n        parent = parent.parentElement;\n    }\n\n    return theme;\n}\n\nexport interface PanelReference {\n    update: (event: { params: { [key: string]: any } }) => void;\n    remove: () => void;\n}\n\nexport interface SerializedFloatingGroup {\n    data: GroupPanelViewState;\n    position: Box;\n}\n\nexport interface SerializedPopoutGroup {\n    data: GroupPanelViewState;\n    position: Box | null;\n}\n\nexport interface SerializedDockview {\n    grid: {\n        root: SerializedGridObject<GroupPanelViewState>;\n        height: number;\n        width: number;\n        orientation: Orientation;\n    };\n    panels: Record<string, GroupviewPanelState>;\n    activeGroup?: string;\n    floatingGroups?: SerializedFloatingGroup[];\n    popoutGroups?: SerializedPopoutGroup[];\n}\n\nfunction typeValidate3(data: GroupPanelViewState, path: string): void {\n    if (typeof data.id !== 'string') {\n        throw new Error(`${path}.id must be a string`);\n    }\n\n    if (\n        typeof data.activeView !== 'string' ||\n        typeof data.activeView !== 'undefined'\n    ) {\n        throw new Error(`${path}.activeView must be a string of undefined`);\n    }\n}\n\nfunction typeValidate2(\n    data: SerializedGridObject<GroupPanelViewState>,\n    path: string\n): void {\n    if (typeof data.size !== 'number' && typeof data.size !== 'undefined') {\n        throw new Error(`${path}.size must be a number or undefined`);\n    }\n\n    if (\n        typeof data.visible !== 'boolean' &&\n        typeof data.visible !== 'undefined'\n    ) {\n        throw new Error(`${path}.visible must be a boolean or undefined`);\n    }\n\n    if (data.type === 'leaf') {\n        if (\n            typeof data.data !== 'object' ||\n            data.data === null ||\n            Array.isArray(data.data)\n        ) {\n            throw new Error('object must be a non-null object');\n        }\n\n        typeValidate3(data.data, `${path}.data`);\n    } else if (data.type === 'branch') {\n        if (!Array.isArray(data.data)) {\n            throw new Error(`${path}.data must be an array`);\n        }\n    } else {\n        throw new Error(`${path}.type must be onew of {'branch', 'leaf'}`);\n    }\n}\n\nfunction typeValidate(data: SerializedDockview): void {\n    if (typeof data !== 'object' || data === null) {\n        throw new Error('object must be a non-null object');\n    }\n\n    const { grid, panels, activeGroup, floatingGroups } = data;\n\n    if (typeof grid !== 'object' || grid === null) {\n        throw new Error(\"'.grid' must be a non-null object\");\n    }\n\n    if (typeof grid.height !== 'number') {\n        throw new Error(\"'.grid.height' must be a number\");\n    }\n\n    if (typeof grid.width !== 'number') {\n        throw new Error(\"'.grid.width' must be a number\");\n    }\n\n    if (typeof grid.root !== 'object' || grid.root === null) {\n        throw new Error(\"'.grid.root' must be a non-null object\");\n    }\n\n    if (grid.root.type !== 'branch') {\n        throw new Error(\".grid.root.type must be of type 'branch'\");\n    }\n\n    if (\n        grid.orientation !== Orientation.HORIZONTAL &&\n        grid.orientation !== Orientation.VERTICAL\n    ) {\n        throw new Error(\n            `'.grid.width' must be one of {${Orientation.HORIZONTAL}, ${Orientation.VERTICAL}}`\n        );\n    }\n\n    typeValidate2(grid.root, '.grid.root');\n}\n\nexport type DockviewComponentUpdateOptions = Pick<\n    DockviewComponentOptions,\n    | 'orientation'\n    | 'components'\n    | 'frameworkComponents'\n    | 'tabComponents'\n    | 'frameworkTabComponents'\n    | 'showDndOverlay'\n    | 'watermarkFrameworkComponent'\n    | 'defaultTabComponent'\n    | 'createLeftHeaderActionsElement'\n    | 'createRightHeaderActionsElement'\n    | 'createPrefixHeaderActionsElement'\n    | 'disableFloatingGroups'\n    | 'floatingGroupBounds'\n>;\n\nexport interface DockviewDropEvent extends GroupviewDropEvent {\n    api: DockviewApi;\n    group: DockviewGroupPanel | null;\n}\n\nexport interface IDockviewComponent extends IBaseGrid<DockviewGroupPanel> {\n    readonly activePanel: IDockviewPanel | undefined;\n    readonly totalPanels: number;\n    readonly panels: IDockviewPanel[];\n    readonly onDidDrop: Event<DockviewDropEvent>;\n    readonly orientation: Orientation;\n    updateOptions(options: DockviewComponentUpdateOptions): void;\n    moveGroupOrPanel(\n        referenceGroup: DockviewGroupPanel,\n        groupId: string,\n        itemId: string,\n        target: Position,\n        index?: number\n    ): void;\n    doSetGroupActive: (group: DockviewGroupPanel, skipFocus?: boolean) => void;\n    removeGroup: (group: DockviewGroupPanel) => void;\n    options: DockviewComponentOptions;\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): IDockviewPanel;\n    removePanel(panel: IDockviewPanel): void;\n    getGroupPanel: (id: string) => IDockviewPanel | undefined;\n    createWatermarkComponent(): IWatermarkRenderer;\n    // lifecycle\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel;\n    closeAllGroups(): void;\n    // events\n    moveToNext(options?: MovementOptions): void;\n    moveToPrevious(options?: MovementOptions): void;\n    setActivePanel(panel: IDockviewPanel): void;\n    focus(): void;\n    toJSON(): SerializedDockview;\n    fromJSON(data: SerializedDockview): void;\n    //\n    readonly onDidRemovePanel: Event<IDockviewPanel>;\n    readonly onDidAddPanel: Event<IDockviewPanel>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined>;\n    readonly onWillDragPanel: Event<TabDragEvent>;\n    readonly onWillDragGroup: Event<GroupDragEvent>;\n    addFloatingGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        coord?: { x: number; y: number }\n    ): void;\n    addPopoutGroup(\n        item: IDockviewPanel | DockviewGroupPanel,\n        options?: {\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void;\n}\n\nexport class DockviewComponent\n    extends BaseGrid<DockviewGroupPanel>\n    implements IDockviewComponent\n{\n    private readonly nextGroupId = sequentialNumberGenerator();\n    private readonly _deserializer = new DefaultDockviewDeserialzier(this);\n    private readonly _api: DockviewApi;\n    private _options: Exclude<DockviewComponentOptions, 'orientation'>;\n    private watermark: IWatermarkRenderer | null = null;\n\n    readonly greadyRenderContainer: GreadyRenderContainer;\n\n    private readonly _onWillDragPanel = new Emitter<TabDragEvent>();\n    readonly onWillDragPanel: Event<TabDragEvent> = this._onWillDragPanel.event;\n\n    private readonly _onWillDragGroup = new Emitter<GroupDragEvent>();\n    readonly onWillDragGroup: Event<GroupDragEvent> =\n        this._onWillDragGroup.event;\n\n    private readonly _onDidDrop = new Emitter<DockviewDropEvent>();\n    readonly onDidDrop: Event<DockviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidRemovePanel = new Emitter<IDockviewPanel>();\n    readonly onDidRemovePanel: Event<IDockviewPanel> =\n        this._onDidRemovePanel.event;\n\n    private readonly _onDidAddPanel = new Emitter<IDockviewPanel>();\n    readonly onDidAddPanel: Event<IDockviewPanel> = this._onDidAddPanel.event;\n\n    private readonly _onDidLayoutFromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutFromJSON.event;\n\n    private readonly _onDidActivePanelChange = new Emitter<\n        IDockviewPanel | undefined\n    >();\n    readonly onDidActivePanelChange: Event<IDockviewPanel | undefined> =\n        this._onDidActivePanelChange.event;\n\n    private readonly _floatingGroups: DockviewFloatingGroupPanel[] = [];\n    private readonly _popoutGroups: DockviewPopoutGroupPanel[] = [];\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    get totalPanels(): number {\n        return this.panels.length;\n    }\n\n    get panels(): IDockviewPanel[] {\n        return this.groups.flatMap((group) => group.panels);\n    }\n\n    get options(): DockviewComponentOptions {\n        return this._options;\n    }\n\n    get activePanel(): IDockviewPanel | undefined {\n        const activeGroup = this.activeGroup;\n\n        if (!activeGroup) {\n            return undefined;\n        }\n\n        return activeGroup.activePanel;\n    }\n\n    get renderer(): DockviewPanelRenderer {\n        return this.options.defaultRenderer ?? 'onlyWhenVisibile';\n    }\n\n    constructor(options: DockviewComponentOptions) {\n        super({\n            proportionalLayout: true,\n            orientation: options.orientation ?? Orientation.HORIZONTAL,\n            styles: options.styles,\n            parentElement: options.parentElement,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        const gready = document.createElement('div');\n        gready.className = 'dv-gready-render-container';\n        this.gridview.element.appendChild(gready);\n\n        this.greadyRenderContainer = new GreadyRenderContainer(gready);\n\n        toggleClass(this.gridview.element, 'dv-dockview', true);\n        toggleClass(this.element, 'dv-debug', !!options.debug);\n\n        this.addDisposables(\n            this.greadyRenderContainer,\n            this._onWillDragPanel,\n            this._onWillDragGroup,\n            this._onDidActivePanelChange,\n            this._onDidAddPanel,\n            this._onDidRemovePanel,\n            this._onDidLayoutFromJSON,\n            this._onDidDrop,\n            Event.any(\n                this.onDidAddGroup,\n                this.onDidRemoveGroup\n            )(() => {\n                this.updateWatermark();\n            }),\n            Event.any(\n                this.onDidAddPanel,\n                this.onDidRemovePanel,\n                this.onDidActivePanelChange\n            )(() => {\n                this._bufferOnDidLayoutChange.fire();\n            })\n        );\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n        if (!this.options.frameworkTabComponents) {\n            this.options.frameworkTabComponents = {};\n        }\n        if (!this.options.tabComponents) {\n            this.options.tabComponents = {};\n        }\n        if (\n            !this.options.watermarkComponent &&\n            !this.options.watermarkFrameworkComponent\n        ) {\n            this.options.watermarkComponent = Watermark;\n        }\n\n        const dropTarget = new Droptarget(this.element, {\n            canDisplayOverlay: (event, position) => {\n                const data = getPanelData();\n\n                if (data) {\n                    if (data.viewId !== this.id) {\n                        return false;\n                    }\n\n                    if (position === 'center') {\n                        // center drop target is only allowed if there are no panels in the grid\n                        // floating panels are allowed\n                        return this.gridview.length === 0;\n                    }\n\n                    return true;\n                }\n\n                if (this.options.showDndOverlay) {\n                    if (position === 'center' && this.gridview.length !== 0) {\n                        /**\n                         * for external events only show the four-corner drag overlays, disable\n                         * the center position so that external drag events can fall through to the group\n                         * and panel drop target handlers\n                         */\n                        return false;\n                    }\n\n                    return this.options.showDndOverlay({\n                        nativeEvent: event,\n                        position: position,\n                        target: DockviewDropTargets.Edge,\n                        getData: getPanelData,\n                    });\n                }\n\n                return false;\n            },\n            acceptedTargetZones: ['top', 'bottom', 'left', 'right', 'center'],\n            overlayModel: {\n                activationSize: { type: 'pixels', value: 10 },\n                size: { type: 'pixels', value: 20 },\n            },\n        });\n\n        this.addDisposables(\n            dropTarget.onDrop((event) => {\n                const data = getPanelData();\n\n                if (data) {\n                    this.moveGroupOrPanel(\n                        this.orthogonalize(event.position),\n                        data.groupId,\n                        data.panelId ?? undefined,\n                        'center'\n                    );\n                } else {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: null,\n                        getData: getPanelData,\n                    });\n                }\n            }),\n            dropTarget\n        );\n\n        this._api = new DockviewApi(this);\n\n        this.updateWatermark();\n    }\n\n    addPopoutGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        options?: {\n            skipRemoveGroup?: boolean;\n            position?: Box;\n            popoutUrl?: string;\n        }\n    ): void {\n        let group: DockviewGroupPanel;\n        let box: Box | undefined = options?.position;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n\n            if (!box) {\n                box = this.element.getBoundingClientRect();\n            }\n        } else {\n            group = item;\n\n            if (!box) {\n                box = group.element.getBoundingClientRect();\n            }\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        const theme = getTheme(this.gridview.element);\n\n        const popoutWindow = new DockviewPopoutGroupPanel(group, {\n            className: theme ?? '',\n            popoutUrl: options?.popoutUrl ?? '/popout.html',\n            box: {\n                left: box.left,\n                top: box.top,\n                width: box.width,\n                height: box.height,\n            },\n        });\n\n        popoutWindow.addDisposables(\n            {\n                dispose: () => {\n                    remove(this._popoutGroups, popoutWindow);\n                },\n            },\n            popoutWindow.window.onDidClose(() => {\n                this.doAddGroup(group, [0]);\n            })\n        );\n\n        this._popoutGroups.push(popoutWindow);\n    }\n\n    addFloatingGroup(\n        item: DockviewPanel | DockviewGroupPanel,\n        coord?: { x?: number; y?: number; height?: number; width?: number },\n        options?: { skipRemoveGroup?: boolean; inDragMode: boolean }\n    ): void {\n        let group: DockviewGroupPanel;\n\n        if (item instanceof DockviewPanel) {\n            group = this.createGroup();\n\n            this.removePanel(item, {\n                removeEmptyGroup: true,\n                skipDispose: true,\n            });\n\n            group.model.openPanel(item);\n        } else {\n            group = item;\n\n            const skip =\n                typeof options?.skipRemoveGroup === 'boolean' &&\n                options.skipRemoveGroup;\n\n            if (!skip) {\n                this.doRemoveGroup(item, { skipDispose: true });\n            }\n        }\n\n        group.model.location = 'floating';\n\n        const overlayLeft =\n            typeof coord?.x === 'number'\n                ? Math.max(coord.x, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.left;\n        const overlayTop =\n            typeof coord?.y === 'number'\n                ? Math.max(coord.y, 0)\n                : DEFAULT_FLOATING_GROUP_POSITION.top;\n\n        const overlay = new Overlay({\n            container: this.gridview.element,\n            content: group.element,\n            height: coord?.height ?? 300,\n            width: coord?.width ?? 300,\n            left: overlayLeft,\n            top: overlayTop,\n            minimumInViewportWidth:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumWidthWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n            minimumInViewportHeight:\n                this.options.floatingGroupBounds === 'boundedWithinViewport'\n                    ? undefined\n                    : this.options.floatingGroupBounds\n                          ?.minimumHeightWithinViewport ??\n                      DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,\n        });\n\n        const el = group.element.querySelector('.void-container');\n\n        if (!el) {\n            throw new Error('failed to find drag handle');\n        }\n\n        overlay.setupDrag(<HTMLElement>el, {\n            inDragMode:\n                typeof options?.inDragMode === 'boolean'\n                    ? options.inDragMode\n                    : false,\n        });\n\n        const floatingGroupPanel = new DockviewFloatingGroupPanel(\n            group,\n            overlay\n        );\n\n        const disposable = watchElementResize(group.element, (entry) => {\n            const { width, height } = entry.contentRect;\n            group.layout(width, height); // let the group know it's size is changing so it can fire events to the panel\n        });\n\n        floatingGroupPanel.addDisposables(\n            overlay.onDidChange(() => {\n                // this is either a resize or a move\n                // to inform the panels .layout(...) the group with it's current size\n                // don't care about resize since the above watcher handles that\n                group.layout(group.height, group.width);\n            }),\n            overlay.onDidChangeEnd(() => {\n                this._bufferOnDidLayoutChange.fire();\n            }),\n            group.onDidChange((event) => {\n                overlay.setBounds({\n                    height: event?.height,\n                    width: event?.width,\n                });\n            }),\n            {\n                dispose: () => {\n                    disposable.dispose();\n\n                    group.model.location = 'grid';\n                    remove(this._floatingGroups, floatingGroupPanel);\n                    this.updateWatermark();\n                },\n            }\n        );\n\n        this._floatingGroups.push(floatingGroupPanel);\n        this.updateWatermark();\n    }\n\n    private orthogonalize(position: Position): DockviewGroupPanel {\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                if (this.gridview.orientation === Orientation.HORIZONTAL) {\n                    // we need to add to a vertical splitview but the current root is a horizontal splitview.\n                    // insert a vertical splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            case 'left':\n            case 'right':\n                if (this.gridview.orientation === Orientation.VERTICAL) {\n                    // we need to add to a horizontal splitview but the current root is a vertical splitview.\n                    // insert a horiziontal splitview at the root level and add the existing view as a child\n                    this.gridview.insertOrthogonalSplitviewAtRoot();\n                }\n                break;\n            default:\n                break;\n        }\n\n        switch (position) {\n            case 'top':\n            case 'left':\n            case 'center':\n                return this.createGroupAtLocation([0]); // insert into first position\n            case 'bottom':\n            case 'right':\n                return this.createGroupAtLocation([this.gridview.length]); // insert into last position\n            default:\n                throw new Error(`unsupported position ${position}`);\n        }\n    }\n\n    updateOptions(options: DockviewComponentUpdateOptions): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n        const hasFloatingGroupOptionsChanged =\n            options.floatingGroupBounds !== undefined &&\n            options.floatingGroupBounds !== this.options.floatingGroupBounds;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        if (hasFloatingGroupOptionsChanged) {\n            for (const group of this._floatingGroups) {\n                switch (this.options.floatingGroupBounds) {\n                    case 'boundedWithinViewport':\n                        group.overlay.minimumInViewportHeight = undefined;\n                        group.overlay.minimumInViewportWidth = undefined;\n                        break;\n                    case undefined:\n                        group.overlay.minimumInViewportHeight =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        group.overlay.minimumInViewportWidth =\n                            DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;\n                        break;\n                    default:\n                        group.overlay.minimumInViewportHeight =\n                            this.options.floatingGroupBounds?.minimumHeightWithinViewport;\n                        group.overlay.minimumInViewportWidth =\n                            this.options.floatingGroupBounds?.minimumWidthWithinViewport;\n                }\n\n                group.overlay.setBounds({});\n            }\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    override layout(\n        width: number,\n        height: number,\n        forceResize?: boolean | undefined\n    ): void {\n        super.layout(width, height, forceResize);\n\n        if (this._floatingGroups) {\n            for (const floating of this._floatingGroups) {\n                // ensure floting groups stay within visible boundaries\n                floating.overlay.setBounds();\n            }\n        }\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    getGroupPanel(id: string): IDockviewPanel | undefined {\n        return this.panels.find((panel) => panel.id === id);\n    }\n\n    setActivePanel(panel: IDockviewPanel): void {\n        this.doSetGroupActive(panel.group);\n        panel.group.model.openPanel(panel);\n    }\n\n    moveToNext(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (\n                options.group.activePanel !==\n                options.group.panels[options.group.panels.length - 1]\n            ) {\n                options.group.model.moveToNext({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = <DockviewGroupPanel>this.gridview.next(location)?.view;\n        this.doSetGroupAndPanelActive(next);\n    }\n\n    moveToPrevious(options: MovementOptions = {}): void {\n        if (!options.group) {\n            if (!this.activeGroup) {\n                return;\n            }\n            options.group = this.activeGroup;\n        }\n\n        if (options.includePanel && options.group) {\n            if (options.group.activePanel !== options.group.panels[0]) {\n                options.group.model.moveToPrevious({ suppressRoll: true });\n                return;\n            }\n        }\n\n        const location = getGridLocation(options.group.element);\n        const next = this.gridview.previous(location)?.view;\n        if (next) {\n            this.doSetGroupAndPanelActive(next as DockviewGroupPanel);\n        }\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    toJSON(): SerializedDockview {\n        const data = this.gridview.serialize();\n\n        const panels = this.panels.reduce((collection, panel) => {\n            collection[panel.id] = panel.toJSON();\n            return collection;\n        }, {} as { [key: string]: GroupviewPanelState });\n\n        const floats: SerializedFloatingGroup[] = this._floatingGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.overlay.toJSON(),\n                };\n            }\n        );\n\n        const popoutGroups: SerializedPopoutGroup[] = this._popoutGroups.map(\n            (group) => {\n                return {\n                    data: group.group.toJSON() as GroupPanelViewState,\n                    position: group.window.dimensions(),\n                };\n            }\n        );\n\n        const result: SerializedDockview = {\n            grid: data,\n            panels,\n            activeGroup: this.activeGroup?.id,\n        };\n\n        if (floats.length > 0) {\n            result.floatingGroups = floats;\n        }\n\n        if (popoutGroups.length > 0) {\n            result.popoutGroups = popoutGroups;\n        }\n\n        return result;\n    }\n\n    fromJSON(data: SerializedDockview): void {\n        this.clear();\n\n        if (typeof data !== 'object' || data === null) {\n            throw new Error('serialized layout must be a non-null object');\n        }\n\n        const { grid, panels, activeGroup } = data;\n\n        if (grid.root.type !== 'branch' || !Array.isArray(grid.root.data)) {\n            throw new Error('root must be of type branch');\n        }\n\n        try {\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            const createGroupFromSerializedState = (\n                data: GroupPanelViewState\n            ) => {\n                const { id, locked, hideHeader, views, activeView } = data;\n\n                if (typeof id !== 'string') {\n                    throw new Error('group id must be of type string');\n                }\n\n                const group = this.createGroup({\n                    id,\n                    locked: !!locked,\n                    hideHeader: !!hideHeader,\n                });\n\n                const createdPanels: IDockviewPanel[] = [];\n\n                for (const child of views) {\n                    /**\n                     * Run the deserializer step seperately since this may fail to due corrupted external state.\n                     * In running this section first we avoid firing lots of 'add' events in the event of a failure\n                     * due to a corruption of input data.\n                     */\n                    const panel = this._deserializer.fromJSON(\n                        panels[child],\n                        group\n                    );\n                    createdPanels.push(panel);\n                }\n\n                this._onDidAddGroup.fire(group);\n\n                for (let i = 0; i < views.length; i++) {\n                    const panel = createdPanels[i];\n\n                    const isActive =\n                        typeof activeView === 'string' &&\n                        activeView === panel.id;\n\n                    group.model.openPanel(panel, {\n                        skipSetPanelActive: !isActive,\n                        skipSetGroupActive: true,\n                    });\n                }\n\n                if (!group.activePanel && group.panels.length > 0) {\n                    group.model.openPanel(\n                        group.panels[group.panels.length - 1],\n                        {\n                            skipSetGroupActive: true,\n                        }\n                    );\n                }\n\n                return group;\n            };\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node: ISerializedLeafNode<GroupPanelViewState>) => {\n                    return createGroupFromSerializedState(node.data);\n                },\n            });\n\n            this.layout(width, height, true);\n\n            const serializedFloatingGroups = data.floatingGroups ?? [];\n\n            for (const serializedFloatingGroup of serializedFloatingGroups) {\n                const { data, position } = serializedFloatingGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addFloatingGroup(\n                    group,\n                    {\n                        x: position.left,\n                        y: position.top,\n                        height: position.height,\n                        width: position.width,\n                    },\n                    { skipRemoveGroup: true, inDragMode: false }\n                );\n            }\n\n            const serializedPopoutGroups = data.popoutGroups ?? [];\n\n            for (const serializedPopoutGroup of serializedPopoutGroups) {\n                const { data, position } = serializedPopoutGroup;\n\n                const group = createGroupFromSerializedState(data);\n\n                this.addPopoutGroup(group, {\n                    skipRemoveGroup: true,\n                    position: position ?? undefined,\n                });\n            }\n\n            for (const floatingGroup of this._floatingGroups) {\n                floatingGroup.overlay.setBounds();\n            }\n\n            if (typeof activeGroup === 'string') {\n                const panel = this.getPanel(activeGroup);\n                if (panel) {\n                    this.doSetGroupAndPanelActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * Takes all the successfully created groups and remove all of their panels.\n             */\n            for (const group of this.groups) {\n                for (const panel of group.panels) {\n                    this.removePanel(panel, {\n                        removeEmptyGroup: false,\n                        skipDispose: false,\n                    });\n                }\n            }\n\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // iterate over a reassigned array since original array will be modified\n            for (const floatingGroup of [...this._floatingGroups]) {\n                floatingGroup.dispose();\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutFromJSON.fire();\n    }\n\n    clear(): void {\n        const groups = Array.from(this._groups.values()).map((_) => _.value);\n\n        const hasActiveGroup = !!this.activeGroup;\n        const hasActivePanel = !!this.activePanel;\n\n        for (const group of groups) {\n            // remove the group will automatically remove the panels\n            this.removeGroup(group, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupAndPanelActive(undefined);\n        }\n\n        if (hasActivePanel) {\n            this._onDidActivePanelChange.fire(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    closeAllGroups(): void {\n        for (const entry of this._groups.entries()) {\n            const [_, group] = entry;\n\n            group.value.model.closeAllPanels();\n        }\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPanelOptions<T>\n    ): DockviewPanel {\n        if (this.panels.find((_) => _.id === options.id)) {\n            throw new Error(`panel with id ${options.id} already exists`);\n        }\n\n        let referenceGroup: DockviewGroupPanel | undefined;\n\n        if (options.position && options.floating) {\n            throw new Error(\n                'you can only provide one of: position, floating as arguments to .addPanel(...)'\n            );\n        }\n\n        if (options.position) {\n            if (isPanelOptionsWithPanel(options.position)) {\n                const referencePanel =\n                    typeof options.position.referencePanel === 'string'\n                        ? this.getGroupPanel(options.position.referencePanel)\n                        : options.position.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `referencePanel ${options.position.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n            } else if (isPanelOptionsWithGroup(options.position)) {\n                referenceGroup =\n                    typeof options.position.referenceGroup === 'string'\n                        ? this._groups.get(options.position.referenceGroup)\n                              ?.value\n                        : options.position.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `referencePanel ${options.position.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.position.direction)\n                );\n                const panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                return panel;\n            }\n        } else {\n            referenceGroup = this.activeGroup;\n        }\n\n        let panel: DockviewPanel;\n\n        if (referenceGroup) {\n            const target = toTarget(\n                <Direction>options.position?.direction || 'within'\n            );\n\n            if (options.floating) {\n                const group = this.createGroup();\n                const o =\n                    typeof options.floating === 'object' &&\n                    options.floating !== null\n                        ? options.floating\n                        : {};\n                this.addFloatingGroup(group, o, {\n                    inDragMode: false,\n                    skipRemoveGroup: true,\n                });\n\n                this._onDidAddGroup.fire(group);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n                this.doSetGroupAndPanelActive(group);\n            } else if (\n                referenceGroup.api.location === 'floating' ||\n                target === 'center'\n            ) {\n                panel = this.createPanel(options, referenceGroup);\n                referenceGroup.model.openPanel(panel);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                const relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n                const group = this.createGroupAtLocation(relativeLocation);\n                panel = this.createPanel(options, group);\n                group.model.openPanel(panel);\n            }\n        } else if (options.floating) {\n            const group = this.createGroup();\n            const o =\n                typeof options.floating === 'object' &&\n                options.floating !== null\n                    ? options.floating\n                    : {};\n            this.addFloatingGroup(group, o, {\n                inDragMode: false,\n                skipRemoveGroup: true,\n            });\n\n            this._onDidAddGroup.fire(group);\n\n            panel = this.createPanel(options, group);\n            group.model.openPanel(panel);\n            this.doSetGroupAndPanelActive(group);\n        } else {\n            const group = this.createGroupAtLocation();\n\n            panel = this.createPanel(options, group);\n\n            group.model.openPanel(panel);\n        }\n\n        return panel;\n    }\n\n    removePanel(\n        panel: IDockviewPanel,\n        options: { removeEmptyGroup: boolean; skipDispose: boolean } = {\n            removeEmptyGroup: true,\n            skipDispose: false,\n        }\n    ): void {\n        const group = panel.group;\n\n        if (!group) {\n            throw new Error(\n                `cannot remove panel ${panel.id}. it's missing a group.`\n            );\n        }\n\n        group.model.removePanel(panel);\n\n        if (!options.skipDispose) {\n            this.greadyRenderContainer.remove(panel);\n            panel.dispose();\n        }\n\n        if (group.size === 0 && options.removeEmptyGroup) {\n            this.removeGroup(group);\n        }\n    }\n\n    createWatermarkComponent(): IWatermarkRenderer {\n        return createComponent(\n            'watermark-id',\n            'watermark-name',\n            this.options.watermarkComponent\n                ? { 'watermark-name': this.options.watermarkComponent }\n                : {},\n            this.options.watermarkFrameworkComponent\n                ? { 'watermark-name': this.options.watermarkFrameworkComponent }\n                : {},\n            this.options.frameworkComponentFactory?.watermark\n        );\n    }\n\n    private updateWatermark(): void {\n        if (this.groups.filter((x) => x.api.location === 'grid').length === 0) {\n            if (!this.watermark) {\n                this.watermark = this.createWatermarkComponent();\n\n                this.watermark.init({\n                    containerApi: new DockviewApi(this),\n                });\n\n                const watermarkContainer = document.createElement('div');\n                watermarkContainer.className = 'dv-watermark-container';\n                watermarkContainer.appendChild(this.watermark.element);\n\n                this.gridview.element.appendChild(watermarkContainer);\n            }\n        } else if (this.watermark) {\n            this.watermark.element.parentElement!.remove();\n            this.watermark.dispose?.();\n            this.watermark = null;\n        }\n    }\n\n    addGroup(options?: AddGroupOptions): DockviewGroupPanel {\n        const group = this.createGroup();\n\n        if (options) {\n            let referenceGroup: DockviewGroupPanel | undefined;\n\n            if (isGroupOptionsWithPanel(options)) {\n                const referencePanel =\n                    typeof options.referencePanel === 'string'\n                        ? this.panels.find(\n                              (panel) => panel.id === options.referencePanel\n                          )\n                        : options.referencePanel;\n\n                if (!referencePanel) {\n                    throw new Error(\n                        `reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n\n                referenceGroup = this.findGroup(referencePanel);\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group for reference panel ${options.referencePanel} does not exist`\n                    );\n                }\n            } else if (isGroupOptionsWithGroup(options)) {\n                referenceGroup =\n                    typeof options.referenceGroup === 'string'\n                        ? this._groups.get(options.referenceGroup)?.value\n                        : options.referenceGroup;\n\n                if (!referenceGroup) {\n                    throw new Error(\n                        `reference group ${options.referenceGroup} does not exist`\n                    );\n                }\n            } else {\n                const group = this.orthogonalize(\n                    directionToPosition(<Direction>options.direction)\n                );\n                return group;\n            }\n\n            const target = toTarget(<Direction>options.direction || 'within');\n\n            const location = getGridLocation(referenceGroup.element);\n            const relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n            this.doAddGroup(group, relativeLocation);\n            return group;\n        } else {\n            this.doAddGroup(group);\n            return group;\n        }\n    }\n\n    removeGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): void {\n        const panels = [...group.panels]; // reassign since group panels will mutate\n\n        for (const panel of panels) {\n            this.removePanel(panel, {\n                removeEmptyGroup: false,\n                skipDispose: options?.skipDispose ?? false,\n            });\n        }\n\n        const activePanel = this.activePanel;\n\n        this.doRemoveGroup(group, options);\n\n        if (this.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this.activePanel);\n        }\n    }\n\n    protected override doRemoveGroup(\n        group: DockviewGroupPanel,\n        options?:\n            | {\n                  skipActive?: boolean;\n                  skipDispose?: boolean;\n              }\n            | undefined\n    ): DockviewGroupPanel {\n        if (group.api.location === 'floating') {\n            const floatingGroup = this._floatingGroups.find(\n                (_) => _.group === group\n            );\n\n            if (floatingGroup) {\n                if (!options?.skipDispose) {\n                    floatingGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                remove(this._floatingGroups, floatingGroup);\n                floatingGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return floatingGroup.group;\n            }\n\n            throw new Error('failed to find floating group');\n        }\n\n        if (group.api.location === 'popout') {\n            const selectedGroup = this._popoutGroups.find(\n                (_) => _.group === group\n            );\n\n            if (selectedGroup) {\n                if (!options?.skipDispose) {\n                    selectedGroup.group.dispose();\n                    this._groups.delete(group.id);\n                    this._onDidRemoveGroup.fire(group);\n                }\n\n                selectedGroup.dispose();\n\n                if (!options?.skipActive && this._activeGroup === group) {\n                    const groups = Array.from(this._groups.values());\n\n                    this.doSetGroupActive(\n                        groups.length > 0 ? groups[0].value : undefined\n                    );\n                }\n\n                return selectedGroup.group;\n            }\n\n            throw new Error('failed to find popout group');\n        }\n\n        return super.doRemoveGroup(group, options);\n    }\n\n    moveGroupOrPanel(\n        destinationGroup: DockviewGroupPanel,\n        sourceGroupId: string,\n        sourceItemId: string | undefined,\n        destinationTarget: Position,\n        destinationIndex?: number\n    ): void {\n        const sourceGroup = sourceGroupId\n            ? this._groups.get(sourceGroupId)?.value\n            : undefined;\n\n        if (sourceItemId === undefined) {\n            if (sourceGroup) {\n                this.moveGroup(\n                    sourceGroup,\n                    destinationGroup,\n                    destinationTarget\n                );\n            }\n            return;\n        }\n\n        if (!destinationTarget || destinationTarget === 'center') {\n            const groupItem: IDockviewPanel | undefined =\n                sourceGroup?.model.removePanel(sourceItemId) ??\n                this.panels.find((panel) => panel.id === sourceItemId);\n\n            if (!groupItem) {\n                throw new Error(`No panel with id ${sourceItemId}`);\n            }\n\n            if (sourceGroup?.model.size === 0) {\n                this.doRemoveGroup(sourceGroup);\n            }\n\n            destinationGroup.model.openPanel(groupItem, {\n                index: destinationIndex,\n            });\n        } else {\n            const referenceLocation = getGridLocation(destinationGroup.element);\n            const targetLocation = getRelativeLocation(\n                this.gridview.orientation,\n                referenceLocation,\n                destinationTarget\n            );\n\n            if (sourceGroup && sourceGroup.size < 2) {\n                const [targetParentLocation, to] = tail(targetLocation);\n\n                if (sourceGroup.api.location === 'grid') {\n                    const sourceLocation = getGridLocation(sourceGroup.element);\n                    const [sourceParentLocation, from] = tail(sourceLocation);\n\n                    if (\n                        sequenceEquals(\n                            sourceParentLocation,\n                            targetParentLocation\n                        )\n                    ) {\n                        // special case when 'swapping' two views within same grid location\n                        // if a group has one tab - we are essentially moving the 'group'\n                        // which is equivalent to swapping two views in this case\n                        this.gridview.moveView(sourceParentLocation, from, to);\n                    }\n                }\n\n                // source group will become empty so delete the group\n                const targetGroup = this.doRemoveGroup(sourceGroup, {\n                    skipActive: true,\n                    skipDispose: true,\n                });\n\n                // after deleting the group we need to re-evaulate the ref location\n                const updatedReferenceLocation = getGridLocation(\n                    destinationGroup.element\n                );\n                const location = getRelativeLocation(\n                    this.gridview.orientation,\n                    updatedReferenceLocation,\n                    destinationTarget\n                );\n                this.doAddGroup(targetGroup, location);\n            } else {\n                const groupItem: IDockviewPanel | undefined =\n                    sourceGroup?.model.removePanel(sourceItemId) ??\n                    this.panels.find((panel) => panel.id === sourceItemId);\n\n                if (!groupItem) {\n                    throw new Error(`No panel with id ${sourceItemId}`);\n                }\n\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    destinationTarget\n                );\n\n                const group = this.createGroupAtLocation(dropLocation);\n                group.model.openPanel(groupItem);\n            }\n        }\n    }\n\n    private moveGroup(\n        sourceGroup: DockviewGroupPanel,\n        referenceGroup: DockviewGroupPanel,\n        target: Position\n    ): void {\n        if (sourceGroup) {\n            if (!target || target === 'center') {\n                const activePanel = sourceGroup.activePanel;\n                const panels = [...sourceGroup.panels].map((p) =>\n                    sourceGroup.model.removePanel(p.id)\n                );\n\n                if (sourceGroup?.model.size === 0) {\n                    this.doRemoveGroup(sourceGroup);\n                }\n\n                for (const panel of panels) {\n                    referenceGroup.model.openPanel(panel, {\n                        skipSetPanelActive: panel !== activePanel,\n                    });\n                }\n            } else {\n                switch (sourceGroup.api.location) {\n                    case 'grid':\n                        this.gridview.removeView(\n                            getGridLocation(sourceGroup.element)\n                        );\n                        break;\n                    case 'floating': {\n                        const selectedFloatingGroup = this._floatingGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedFloatingGroup) {\n                            throw new Error('failed to find floating group');\n                        }\n                        selectedFloatingGroup.dispose();\n                        break;\n                    }\n                    case 'popout': {\n                        const selectedPopoutGroup = this._popoutGroups.find(\n                            (x) => x.group === sourceGroup\n                        );\n                        if (!selectedPopoutGroup) {\n                            throw new Error('failed to find popout group');\n                        }\n                        selectedPopoutGroup.dispose();\n                    }\n                }\n\n                const referenceLocation = getGridLocation(\n                    referenceGroup.element\n                );\n                const dropLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    referenceLocation,\n                    target\n                );\n\n                this.gridview.addView(\n                    sourceGroup,\n                    Sizing.Distribute,\n                    dropLocation\n                );\n            }\n        }\n    }\n\n    doSetGroupAndPanelActive(\n        group: DockviewGroupPanel | undefined,\n        skipFocus?: boolean\n    ): void {\n        const activePanel = this.activePanel;\n        super.doSetGroupActive(group, skipFocus);\n\n        if (this._activeGroup?.activePanel !== activePanel) {\n            this._onDidActivePanelChange.fire(this._activeGroup?.activePanel);\n        }\n    }\n\n    createGroup(options?: GroupOptions): DockviewGroupPanel {\n        if (!options) {\n            options = {};\n        }\n\n        let id = options?.id;\n\n        if (id && this._groups.has(options.id!)) {\n            console.warn(\n                `Duplicate group id ${options?.id}. reassigning group id to avoid errors`\n            );\n            id = undefined;\n        }\n\n        if (!id) {\n            id = this.nextGroupId.next();\n            while (this._groups.has(id)) {\n                id = this.nextGroupId.next();\n            }\n        }\n\n        const view = new DockviewGroupPanel(this, id, options);\n        view.init({ params: {}, accessor: <any>null }); // required to initialized .part and allow for correct disposal of group\n\n        if (!this._groups.has(view.id)) {\n            const disposable = new CompositeDisposable(\n                view.model.onTabDragStart((event) => {\n                    this._onWillDragPanel.fire(event);\n                }),\n                view.model.onGroupDragStart((event) => {\n                    this._onWillDragGroup.fire(event);\n                }),\n                view.model.onMove((event) => {\n                    const { groupId, itemId, target, index } = event;\n                    this.moveGroupOrPanel(view, groupId, itemId, target, index);\n                }),\n                view.model.onDidDrop((event) => {\n                    this._onDidDrop.fire({\n                        ...event,\n                        api: this._api,\n                        group: view,\n                    });\n                }),\n                view.model.onDidAddPanel((event) => {\n                    this._onDidAddPanel.fire(event.panel);\n                }),\n                view.model.onDidRemovePanel((event) => {\n                    this._onDidRemovePanel.fire(event.panel);\n                }),\n                view.model.onDidActivePanelChange((event) => {\n                    this._onDidActivePanelChange.fire(event.panel);\n                })\n            );\n\n            this._groups.set(view.id, { value: view, disposable });\n        }\n\n        // TODO: must be called after the above listeners have been setup,\n        // not an ideal pattern\n        view.initialize();\n\n        return view;\n    }\n\n    private createPanel(\n        options: AddPanelOptions,\n        group: DockviewGroupPanel\n    ): DockviewPanel {\n        const contentComponent = options.component;\n        const tabComponent =\n            options.tabComponent ?? this.options.defaultTabComponent;\n\n        const view = new DockviewPanelModel(\n            this,\n            options.id,\n            contentComponent,\n            tabComponent\n        );\n\n        const panel = new DockviewPanel(\n            options.id,\n            this,\n            this._api,\n            group,\n            view,\n            { renderer: options.renderer }\n        );\n\n        panel.init({\n            title: options.title ?? options.id,\n            params: options?.params ?? {},\n        });\n\n        return panel;\n    }\n\n    private createGroupAtLocation(\n        location: number[] = [0]\n    ): DockviewGroupPanel {\n        const group = this.createGroup();\n        this.doAddGroup(group, location);\n        return group;\n    }\n\n    private findGroup(panel: IDockviewPanel): DockviewGroupPanel | undefined {\n        return Array.from(this._groups.values()).find((group) =>\n            group.value.model.containsPanel(panel)\n        )?.value;\n    }\n}\n","import { DockviewApi } from '../api/component.api';\nimport { Direction } from '../gridview/baseComponentGridview';\nimport { IGridView } from '../gridview/gridview';\nimport {\n    IContentRenderer,\n    ITabRenderer,\n    WatermarkConstructor,\n    IWatermarkRenderer,\n    DockviewDropTargets,\n} from './types';\nimport { Parameters } from '../panel/types';\nimport { DockviewGroupPanel } from './dockviewGroupPanel';\nimport { ISplitviewStyles, Orientation } from '../splitview/splitview';\nimport { PanelTransfer } from '../dnd/dataTransfer';\nimport { IDisposable } from '../lifecycle';\nimport { Position } from '../dnd/droptarget';\nimport { IDockviewPanel } from './dockviewPanel';\nimport {\n    ComponentConstructor,\n    FrameworkFactory,\n} from '../panel/componentFactory';\nimport { DockviewGroupPanelApi } from '../api/dockviewGroupPanelApi';\nimport { DockviewPanelRenderer } from './components/greadyRenderContainer';\n\nexport interface IHeaderActionsRenderer extends IDisposable {\n    readonly element: HTMLElement;\n    init(params: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void;\n}\n\nexport interface GroupPanelFrameworkComponentFactory {\n    content: FrameworkFactory<IContentRenderer>;\n    tab: FrameworkFactory<ITabRenderer>;\n    watermark: FrameworkFactory<IWatermarkRenderer>;\n}\n\nexport interface TabContextMenuEvent {\n    event: MouseEvent;\n    api: DockviewApi;\n    panel: IDockviewPanel;\n}\n\nexport interface DockviewRenderFunctions {\n    tabComponents?: {\n        [componentName: string]: ComponentConstructor<ITabRenderer>;\n    };\n    components?: {\n        [componentName: string]: ComponentConstructor<IContentRenderer>;\n    };\n    frameworkTabComponents?: {\n        [componentName: string]: any;\n    };\n    frameworkComponents?: {\n        [componentName: string]: any;\n    };\n}\n\nexport interface ViewFactoryData {\n    content: string;\n    tab?: string;\n}\n\nexport interface DockviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    target: DockviewDropTargets;\n    position: Position;\n    group?: DockviewGroupPanel;\n    getData: () => PanelTransfer | undefined;\n}\n\nexport interface DockviewComponentOptions extends DockviewRenderFunctions {\n    disableAutoResizing?: boolean;\n    watermarkComponent?: WatermarkConstructor;\n    watermarkFrameworkComponent?: any;\n    frameworkComponentFactory?: GroupPanelFrameworkComponentFactory;\n    orientation?: Orientation;\n    styles?: ISplitviewStyles;\n    defaultTabComponent?: string;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    createRightHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createLeftHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    createPrefixHeaderActionsElement?: (\n        group: DockviewGroupPanel\n    ) => IHeaderActionsRenderer;\n    singleTabMode?: 'fullwidth' | 'default';\n    parentElement?: HTMLElement;\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    popoutUrl?: string;\n    defaultRenderer?: DockviewPanelRenderer;\n    debug?: boolean;\n}\n\nexport interface PanelOptions<P extends object = Parameters> {\n    component: string;\n    tabComponent?: string;\n    params?: P;\n    id: string;\n    title?: string;\n}\n\ntype RelativePanel = {\n    direction?: Direction;\n    referencePanel: string | IDockviewPanel;\n};\n\ntype RelativeGroup = {\n    direction?: Direction;\n    referenceGroup: string | DockviewGroupPanel;\n};\n\ntype AbsolutePosition = {\n    direction: Omit<Direction, 'within'>;\n};\n\nexport type AddPanelPositionOptions =\n    | RelativePanel\n    | RelativeGroup\n    | AbsolutePosition;\n\nexport function isPanelOptionsWithPanel(\n    data: AddPanelPositionOptions\n): data is RelativePanel {\n    if ((data as RelativePanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isPanelOptionsWithGroup(\n    data: AddPanelPositionOptions\n): data is RelativeGroup {\n    if ((data as RelativeGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\ntype AddPanelFloatingGroupUnion = {\n    floating:\n        | {\n              height?: number;\n              width?: number;\n              x?: number;\n              y?: number;\n          }\n        | true;\n    position: never;\n};\n\ntype AddPanelPositionUnion = {\n    floating: false | never;\n    position: AddPanelPositionOptions;\n};\n\ntype AddPanelOptionsUnion = AddPanelFloatingGroupUnion | AddPanelPositionUnion;\n\nexport type AddPanelOptions<P extends object = Parameters> = Omit<\n    PanelOptions<P>,\n    'component' | 'tabComponent'\n> & {\n    component: string;\n    tabComponent?: string;\n    renderer?: DockviewPanelRenderer;\n} & Partial<AddPanelOptionsUnion>;\n\ntype AddGroupOptionsWithPanel = {\n    referencePanel: string | IDockviewPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\ntype AddGroupOptionsWithGroup = {\n    referenceGroup: string | DockviewGroupPanel;\n    direction?: Omit<Direction, 'within'>;\n};\n\nexport type AddGroupOptions =\n    | AddGroupOptionsWithGroup\n    | AddGroupOptionsWithPanel\n    | AbsolutePosition;\n\nexport function isGroupOptionsWithPanel(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithPanel {\n    if ((data as AddGroupOptionsWithPanel).referencePanel) {\n        return true;\n    }\n    return false;\n}\n\nexport function isGroupOptionsWithGroup(\n    data: AddGroupOptions\n): data is AddGroupOptionsWithGroup {\n    if ((data as AddGroupOptionsWithGroup).referenceGroup) {\n        return true;\n    }\n    return false;\n}\n\nexport interface MovementOptions2 {\n    group?: IGridView;\n}\n\nexport interface MovementOptions extends MovementOptions2 {\n    includePanel?: boolean;\n    group?: DockviewGroupPanel;\n}\n","import {\n    getRelativeLocation,\n    SerializedGridObject,\n    getGridLocation,\n    SerializedGridview,\n} from './gridview';\nimport { tail, sequenceEquals } from '../array';\nimport { CompositeDisposable } from '../lifecycle';\nimport { IPanelDeserializer } from '../dockview/deserializer';\nimport { GridviewComponentOptions } from './options';\nimport {\n    BaseGrid,\n    Direction,\n    IBaseGrid,\n    IGridPanelView,\n    toTarget,\n} from './baseComponentGridview';\nimport {\n    GridviewPanel,\n    GridviewInitParameters,\n    GridPanelViewState,\n    IGridviewPanel,\n} from './gridviewPanel';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Orientation, Sizing } from '../splitview/splitview';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport { Position } from '../dnd/droptarget';\n\nexport interface SerializedGridviewComponent {\n    grid: SerializedGridview<GridPanelViewState>;\n    activePanel?: string;\n}\n\nexport interface AddComponentOptions<T extends object = Parameters>\n    extends BaseComponentOptions<T> {\n    minimumWidth?: number;\n    maximumWidth?: number;\n    minimumHeight?: number;\n    maximumHeight?: number;\n    position?: {\n        direction: Direction;\n        referencePanel: string;\n    };\n    location?: number[];\n}\n\nexport interface IGridPanelComponentView extends IGridPanelView {\n    init: (params: GridviewInitParameters) => void;\n}\n\nexport type GridviewComponentUpdateOptions = Pick<\n    GridviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface IGridviewComponent extends IBaseGrid<GridviewPanel> {\n    readonly orientation: Orientation;\n    readonly onDidLayoutFromJSON: Event<void>;\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel;\n    removePanel(panel: IGridviewPanel, sizing?: Sizing): void;\n    focus(): void;\n    fromJSON(serializedGridview: SerializedGridviewComponent): void;\n    toJSON(): SerializedGridviewComponent;\n    movePanel(\n        panel: IGridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void;\n    setVisible(panel: IGridviewPanel, visible: boolean): void;\n    setActive(panel: IGridviewPanel): void;\n}\n\nexport class GridviewComponent\n    extends BaseGrid<GridviewPanel>\n    implements IGridviewComponent\n{\n    private _options: Exclude<GridviewComponentOptions, 'orientation'>;\n    private _deserializer: IPanelDeserializer | undefined;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    get orientation(): Orientation {\n        return this.gridview.orientation;\n    }\n\n    set orientation(value: Orientation) {\n        this.gridview.orientation = value;\n    }\n\n    get options(): GridviewComponentOptions {\n        return this._options;\n    }\n\n    get deserializer(): IPanelDeserializer | undefined {\n        return this._deserializer;\n    }\n\n    set deserializer(value: IPanelDeserializer | undefined) {\n        this._deserializer = value;\n    }\n\n    constructor(options: GridviewComponentOptions) {\n        super({\n            parentElement: options.parentElement,\n            proportionalLayout: options.proportionalLayout,\n            orientation: options.orientation,\n            styles: options.styles,\n            disableAutoResizing: options.disableAutoResizing,\n        });\n\n        this._options = options;\n\n        if (!this.options.components) {\n            this.options.components = {};\n        }\n        if (!this.options.frameworkComponents) {\n            this.options.frameworkComponents = {};\n        }\n    }\n\n    updateOptions(options: Partial<GridviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.gridview.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.gridview.orientation = options.orientation!;\n        }\n\n        this.layout(this.gridview.width, this.gridview.height, true);\n    }\n\n    removePanel(panel: GridviewPanel): void {\n        this.removeGroup(panel);\n    }\n\n    /**\n     * Serialize the current state of the layout\n     *\n     * @returns A JSON respresentation of the layout\n     */\n    public toJSON(): SerializedGridviewComponent {\n        const data = this.gridview.serialize() as {\n            height: number;\n            width: number;\n            orientation: Orientation;\n            root: SerializedGridObject<GridPanelViewState>;\n        };\n\n        return {\n            grid: data,\n            activePanel: this.activeGroup?.id,\n        };\n    }\n\n    setVisible(panel: GridviewPanel, visible: boolean): void {\n        this.gridview.setViewVisible(getGridLocation(panel.element), visible);\n    }\n\n    setActive(panel: GridviewPanel): void {\n        this._groups.forEach((value, _key) => {\n            value.value.setActive(panel === value.value);\n        });\n    }\n\n    focus(): void {\n        this.activeGroup?.focus();\n    }\n\n    public fromJSON(serializedGridview: SerializedGridviewComponent): void {\n        this.clear();\n\n        const { grid, activePanel } = serializedGridview;\n\n        try {\n            const queue: Function[] = [];\n\n            // take note of the existing dimensions\n            const width = this.width;\n            const height = this.height;\n\n            this.gridview.deserialize(grid, {\n                fromJSON: (node) => {\n                    const { data } = node;\n                    const view = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkComponentFactory\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkComponentFactory\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() =>\n                        view.init({\n                            params: data.params,\n                            minimumWidth: data.minimumWidth,\n                            maximumWidth: data.maximumWidth,\n                            minimumHeight: data.minimumHeight,\n                            maximumHeight: data.maximumHeight,\n                            priority: data.priority,\n                            snap: !!data.snap,\n                            accessor: this,\n                            isVisible: node.visible,\n                        })\n                    );\n\n                    this._onDidAddGroup.fire(view);\n\n                    this.registerPanel(view);\n\n                    return view;\n                },\n            });\n\n            this.layout(width, height, true);\n\n            queue.forEach((f) => f());\n\n            if (typeof activePanel === 'string') {\n                const panel = this.getPanel(activePanel);\n                if (panel) {\n                    this.doSetGroupActive(panel);\n                }\n            }\n        } catch (err) {\n            /**\n             * To remove a group we cannot call this.removeGroup(...) since this makes assumptions about\n             * the underlying HTMLElement existing in the Gridview.\n             */\n            for (const group of this.groups) {\n                group.dispose();\n                this._groups.delete(group.id);\n                this._onDidRemoveGroup.fire(group);\n            }\n\n            // fires clean-up events and clears the underlying HTML gridview.\n            this.clear();\n\n            /**\n             * even though we have cleaned-up we still want to inform the caller of their error\n             * and we'll do this through re-throwing the original error since afterall you would\n             * expect trying to load a corrupted layout to result in an error and not silently fail...\n             */\n            throw err;\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        const hasActiveGroup = this.activeGroup;\n\n        const groups = Array.from(this._groups.values()); // reassign since group panels will mutate\n        for (const group of groups) {\n            group.disposable.dispose();\n            this.doRemoveGroup(group.value, { skipActive: true });\n        }\n\n        if (hasActiveGroup) {\n            this.doSetGroupActive(undefined);\n        }\n\n        this.gridview.clear();\n    }\n\n    movePanel(\n        panel: GridviewPanel,\n        options: { direction: Direction; reference: string; size?: number }\n    ): void {\n        let relativeLocation: number[];\n\n        const removedPanel = this.gridview.remove(panel) as GridviewPanel;\n\n        const referenceGroup = this._groups.get(options.reference)?.value;\n\n        if (!referenceGroup) {\n            throw new Error(\n                `reference group ${options.reference} does not exist`\n            );\n        }\n\n        const target = toTarget(options.direction);\n        if (target === 'center') {\n            throw new Error(`${target} not supported as an option`);\n        } else {\n            const location = getGridLocation(referenceGroup.element);\n            relativeLocation = getRelativeLocation(\n                this.gridview.orientation,\n                location,\n                target\n            );\n        }\n\n        this.doAddGroup(removedPanel, relativeLocation, options.size);\n    }\n\n    public addPanel<T extends object = Parameters>(\n        options: AddComponentOptions<T>\n    ): IGridviewPanel {\n        let relativeLocation: number[] = options.location ?? [0];\n\n        if (options.position?.referencePanel) {\n            const referenceGroup = this._groups.get(\n                options.position.referencePanel\n            )?.value;\n\n            if (!referenceGroup) {\n                throw new Error(\n                    `reference group ${options.position.referencePanel} does not exist`\n                );\n            }\n\n            const target = toTarget(options.position.direction);\n            if (target === 'center') {\n                throw new Error(`${target} not supported as an option`);\n            } else {\n                const location = getGridLocation(referenceGroup.element);\n                relativeLocation = getRelativeLocation(\n                    this.gridview.orientation,\n                    location,\n                    target\n                );\n            }\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkComponentFactory\n                ? {\n                      createComponent:\n                          this.options.frameworkComponentFactory\n                              .createComponent,\n                  }\n                : undefined\n        );\n\n        view.init({\n            params: options.params ?? {},\n            minimumWidth: options.minimumWidth,\n            maximumWidth: options.maximumWidth,\n            minimumHeight: options.minimumHeight,\n            maximumHeight: options.maximumHeight,\n            priority: options.priority,\n            snap: !!options.snap,\n            accessor: this,\n            isVisible: true,\n        });\n\n        this.registerPanel(view);\n\n        this.doAddGroup(view, relativeLocation, options.size);\n\n        return view;\n    }\n\n    private registerPanel(panel: GridviewPanel): void {\n        const disposable = new CompositeDisposable(\n            panel.api.onDidFocusChange((event) => {\n                if (!event.isFocused) {\n                    return;\n                }\n                this._groups.forEach((groupItem) => {\n                    const group = groupItem.value;\n                    if (group !== panel) {\n                        group.setActive(false);\n                    } else {\n                        group.setActive(true);\n                    }\n                });\n            })\n        );\n\n        this._groups.set(panel.id, {\n            value: panel,\n            disposable,\n        });\n    }\n\n    public moveGroup(\n        referenceGroup: IGridPanelComponentView,\n        groupId: string,\n        target: Position\n    ): void {\n        const sourceGroup = this.getPanel(groupId);\n\n        if (!sourceGroup) {\n            throw new Error('invalid operation');\n        }\n\n        const referenceLocation = getGridLocation(referenceGroup.element);\n        const targetLocation = getRelativeLocation(\n            this.gridview.orientation,\n            referenceLocation,\n            target\n        );\n\n        const [targetParentLocation, to] = tail(targetLocation);\n        const sourceLocation = getGridLocation(sourceGroup.element);\n        const [sourceParentLocation, from] = tail(sourceLocation);\n\n        if (sequenceEquals(sourceParentLocation, targetParentLocation)) {\n            // special case when 'swapping' two views within same grid location\n            // if a group has one tab - we are essentially moving the 'group'\n            // which is equivalent to swapping two views in this case\n            this.gridview.moveView(sourceParentLocation, from, to);\n\n            return;\n        }\n\n        // source group will become empty so delete the group\n        const targetGroup = this.doRemoveGroup(sourceGroup, {\n            skipActive: true,\n            skipDispose: true,\n        });\n\n        // after deleting the group we need to re-evaulate the ref location\n        const updatedReferenceLocation = getGridLocation(\n            referenceGroup.element\n        );\n        const location = getRelativeLocation(\n            this.gridview.orientation,\n            updatedReferenceLocation,\n            target\n        );\n        this.doAddGroup(targetGroup, location);\n    }\n\n    removeGroup(group: GridviewPanel): void {\n        super.removeGroup(group);\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        this._onDidLayoutfromJSON.dispose();\n    }\n}\n","import {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport {\n    IView,\n    LayoutPriority,\n    Orientation,\n    Sizing,\n    Splitview,\n} from './splitview';\nimport { SplitviewComponentOptions } from './options';\nimport { BaseComponentOptions, Parameters } from '../panel/types';\nimport { Emitter, Event } from '../events';\nimport { SplitviewPanel, ISplitviewPanel } from './splitviewPanel';\nimport { createComponent } from '../panel/componentFactory';\nimport { Resizable } from '../resizable';\n\nexport interface SerializedSplitviewPanelData {\n    id: string;\n    component: string;\n    minimumSize?: number;\n    maximumSize?: number;\n    params?: { [index: string]: any };\n}\n\nexport interface SerializedSplitviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    data: SerializedSplitviewPanelData;\n    size: number;\n}\n\nexport interface SerializedSplitview {\n    orientation: Orientation;\n    size: number;\n    activeView?: string;\n    views: SerializedSplitviewPanel[];\n}\n\nexport interface AddSplitviewComponentOptions<T extends Parameters = Parameters>\n    extends BaseComponentOptions<T> {\n    index?: number;\n    minimumSize?: number;\n    maximumSize?: number;\n}\n\nexport type SplitviewComponentUpdateOptions = Pick<\n    SplitviewComponentOptions,\n    'orientation' | 'components' | 'frameworkComponents'\n>;\n\nexport interface ISplitviewComponent extends IDisposable {\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly height: number;\n    readonly width: number;\n    readonly length: number;\n    readonly orientation: Orientation;\n    readonly onDidAddView: Event<IView>;\n    readonly onDidRemoveView: Event<IView>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    readonly panels: SplitviewPanel[];\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void;\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): ISplitviewPanel;\n    layout(width: number, height: number): void;\n    onDidLayoutChange: Event<void>;\n    toJSON(): SerializedSplitview;\n    fromJSON(serializedSplitview: SerializedSplitview): void;\n    focus(): void;\n    getPanel(id: string): ISplitviewPanel | undefined;\n    removePanel(panel: ISplitviewPanel, sizing?: Sizing): void;\n    setVisible(panel: ISplitviewPanel, visible: boolean): void;\n    movePanel(from: number, to: number): void;\n    clear(): void;\n}\n\n/**\n * A high-level implementation of splitview that works using 'panels'\n */\nexport class SplitviewComponent\n    extends Resizable\n    implements ISplitviewComponent\n{\n    private _splitviewChangeDisposable = new MutableDisposable();\n    private _splitview!: Splitview;\n    private _activePanel: SplitviewPanel | undefined;\n    private _panels = new Map<string, IDisposable>();\n    private _options: SplitviewComponentOptions;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidAddView = new Emitter<IView>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<IView>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    get panels(): SplitviewPanel[] {\n        return this.splitview.getViews();\n    }\n\n    get options(): SplitviewComponentOptions {\n        return this._options;\n    }\n\n    get length(): number {\n        return this._panels.size;\n    }\n\n    get orientation(): Orientation {\n        return this.splitview.orientation;\n    }\n\n    get splitview(): Splitview {\n        return this._splitview;\n    }\n\n    set splitview(value: Splitview) {\n        this._splitview = value;\n\n        this._splitviewChangeDisposable.value = new CompositeDisposable(\n            this._splitview.onDidSashEnd(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._splitview.onDidRemoveView((e) =>\n                this._onDidRemoveView.fire(e)\n            )\n        );\n    }\n\n    get minimumSize(): number {\n        return this.splitview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.splitview.maximumSize;\n    }\n\n    get height(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.orthogonalSize\n            : this.splitview.size;\n    }\n\n    get width(): number {\n        return this.splitview.orientation === Orientation.HORIZONTAL\n            ? this.splitview.size\n            : this.splitview.orthogonalSize;\n    }\n\n    constructor(options: SplitviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.splitview = new Splitview(this.element, options);\n\n        this.addDisposables(\n            this._onDidAddView,\n            this._onDidLayoutfromJSON,\n            this._onDidRemoveView,\n            this._onDidLayoutChange\n        );\n    }\n\n    updateOptions(options: Partial<SplitviewComponentUpdateOptions>): void {\n        const hasOrientationChanged =\n            typeof options.orientation === 'string' &&\n            this.options.orientation !== options.orientation;\n\n        this._options = { ...this.options, ...options };\n\n        if (hasOrientationChanged) {\n            this.splitview.orientation = options.orientation!;\n        }\n\n        this.splitview.layout(\n            this.splitview.size,\n            this.splitview.orthogonalSize\n        );\n    }\n\n    focus(): void {\n        this._activePanel?.focus();\n    }\n\n    movePanel(from: number, to: number): void {\n        this.splitview.moveView(from, to);\n    }\n\n    setVisible(panel: SplitviewPanel, visible: boolean): void {\n        const index = this.panels.indexOf(panel);\n        this.splitview.setViewVisible(index, visible);\n    }\n\n    setActive(view: SplitviewPanel, skipFocus?: boolean): void {\n        this._activePanel = view;\n\n        this.panels\n            .filter((v) => v !== view)\n            .forEach((v) => {\n                v.api._onDidActiveChange.fire({ isActive: false });\n                if (!skipFocus) {\n                    v.focus();\n                }\n            });\n        view.api._onDidActiveChange.fire({ isActive: true });\n        if (!skipFocus) {\n            view.focus();\n        }\n    }\n\n    removePanel(panel: SplitviewPanel, sizing?: Sizing): void {\n        const item = this._panels.get(panel.id);\n\n        if (!item) {\n            throw new Error(`unknown splitview panel ${panel.id}`);\n        }\n\n        item.dispose();\n\n        this._panels.delete(panel.id);\n\n        const index = this.panels.findIndex((_) => _ === panel);\n        const removedView = this.splitview.removeView(index, sizing);\n        removedView.dispose();\n\n        const panels = this.panels;\n        if (panels.length > 0) {\n            this.setActive(panels[panels.length - 1]);\n        }\n    }\n\n    getPanel(id: string): SplitviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddSplitviewComponentOptions<T>\n    ): SplitviewPanel {\n        if (this._panels.has(options.id)) {\n            throw new Error(`panel ${options.id} already exists`);\n        }\n\n        const view = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.createComponent,\n                  }\n                : undefined\n        );\n\n        view.orientation = this.splitview.orientation;\n\n        view.init({\n            params: options.params ?? {},\n            minimumSize: options.minimumSize,\n            maximumSize: options.maximumSize,\n            snap: options.snap,\n            priority: options.priority,\n            accessor: this,\n        });\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        this.splitview.addView(view, size, index);\n\n        this.doAddView(view);\n        this.setActive(view);\n\n        return view;\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.splitview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.splitview.layout(size, orthogonalSize);\n    }\n\n    private doAddView(view: SplitviewPanel): void {\n        const disposable = view.api.onDidFocusChange((event) => {\n            if (!event.isFocused) {\n                return;\n            }\n            this.setActive(view, true);\n        });\n\n        this._panels.set(view.id, disposable);\n    }\n\n    toJSON(): SerializedSplitview {\n        const views: SerializedSplitviewPanel[] = this.splitview\n            .getViews<SplitviewPanel>()\n            .map((view, i) => {\n                const size = this.splitview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    snap: !!view.snap,\n                    priority: view.priority,\n                };\n            });\n\n        return {\n            views,\n            activeView: this._activePanel?.id,\n            size: this.splitview.size,\n            orientation: this.splitview.orientation,\n        };\n    }\n\n    fromJSON(serializedSplitview: SerializedSplitview): void {\n        this.clear();\n\n        const { views, orientation, size, activeView } = serializedSplitview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.splitview = new Splitview(this.element, {\n            orientation,\n            proportionalLayout: this.options.proportionalLayout,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    if (this._panels.has(data.id)) {\n                        throw new Error(`panel ${data.id} already exists`);\n                    }\n\n                    const panel = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumSize: data.minimumSize,\n                            maximumSize: data.maximumSize,\n                            snap: view.snap,\n                            priority: view.priority,\n                            accessor: this,\n                        });\n                    });\n\n                    panel.orientation = orientation;\n\n                    this.doAddView(panel);\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        if (typeof activeView === 'string') {\n            const panel = this.getPanel(activeView);\n            if (panel) {\n                this.setActive(panel);\n            }\n        }\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        while (this.splitview.length > 0) {\n            const view = this.splitview.removeView(0, Sizing.Distribute, true);\n            view.dispose();\n        }\n    }\n\n    dispose(): void {\n        for (const disposable of this._panels.values()) {\n            disposable.dispose();\n        }\n\n        this._panels.clear();\n\n        const views = this.splitview.getViews();\n\n        this._splitviewChangeDisposable.dispose();\n        this.splitview.dispose();\n\n        for (const view of views) {\n            view.dispose();\n        }\n\n        super.dispose();\n    }\n}\n","import { addDisposableListener } from '../events';\nimport { PaneviewPanelApiImpl } from '../api/paneviewPanelApi';\nimport { CompositeDisposable, MutableDisposable } from '../lifecycle';\nimport { PanelUpdateEvent } from '../panel/types';\nimport { IPaneHeaderPart, PanePanelInitParameter } from './paneviewPanel';\nimport { toggleClass } from '../dom';\nimport { createChevronRightButton, createExpandMoreButton } from '../svg';\n\nexport class DefaultHeader\n    extends CompositeDisposable\n    implements IPaneHeaderPart\n{\n    private readonly _expandedIcon = createExpandMoreButton();\n    private readonly _collapsedIcon = createChevronRightButton();\n    private readonly disposable = new MutableDisposable();\n    private readonly _element: HTMLElement;\n    private readonly _content: HTMLElement;\n    private readonly _expander: HTMLElement;\n    private apiRef: { api: PaneviewPanelApiImpl | null } = { api: null };\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        super();\n\n        this._element = document.createElement('div');\n        this.element.className = 'default-header';\n\n        this._content = document.createElement('span');\n        this._expander = document.createElement('div');\n        this._expander.className = 'dockview-pane-header-icon';\n\n        this.element.appendChild(this._expander);\n        this.element.appendChild(this._content);\n\n        this.addDisposables(\n            addDisposableListener(this._element, 'click', () => {\n                this.apiRef.api?.setExpanded(!this.apiRef.api.isExpanded);\n            })\n        );\n    }\n\n    init(params: PanePanelInitParameter & { api: PaneviewPanelApiImpl }): void {\n        this.apiRef.api = params.api;\n\n        this._content.textContent = params.title;\n\n        this.updateIcon();\n\n        this.disposable.value = params.api.onDidExpansionChange(() => {\n            this.updateIcon();\n        });\n    }\n\n    private updateIcon(): void {\n        const isExpanded = !!this.apiRef.api?.isExpanded;\n        toggleClass(this._expander, 'collapsed', !isExpanded);\n\n        if (isExpanded) {\n            if (this._expander.contains(this._collapsedIcon)) {\n                this._collapsedIcon.remove();\n            }\n            if (!this._expander.contains(this._expandedIcon)) {\n                this._expander.appendChild(this._expandedIcon);\n            }\n        } else {\n            if (this._expander.contains(this._expandedIcon)) {\n                this._expandedIcon.remove();\n            }\n            if (!this._expander.contains(this._collapsedIcon)) {\n                this._expander.appendChild(this._collapsedIcon);\n            }\n        }\n    }\n\n    update(_params: PanelUpdateEvent): void {\n        //\n    }\n\n    dispose(): void {\n        this.disposable.dispose();\n        super.dispose();\n    }\n}\n","import { PaneviewApi } from '../api/component.api';\nimport { createComponent } from '../panel/componentFactory';\nimport { Emitter, Event } from '../events';\nimport {\n    CompositeDisposable,\n    IDisposable,\n    MutableDisposable,\n} from '../lifecycle';\nimport { LayoutPriority, Orientation, Sizing } from '../splitview/splitview';\nimport { PaneviewComponentOptions } from './options';\nimport { Paneview } from './paneview';\nimport {\n    IPaneBodyPart,\n    IPaneHeaderPart,\n    PaneviewPanel,\n    IPaneviewPanel,\n} from './paneviewPanel';\nimport {\n    DraggablePaneviewPanel,\n    PaneviewDropEvent,\n} from './draggablePaneviewPanel';\nimport { DefaultHeader } from './defaultPaneviewHeader';\nimport { sequentialNumberGenerator } from '../math';\nimport { PaneTransfer } from '../dnd/dataTransfer';\nimport { Resizable } from '../resizable';\nimport { Parameters } from '../panel/types';\n\nconst nextLayoutId = sequentialNumberGenerator();\n\nexport interface PaneviewDndOverlayEvent {\n    nativeEvent: DragEvent;\n    panel: IPaneviewPanel;\n    getData: () => PaneTransfer | undefined;\n}\n\nexport interface SerializedPaneviewPanel {\n    snap?: boolean;\n    priority?: LayoutPriority;\n    minimumSize?: number;\n    maximumSize?: number;\n    data: {\n        id: string;\n        component: string;\n        title: string;\n        headerComponent?: string;\n        params?: { [index: string]: any };\n    };\n    size: number;\n    expanded?: boolean;\n}\n\nexport interface SerializedPaneview {\n    size: number;\n    views: SerializedPaneviewPanel[];\n}\n\nexport class PaneFramework extends DraggablePaneviewPanel {\n    constructor(\n        private readonly options: {\n            id: string;\n            component: string;\n            headerComponent: string | undefined;\n            body: IPaneBodyPart;\n            header: IPaneHeaderPart;\n            orientation: Orientation;\n            isExpanded: boolean;\n            disableDnd: boolean;\n            accessor: IPaneviewComponent;\n        }\n    ) {\n        super(\n            options.accessor,\n            options.id,\n            options.component,\n            options.headerComponent,\n            options.orientation,\n            options.isExpanded,\n            options.disableDnd\n        );\n    }\n\n    getBodyComponent() {\n        return this.options.body;\n    }\n\n    getHeaderComponent() {\n        return this.options.header;\n    }\n}\n\nexport interface AddPaneviewComponentOptions<T extends object = Parameters> {\n    id: string;\n    component: string;\n    headerComponent?: string;\n    params?: T;\n    minimumBodySize?: number;\n    maximumBodySize?: number;\n    isExpanded?: boolean;\n    title: string;\n    index?: number;\n    size?: number;\n}\n\nexport interface IPaneviewComponent extends IDisposable {\n    readonly id: string;\n    readonly width: number;\n    readonly height: number;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly panels: IPaneviewPanel[];\n    readonly options: PaneviewComponentOptions;\n    readonly onDidAddView: Event<PaneviewPanel>;\n    readonly onDidRemoveView: Event<PaneviewPanel>;\n    readonly onDidDrop: Event<PaneviewDropEvent>;\n    readonly onDidLayoutChange: Event<void>;\n    readonly onDidLayoutFromJSON: Event<void>;\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel;\n    layout(width: number, height: number): void;\n    toJSON(): SerializedPaneview;\n    fromJSON(serializedPaneview: SerializedPaneview): void;\n    focus(): void;\n    removePanel(panel: IPaneviewPanel): void;\n    getPanel(id: string): IPaneviewPanel | undefined;\n    movePanel(from: number, to: number): void;\n    updateOptions(options: Partial<PaneviewComponentOptions>): void;\n    clear(): void;\n}\n\nexport class PaneviewComponent extends Resizable implements IPaneviewComponent {\n    private readonly _id = nextLayoutId.next();\n    private _options: PaneviewComponentOptions;\n    private _disposable = new MutableDisposable();\n    private _viewDisposables = new Map<string, IDisposable>();\n    private _paneview!: Paneview;\n\n    private readonly _onDidLayoutfromJSON = new Emitter<void>();\n    readonly onDidLayoutFromJSON: Event<void> = this._onDidLayoutfromJSON.event;\n\n    private readonly _onDidLayoutChange = new Emitter<void>();\n    readonly onDidLayoutChange: Event<void> = this._onDidLayoutChange.event;\n\n    private readonly _onDidDrop = new Emitter<PaneviewDropEvent>();\n    readonly onDidDrop: Event<PaneviewDropEvent> = this._onDidDrop.event;\n\n    private readonly _onDidAddView = new Emitter<PaneviewPanel>();\n    readonly onDidAddView = this._onDidAddView.event;\n\n    private readonly _onDidRemoveView = new Emitter<PaneviewPanel>();\n    readonly onDidRemoveView = this._onDidRemoveView.event;\n\n    get id(): string {\n        return this._id;\n    }\n\n    get panels(): PaneviewPanel[] {\n        return this.paneview.getPanes();\n    }\n\n    set paneview(value: Paneview) {\n        this._paneview = value;\n\n        this._disposable.value = new CompositeDisposable(\n            this._paneview.onDidChange(() => {\n                this._onDidLayoutChange.fire(undefined);\n            }),\n            this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)),\n            this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e))\n        );\n    }\n\n    get paneview(): Paneview {\n        return this._paneview;\n    }\n\n    get minimumSize(): number {\n        return this.paneview.minimumSize;\n    }\n\n    get maximumSize(): number {\n        return this.paneview.maximumSize;\n    }\n\n    get height(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.orthogonalSize\n            : this.paneview.size;\n    }\n\n    get width(): number {\n        return this.paneview.orientation === Orientation.HORIZONTAL\n            ? this.paneview.size\n            : this.paneview.orthogonalSize;\n    }\n\n    get options(): PaneviewComponentOptions {\n        return this._options;\n    }\n\n    constructor(options: PaneviewComponentOptions) {\n        super(options.parentElement, options.disableAutoResizing);\n\n        this.addDisposables(\n            this._onDidLayoutChange,\n            this._onDidLayoutfromJSON,\n            this._onDidDrop,\n            this._onDidAddView,\n            this._onDidRemoveView\n        );\n\n        this._options = options;\n\n        if (!options.components) {\n            options.components = {};\n        }\n        if (!options.frameworkComponents) {\n            options.frameworkComponents = {};\n        }\n\n        this.paneview = new Paneview(this.element, {\n            // only allow paneview in the vertical orientation for now\n            orientation: Orientation.VERTICAL,\n        });\n\n        this.addDisposables(this._disposable);\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    updateOptions(options: Partial<PaneviewComponentOptions>): void {\n        this._options = { ...this.options, ...options };\n    }\n\n    addPanel<T extends object = Parameters>(\n        options: AddPaneviewComponentOptions<T>\n    ): IPaneviewPanel {\n        const body = createComponent(\n            options.id,\n            options.component,\n            this.options.components ?? {},\n            this.options.frameworkComponents ?? {},\n            this.options.frameworkWrapper\n                ? {\n                      createComponent:\n                          this.options.frameworkWrapper.body.createComponent,\n                  }\n                : undefined\n        );\n\n        let header: IPaneHeaderPart;\n\n        if (options.headerComponent) {\n            header = createComponent(\n                options.id,\n                options.headerComponent,\n                this.options.headerComponents ?? {},\n                this.options.headerframeworkComponents,\n                this.options.frameworkWrapper\n                    ? {\n                          createComponent:\n                              this.options.frameworkWrapper.header\n                                  .createComponent,\n                      }\n                    : undefined\n            );\n        } else {\n            header = new DefaultHeader();\n        }\n\n        const view = new PaneFramework({\n            id: options.id,\n            component: options.component,\n            headerComponent: options.headerComponent,\n            header,\n            body,\n            orientation: Orientation.VERTICAL,\n            isExpanded: !!options.isExpanded,\n            disableDnd: !!this.options.disableDnd,\n            accessor: this,\n        });\n\n        this.doAddPanel(view);\n\n        const size: Sizing | number =\n            typeof options.size === 'number' ? options.size : Sizing.Distribute;\n        const index =\n            typeof options.index === 'number' ? options.index : undefined;\n\n        view.init({\n            params: options.params ?? {},\n            minimumBodySize: options.minimumBodySize,\n            maximumBodySize: options.maximumBodySize,\n            isExpanded: options.isExpanded,\n            title: options.title,\n            containerApi: new PaneviewApi(this),\n        });\n\n        this.paneview.addPane(view, size, index);\n\n        view.orientation = this.paneview.orientation;\n\n        return view;\n    }\n\n    removePanel(panel: PaneviewPanel): void {\n        const views = this.panels;\n        const index = views.findIndex((_) => _ === panel);\n        this.paneview.removePane(index);\n\n        this.doRemovePanel(panel);\n    }\n\n    movePanel(from: number, to: number): void {\n        this.paneview.moveView(from, to);\n    }\n\n    getPanel(id: string): PaneviewPanel | undefined {\n        return this.panels.find((view) => view.id === id);\n    }\n\n    layout(width: number, height: number): void {\n        const [size, orthogonalSize] =\n            this.paneview.orientation === Orientation.HORIZONTAL\n                ? [width, height]\n                : [height, width];\n        this.paneview.layout(size, orthogonalSize);\n    }\n\n    toJSON(): SerializedPaneview {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        const views: SerializedPaneviewPanel[] = this.paneview\n            .getPanes()\n            .map((view, i) => {\n                const size = this.paneview.getViewSize(i);\n                return {\n                    size,\n                    data: view.toJSON(),\n                    minimumSize: minimum(view.minimumBodySize),\n                    maximumSize: maximum(view.maximumBodySize),\n                    expanded: view.isExpanded(),\n                };\n            });\n\n        return {\n            views,\n            size: this.paneview.size,\n        };\n    }\n\n    fromJSON(serializedPaneview: SerializedPaneview): void {\n        this.clear();\n\n        const { views, size } = serializedPaneview;\n\n        const queue: Function[] = [];\n\n        // take note of the existing dimensions\n        const width = this.width;\n        const height = this.height;\n\n        this.paneview = new Paneview(this.element, {\n            orientation: Orientation.VERTICAL,\n            descriptor: {\n                size,\n                views: views.map((view) => {\n                    const data = view.data;\n\n                    const body = createComponent(\n                        data.id,\n                        data.component,\n                        this.options.components ?? {},\n                        this.options.frameworkComponents ?? {},\n                        this.options.frameworkWrapper\n                            ? {\n                                  createComponent:\n                                      this.options.frameworkWrapper.body\n                                          .createComponent,\n                              }\n                            : undefined\n                    );\n\n                    let header: IPaneHeaderPart;\n\n                    if (data.headerComponent) {\n                        header = createComponent(\n                            data.id,\n                            data.headerComponent,\n                            this.options.headerComponents ?? {},\n                            this.options.headerframeworkComponents ?? {},\n                            this.options.frameworkWrapper\n                                ? {\n                                      createComponent:\n                                          this.options.frameworkWrapper.header\n                                              .createComponent,\n                                  }\n                                : undefined\n                        );\n                    } else {\n                        header = new DefaultHeader();\n                    }\n\n                    const panel = new PaneFramework({\n                        id: data.id,\n                        component: data.component,\n                        headerComponent: data.headerComponent,\n                        header,\n                        body,\n                        orientation: Orientation.VERTICAL,\n                        isExpanded: !!view.expanded,\n                        disableDnd: !!this.options.disableDnd,\n                        accessor: this,\n                    });\n\n                    this.doAddPanel(panel);\n\n                    queue.push(() => {\n                        panel.init({\n                            params: data.params ?? {},\n                            minimumBodySize: view.minimumSize,\n                            maximumBodySize: view.maximumSize,\n                            title: data.title,\n                            isExpanded: !!view.expanded,\n                            containerApi: new PaneviewApi(this),\n                        });\n                        panel.orientation = this.paneview.orientation;\n                    });\n\n                    setTimeout(() => {\n                        // the original onDidAddView events are missed since they are fired before we can subcribe to them\n                        this._onDidAddView.fire(panel);\n                    }, 0);\n\n                    return { size: view.size, view: panel };\n                }),\n            },\n        });\n\n        this.layout(width, height);\n\n        queue.forEach((f) => f());\n\n        this._onDidLayoutfromJSON.fire();\n    }\n\n    clear(): void {\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n\n    private doAddPanel(panel: PaneFramework): void {\n        const disposable = panel.onDidDrop((event) => {\n            this._onDidDrop.fire(event);\n        });\n\n        this._viewDisposables.set(panel.id, disposable);\n    }\n\n    private doRemovePanel(panel: PaneviewPanel): void {\n        const disposable = this._viewDisposables.get(panel.id);\n\n        if (disposable) {\n            disposable.dispose();\n            this._viewDisposables.delete(panel.id);\n        }\n    }\n\n    public dispose(): void {\n        super.dispose();\n\n        for (const [_, value] of this._viewDisposables.entries()) {\n            value.dispose();\n        }\n        this._viewDisposables.clear();\n\n        this.paneview.dispose();\n    }\n}\n","import { ISerializableView, PanelViewInitParameters } from './options';\nimport {\n    BasePanelView,\n    BasePanelViewExported,\n} from '../gridview/basePanelView';\nimport { SplitviewPanelApiImpl } from '../api/splitviewPanelApi';\nimport { LayoutPriority, Orientation } from './splitview';\nimport { FunctionOrValue } from '../types';\nimport { Emitter, Event } from '../events';\n\nexport interface ISplitviewPanel\n    extends BasePanelViewExported<SplitviewPanelApiImpl> {\n    readonly priority: LayoutPriority | undefined;\n    readonly minimumSize: number;\n    readonly maximumSize: number;\n    readonly snap: boolean;\n    readonly orientation: Orientation;\n}\n\nexport abstract class SplitviewPanel\n    extends BasePanelView<SplitviewPanelApiImpl>\n    implements ISerializableView, ISplitviewPanel\n{\n    private _evaluatedMinimumSize = 0;\n    private _evaluatedMaximumSize = Number.POSITIVE_INFINITY;\n\n    private _minimumSize: FunctionOrValue<number> = 0;\n    private _maximumSize: FunctionOrValue<number> = Number.POSITIVE_INFINITY;\n    private _priority?: LayoutPriority;\n    private _snap = false;\n\n    private _orientation?: Orientation;\n\n    private readonly _onDidChange = new Emitter<{\n        size?: number;\n        orthogonalSize?: number;\n    }>();\n    readonly onDidChange: Event<{ size?: number; orthogonalSize?: number }> =\n        this._onDidChange.event;\n\n    get priority(): LayoutPriority | undefined {\n        return this._priority;\n    }\n\n    set orientation(value: Orientation) {\n        this._orientation = value;\n    }\n\n    get orientation(): Orientation {\n        return this._orientation!;\n    }\n\n    get minimumSize(): number {\n        const size =\n            typeof this._minimumSize === 'function'\n                ? this._minimumSize()\n                : this._minimumSize;\n\n        if (size !== this._evaluatedMinimumSize) {\n            this._evaluatedMinimumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get maximumSize(): number {\n        const size =\n            typeof this._maximumSize === 'function'\n                ? this._maximumSize()\n                : this._maximumSize;\n\n        if (size !== this._evaluatedMaximumSize) {\n            this._evaluatedMaximumSize = size;\n            this.updateConstraints();\n        }\n\n        return size;\n    }\n\n    get snap(): boolean {\n        return this._snap;\n    }\n\n    constructor(id: string, componentName: string) {\n        super(id, componentName, new SplitviewPanelApiImpl(id));\n\n        this.api.initialize(this);\n\n        this.addDisposables(\n            this._onDidChange,\n            this.api.onVisibilityChange((event) => {\n                const { isVisible } = event;\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setVisible(this, isVisible);\n            }),\n            this.api.onActiveChange(() => {\n                const { accessor } = this._params as PanelViewInitParameters;\n                accessor.setActive(this);\n            }),\n            this.api.onDidConstraintsChangeInternal((event) => {\n                if (\n                    typeof event.minimumSize === 'number' ||\n                    typeof event.minimumSize === 'function'\n                ) {\n                    this._minimumSize = event.minimumSize;\n                }\n                if (\n                    typeof event.maximumSize === 'number' ||\n                    typeof event.maximumSize === 'function'\n                ) {\n                    this._maximumSize = event.maximumSize;\n                }\n                this.updateConstraints();\n            }),\n            this.api.onDidSizeChange((event) => {\n                this._onDidChange.fire({ size: event.size });\n            })\n        );\n    }\n\n    setVisible(isVisible: boolean): void {\n        this.api._onDidVisibilityChange.fire({ isVisible });\n    }\n\n    setActive(isActive: boolean): void {\n        this.api._onDidActiveChange.fire({ isActive });\n    }\n\n    layout(size: number, orthogonalSize: number): void {\n        const [width, height] =\n            this.orientation === Orientation.HORIZONTAL\n                ? [size, orthogonalSize]\n                : [orthogonalSize, size];\n        super.layout(width, height);\n    }\n\n    init(parameters: PanelViewInitParameters): void {\n        super.init(parameters);\n\n        this._priority = parameters.priority;\n\n        if (parameters.minimumSize) {\n            this._minimumSize = parameters.minimumSize;\n        }\n        if (parameters.maximumSize) {\n            this._maximumSize = parameters.maximumSize;\n        }\n        if (parameters.snap) {\n            this._snap = parameters.snap;\n        }\n    }\n\n    toJSON() {\n        const maximum = (value: number) =>\n            value === Number.MAX_SAFE_INTEGER ||\n            value === Number.POSITIVE_INFINITY\n                ? undefined\n                : value;\n        const minimum = (value: number) => (value <= 0 ? undefined : value);\n\n        return {\n            ...super.toJSON(),\n            minimumSize: minimum(this.minimumSize),\n            maximumSize: maximum(this.maximumSize),\n        };\n    }\n\n    private updateConstraints(): void {\n        this.api._onDidConstraintsChange.fire({\n            maximumSize: this._evaluatedMaximumSize,\n            minimumSize: this._evaluatedMinimumSize,\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { IFrameworkPart, IDockviewDisposable, Parameters } from 'dockview-core';\n\nexport interface ReactPortalStore {\n    addPortal: (portal: React.ReactPortal) => IDockviewDisposable;\n}\n\ninterface IPanelWrapperProps {\n    component: React.FunctionComponent<{ [key: string]: any }>;\n    componentProps: { [key: string]: any };\n}\n\ninterface IPanelWrapperRef {\n    update: (props: { [key: string]: any }) => void;\n}\n\n/**\n * This component is intended to interface between vanilla-js and React hence we need to be\n * creative in how we update props.\n * A ref of the component is exposed with an update method; which when called stores the props\n * as a ref within this component and forcefully triggers a re-render of the component using\n * the ref of props we just set on the renderered component as the props passed to the inner\n * component\n */\nconst ReactComponentBridge: React.ForwardRefRenderFunction<\n    IPanelWrapperRef,\n    IPanelWrapperProps\n> = (props, ref) => {\n    const [_, triggerRender] = React.useState<number>();\n    const _props = React.useRef<object>(props.componentProps);\n\n    React.useImperativeHandle(\n        ref,\n        () => ({\n            update: (componentProps: object) => {\n                _props.current = { ..._props.current, ...componentProps };\n                /**\n                 * setting a arbitrary piece of state within this component will\n                 * trigger a re-render.\n                 * we use this rather than updating through a prop since we can\n                 * pass a ref into the vanilla-js world.\n                 */\n                triggerRender(Date.now());\n            },\n        }),\n        []\n    );\n\n    return React.createElement(props.component, _props.current);\n};\nReactComponentBridge.displayName = 'DockviewReactJsBridge';\n\n/**\n * Since we are storing the React.Portal references in a rendered array they\n * require a key property like any other React element rendered in an array\n * to prevent excessive re-rendering\n */\nconst uniquePortalKeyGenerator = (() => {\n    let value = 1;\n    return { next: () => `dockview_react_portal_key_${(value++).toString()}` };\n})();\n\nexport const ReactPartContext = React.createContext<{}>({});\n\nexport class ReactPart<P extends object, C extends object = {}>\n    implements IFrameworkPart\n{\n    private _initialProps: Parameters = {};\n    private componentInstance?: IPanelWrapperRef;\n    private ref?: {\n        portal: React.ReactPortal;\n        disposable: IDockviewDisposable;\n    };\n    private disposed = false;\n\n    constructor(\n        private readonly parent: HTMLElement,\n        private readonly portalStore: ReactPortalStore,\n        private readonly component: React.FunctionComponent<P>,\n        private readonly parameters: P,\n        private readonly context?: C\n    ) {\n        this.createPortal();\n    }\n\n    public update(props: { [index: string]: any }) {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (!this.componentInstance) {\n            // if the component is yet to be mounted store the props\n            this._initialProps = { ...this._initialProps, ...props };\n        } else {\n            this.componentInstance.update(props);\n        }\n    }\n\n    private createPortal() {\n        if (this.disposed) {\n            throw new Error('invalid operation: resource is already disposed');\n        }\n\n        if (typeof this.component !== 'function') {\n            /**\n             * we know this isn't a React.FunctionComponent so throw an error here.\n             * if we do not intercept this the React library will throw a very obsure error\n             * for the same reason, at least at this point we will emit a sensible stacktrace.\n             */\n            throw new Error(\n                'Invalid Operation. dockview only supports React Functional Components.'\n            );\n        }\n\n        const bridgeComponent = React.createElement(\n            React.forwardRef(ReactComponentBridge),\n            {\n                component: this\n                    .component as unknown as React.FunctionComponent<{}>,\n                componentProps: this.parameters as unknown as {},\n                ref: (element: IPanelWrapperRef) => {\n                    this.componentInstance = element;\n\n                    if (Object.keys(this._initialProps).length > 0) {\n                        this.componentInstance.update(this._initialProps);\n                        this._initialProps = {}; // don't keep a reference to the users object once no longer required\n                    }\n                },\n            }\n        );\n\n        const node = this.context\n            ? React.createElement(\n                  ReactPartContext.Provider,\n                  { value: this.context },\n                  bridgeComponent\n              )\n            : bridgeComponent;\n\n        const portal = ReactDOM.createPortal(\n            node,\n            this.parent,\n            uniquePortalKeyGenerator.next()\n        );\n\n        this.ref = {\n            portal,\n            disposable: this.portalStore.addPortal(portal),\n        };\n    }\n\n    public dispose() {\n        this.ref?.disposable.dispose();\n        this.disposed = true;\n    }\n}\n\ntype PortalLifecycleHook = () => [\n    React.ReactPortal[],\n    (portal: React.ReactPortal) => IDockviewDisposable\n];\n\n/**\n * A React Hook that returns an array of portals to be rendered by the user of this hook\n * and a disposable function to add a portal. Calling dispose removes this portal from the\n * portal array\n */\nexport const usePortalsLifecycle: PortalLifecycleHook = () => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n\n    React.useDebugValue(`Portal count: ${portals.length}`);\n\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((existingPortals) => [...existingPortals, portal]);\n        let disposed = false;\n        return {\n            dispose: () => {\n                if (disposed) {\n                    throw new Error(\n                        'invalid operation: resource already disposed'\n                    );\n                }\n                disposed = true;\n                setPortals((existingPortals) =>\n                    existingPortals.filter((p) => p !== portal)\n                );\n            },\n        };\n    }, []);\n\n    return [portals, addPortal];\n};\n\n// it does the job...\nexport function isReactElement(\n    element: unknown\n): element is React.ReactElement {\n    return !!(element as React.ReactElement)?.type;\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IDockviewPanelProps } from '../dockview/dockview';\nimport {\n    DockviewEmitter,\n    DockviewEvent,\n    PanelUpdateEvent,\n    IContentRenderer,\n    GroupPanelContentPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelContentPart implements IContentRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IDockviewPanelProps>;\n\n    private readonly _onDidFocus = new DockviewEmitter<void>();\n    readonly onDidFocus: DockviewEvent<void> = this._onDidFocus.event;\n\n    private readonly _onDidBlur = new DockviewEmitter<void>();\n    readonly onDidBlur: DockviewEvent<void> = this._onDidBlur.event;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IDockviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: GroupPanelContentPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent) {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop\n    }\n\n    public dispose(): void {\n        this._onDidFocus.dispose();\n        this._onDidBlur.dispose();\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGroupPanelBaseProps } from './dockview';\nimport {\n    PanelUpdateEvent,\n    ITabRenderer,\n    GroupPanelPartInitParameters,\n} from 'dockview-core';\n\nexport class ReactPanelHeaderPart implements ITabRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IGroupPanelBaseProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IGroupPanelBaseProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        //noop\n    }\n\n    public init(parameters: GroupPanelPartInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this.part?.update(event.params);\n    }\n\n    public layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    public dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    PanelUpdateEvent,\n    DockviewGroupPanel,\n    GroupPanelPartInitParameters,\n    IWatermarkRenderer,\n    WatermarkRendererInitParameters,\n    DockviewApi,\n    IDockviewGroupPanel,\n} from 'dockview-core';\n\nexport interface IWatermarkPanelProps {\n    containerApi: DockviewApi;\n    group?: IDockviewGroupPanel;\n    close: () => void;\n}\n\nexport class ReactWatermarkPart implements IWatermarkRenderer {\n    private _element: HTMLElement;\n    private part?: ReactPart<IWatermarkPanelProps>;\n    private parameters: GroupPanelPartInitParameters | undefined;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IWatermarkPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    init(parameters: WatermarkRendererInitParameters): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                group: parameters.group,\n                containerApi: parameters.containerApi,\n                close: () => {\n                    if (parameters.group) {\n                        parameters.containerApi.removeGroup(parameters.group);\n                    }\n                },\n            }\n        );\n    }\n\n    focus(): void {\n        // noop\n    }\n\n    update(params: PanelUpdateEvent): void {\n        if (this.parameters) {\n            this.parameters.params = params.params;\n        }\n\n        this.part?.update({ params: this.parameters?.params ?? {} });\n    }\n\n    layout(_width: number, _height: number): void {\n        // noop - retrieval from api\n    }\n\n    updateParentGroup(\n        _group: DockviewGroupPanel,\n        _isPanelVisible: boolean\n    ): void {\n        // noop\n    }\n\n    dispose(): void {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport {\n    IDockviewPanel,\n    DockviewCompositeDisposable,\n    DockviewMutableDisposable,\n    DockviewApi,\n    DockviewGroupPanel,\n    DockviewGroupPanelApi,\n    PanelUpdateEvent,\n} from 'dockview-core';\n\nexport interface IDockviewHeaderActionsProps {\n    api: DockviewGroupPanelApi;\n    containerApi: DockviewApi;\n    panels: IDockviewPanel[];\n    activePanel: IDockviewPanel | undefined;\n    isGroupActive: boolean;\n    group: DockviewGroupPanel;\n}\n\nexport class ReactHeaderActionsRendererPart {\n    private mutableDisposable = new DockviewMutableDisposable();\n    private _element: HTMLElement;\n    private _part?: ReactPart<IDockviewHeaderActionsProps>;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    get part(): ReactPart<IDockviewHeaderActionsProps> | undefined {\n        return this._part;\n    }\n\n    get group(): DockviewGroupPanel {\n        return this._group;\n    }\n\n    constructor(\n        private readonly component: React.FunctionComponent<IDockviewHeaderActionsProps>,\n        private readonly reactPortalStore: ReactPortalStore,\n        private readonly _group: DockviewGroupPanel\n    ) {\n        this._element = document.createElement('div');\n        this._element.className = 'dockview-react-part';\n    }\n\n    focus(): void {\n        // TODO\n    }\n\n    public init(parameters: {\n        containerApi: DockviewApi;\n        api: DockviewGroupPanelApi;\n    }): void {\n        this.mutableDisposable.value = new DockviewCompositeDisposable(\n            this._group.model.onDidAddPanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidRemovePanel(() => {\n                this.updatePanels();\n            }),\n            this._group.model.onDidActivePanelChange(() => {\n                this.updateActivePanel();\n            }),\n            parameters.api.onDidActiveChange(() => {\n                this.updateGroupActive();\n            })\n        );\n\n        this._part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                api: parameters.api,\n                containerApi: parameters.containerApi,\n                panels: this._group.model.panels,\n                activePanel: this._group.model.activePanel,\n                isGroupActive: this._group.api.isActive,\n                group: this._group,\n            }\n        );\n    }\n\n    public update(event: PanelUpdateEvent): void {\n        this._part?.update(event.params);\n    }\n\n    public dispose(): void {\n        this.mutableDisposable.dispose();\n        this._part?.dispose();\n    }\n\n    private updatePanels(): void {\n        this.update({ params: { panels: this._group.model.panels } });\n    }\n\n    private updateActivePanel(): void {\n        this.update({\n            params: {\n                activePanel: this._group.model.activePanel,\n            },\n        });\n    }\n\n    private updateGroupActive(): void {\n        this.update({\n            params: {\n                isGroupActive: this._group.api.isActive,\n            },\n        });\n    }\n}\n","import * as React from 'react';\nimport {\n    DockviewComponent,\n    DockviewDropEvent,\n    DockviewDndOverlayEvent,\n    GroupPanelFrameworkComponentFactory,\n    DockviewPanelApi,\n    DockviewApi,\n    IContentRenderer,\n    ITabRenderer,\n    DockviewGroupPanel,\n    IHeaderActionsRenderer,\n    DockviewPanelRenderer,\n} from 'dockview-core';\nimport { ReactPanelContentPart } from './reactContentPart';\nimport { ReactPanelHeaderPart } from './reactHeaderPart';\n\nimport { ReactPortalStore, usePortalsLifecycle } from '../react';\nimport { IWatermarkPanelProps, ReactWatermarkPart } from './reactWatermarkPart';\nimport { PanelCollection, PanelParameters } from '../types';\nimport {\n    IDockviewHeaderActionsProps,\n    ReactHeaderActionsRendererPart,\n} from './headerActionsRenderer';\n\nfunction createGroupControlElement(\n    component: React.FunctionComponent<IDockviewHeaderActionsProps> | undefined,\n    store: ReactPortalStore\n): ((groupPanel: DockviewGroupPanel) => IHeaderActionsRenderer) | undefined {\n    return component\n        ? (groupPanel: DockviewGroupPanel) => {\n              return new ReactHeaderActionsRendererPart(\n                  component,\n                  store,\n                  groupPanel\n              );\n          }\n        : undefined;\n}\n\nexport interface IGroupPanelBaseProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: DockviewPanelApi;\n    containerApi: DockviewApi;\n}\n\nexport type IDockviewPanelHeaderProps<\n    T extends { [index: string]: any } = any\n> = IGroupPanelBaseProps<T>;\n\nexport type IDockviewPanelProps<T extends { [index: string]: any } = any> =\n    IGroupPanelBaseProps<T>;\n\nexport interface DockviewReadyEvent {\n    api: DockviewApi;\n}\n\nexport interface IDockviewReactProps {\n    onReady: (event: DockviewReadyEvent) => void;\n    components: PanelCollection<IDockviewPanelProps>;\n    tabComponents?: PanelCollection<IDockviewPanelHeaderProps>;\n    watermarkComponent?: React.FunctionComponent<IWatermarkPanelProps>;\n    onDidDrop?: (event: DockviewDropEvent) => void;\n    showDndOverlay?: (event: DockviewDndOverlayEvent) => boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n    defaultTabComponent?: React.FunctionComponent<IDockviewPanelHeaderProps>;\n    rightHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    leftHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    prefixHeaderActionsComponent?: React.FunctionComponent<IDockviewHeaderActionsProps>;\n    singleTabMode?: 'fullwidth' | 'default';\n    disableFloatingGroups?: boolean;\n    floatingGroupBounds?:\n        | 'boundedWithinViewport'\n        | {\n              minimumHeightWithinViewport?: number;\n              minimumWidthWithinViewport?: number;\n          };\n    debug?: boolean;\n    defaultRenderer?: DockviewPanelRenderer;\n}\n\nconst DEFAULT_REACT_TAB = 'props.defaultTabComponent';\n\nexport const DockviewReact = React.forwardRef(\n    (props: IDockviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const dockviewRef = React.useRef<DockviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const factory: GroupPanelFrameworkComponentFactory = {\n                content: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelProps>\n                    ): IContentRenderer => {\n                        return new ReactPanelContentPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                tab: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<IDockviewPanelHeaderProps>\n                    ): ITabRenderer => {\n                        return new ReactPanelHeaderPart(\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                watermark: {\n                    createComponent: (\n                        _id: string,\n                        componentId: string,\n                        component: React.FunctionComponent<{}>\n                    ) => {\n                        return new ReactWatermarkPart(componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n            };\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            const dockview = new DockviewComponent({\n                parentElement: domRef.current,\n                frameworkComponentFactory: factory,\n                frameworkComponents: props.components,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkTabComponents,\n                watermarkFrameworkComponent: props.watermarkComponent,\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n                showDndOverlay: props.showDndOverlay,\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n                singleTabMode: props.singleTabMode,\n                disableFloatingGroups: props.disableFloatingGroups,\n                floatingGroupBounds: props.floatingGroupBounds,\n                defaultRenderer: props.defaultRenderer,\n                debug: props.debug,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            dockview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new DockviewApi(dockview) });\n            }\n\n            dockviewRef.current = dockview;\n\n            return () => {\n                dockview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const disposable = dockviewRef.current.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop(event);\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                floatingGroupBounds: props.floatingGroupBounds,\n            });\n        }, [props.floatingGroupBounds]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                watermarkFrameworkComponent: props.watermarkComponent,\n            });\n        }, [props.watermarkComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                frameworkTabComponents: props.tabComponents,\n            });\n        }, [props.tabComponents]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                disableFloatingGroups: props.disableFloatingGroups,\n            });\n        }, [props.disableFloatingGroups]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n\n            const frameworkTabComponents = props.tabComponents ?? {};\n\n            if (props.defaultTabComponent) {\n                frameworkTabComponents[DEFAULT_REACT_TAB] =\n                    props.defaultTabComponent;\n            }\n\n            dockviewRef.current.updateOptions({\n                defaultTabComponent: props.defaultTabComponent\n                    ? DEFAULT_REACT_TAB\n                    : undefined,\n                frameworkTabComponents,\n            });\n        }, [props.defaultTabComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createRightHeaderActionsElement: createGroupControlElement(\n                    props.rightHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.rightHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createLeftHeaderActionsElement: createGroupControlElement(\n                    props.leftHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.leftHeaderActionsComponent]);\n\n        React.useEffect(() => {\n            if (!dockviewRef.current) {\n                return;\n            }\n            dockviewRef.current.updateOptions({\n                createPrefixHeaderActionsElement: createGroupControlElement(\n                    props.prefixHeaderActionsComponent,\n                    { addPortal }\n                ),\n            });\n        }, [props.prefixHeaderActionsComponent]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nDockviewReact.displayName = 'DockviewComponent';\n","import * as React from 'react';\n\nexport const CloseButton = () => (\n    <svg\n        height=\"11\"\n        width=\"11\"\n        viewBox=\"0 0 28 28\"\n        aria-hidden={'false'}\n        focusable={false}\n        className=\"dockview-svg\"\n    >\n        <path d=\"M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z\"></path>\n    </svg>\n);\n\nexport const ExpandMore = () => {\n    return (\n        <svg\n            width=\"11\"\n            height=\"11\"\n            viewBox=\"0 0 24 15\"\n            aria-hidden={'false'}\n            focusable={false}\n            className=\"dockview-svg\"\n        >\n            <path d=\"M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z\" />\n        </svg>\n    );\n};\n","import { IDockviewPanelHeaderProps } from './dockview';\nimport * as React from 'react';\nimport { CloseButton } from '../svg';\n\nexport type IDockviewDefaultTabProps = IDockviewPanelHeaderProps &\n    React.DOMAttributes<HTMLDivElement> & {\n        hideClose?: boolean;\n        closeActionOverride?: () => void;\n    };\n\nexport const DockviewDefaultTab: React.FunctionComponent<\n    IDockviewDefaultTabProps\n> = ({\n    api,\n    containerApi: _containerApi,\n    params: _params,\n    hideClose,\n    closeActionOverride,\n    ...rest\n}) => {\n    const onClose = React.useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            event.preventDefault();\n\n            if (closeActionOverride) {\n                closeActionOverride();\n            } else {\n                api.close();\n            }\n        },\n        [api, closeActionOverride]\n    );\n\n    const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n    }, []);\n\n    const onClick = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            api.setActive();\n\n            if (rest.onClick) {\n                rest.onClick(event);\n            }\n        },\n        [api, rest.onClick]\n    );\n\n    return (\n        <div\n            data-testid=\"dockview-default-tab\"\n            {...rest}\n            onClick={onClick}\n            className=\"dockview-react-tab\"\n        >\n            <span className=\"dockview-react-tab-title\">{api.title}</span>\n            {!hideClose && (\n                <div\n                    className=\"dv-react-tab-close-btn\"\n                    onMouseDown={onMouseDown}\n                    onClick={onClose}\n                >\n                    <CloseButton />\n                </div>\n            )}\n        </div>\n    );\n};\n","import {\n    SplitviewApi,\n    PanelViewInitParameters,\n    SplitviewPanel,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { ISplitviewPanelProps } from './splitview';\n\nexport class ReactPanelView extends SplitviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<ISplitviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): ReactPart<ISplitviewPanelProps> {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new SplitviewApi(\n                    (this._params as PanelViewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    SplitviewApi,\n    SplitviewPanelApi,\n    ISplitviewComponent,\n    SplitviewComponent,\n    Orientation,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\nimport { ReactPanelView } from './view';\n\nexport interface SplitviewReadyEvent {\n    api: SplitviewApi;\n}\n\nexport interface ISplitviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: SplitviewPanelApi;\n    containerApi: SplitviewApi;\n}\n\nexport interface ISplitviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: SplitviewReadyEvent) => void;\n    components: PanelCollection<ISplitviewPanelProps>;\n    proportionalLayout?: boolean;\n    hideBorders?: boolean;\n    className?: string;\n    disableAutoResizing?: boolean;\n}\n\nexport const SplitviewReact = React.forwardRef(\n    (props: ISplitviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const splitviewRef = React.useRef<ISplitviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const splitview = new SplitviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkWrapper: {\n                    createComponent: (\n                        id: string,\n                        componentId,\n                        component: any\n                    ) => {\n                        return new ReactPanelView(id, componentId, component, {\n                            addPortal,\n                        });\n                    },\n                },\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            splitview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new SplitviewApi(splitview) });\n            }\n\n            splitviewRef.current = splitview;\n\n            return () => {\n                splitview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!splitviewRef.current) {\n                return;\n            }\n            splitviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nSplitviewReact.displayName = 'SplitviewComponent';\n","import {\n    GridviewApi,\n    GridviewPanel,\n    GridviewInitParameters,\n    IFrameworkPart,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IGridviewPanelProps } from './gridview';\n\nexport class ReactGridPanelView extends GridviewPanel {\n    constructor(\n        id: string,\n        component: string,\n        private readonly reactComponent: React.FunctionComponent<IGridviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        super(id, component);\n    }\n\n    getComponent(): IFrameworkPart {\n        return new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.reactComponent,\n            {\n                params: this._params?.params ?? {},\n                api: this.api,\n                containerApi: new GridviewApi(\n                    (this._params as GridviewInitParameters).accessor\n                ),\n            }\n        );\n    }\n}\n","import * as React from 'react';\nimport {\n    GridviewComponent,\n    IGridviewComponent,\n    GridviewPanelApi,\n    Orientation,\n    GridviewApi,\n} from 'dockview-core';\nimport { ReactGridPanelView } from './view';\nimport { usePortalsLifecycle } from '../react';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface GridviewReadyEvent {\n    api: GridviewApi;\n}\n\nexport interface IGridviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: GridviewPanelApi;\n    containerApi: GridviewApi;\n}\n\nexport interface IGridviewReactProps {\n    orientation?: Orientation;\n    onReady: (event: GridviewReadyEvent) => void;\n    components: PanelCollection<IGridviewPanelProps>;\n    hideBorders?: boolean;\n    className?: string;\n    proportionalLayout?: boolean;\n    disableAutoResizing?: boolean;\n}\n\nexport const GridviewReact = React.forwardRef(\n    (props: IGridviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const gridviewRef = React.useRef<IGridviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            if (!domRef.current) {\n                return () => {\n                    // noop\n                };\n            }\n\n            const gridview = new GridviewComponent({\n                parentElement: domRef.current,\n                disableAutoResizing: props.disableAutoResizing,\n                proportionalLayout:\n                    typeof props.proportionalLayout === 'boolean'\n                        ? props.proportionalLayout\n                        : true,\n                orientation: props.orientation ?? Orientation.HORIZONTAL,\n                frameworkComponents: props.components,\n                frameworkComponentFactory: {\n                    createComponent: (id: string, componentId, component) => {\n                        return new ReactGridPanelView(\n                            id,\n                            componentId,\n                            component,\n                            {\n                                addPortal,\n                            }\n                        );\n                    },\n                },\n                styles: props.hideBorders\n                    ? { separatorBorder: 'transparent' }\n                    : undefined,\n            });\n\n            const { clientWidth, clientHeight } = domRef.current;\n            gridview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api: new GridviewApi(gridview) });\n            }\n\n            gridviewRef.current = gridview;\n\n            return () => {\n                gridview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!gridviewRef.current) {\n                return;\n            }\n            gridviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nGridviewReact.displayName = 'GridviewComponent';\n","import * as React from 'react';\nimport {\n    PanelUpdateEvent,\n    IPaneBodyPart,\n    PanePanelComponentInitParameter,\n} from 'dockview-core';\nimport { ReactPart, ReactPortalStore } from '../react';\nimport { IPaneviewPanelProps } from './paneview';\n\nexport class PanePanelSection implements IPaneBodyPart {\n    private _element: HTMLElement;\n    private part?: ReactPart<IPaneviewPanelProps>;\n\n    get element() {\n        return this._element;\n    }\n\n    constructor(\n        public readonly id: string,\n        private readonly component: React.FunctionComponent<IPaneviewPanelProps>,\n        private readonly reactPortalStore: ReactPortalStore\n    ) {\n        this._element = document.createElement('div');\n        this._element.style.height = '100%';\n        this._element.style.width = '100%';\n    }\n\n    public init(parameters: PanePanelComponentInitParameter): void {\n        this.part = new ReactPart(\n            this.element,\n            this.reactPortalStore,\n            this.component,\n            {\n                params: parameters.params,\n                api: parameters.api,\n                title: parameters.title,\n                containerApi: parameters.containerApi,\n            }\n        );\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n        };\n    }\n\n    public update(params: PanelUpdateEvent) {\n        this.part?.update(params.params);\n    }\n\n    public dispose() {\n        this.part?.dispose();\n    }\n}\n","import * as React from 'react';\nimport {\n    PaneviewPanelApi,\n    PaneviewComponent,\n    IPaneviewComponent,\n    PaneviewDndOverlayEvent,\n    PaneviewApi,\n    PaneviewDropEvent,\n} from 'dockview-core';\nimport { usePortalsLifecycle } from '../react';\nimport { PanePanelSection } from './view';\nimport { PanelCollection, PanelParameters } from '../types';\n\nexport interface PaneviewReadyEvent {\n    api: PaneviewApi;\n}\n\nexport interface IPaneviewPanelProps<T extends { [index: string]: any } = any>\n    extends PanelParameters<T> {\n    api: PaneviewPanelApi;\n    containerApi: PaneviewApi;\n    title: string;\n}\n\nexport interface IPaneviewReactProps {\n    onReady: (event: PaneviewReadyEvent) => void;\n    components: PanelCollection<IPaneviewPanelProps>;\n    headerComponents?: PanelCollection<IPaneviewPanelProps>;\n    className?: string;\n    disableAutoResizing?: boolean;\n    disableDnd?: boolean;\n    showDndOverlay?: (event: PaneviewDndOverlayEvent) => boolean;\n    onDidDrop?(event: PaneviewDropEvent): void;\n}\n\nexport const PaneviewReact = React.forwardRef(\n    (props: IPaneviewReactProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const domRef = React.useRef<HTMLDivElement>(null);\n        const paneviewRef = React.useRef<IPaneviewComponent>();\n        const [portals, addPortal] = usePortalsLifecycle();\n\n        React.useImperativeHandle(ref, () => domRef.current!, []);\n\n        React.useEffect(() => {\n            const createComponent = (\n                id: string,\n                _componentId: string,\n                component: any\n            ) =>\n                new PanePanelSection(id, component, {\n                    addPortal,\n                });\n\n            const paneview = new PaneviewComponent({\n                parentElement: domRef.current!,\n                disableAutoResizing: props.disableAutoResizing,\n                frameworkComponents: props.components,\n                components: {},\n                headerComponents: {},\n                disableDnd: props.disableDnd,\n                headerframeworkComponents: props.headerComponents,\n                frameworkWrapper: {\n                    header: {\n                        createComponent,\n                    },\n                    body: {\n                        createComponent,\n                    },\n                },\n                showDndOverlay: props.showDndOverlay,\n            });\n\n            const api = new PaneviewApi(paneview);\n\n            const { clientWidth, clientHeight } = domRef.current!;\n            paneview.layout(clientWidth, clientHeight);\n\n            if (props.onReady) {\n                props.onReady({ api });\n            }\n\n            paneviewRef.current = paneview;\n\n            return () => {\n                paneview.dispose();\n            };\n        }, []);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                frameworkComponents: props.components,\n            });\n        }, [props.components]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                headerframeworkComponents: props.headerComponents,\n            });\n        }, [props.headerComponents]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return () => {\n                    //\n                };\n            }\n\n            const paneview = paneviewRef.current;\n\n            const disposable = paneview.onDidDrop((event) => {\n                if (props.onDidDrop) {\n                    props.onDidDrop({\n                        ...event,\n                        api: new PaneviewApi(paneview),\n                    });\n                }\n            });\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.onDidDrop]);\n\n        React.useEffect(() => {\n            if (!paneviewRef.current) {\n                return;\n            }\n            paneviewRef.current.updateOptions({\n                showDndOverlay: props.showDndOverlay,\n            });\n        }, [props.showDndOverlay]);\n\n        return (\n            <div\n                className={props.className}\n                style={{ height: '100%', width: '100%' }}\n                ref={domRef}\n            >\n                {portals}\n            </div>\n        );\n    }\n);\nPaneviewReact.displayName = 'PaneviewComponent';\n","import * as React from 'react';\nimport './codeSandboxButton.scss';\nimport { ThemePicker } from './container';\n\nconst BASE_SANDBOX_URL =\n    'https://codesandbox.io/s/github/mathuo/dockview/tree/master/packages/docs/sandboxes';\n\nconst createSvgElementFromPath = (params: {\n    height: string;\n    width: string;\n    viewbox: string;\n    path: string;\n}) => {\n    return (\n        <svg\n            height={params.height}\n            width={params.width}\n            viewBox={params.viewbox}\n            focusable={false}\n            className={'dockview-svg'}\n        >\n            <path d={params.path} />\n        </svg>\n    );\n};\n\nconst CloseButton = () =>\n    createSvgElementFromPath({\n        width: '16',\n        height: '16',\n        viewbox: '0 0 50 58',\n        path: 'M22.5581 50.9938V30.1717L4.65116 19.869V31.7386L12.8536 36.4939V45.4198L22.5581 50.9938ZM27.2093 51.1162L37.0931 45.4226V36.2851L45.3488 31.501V19.7801L27.2093 30.2529V51.1162ZM42.9633 15.7867L33.4288 10.2615L25.0571 15.1193L16.6219 10.2567L7.00237 15.8557L24.9542 26.1842L42.9633 15.7867ZM0 43.4008V14.5498L24.9974 0L50 14.4887V43.3552L24.9969 57.7584L0 43.4008Z',\n    });\n\nexport const CodeSandboxButton = (props: {\n    id: string;\n    hideThemePicker?: boolean;\n}) => {\n    const url = React.useMemo(() => {\n        if (!props.id) {\n            return '';\n        }\n        return `${BASE_SANDBOX_URL}/${props.id}`;\n    }, [props.id]);\n\n    return (\n        <>\n            {!props.hideThemePicker && <ThemePicker />}\n            <span\n                className=\"codesandbox-button\"\n                style={{ display: 'flex', alignItems: 'center' }}\n            >\n                <span className=\"codesandbox-button-pretext\">{`Open in `}</span>\n                <a\n                    href={url}\n                    target={'_blank'}\n                    className=\"codesandbox-button-content\"\n                >\n                    <span\n                        style={{\n                            fontWeight: 'bold',\n                            paddingRight: '4px',\n                        }}\n                    >\n                        CodeSandbox\n                    </span>\n                    <CloseButton />\n                </a>\n            </span>\n        </>\n    );\n};\n","import * as React from 'react';\nimport './spinner.scss';\n\nexport const Spinner = () => {\n    return (\n        <div className=\"lds-ellipsis\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { CodeSandboxButton } from './codeSandboxButton';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport './container.scss';\nimport { Spinner } from './spinner';\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nexport const Container = (props: {\n    children?: React.ReactNode;\n    height?: number;\n    injectVanillaJS?: (parent: HTMLElement) => void;\n    sandboxId?: string;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (!props.injectVanillaJS) {\n            return;\n        }\n\n        props.injectVanillaJS(ref.current);\n    }, [props.injectVanillaJS]);\n\n    return (\n        <BrowserOnly>\n            {() => (\n                <>\n                    <div\n                        ref={ref}\n                        style={{\n                            height: props.height\n                                ? `${props.height}px`\n                                : '300px',\n                        }}\n                    >\n                        {props.children}\n                    </div>\n                    <div\n                        style={{\n                            padding: '2px 0px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            fontSize: '14px',\n                        }}\n                    >\n                        <span style={{ flexGrow: 1 }} />\n                        {props.sandboxId && (\n                            <CodeSandboxButton id={props.sandboxId} />\n                        )}\n                    </div>\n                </>\n            )}\n        </BrowserOnly>\n    );\n};\n\nconst ReactIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg\"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/react-icon.svg')}\n        />\n    );\n};\n\nconst JavascriptIcon = (props: { height: number; width: number }) => {\n    return (\n        <img\n            // className=\"dockview-svg \"\n            style={{ marginRight: '0px 4px' }}\n            height={props.height}\n            width={props.width}\n            src={useBaseUrl('img/js-icon.svg')}\n        />\n    );\n};\n\nconst themes = [\n    'dockview-theme-abyss',\n    'dockview-theme-dark',\n    'dockview-theme-light',\n    'dockview-theme-vs',\n    'dockview-theme-dracula',\n    'dockview-theme-replit',\n];\n\nfunction useLocalStorageItem(key: string, defaultValue: string): string {\n    const [item, setItem] = React.useState<string | null>(\n        localStorage.getItem(key)\n    );\n\n    React.useEffect(() => {\n        const listener = (event: StorageEvent) => {\n            setItem(localStorage.getItem(key));\n        };\n\n        window.addEventListener('storage', listener);\n\n        setItem(localStorage.getItem(key));\n\n        return () => {\n            window.removeEventListener('storage', listener);\n        };\n    }, [key]);\n\n    return item === null ? defaultValue : item;\n}\n\nexport const ThemePicker = () => {\n    const [theme, setTheme] = React.useState<string>(\n        localStorage.getItem('dv-theme-class-name') || themes[0]\n    );\n\n    React.useEffect(() => {\n        localStorage.setItem('dv-theme-class-name', theme);\n        window.dispatchEvent(new StorageEvent('storage'));\n    }, [theme]);\n\n    return (\n        <div\n            style={{\n                height: '20px',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 0px 0px 4px',\n            }}\n        >\n            <span style={{ paddingRight: '4px' }}>{'Theme: '}</span>\n            <select\n                style={{ backgroundColor: 'inherit', color: 'inherit' }}\n                onChange={(e) => setTheme(e.target.value)}\n                value={theme}\n            >\n                {themes.map((theme) => (\n                    <option key={theme} value={theme}>\n                        {theme}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport const MultiFrameworkContainer2 = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const [framework, setFramework] = React.useState<string>('React');\n\n    const [animation, setAnimation] = React.useState<boolean>(false);\n\n    const theme = useLocalStorageItem(\n        'dv-theme-class-name',\n        'dockview-theme-abyss'\n    );\n\n    React.useEffect(() => {\n        setAnimation(true);\n\n        setTimeout(() => {\n            setAnimation(false);\n        }, 500);\n    }, [framework]);\n\n    React.useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        if (framework === 'Javascript') {\n            const disposable = props.typescript(ref.current);\n\n            return () => {\n                disposable.dispose();\n            };\n        }\n\n        return;\n    }, [props.typescript, framework]);\n\n    const sandboxId = React.useMemo(() => {\n        if (framework === 'Javascript') {\n            return `javascript/${props.sandboxId}`;\n        }\n        return props.sandboxId;\n    }, [props.sandboxId, framework]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                style={{\n                    position: 'relative',\n                    height: props.height ? `${props.height}px` : '300px',\n                }}\n            >\n                {animation && (\n                    <div\n                        style={{\n                            background: 'rgba(30,30,30)',\n                            position: 'absolute',\n                            zIndex: 9999,\n                            top: 0,\n                            left: 0,\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Spinner />\n                    </div>\n                )}\n                {framework === 'React' && <props.react theme={theme} />}\n            </div>\n            <div\n                style={{\n                    margin: '2px 0px',\n                    padding: '2px 0px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '14px',\n                    height: '24px',\n                }}\n            >\n                <div\n                    className=\"framework-button\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        cursor: 'pointer',\n                    }}\n                >\n                    {props.typescript &&\n                        (framework === 'React' ? (\n                            <ReactIcon height={16} width={16} />\n                        ) : (\n                            <JavascriptIcon height={16} width={16} />\n                        ))}\n                    {props.typescript && (\n                        <select\n                            style={{\n                                border: 'none',\n                                fontWeight: 'bold',\n                                backgroundColor: 'inherit',\n                                cursor: 'inherit',\n                                color: 'inherit',\n                                height: '24px',\n                            }}\n                            onChange={(e) => {\n                                const target = e.target as HTMLSelectElement;\n                                setFramework(target.value);\n                            }}\n                        >\n                            <option value=\"React\">{'React'}</option>\n                            <option value=\"Javascript\">{'Javascript'}</option>\n                        </select>\n                    )}\n                </div>\n                <span style={{ flexGrow: 1 }} />\n                <CodeSandboxButton\n                    id={sandboxId}\n                    hideThemePicker={props.hideThemePicker}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const MultiFrameworkContainer = (props: {\n    react: React.FC;\n    typescript?: (parent: HTMLElement) => { dispose: () => void };\n    sandboxId: string;\n    height?: number;\n    hideThemePicker?: boolean;\n}) => {\n    return (\n        <BrowserOnly>\n            {() => <MultiFrameworkContainer2 {...props} />}\n        </BrowserOnly>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"features\":\"features_t9lD\",\"featureSvg\":\"featureSvg_GfXr\"};","import React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.module.css';\n\ntype FeatureItem = {\n    title: string;\n    Svg: React.ComponentType<React.ComponentProps<'svg'>>;\n    description: JSX.Element;\n};\n\nconst FeatureList: FeatureItem[] = [\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_grid_3.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Serializable Layouts\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Add and remove panels using the provided api or use the\n                        serialziation methods to persist layouts.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Customizable Theme\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Adjust a number of provided CSS Properties for a simple\n                        change or target specific classes for a more customized\n                        approach.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Choose Your Control\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Choose from a simple splitview, gridview, collapsable\n                        panes or a full docking solution. Combine multiple for\n                        complex layouts.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_grid_4.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Rich Feature Control\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Customize header features to add additional icons and\n                        more as well as custom tab rendering.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Floating Group Support\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Built-in support for floating groups with a supporting\n                        api for progmatic control.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">Drag And Drop</h3>\n                    <p className=\"feature-banner-content\">\n                        Drag and Drop tab to position your layout as well as\n                        interacting with external drag events.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n    {\n        title: '',\n        Svg: require('@site/static/img/dockview_splash_2.svg').default,\n        description: (\n            <>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">Zero Dependencies</h3>\n                    <p className=\"feature-banner-content\">\n                        Zero dependencies, that's all.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        Code Quality and Transparency\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        All of the code is run through Sonarcloud Code Analysis,\n                        which along with the source code and high test coverage\n                        can be viewed from the Github page.\n                    </p>\n                </div>\n                <div className=\"feature-banner\">\n                    <h3 className=\"feature-banner-header\">\n                        React or Vanilla TypeScript\n                    </h3>\n                    <p className=\"feature-banner-content\">\n                        Exposes native support for both ReactJS components and\n                        Vanilla TypeScript.\n                    </p>\n                </div>\n            </>\n        ),\n    },\n];\n\nfunction Feature({ title, Svg, description }: FeatureItem) {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                margin: 'auto',\n                justifyContent: 'center',\n            }}\n            className=\"dockview-feature\"\n        >\n            <Svg className={styles.featureSvg} role=\"img\" />\n            <div style={{ maxWidth: '400px', padding: '0px 20px' }}>\n                <h3>{title}</h3>\n                {description}\n            </div>\n        </div>\n    );\n}\n\nexport default function HomepageFeatures(): JSX.Element {\n    return (\n        <section className={styles.features}>\n            <div className=\"container\">\n                <div className=\"row\">\n                    {FeatureList.map((props, idx) => (\n                        <Feature key={idx} {...props} />\n                    ))}\n                </div>\n            </div>\n        </section>\n    );\n}\n","import * as React from 'react';\n\nexport const BrowserHeader = () => (\n    <div\n        style={{\n            height: '30px',\n            borderBottom: '1px solid #BABABA',\n            backgroundColor: '#DCDCDC',\n            borderTopLeftRadius: '15px',\n            borderTopRightRadius: '15px',\n            padding: '0px 15px',\n            display: 'flex',\n            alignItems: 'center',\n        }}\n    >\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#FD605E',\n                marginRight: 7,\n            }}\n        />\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#FBBC3F',\n                marginRight: 7,\n            }}\n        />\n        <div\n            style={{\n                height: '14px',\n                width: '14px',\n                borderRadius: '100%',\n                backgroundColor: '#34C942',\n                marginRight: 7,\n            }}\n        />\n    </div>\n);\n","import {\n    DockviewDefaultTab,\n    DockviewReact,\n    DockviewReadyEvent,\n    IDockviewPanelHeaderProps,\n    IDockviewPanelProps,\n    IDockviewHeaderActionsProps,\n} from 'dockview';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { v4 } from 'uuid';\nimport './app.scss';\n\nconst components = {\n    default: (props: IDockviewPanelProps<{ title: string }>) => {\n        return (\n            <div style={{ height: '100%', overflow: 'auto', color: 'white' }}>\n                {''}\n            </div>\n        );\n    },\n};\n\nconst headerComponents = {\n    default: (props: IDockviewPanelHeaderProps) => {\n        const onContextMenu = (event: React.MouseEvent) => {\n            event.preventDefault();\n            alert('context menu');\n        };\n        return <DockviewDefaultTab onContextMenu={onContextMenu} {...props} />;\n    },\n};\n\nconst Popover = (props: {\n    children: React.ReactNode;\n    position?: { x: number; y: number };\n    close: () => void;\n}) => {\n    const uuid = React.useMemo(() => v4(), []);\n\n    React.useEffect(() => {\n        const listener = (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                props.close();\n            }\n        };\n        const listener2 = (event: MouseEvent) => {\n            let target = event.target;\n\n            while (target) {\n                if (target instanceof HTMLElement) {\n                    if (target.classList.contains(uuid)) {\n                        return;\n                    } else {\n                        target = target.parentElement;\n                    }\n                } else {\n                    target = null;\n                }\n            }\n\n            props.close();\n        };\n        window.addEventListener('keypress', listener);\n        window.addEventListener('mousedown', listener2);\n\n        return () => {\n            window.removeEventListener('keypress', listener);\n            window.removeEventListener('mousedown', listener2);\n        };\n    }, [props.close, uuid]);\n\n    if (!props.position) {\n        return null;\n    }\n\n    return ReactDOM.createPortal(\n        <div\n            className={uuid}\n            style={{\n                position: 'absolute',\n                top: props.position.y,\n                left: props.position.x,\n                background: 'white',\n                border: '1px solid black',\n                zIndex: 99,\n                padding: '10px',\n            }}\n        >\n            {props.children}\n        </div>,\n        document.body\n    );\n};\n\nconst Icon = (props: {\n    icon: string;\n    onClick?: (event: React.MouseEvent) => void;\n}) => {\n    return (\n        <div className=\"action\" onClick={props.onClick}>\n            <span\n                style={{ fontSize: 'inherit' }}\n                className=\"material-symbols-outlined\"\n            >\n                {props.icon}\n            </span>\n        </div>\n    );\n};\n\nconst groupControlsComponents = {\n    panel_1: () => {\n        return <Icon icon=\"file_download\" />;\n    },\n};\n\nconst RightControls = (props: IDockviewHeaderActionsProps) => {\n    const Component = React.useMemo(() => {\n        if (!props.isGroupActive || !props.activePanel) {\n            return null;\n        }\n\n        return groupControlsComponents[props.activePanel.id];\n    }, [props.isGroupActive, props.activePanel]);\n\n    const [icon, setIcon] = React.useState<string>(\n        props.containerApi.hasMaximizedGroup()\n            ? 'collapse_content'\n            : 'expand_content'\n    );\n\n    React.useEffect(() => {\n        const disposable = props.containerApi.onDidMaxmizedGroupChange(() => {\n            setIcon(\n                props.containerApi.hasMaximizedGroup()\n                    ? 'collapse_content'\n                    : 'expand_content'\n            );\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, [props.containerApi]);\n\n    const onClick = () => {\n        if (props.containerApi.hasMaximizedGroup()) {\n            props.containerApi.exitMaxmizedGroup();\n        } else {\n            props.activePanel?.api.maximize();\n        }\n    };\n\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            {props.isGroupActive && <Icon icon=\"star\" />}\n            {Component && <Component />}\n            <Icon icon={icon} onClick={onClick} />\n        </div>\n    );\n};\n\nlet counter = 0;\n\nconst LeftControls = (props: IDockviewHeaderActionsProps) => {\n    const onClick = () => {\n        props.containerApi.addPanel({\n            id: `id_${Date.now().toString()}`,\n            component: 'default',\n            title: `Tab ${counter++}`,\n            position: {\n                referenceGroup: props.group,\n            },\n        });\n    };\n\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            <Icon onClick={onClick} icon=\"add\" />\n        </div>\n    );\n};\n\nconst PrefixHeaderControls = (props: IDockviewHeaderActionsProps) => {\n    return (\n        <div\n            className=\"group-control\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0px 8px',\n                height: '100%',\n                color: 'var(--dv-activegroup-visiblepanel-tab-color)',\n            }}\n        >\n            <Icon icon=\"Menu\" />\n        </div>\n    );\n};\n\nconst DockviewDemo = (props: { theme?: string }) => {\n    const onReady = (event: DockviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            title: 'Panel 1',\n        });\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            title: 'Panel 2',\n            position: { referencePanel: 'panel_1', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            title: 'Panel 3',\n            position: { referencePanel: 'panel_2', direction: 'below' },\n        });\n        event.api.addPanel({\n            id: 'panel_4',\n            component: 'default',\n            title: 'Panel 4',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n        event.api.addPanel({\n            id: 'panel_5',\n            component: 'default',\n            title: 'Panel 5',\n            position: { referencePanel: 'panel_3', direction: 'below' },\n        });\n        event.api.addPanel({\n            id: 'panel_6',\n            component: 'default',\n            title: 'Panel 6',\n            position: { referencePanel: 'panel_3', direction: 'right' },\n        });\n\n        event.api.getPanel('panel_1')!.api.setActive();\n\n        console.log(event.api.toJSON());\n    };\n\n    return (\n        <DockviewReact\n            components={components}\n            defaultTabComponent={headerComponents.default}\n            rightHeaderActionsComponent={RightControls}\n            leftHeaderActionsComponent={LeftControls}\n            prefixHeaderActionsComponent={PrefixHeaderControls}\n            onReady={onReady}\n            className={props.theme || 'dockview-theme-abyss'}\n        />\n    );\n};\n\nexport default DockviewDemo;\n","import {\n    GridviewReact,\n    GridviewReadyEvent,\n    IGridviewPanelProps,\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\nimport * as React from 'react';\n\nconst paneComponents = {\n    default: (props: IPaneviewPanelProps) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nconst components = {\n    default: (props: IGridviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    height: '100%',\n                    padding: '20px',\n                    background: 'var(--dv-group-view-background-color)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n    panes: (props: IGridviewPanelProps) => {\n        const onReady = (event: PaneviewReadyEvent) => {\n            event.api.addPanel({\n                id: 'pane_1',\n                component: 'default',\n                title: 'Pane 1',\n                isExpanded: false,\n            });\n\n            event.api.addPanel({\n                id: 'pane_2',\n                component: 'default',\n                title: 'Pane 2',\n                isExpanded: true,\n            });\n\n            event.api.addPanel({\n                id: 'pane_3',\n                component: 'default',\n                title: 'Pane 3',\n                isExpanded: true,\n            });\n\n            event.api.addPanel({\n                id: 'pane_4',\n                component: 'default',\n                title: 'Pane 4',\n                isExpanded: false,\n            });\n        };\n\n        return <PaneviewReact onReady={onReady} components={paneComponents} />;\n    },\n};\n\nconst DockviewDemo2 = (props: { theme?: string }) => {\n    const onReady = (event: GridviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panes',\n            component: 'panes',\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            position: { referencePanel: 'panes', direction: 'right' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            position: { referencePanel: 'panel_1', direction: 'below' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            position: { referencePanel: 'panel_2', direction: 'below' },\n            minimumHeight: 100,\n            minimumWidth: 100,\n        });\n    };\n\n    return (\n        <GridviewReact\n            onReady={onReady}\n            components={components}\n            className={`${props.theme || 'dockview-theme-abyss'}`}\n        />\n    );\n};\n\nexport default DockviewDemo2;\n","import useBaseUrl from '@docusaurus/useBaseUrl';\nimport HomepageFeatures from '.';\nimport { BrowserHeader } from '../ui/browserHeader';\nimport { MultiFrameworkContainer } from '../ui/container';\nimport * as React from 'react';\nimport DockviewDemo from '@site/sandboxes/demo-dockview/src/app';\nimport DockviewDemo2 from '@site/sandboxes/dockview-app/src/app';\n\nexport const Introduction = () => {\n    return (\n        <>\n            <HomepageFeatures />\n            <div\n                id=\"live-demo\"\n                style={{\n                    height: '30px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '1.5em',\n                    fontWeight: 'bold',\n                }}\n            >\n                <img src={useBaseUrl('/img/dockview_logo.svg')} height={30} />\n                <span style={{ paddingLeft: '8px' }}>Dockview Live Demos</span>\n            </div>\n            <div style={{ padding: '20px' }}>\n                <BrowserHeader />\n                <MultiFrameworkContainer\n                    height={500}\n                    sandboxId=\"demo-dockview\"\n                    react={DockviewDemo}\n                />\n            </div>\n            <div style={{ padding: '20px' }}>\n                <BrowserHeader />\n                <MultiFrameworkContainer\n                    height={500}\n                    react={DockviewDemo2}\n                    sandboxId=\"dockview-app\"\n                />\n            </div>\n        </>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"heroBanner\":\"heroBanner_qdFl\",\"buttons\":\"buttons_AeoN\"};","import React from 'react';\nimport clsx from 'clsx';\nimport Layout from '@theme/Layout';\nimport Link from '@docusaurus/Link';\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport { Introduction } from '../components/HomepageFeatures/introduction';\nimport styles from './index.module.css';\nimport './index.scss';\n\nfunction HomepageHeader2() {\n    const { siteConfig } = useDocusaurusContext();\n    return (\n        <header className={clsx('hero hero--primary', styles.heroBanner)}>\n            <div className=\"container homepage\">\n                <img src={useBaseUrl('/img/dockview_logo.svg')} />\n                <h1 className=\"hero__title\">{siteConfig.title}</h1>\n                {/* <div className=\"badge-container\">\n                            <img src=\"https://badge.fury.io/js/dockview.svg\" />\n                            <img src=\"https://github.com/mathuo/dockview/workflows/CI/badge.svg\" />\n                            <img src=\"https://sonarcloud.io/api/project_badges/measure?project=mathuo_dockview&metric=coverage\" />\n                            <img src=\"https://sonarcloud.io/api/project_badges/measure?project=mathuo_dockview&metric=alert_status\" />\n                        </div> */}\n                <p className=\"hero__subtitle\">{siteConfig.tagline}</p>\n                <div className={styles.buttons}>\n                    <Link\n                        className=\"button button--secondary button--lg\"\n                        to={useBaseUrl('docs/')}\n                    >\n                        Get Started\n                    </Link>\n                    <Link\n                        className=\"button button--secondary button--lg\"\n                        to={'#live-demo'}\n                    >\n                        Live Demo\n                    </Link>\n                </div>\n            </div>\n        </header>\n    );\n}\n\nexport default function Home(): JSX.Element {\n    const { siteConfig } = useDocusaurusContext();\n    return (\n        <Layout\n            title={`${siteConfig.tagline}`}\n            description={`${siteConfig.description}`}\n        >\n            <HomepageHeader2 />\n\n            <main className=\"container\">\n                <Introduction />\n            </main>\n        </Layout>\n    );\n}\n","var _rect, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _rect10, _rect11, _rect12, _rect13, _rect14, _rect15, _rect16, _path18, _path19, _path20, _path21, _path22, _path23, _rect17, _rect18, _path24, _path25, _path26, _path27, _rect19, _rect20, _path28, _path29;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewGrid3 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 311.504,\n    height: 200,\n    rx: 5,\n    fill: \"#fff\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#A8A8A8\",\n    d: \"M0 11h156v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M156 11h156v91H156zM234 102h78v98h-78zM156 102h78v98h-78zM0 24h156v176H0z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M157 102h155v1H157zM157 11h-1v189h1zM234 103h-1v97h1v-97Z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h156v14H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M0 11h30v14H0zM31 11h30v14H31z\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M62 11h30v14H62z\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M30 11h1v14h-1zM61 11h1v14h-1zM92 11h1v14h-1z\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M157 11h155v14H157z\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M157 11h30v14h-30z\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M188 11h30v14h-30z\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M187 11h1v14h-1zM218 11h1v14h-1z\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M234 103h78v14h-78z\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M234 103h24v14h-24z\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M258 103h24v14h-24z\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M258 103h.503v14H258zM282 103h.503v14H282z\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 66,\n    y: 16,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 76,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 260,\n    y: 108,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 268,\n    y: 108,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 206,\n    y: 16,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 160,\n    y: 16,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 166,\n    y: 16,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 237,\n    y: 108,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 33,\n    y: 16,\n    width: 15,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 2,\n    y: 16,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 16,\n    width: 18,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#E1E1E1\",\n    fillOpacity: 0.25,\n    d: \"M297 11h15v189h-15z\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M90.5 18.5h48v13h-48z\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M140.344 22.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M139.5 23.5h4v2h-4z\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M97.33 23.09h.421l.989 2.416h.034l.989-2.415h.42V26h-.33v-2.21h-.028L98.916 26h-.318l-.91-2.21h-.028V26h-.33v-2.91Zm4.889 2.018v-1.29h.335V26h-.335v-.37h-.023a.713.713 0 0 1-.238.283.692.692 0 0 1-.41.115.727.727 0 0 1-.363-.09.623.623 0 0 1-.25-.272 1.03 1.03 0 0 1-.091-.462v-1.386h.335v1.364c0 .159.045.286.134.38.09.095.204.142.343.142a.571.571 0 0 0 .563-.596Zm1.284-2.017V26h-.335v-2.91h.335Zm1.563.727v.284h-1.13v-.284h1.13Zm-.801-.523h.335v2.08c0 .095.014.166.042.213a.212.212 0 0 0 .107.094.438.438 0 0 0 .141.023.598.598 0 0 0 .091-.006l.057-.012.068.302a.7.7 0 0 1-.528-.021.556.556 0 0 1-.225-.187.532.532 0 0 1-.088-.315v-2.17ZM105.57 26v-2.182h.336V26h-.336Zm.171-2.546a.238.238 0 0 1-.169-.066.216.216 0 0 1-.07-.16c0-.063.024-.117.07-.161a.238.238 0 0 1 .169-.067c.065 0 .121.022.168.067a.214.214 0 0 1 .071.16.214.214 0 0 1-.071.16.236.236 0 0 1-.168.067Zm.779 3.364v-3h.324v.347h.039c.025-.038.059-.086.103-.145a.596.596 0 0 1 .19-.16.683.683 0 0 1 .338-.07c.184 0 .346.046.486.138a.92.92 0 0 1 .328.39c.079.169.118.368.118.597 0 .23-.039.431-.118.6a.935.935 0 0 1-.327.393.852.852 0 0 1-.481.137.7.7 0 0 1-.337-.07.636.636 0 0 1-.195-.16c-.045-.06-.08-.11-.105-.15h-.028v1.153h-.335Zm.329-1.909c0 .165.024.31.073.436a.661.661 0 0 0 .211.294.55.55 0 0 0 .341.105.55.55 0 0 0 .351-.11.672.672 0 0 0 .213-.302c.048-.127.073-.268.073-.423 0-.153-.024-.292-.071-.415a.644.644 0 0 0-.212-.294.56.56 0 0 0-.354-.11.556.556 0 0 0-.343.105.627.627 0 0 0-.211.287 1.187 1.187 0 0 0-.071.427Zm2.443-1.818V26h-.335v-2.91h.335Zm1.529 2.954c-.21 0-.391-.046-.544-.139a.942.942 0 0 1-.351-.392 1.343 1.343 0 0 1-.122-.588c0-.223.041-.42.122-.59a.967.967 0 0 1 .344-.401.924.924 0 0 1 .517-.145c.114 0 .226.019.337.057.111.037.211.099.302.184a.884.884 0 0 1 .218.335c.054.14.081.311.081.515v.142h-1.682v-.29h1.341a.718.718 0 0 0-.074-.33.556.556 0 0 0-.523-.312.6.6 0 0 0-.346.1.65.65 0 0 0-.223.255.74.74 0 0 0-.079.338v.193c0 .165.029.305.086.42.057.113.137.2.24.26a.701.701 0 0 0 .356.087.728.728 0 0 0 .239-.037.511.511 0 0 0 .186-.113.526.526 0 0 0 .121-.19l.324.09a.734.734 0 0 1-.172.29.84.84 0 0 1-.299.193 1.104 1.104 0 0 1-.399.069Zm2.539.773v-3h.323v.347h.04a3.76 3.76 0 0 1 .102-.145.6.6 0 0 1 .191-.16.683.683 0 0 1 .338-.07c.184 0 .346.046.486.138a.92.92 0 0 1 .328.39c.078.169.118.368.118.597 0 .23-.04.431-.118.6a.935.935 0 0 1-.327.393.854.854 0 0 1-.481.137.697.697 0 0 1-.337-.07.636.636 0 0 1-.195-.16c-.045-.06-.08-.11-.105-.15h-.028v1.153h-.335Zm.329-1.909c0 .165.024.31.073.436a.653.653 0 0 0 .211.294.55.55 0 0 0 .341.105.55.55 0 0 0 .351-.11.672.672 0 0 0 .213-.302c.048-.127.072-.268.072-.423 0-.153-.023-.292-.071-.415a.642.642 0 0 0-.211-.294.56.56 0 0 0-.354-.11.561.561 0 0 0-.344.105.625.625 0 0 0-.21.287 1.187 1.187 0 0 0-.071.427Zm2.75 1.142a.883.883 0 0 1-.376-.078.643.643 0 0 1-.269-.229.647.647 0 0 1-.099-.363c0-.125.024-.227.074-.304a.522.522 0 0 1 .197-.185c.082-.044.173-.078.273-.1.1-.022.201-.04.302-.053.133-.017.24-.03.323-.039a.5.5 0 0 0 .182-.047c.038-.021.058-.06.058-.113v-.012a.444.444 0 0 0-.115-.326c-.076-.078-.191-.117-.345-.117a.605.605 0 0 0-.377.105.622.622 0 0 0-.192.225l-.318-.114a.764.764 0 0 1 .228-.31.843.843 0 0 1 .312-.156c.114-.03.225-.045.335-.045.07 0 .151.008.242.025.092.016.18.05.265.101a.59.59 0 0 1 .215.232.86.86 0 0 1 .085.415V26h-.335v-.296h-.017a.653.653 0 0 1-.325.29.82.82 0 0 1-.323.057Zm.051-.301a.66.66 0 0 0 .335-.078.537.537 0 0 0 .279-.462v-.307c-.014.018-.046.033-.094.047a1.55 1.55 0 0 1-.165.036 6.889 6.889 0 0 1-.321.042c-.087.012-.168.03-.244.056a.424.424 0 0 0-.182.112.288.288 0 0 0-.068.202.3.3 0 0 0 .129.264.581.581 0 0 0 .331.088Zm1.896-1.063V26h-.335v-2.182h.324v.341h.028c.051-.11.129-.2.233-.267a.726.726 0 0 1 .404-.102c.147 0 .277.03.387.09.111.06.197.151.259.273.061.122.092.275.092.46V26h-.335v-1.364c0-.171-.045-.305-.134-.4a.473.473 0 0 0-.366-.145.585.585 0 0 0-.287.07.497.497 0 0 0-.197.203.663.663 0 0 0-.073.323Zm2.92 1.358c-.211 0-.392-.046-.544-.139a.929.929 0 0 1-.351-.392 1.33 1.33 0 0 1-.122-.588c0-.223.04-.42.122-.59a.964.964 0 0 1 .343-.401.926.926 0 0 1 .517-.145c.114 0 .226.019.337.057a.835.835 0 0 1 .52.52c.054.139.081.31.081.514v.142h-1.682v-.29h1.341a.718.718 0 0 0-.074-.33.554.554 0 0 0-.523-.312.6.6 0 0 0-.346.1.65.65 0 0 0-.223.255.752.752 0 0 0-.078.338v.193c0 .165.028.305.085.42.058.113.138.2.24.26a.702.702 0 0 0 .357.087.722.722 0 0 0 .238-.037.511.511 0 0 0 .186-.113.513.513 0 0 0 .121-.19l.324.09a.711.711 0 0 1-.172.29.835.835 0 0 1-.298.193 1.112 1.112 0 0 1-.399.069Zm1.748-2.954V26h-.335v-2.91h.335Zm2.16 1.216-.302.085a.53.53 0 0 0-.083-.146.413.413 0 0 0-.148-.12.54.54 0 0 0-.24-.047.572.572 0 0 0-.334.093c-.088.06-.132.138-.132.231 0 .084.03.15.091.198.06.048.155.088.284.12l.324.08c.195.048.34.12.436.218a.507.507 0 0 1 .143.373.554.554 0 0 1-.108.335.713.713 0 0 1-.298.233 1.089 1.089 0 0 1-.446.085.978.978 0 0 1-.552-.144.639.639 0 0 1-.277-.424l.318-.08c.03.118.087.206.172.265a.575.575 0 0 0 .333.088.625.625 0 0 0 .373-.1c.092-.067.139-.147.139-.24a.254.254 0 0 0-.08-.191.505.505 0 0 0-.244-.117l-.364-.085c-.2-.047-.346-.12-.44-.22a.532.532 0 0 1-.139-.377.54.54 0 0 1 .103-.326.716.716 0 0 1 .286-.223c.121-.054.258-.081.412-.081.216 0 .385.047.508.142.124.095.213.22.265.375Zm1.788.239c0-.358.047-.688.14-.988.093-.3.227-.578.4-.83h.296a1.75 1.75 0 0 0-.192.346 4.068 4.068 0 0 0-.26.956 3.627 3.627 0 0 0 .028 1.201c.044.232.103.448.176.647.074.199.157.36.248.486h-.296a3.068 3.068 0 0 1-.4-.83 3.337 3.337 0 0 1-.14-.988Zm2.307 1.494c-.187 0-.354-.032-.501-.097a.857.857 0 0 1-.348-.268.719.719 0 0 1-.139-.402h.358c.007.093.04.174.096.243.057.067.132.119.223.156a.815.815 0 0 0 .306.055.796.796 0 0 0 .332-.065.536.536 0 0 0 .227-.182.455.455 0 0 0 .083-.27.507.507 0 0 0-.313-.476.903.903 0 0 0-.375-.07h-.233v-.312h.233c.116 0 .217-.02.304-.062a.474.474 0 0 0 .282-.443.488.488 0 0 0-.066-.258.446.446 0 0 0-.184-.17.602.602 0 0 0-.279-.061c-.1 0-.195.018-.284.055a.53.53 0 0 0-.216.158.412.412 0 0 0-.091.247h-.341a.696.696 0 0 1 .138-.4.868.868 0 0 1 .338-.27c.14-.065.294-.097.462-.097.18 0 .334.037.463.11a.748.748 0 0 1 .4.669.653.653 0 0 1-.477.66v.021c.184.03.327.109.431.235.103.125.154.28.154.464 0 .158-.043.3-.129.426a.88.88 0 0 1-.349.296 1.139 1.139 0 0 1-.505.108Zm2.286-1.494c0 .357-.047.687-.141.988-.092.3-.225.577-.399.83h-.295a1.8 1.8 0 0 0 .19-.347c.06-.136.112-.286.156-.449a4.123 4.123 0 0 0 .142-1.023c0-.225-.021-.454-.065-.686a3.876 3.876 0 0 0-.176-.646 2.031 2.031 0 0 0-.247-.486h.295c.174.253.307.53.399.831.094.3.141.63.141.988Z\",\n    fill: \"#fff\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M279.5 46.5h29v13h-29z\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 283,\n    y: 51,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 294,\n    y: 51,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M305.344 61.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M304.5 62.5h4v2h-4z\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#E1E1E1\",\n    fillOpacity: 0.25,\n    d: \"M157 153h76v47h-76z\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    stroke: \"#2B2B4A\",\n    d: \"M180.5 163.5h29v13h-29z\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 184,\n    y: 168,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 195,\n    y: 168,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M194.344 176.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M193.5 177.5h4v2h-4z\"\n  })));\n};\nexport default SvgDockviewGrid3;","var _rect, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _path19, _rect10, _rect11, _rect12, _rect13, _rect14, _path20, _circle, _circle2, _circle3, _path21, _circle4, _circle5, _circle6, _path22, _rect15, _rect16, _path23, _circle7, _circle8, _circle9, _path24, _rect17, _path25, _g, _path26, _path27, _path28, _path29, _path30, _path31, _rect18, _rect19, _rect20, _rect21, _path32, _path33, _path34;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewGrid4 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 311.504,\n    height: 200,\n    rx: 5,\n    fill: \"#fff\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#A8A8A8\",\n    d: \"M0 11h156v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M188 11h124v91H188zM188 102h124v98H188zM0 24h187v176H0z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M188 102h124v1H188zM188 11h-1v189h1z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h187v14H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M0 11h35.962v14H0zM37.16 11h35.962v14H37.16z\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M74.32 11h35.962v14H74.32z\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M35.962 11h1.199v14h-1.199zM73.122 11h1.199v14h-1.199zM110.282 11h1.199v14h-1.199z\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M188 11h124v14H188z\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M188 11h30v14h-30z\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M219 11h30v14h-30z\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M218 11h1v14h-1zM249 11h1v14h-1z\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M188 103h124v14H188z\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M188 103h24v14h-24z\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M212 103h24v14h-24z\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M212 103h.503v14H212zM236 103h.503v14H236z\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M76 18a2 2 0 0 1 2-2h3a2 2 0 1 1 0 4h-3a2 2 0 0 1-2-2Z\",\n    fill: \"#fff\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 85,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 222,\n    y: 16,\n    width: 12,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 214,\n    y: 108,\n    width: 7,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 222,\n    y: 108,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 237,\n    y: 16,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 16,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 197,\n    y: 16,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 191,\n    y: 108,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39 18a2 2 0 0 1 2-2h11a2 2 0 1 1 0 4H41a2 2 0 0 1-2-2Z\",\n    fill: \"#777\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 2,\n    y: 16,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 16,\n    width: 18,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M173 11h14v14h-14z\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 176,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 176 18)\",\n    fill: \"#fff\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 184,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 184 18)\",\n    fill: \"#fff\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 180,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 180 18)\",\n    fill: \"#fff\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M298 11h14v14h-14z\"\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 301,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 301 18)\",\n    fill: \"#fff\"\n  })), _circle5 || (_circle5 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 309,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 309 18)\",\n    fill: \"#fff\"\n  })), _circle6 || (_circle6 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 305,\n    cy: 18,\n    r: 1,\n    transform: \"rotate(-90 305 18)\",\n    fill: \"#fff\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M111 11h14v14h-14z\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 117.333,\n    y: 14,\n    width: 1.333,\n    height: 8,\n    rx: 0.667,\n    fill: \"#fff\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 114,\n    y: 18.666,\n    width: 1.333,\n    height: 8,\n    rx: 0.667,\n    transform: \"rotate(-90 114 18.666)\",\n    fill: \"#fff\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M298 103h14v14h-14z\"\n  })), _circle7 || (_circle7 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 301,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 301 110)\",\n    fill: \"#fff\"\n  })), _circle8 || (_circle8 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 309,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 309 110)\",\n    fill: \"#fff\"\n  })), _circle9 || (_circle9 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 305,\n    cy: 110,\n    r: 1,\n    transform: \"rotate(-90 305 110)\",\n    fill: \"#fff\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M285 103h14v14h-14z\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 288.5,\n    y: 106.5,\n    width: 7,\n    height: 7,\n    rx: 1.5,\n    stroke: \"#fff\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#fff\",\n    d: \"M288 109h8v2h-8z\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.35\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M40 45h128.769v91H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M40 136h128.769v1H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M40 45h128.769v14H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M40 45h31.154v14H40z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M72.192 45h31.154v14H72.192z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M71.154 45h1.038v14h-1.038zM40 45h1v92h-1zM168 45h1v92h-1zM103.346 45h1.038v14h-1.038z\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 75.308,\n    y: 50,\n    width: 12.461,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 90.885,\n    y: 50,\n    width: 4.154,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 43.115,\n    y: 50,\n    width: 5.192,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 49.346,\n    y: 50,\n    width: 16.615,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M40 45h128.769v1H40z\"\n  }))), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M29 54h128.769v91H29z\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M29 145h128.769v1H29z\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M29 54h128.769v14H29z\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#10192C\",\n    d: \"M29 54h31.154v14H29z\"\n  })), _path30 || (_path30 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M61.192 54h31.154v14H61.192z\"\n  })), _path31 || (_path31 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M60.154 54h1.038v14h-1.038zM29 54h1v92h-1zM157 54h1v92h-1zM92.346 54h1.038v14h-1.038z\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 64.308,\n    y: 59,\n    width: 12.461,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 79.885,\n    y: 59,\n    width: 4.154,\n    height: 4,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 32.115,\n    y: 59,\n    width: 5.192,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _rect21 || (_rect21 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 38.346,\n    y: 59,\n    width: 16.615,\n    height: 4,\n    rx: 2,\n    fill: \"#282828\"\n  })), _path32 || (_path32 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M29 54h128.769v1H29z\"\n  })), _path33 || (_path33 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M128.344 61.265a.295.295 0 0 0-.017-.495l-4.147-2.48a.295.295 0 0 0-.441.31l.912 4.744c.04.21.284.309.459.186l.662-.463a.296.296 0 0 0 .12-.298l-.29-1.508a.296.296 0 0 1 .442-.309l1.318.788c.1.06.226.055.321-.011l.661-.464Z\",\n    fill: \"#fff\"\n  })), _path34 || (_path34 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeDasharray: \"0.25 0.25\",\n    d: \"M127.5 62.5h4v2h-4z\"\n  })));\n};\nexport default SvgDockviewGrid4;","var _path, _path2, _rect, _rect2, _rect3, _path3, _path4, _path5, _path6, _path7, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _rect10, _path8, _path9, _path10, _rect11, _rect12, _rect13, _rect14, _rect15, _rect16, _rect17, _rect18, _rect19, _rect20, _rect21, _rect22, _rect23;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDockviewSplash2 = _ref => {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 312,\n    height: 200,\n    viewBox: \"0 0 312 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 5a5 5 0 0 1 5-5h302a5 5 0 0 1 5 5v6H0V5Z\",\n    fill: \"#DCDCDC\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#BABABA\",\n    d: \"M0 10h312v1H0z\"\n  })), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 4,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FD605E\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#FBBC3F\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 16,\n    y: 3,\n    width: 4,\n    height: 4,\n    rx: 2,\n    fill: \"#34C942\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#D9D9D9\",\n    d: \"M0 11h312v189H0z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000C18\",\n    d: \"M0 11h166v189H0zM167 11h145v189H167z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M166 11h1v189h-1zM167 56h145v1H167zM167 112h145v1H167z\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#1C1C2A\",\n    d: \"M0 11h166v10H0zM0 22h166v10H0zM0 94h166v10H0zM0 190h166v10H0z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2B2B4A\",\n    d: \"M0 21h166v1H0z\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 14,\n    width: 21,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 34,\n    y: 14,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 25,\n    width: 6,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 19,\n    y: 25,\n    width: 11,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 97,\n    width: 16,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 29,\n    y: 97,\n    width: 5,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 11,\n    y: 193,\n    width: 14,\n    height: 4,\n    rx: 2,\n    fill: \"#fff\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m5 29-3-3.392.538-.608L5 27.799l2.463-2.785.537.608L5 29ZM5 101l-3-3.392.538-.608L5 99.799l2.463-2.785.537.608L5 101ZM6 16l-3.392 3L2 18.462 4.799 16l-2.785-2.463.608-.537L6 16ZM6 195l-3.392 3-.608-.537L4.799 195l-2.785-2.462.608-.538L6 195Z\",\n    fill: \"#fff\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M212.674 111c.236 0 .394-.221.297-.416l-2.174-4.409c-.115-.233-.479-.233-.594 0l-2.174 4.409c-.097.195.061.416.297.416h.889a.327.327 0 0 0 .297-.175l.691-1.401c.115-.233.479-.233.594 0l.691 1.401a.327.327 0 0 0 .297.175h.889ZM208.326 114c-.236 0-.394.221-.297.416l2.174 4.409c.115.233.479.233.594 0l2.174-4.409c.097-.195-.061-.416-.297-.416h-.889a.327.327 0 0 0-.297.175l-.691 1.401c-.115.233-.479.233-.594 0l-.691-1.401a.327.327 0 0 0-.297-.175h-.889Z\",\n    fill: \"#fff\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    d: \"M210.5 116v-7\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 175,\n    y: 18,\n    width: 20,\n    height: 19,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 198,\n    y: 18,\n    width: 5,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 206,\n    y: 18,\n    width: 26,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 203,\n    y: 71,\n    width: 44,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 228,\n    y: 78,\n    width: 44,\n    height: 14,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 250,\n    y: 71,\n    width: 22,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 239,\n    y: 95,\n    width: 33,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 272,\n    y: 117,\n    width: 33,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect19 || (_rect19 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 259,\n    y: 117,\n    width: 7,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect20 || (_rect20 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 213,\n    y: 95,\n    width: 23,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect21 || (_rect21 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 203,\n    y: 95,\n    width: 8,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect22 || (_rect22 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 198,\n    y: 25,\n    width: 15,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })), _rect23 || (_rect23 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 215,\n    y: 25,\n    width: 18,\n    height: 5,\n    rx: 2,\n    fill: \"#777\"\n  })));\n};\nexport default SvgDockviewSplash2;"],"names":["BrowserOnly","_ref","children","fallback","useIsBrowser","_jsx","_Fragment","TransferObject","PanelTransfer","constructor","viewId","groupId","panelId","super","PaneTransfer","paneId","LocalSelectionTransfer","getInstance","INSTANCE","hasData","proto","this","clearData","undefined","data","getData","setData","getPanelData","panelTransfer","prototype","getPaneData","paneTransfer","Event","Disposable","any","_len","arguments","length","Array","_key","listener","disposables","map","child","dispose","forEach","d","Stacktrace","create","_a","Error","stack","value","print","console","warn","Listener","callback","stacktrace","Emitter","setLeakageMonitorEnabled","isEnabled","ENABLE_TRACKING","MEMORY_LEAK_WATCHER","clear","options","_listeners","_disposed","event","_event","replay","_last","push","index","indexOf","splice","add","fire","e","queueMicrotask","delete","addDisposableWindowListener","element","type","addEventListener","removeEventListener","addDisposableListener","events","Map","size","set","TickDelayedEvent","_onFired","onEvent","timer","clearTimeout","setTimeout","NONE","CompositeDisposable","isDisposed","_isDisposed","args","_disposables","addDisposables","_len2","_key2","arg","MutableDisposable","_disposable","disposable","watchElementResize","cb","observer","ResizeObserver","entires","requestAnimationFrame","firstEntry","observe","unobserve","disconnect","removeClasses","classes","classname","classList","contains","remove","addClasses","toggleClass","className","isToggled","hasClass","isAncestor","testChild","testAncestor","parentNode","getElementsByTagName","tag","slice","call","document","trackFocus","FocusTracker","_onDidFocus","onDidFocus","_onDidBlur","onDidBlur","hasFocus","activeElement","loosingFocus","onFocus","onBlur","window","_refreshStateHandler","HTMLElement","refreshState","QUASI_PREVENT_DEFAULT_KEY","quasiDefaultPrevented","getDomNodePagePosition","domNode","left","top","width","height","getBoundingClientRect","scrollX","scrollY","tail","arr","sequenceEquals","arr1","arr2","i","pushToStart","unshift","pushToEnd","array","findIndex","t","clamp","min","max","Math","sequentialNumberGenerator","next","toString","range","from","to","result","ViewItem","_size","cachedVisibleSize","_cachedVisibleSize","visible","minimumSize","view","viewMinimumSize","maximumSize","viewMaximumSize","priority","snap","enabled","container","style","pointerEvents","setVisible","toggle","Orientation","SashState","LayoutPriority","Sizing","Distribute","Split","Invisible","Splitview","contentSize","_contentSize","orthogonalSize","_orthogonalSize","viewItems","proportions","_proportions","orientation","_orientation","tmp","HORIZONTAL","reduce","r","item","Number","POSITIVE_INFINITY","startSnappingEnabled","_startSnappingEnabled","updateSashEnablement","endSnappingEnabled","_endSnappingEnabled","_this","sashes","_onDidSashEnd","onDidSashEnd","_onDidAddView","onDidAddView","_onDidRemoveView","onDidRemoveView","resize","delta","sizes","lowPriorityIndexes","highPriorityIndexes","overloadMinDelta","overloadMaxDelta","snapBefore","snapAfter","x","NEGATIVE_INFINITY","upIndexes","downIndexes","upItems","upSizes","downItems","downSizes","minDeltaUp","_","maxDeltaUp","maxDeltaDown","minDeltaDown","minDelta","maxDelta","snapped","snapView","limitDelta","actualDelta","deltaUp","viewDelta","deltaDown","createContainer","proportionalLayout","viewContainer","createViewContainer","sashContainer","createSashContainer","appendChild","styles","descriptor","views","viewDescriptor","sizing","addView","saveProportions","separatorBorder","removeProperty","setProperty","isViewVisible","setViewVisible","viewItem","distributeEmptySpace","layoutViews","getViewSize","resizeView","indexes","filter","Low","High","round","relayout","getViews","onDidChange","skipLayout","createElement","viewSize","newSize","removeChild","insertBefore","sash","onPointerStart","iframes","iframe","start","clientX","clientY","sashIndex","fn","firstIndex","s","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","snappedViewItem","halfSize","floor","onPointerMove","end","sashItem","distributeViewSizes","flexibleViewItems","flexibleSize","removeView","getViewCachedVisibleSize","moveView","layout","previousSize","total","proportion","lowPriorityIndex","emptyDelta","sum","offset","VERTICAL","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter","updateSash","MINIMUM","MAXIMUM","DISABLED","ENABLED","state","orientationClassname","Paneview","splitview","paneItems","skipAnimation","_onDidChange","getPanes","pane","onDidChangeExpansionState","setupAnimation","paneItem","addPane","removePane","skipDispose","animationTimer","LeafNode","minimumWidth","maximumWidth","minimumHeight","maximumHeight","minimumOrthogonalSize","maximumOrthogonalSize","BranchNode","c","Normal","priorities","some","p","childDescriptors","_childrenDisposable","_onDidVisibilityChange","onDidVisibilityChange","childDescriptor","node","setupChildrenEvents","isChildVisible","setChildVisible","wereAllChildrenHidden","areAllChildrenHidden","moveChild","_removeChild","_addChild","getChildSize","resizeChild","addChild","getChildCachedVisibleSize","findLeaf","candiateNode","last","flipNode","orthogonal","totalSize","childSize","getGridLocation","parentElement","test","el","firstElementChild","lastElementChild","nextElementSibling","indexInParent","getRelativeLocation","rootOrientation","location","direction","getLocationOrientation","directionOrientation","getDirectionOrientation","rest","_index","serializeBranchNode","box","isGridBranchNode","toJSON","Gridview","_root","root","maximizedView","_maximizedNode","hasMaximizedView","maximizeView","getNode","exitMaximizedView","hideAllViewsBut","parent","exclude","_onDidMaxmizedNodeChange","showViewsInReverseOrder","serialize","getView","deserialize","json","deserializer","_deserialize","_deserializeNode","serializedChild","fromJSON","oldRoot","insertOrthogonalSplitviewAtRoot","childReference","progmaticSelect","_getViews","nodeCachedVisibleSize","path","n","l","onDidMaxmizedNodeChange","parentLocation","pathToParent","grandParent","parentIndex","__","newSiblingSize","newSiblingCachedVisibleSize","newParent","newSibling","nodeToRemove","sibling","isSiblingVisible","siblingSizing","SplitviewApi","component","panels","onDidLayoutFromJSON","onDidLayoutChange","updateOptions","removePanel","panel","focus","getPanel","id","addPanel","movePanel","PaneviewApi","onDidDrop","emitter","Object","assign","api","GridviewApi","onDidAddPanel","onDidAddGroup","onDidRemovePanel","onDidRemoveGroup","onDidActivePanelChange","onDidActiveGroupChange","groups","force","DockviewApi","totalPanels","onWillDragGroup","onWillDragPanel","activePanel","activeGroup","getGroupPanel","addGroup","closeAllGroups","removeGroup","group","getGroup","addFloatingGroup","coord","moveToNext","moveToPrevious","maximizeGroup","hasMaximizedGroup","exitMaxmizedGroup","exitMaximizedGroup","onDidMaxmizedGroupChange","addPopoutGroup","DragAndDropObserver","callbacks","target","registerListeners","onDragEnter","onDragOver","preventDefault","onDragLeave","onDragEnd","onDrop","directionToPosition","positionToDirection","Droptarget","_state","_onDrop","_acceptedTargetZonesSet","Set","acceptedTargetZones","dnd","removeDropTarget","clientWidth","clientHeight","rect","currentTarget","y","quadrant","calculateQuadrant","isAlreadyUsed","canDisplayOverlay","markAsUsed","targetElement","overlayElement","append","toggleClasses","setState","stopPropagation","nativeEvent","setTargetZones","USED_EVENT_ID","isSmallX","isSmallY","isLeft","isRight","isTop","isBottom","rightClass","leftClass","topClass","bottomClass","_b","overlayModel","_d","_c","translate","transform","overlayType","isPercentage","activationSize","maybeNumber","_f","_e","threshold","xp","yp","has","calculateQuadrantAsPercentage","calculateQuadrantAsPixels","DockviewDropTargets","ContentContainer","_element","accessor","tabIndex","dropTarget","locked","shiftKey","Panel","show","display","hide","renderPanel","isActive","renderer","greadyRenderContainer","content","setReferenceContentContainer","focusTracker","openPanel","_width","_height","closePanel","defaultRenderer","DragHandler","dataDisposable","pointerEventsDisposable","_onDragStart","onDragStart","configure","isCancelled","defaultPrevented","dataTransfer","effectAllowed","items","TabDragHandler","Tab","_onChanged","onChanged","_onDropped","draggable","dragHandler","droptarget","model","setActive","setContent","part","GroupDragHandler","dragEvent","getComputedStyle","bgColor","getPropertyValue","color","ghostElement","backgroundColor","padding","fontSize","lineHeight","borderRadius","textContent","body","setDragImage","addGhostImage","VoidContainer","doSetGroupActive","handler","voidDropTarget","TabsContainer","tabs","hidden","_hidden","setRightActionsElement","rightActions","rightActionsContainer","setLeftActionsElement","leftActions","leftActionsContainer","setPrefixActionsElement","preActions","preActionsContainer","tab","selectedIndex","_onTabDragStart","onTabDragStart","_onGroupDragStart","onGroupDragStart","singleTabMode","tabContainer","voidContainer","disableFloatingGroups","rootTop","rootLeft","inDragMode","button","_isGroupActive","addTab","tabToRemove","setActivePanel","isActivePanel","find","isFloatingGroupsEnabled","isFloatingWithOnePanel","alreadyFocused","isContentFocused","skipFocus","DockviewGroupPanelModel","_activePanel","_locked","_panels","isEmpty","hasWatermark","watermark","header","tabsContainer","contentContainer","_location","groupPanel","_onDidRenderPositionChange","mostRecentlyUsed","_onMove","onMove","_onDidDrop","_onDidAddPanel","_onDidRemovePanel","_onDidActivePanelChange","hideHeader","handleDropEvent","initialize","doAddPanel","updateContainer","createRightHeaderActionsElement","_rightHeaderActions","init","containerApi","createLeftHeaderActionsElement","_leftHeaderActions","createPrefixHeaderActionsElement","_prefixHeaderActions","rerender","activeView","normalizedIndex","suppressRoll","containsPanel","includes","_params","update","skipSetPanelActive","skipSetGroupActive","updateParentGroup","doSetActivePanel","groupItemOrId","panelToRemove","_removePanel","closeAllPanels","arrPanelCpy","doClose","isPanelActive","updateActions","isGroupActive","doRemovePanel","nextPanel","skipSetActive","hasExistingPanel","updateMru","createWatermarkComponent","showDndOverlay","itemId","Resizable","disableResizing","_disableResizing","entry","contentRect","nextLayoutId","toTarget","BaseGrid","_id","_groups","values","gridview","_activeGroup","disableAutoResizing","_onDidLayoutChange","_onDidRemoveGroup","_onDidAddGroup","_onDidActiveGroupChange","_bufferOnDidLayoutChange","isVisible","isMaximizedGroup","doAddGroup","doRemoveGroup","get","skipActive","forceResize","PanelApiImpl","isFocused","_isFocused","_isActive","_isVisible","panelUpdatesDisposable","_onDidDimensionChange","onDidDimensionsChange","_onDidChangeFocus","onDidFocusChange","_onFocusEvent","onFocusEvent","_onVisibilityChange","onVisibilityChange","_onDidActiveChange","onDidActiveChange","_onActiveChange","onActiveChange","_onUpdateParameters","onUpdateParameters","parameters","params","updateParameters","SplitviewPanelApiImpl","_onDidConstraintsChangeInternal","onDidConstraintsChangeInternal","_onDidConstraintsChange","onDidConstraintsChange","_onDidSizeChange","onDidSizeChange","setConstraints","setSize","PaneviewPanelApiImpl","_pane","_onDidExpansionChange","onDidExpansionChange","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","setExpanded","isExpanded","BasePanelView","outline","overflow","getComponent","key","keys","PaneviewPanel","headerSize","_minimumBodySize","_maximumBodySize","minimumBodySize","maximumBodySize","headerVisible","_headerVisible","headerComponent","isHeaderVisible","_onDidChangeExpansionState","_isExpanded","expandedSize","ev","isPanelExpanded","renderOnce","expanded","bodyPart","getBodyComponent","headerPart","getHeaderComponent","title","minHeight","maxHeight","DraggablePaneviewPanel","disableDnd","initDragFeatures","accessorId","existingPanel","allPanels","fromIndex","toIndex","GridviewPanelApiImpl","GridviewPanel","_priority","_snap","_minimumWidth","_evaluatedMinimumWidth","updateConstraints","_minimumHeight","_evaluatedMinimumHeight","_maximumHeight","_evaluatedMaximumHeight","_maximumWidth","_evaluatedMaximumWidth","MAX_SAFE_INTEGER","maximum","minimum","NOT_INITIALIZED_MESSAGE","DockviewGroupPanelApiImpl","_group","onDidRenderPositionChange","moveTo","moveGroupOrPanel","maximize","isMaximized","exitMaximized","DockviewGroupPanel","_model","DockviewPanelApiImpl","isOldGroupActive","_onDidGroupChange","_onDidTitleChange","onDidTitleChange","onDidGroupChange","_onDidRendererChange","onDidRendererChange","setTitle","setRenderer","close","DockviewPanel","_title","_renderer","contentComponent","tabComponent","isPanelVisible","createSvgElementFromPath","svg","createElementNS","setAttributeNS","viewbox","createCloseButton","DefaultTab","_content","_actionContainer","_list","action","render","onGroupChange","onPanelVisibleChange","_isPanelVisible","createComponent","componentName","components","frameworkComponents","createFrameworkComponent","Component","FrameworkComponent","DockviewPanelModel","_tab","createContentComponent","createTabComponent","frameworkComponentFactory","tabComponents","frameworkTabComponents","defaultTabComponent","DefaultDockviewDeserialzier","panelData","viewData","Watermark","emptySpace","flexGrow","actionsContainer","closeAnchor","_api","_visible","isOneGroup","bringElementToFront","Overlay","minimumInViewportWidth","minimumInViewportHeight","_onDidChangeEnd","onDidChangeEnd","setupResize","setBounds","bounds","containerRect","overlayRect","xOffset","getMinimumWidth","yOffset","getMinimumHeight","setupDrag","dragTarget","move","track","resizeHandleElement","startPosition","originalY","originalHeight","originalX","originalWidth","moveTop","MAX_VALUE","MINIMUM_HEIGHT","moveBottom","moveLeft","MINIMUM_WIDTH","moveRight","DockviewFloatingGroupPanel","overlay","GreadyRenderContainer","allIds","referenceContainer","createFocusableElement","focusContainer","box2","PopoutWindow","_onDidClose","onDidClose","_window","dimensions","screenX","screenY","innerWidth","innerHeight","open","url","features","entries","join","externalWindow","grievingParent","cleanUp","externalDocument","div","replaceChildren","styleSheetList","styleSheets","styleSheet","href","link","rel","head","cssTexts","cssRules","rule","cssText","err","createTextNode","addStyles","DockviewPopoutGroupPanel","popoutUrl","DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE","DEFAULT_FLOATING_GROUP_POSITION","DockviewComponent","flatMap","_options","nextGroupId","_deserializer","_onWillDragPanel","_onWillDragGroup","_onDidLayoutFromJSON","_floatingGroups","_popoutGroups","gready","debug","updateWatermark","watermarkComponent","watermarkFrameworkComponent","Edge","orthogonalize","createGroup","removeEmptyGroup","skipRemoveGroup","theme","toClassList","list","cls","startsWith","getTheme","popoutWindow","overlayLeft","overlayTop","floatingGroupBounds","minimumWidthWithinViewport","minimumHeightWithinViewport","querySelector","floatingGroupPanel","createGroupAtLocation","hasOrientationChanged","hasFloatingGroupOptionsChanged","floating","includePanel","doSetGroupAndPanelActive","collection","floats","popoutGroups","grid","floatingGroups","isArray","createGroupFromSerializedState","createdPanels","serializedFloatingGroups","serializedFloatingGroup","serializedPopoutGroups","serializedPopoutGroup","floatingGroup","hasActiveGroup","hasActivePanel","referenceGroup","referencePanel","findGroup","isPanelOptionsWithGroup","createPanel","o","relativeLocation","watermarkContainer","isGroupOptionsWithGroup","selectedGroup","destinationGroup","sourceGroupId","sourceItemId","destinationTarget","destinationIndex","sourceGroup","referenceLocation","targetLocation","targetParentLocation","sourceLocation","sourceParentLocation","targetGroup","updatedReferenceLocation","groupItem","dropLocation","moveGroup","selectedFloatingGroup","selectedPopoutGroup","GridviewComponent","_onDidLayoutfromJSON","serializedGridview","queue","registerPanel","f","removedPanel","reference","SplitviewComponent","_splitview","_splitviewChangeDisposable","v","frameworkWrapper","doAddView","serializedSplitview","DefaultHeader","_expandedIcon","_collapsedIcon","apiRef","_expander","updateIcon","PaneFramework","PaneviewComponent","paneview","_paneview","_viewDisposables","headerComponents","headerframeworkComponents","serializedPaneview","SplitviewPanel","_minimumSize","_evaluatedMinimumSize","_maximumSize","_evaluatedMaximumSize","ReactComponentBridge","props","ref","triggerRender","React","_props","componentProps","current","Date","now","displayName","uniquePortalKeyGenerator","ReactPartContext","ReactPart","portalStore","context","_initialProps","disposed","createPortal","componentInstance","bridgeComponent","Provider","portal","ReactDOM","addPortal","usePortalsLifecycle","portals","setPortals","existingPortals","ReactPanelContentPart","reactPortalStore","DockviewEmitter","ReactPanelHeaderPart","ReactWatermarkPart","ReactHeaderActionsRendererPart","_part","mutableDisposable","DockviewMutableDisposable","DockviewCompositeDisposable","updatePanels","updateActivePanel","updateGroupActive","createGroupControlElement","store","DEFAULT_REACT_TAB","DockviewReact","domRef","dockviewRef","factory","componentId","dockview","hideBorders","leftHeaderActionsComponent","rightHeaderActionsComponent","prefixHeaderActionsComponent","onReady","CloseButton","viewBox","focusable","DockviewDefaultTab","_containerApi","hideClose","closeActionOverride","__rest","onClose","onMouseDown","onClick","ReactPanelView","reactComponent","SplitviewReact","splitviewRef","ReactGridPanelView","GridviewReact","gridviewRef","PanePanelSection","PaneviewReact","paneviewRef","_componentId","CodeSandboxButton","_jsxs","hideThemePicker","ThemePicker","alignItems","fontWeight","paddingRight","Spinner","Container","injectVanillaJS","sandboxId","ReactIcon","marginRight","src","useBaseUrl","JavascriptIcon","themes","setTheme","localStorage","getItem","setItem","dispatchEvent","StorageEvent","onChange","MultiFrameworkContainer2","framework","setFramework","animation","setAnimation","defaultValue","useLocalStorageItem","typescript","background","zIndex","justifyContent","react","margin","cursor","border","MultiFrameworkContainer","FeatureList","Svg","require","description","Feature","flexWrap","featureSvg","role","maxWidth","HomepageFeatures","idx","BrowserHeader","borderBottom","borderTopLeftRadius","borderTopRightRadius","default","onContextMenu","alert","Icon","icon","groupControlsComponents","panel_1","RightControls","setIcon","counter","LeftControls","PrefixHeaderControls","log","paneComponents","panes","Introduction","paddingLeft","DockviewDemo","DockviewDemo2","HomepageHeader2","siteConfig","useDocusaurusContext","clsx","heroBanner","tagline","buttons","Link","Home","Layout","_rect","_path","_path2","_path3","_path4","_path5","_path6","_path7","_path8","_path9","_path10","_path11","_path12","_path13","_path14","_path15","_path16","_path17","_rect2","_rect3","_rect4","_rect5","_rect6","_rect7","_rect8","_rect9","_rect10","_rect11","_rect12","_rect13","_rect14","_rect15","_rect16","_path18","_path19","_path20","_path21","_path22","_path23","_rect17","_rect18","_path24","_path25","_path26","_path27","_rect19","_rect20","_path28","_path29","_extends","bind","source","hasOwnProperty","apply","titleId","fill","xmlns","rx","fillOpacity","stroke","fillRule","clipRule","strokeDasharray","_circle","_circle2","_circle3","_circle4","_circle5","_circle6","_circle7","_circle8","_circle9","_g","_path30","_path31","_rect21","_path32","_path33","_path34","cx","cy","opacity","_rect22","_rect23"],"sourceRoot":""}